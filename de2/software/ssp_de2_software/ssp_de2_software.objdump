
ssp_de2_software.elf:     file format elf32-littlenios2
ssp_de2_software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001ccd4 memsz 0x0001ccd4 flags r-x
    LOAD off    0x0001dcf4 vaddr 0x0101ccf4 paddr 0x0101e930 align 2**12
         filesz 0x00001c3c memsz 0x00001c3c flags rw-
    LOAD off    0x0002056c vaddr 0x0102056c paddr 0x0102056c align 2**12
         filesz 0x00000000 memsz 0x000e19cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bfb8  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b84  0101c170  0101c170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  0101ccf4  0101e930  0001dcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000e1c0a  0102056c  0102056c  0002056c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  0001f930  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011d8  00000000  00000000  0001f980  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002c2b  00000000  00000000  00020b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00039972  00000000  00000000  00023783  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b83e  00000000  00000000  0005d0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001fdfb  00000000  00000000  00068933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000302c  00000000  00000000  00088730  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000329a  00000000  00000000  0008b75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000134dc  00000000  00000000  0008e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000a1ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000a1f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a800f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000a8012  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a8021  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a8022  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000a8023  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000a802c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000a8035  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a803e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  000a8049  2**0
                  CONTENTS, READONLY
 26 .jdi          0000546a  00000000  00000000  000a8074  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00098e29  00000000  00000000  000ad4de  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0101c170 l    d  .rodata	00000000 .rodata
0101ccf4 l    d  .rwdata	00000000 .rwdata
0102056c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
01020600 l     O .bss	00000018 alarm.2948
00000000 l    df *ABS*	00000000 lib2-divmod.c
010024f8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01003128 l     F .text	00000058 __sprint_r
0101c666 l     O .rodata	00000010 blanks.3452
0101c656 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0101c67e l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0101c7a1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0100692c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01008354 l     F .text	00000058 std
01008460 l     F .text	00000008 __fp_lock
01008468 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0101d0fc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0101e904 l     O .rwdata	00000004 charset
0101c948 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0101ca90 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0100b3a0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0100b7d0 l     F .text	00000048 match
0101d51c l     O .rwdata	00000014 fpi.1950
0101caac l     O .rodata	00000028 tinytens
0101d508 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0100e12c l     F .text	00000024 htinit
0100e1b8 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0100ea64 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100fe54 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
01011b60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01011bc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01011cc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01011de8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01011ec8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01012028 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
010124f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0101e920 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0101294c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101d6d8 l     O .rwdata	00001060 jtag_uart
0101e738 l     O .rwdata	00000030 audio_config
0101e768 l     O .rwdata	00000030 audio
0101e798 l     O .rwdata	0000002c character_lcd_0
0101e7c4 l     O .rwdata	0000002c buttons
0101e7f0 l     O .rwdata	0000002c rs232_0
0101e81c l     O .rwdata	00000048 char_drawer
0101e864 l     O .rwdata	00000054 pixel_buffer_dma
0101e8b8 l     O .rwdata	0000002c sdcard
01012d64 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01012f9c l     F .text	0000022c altera_avalon_jtag_uart_irq
010131c8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01013844 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101b278 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101b464 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101b774 l     F .text	000000f8 alt_file_locked
0101b9f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101beec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0101c0a0 l     F .text	00000040 alt_sim_halt
01014408 g     F .text	00000038 alt_up_av_config_reset
010205d0 g     O .bss	00000004 aux_status_register
01002e5c g     F .text	0000001c putchar
01009d7c g     F .text	00000094 _mprec_log10
010148ac g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
01009e68 g     F .text	00000088 __any_on
0100ecf8 g     F .text	00000070 _isatty_r
0101ca68 g     O .rodata	00000028 __mprec_tinytens
01014478 g     F .text	00000030 alt_up_av_config_disable_interrupt
01012088 g     F .text	0000006c alt_main
0100085c g     F .text	00000050 initialize_audio
01016298 g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
01002e80 g     F .text	000000a0 _puts_r
01101ca8 g     O .bss	00000100 alt_irq
01001c94 g     F .text	000000bc still_betting
0100ed68 g     F .text	00000078 _lseek_r
0101e930 g       *ABS*	00000000 __flash_rwdata_start
01014ab8 g     F .text	00000034 alt_up_character_lcd_send_cmd
01020578 g     O .bss	00000004 dealer
01010974 g     F .text	00000088 __eqdf2
01016f58 g     F .text	000001b0 Check_for_Master_Boot_Record
01013d20 g     F .text	00000070 alt_up_audio_read_fifo_avail
01014548 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
01101f38 g       *ABS*	00000000 __alt_heap_start
0101ae20 g     F .text	000001d4 alt_up_sd_card_fclose
01002de4 g     F .text	00000044 printf
01013d90 g     F .text	00000070 alt_up_audio_record_r
0100b5d0 g     F .text	00000068 __sseek
010083bc g     F .text	000000a4 __sinit
01015498 g     F .text	00000114 alt_up_char_buffer_string
0100dc98 g     F .text	00000130 __swbuf_r
01009340 g     F .text	00000084 _setlocale_r
010084bc g     F .text	0000009c __sfmoreglue
0100dc7c g     F .text	0000001c ungetc
01012114 g     F .text	00000020 __malloc_unlock
010151a0 g     F .text	00000090 alt_up_rs232_read_fd
0100b818 g     F .text	000015cc _strtod_r
010205f4 g     O .bss	00000004 current_sector_modified
010153c8 g     F .text	000000d0 alt_up_char_buffer_draw
01013c98 g     F .text	00000088 alt_up_audio_reset_audio_core
0101b0f0 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
010205c4 g     O .bss	00000004 altera_avalon_timer_ts_freq
0102057c g     O .bss	00000002 fp
010097f8 g     F .text	000000e0 memmove
010084ac g     F .text	00000010 _cleanup
01009ef0 g     F .text	000000bc _Balloc
010199dc g     F .text	000000c8 alt_up_sd_card_is_Present
01016c70 g     F .text	00000050 Save_Modified_Sector
01015648 g     F .text	000001ac alt_up_pixel_buffer_dma_draw
01010a84 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01014a3c g     F .text	0000007c get_DDRAM_addr
01015608 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000001c __reset
010205ec g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100e0b8 g     F .text	00000074 _fstat_r
0102059c g     O .bss	00000004 errno
010066f0 g     F .text	00000024 __svfscanf
01013c5c g     F .text	0000003c alt_up_audio_write_interrupt_pending
0101e8e4 g     O .rwdata	00000004 pixel_buffer_addr1
0101126c g     F .text	0000002c __make_fp
01020580 g     O .bss	00000004 char_buffer
010205b0 g     O .bss	00000004 alt_argv
010268e4 g       *ABS*	00000000 _gp
01019f9c g     F .text	000003a8 alt_up_sd_card_fopen
01019b18 g     F .text	000000d4 alt_up_sd_card_find_first
010205e0 g     O .bss	00000004 command_argument_register
010157f4 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0101d558 g     O .rwdata	00000180 alt_fd_list
01002e78 g     F .text	00000008 _putchar_r
01019204 g     F .text	0000012c find_first_empty_record_in_root_directory
0101b3a0 g     F .text	00000094 alt_find_dev
01009758 g     F .text	000000a0 memcpy
0100eab0 g     F .text	00000248 __hexnan
01014c50 g     F .text	0000004c alt_up_character_lcd_write_fd
010155ac g     F .text	0000005c alt_up_char_buffer_clear
010084a0 g     F .text	0000000c _cleanup_r
01010ca4 g     F .text	000000f8 __floatsidf
0101b53c g     F .text	00000078 alt_io_redirect
01010b94 g     F .text	00000088 __ltdf2
0101c170 g       *ABS*	00000000 __DTOR_END__
0101512c g     F .text	00000074 alt_up_rs232_read_data
01002f20 g     F .text	00000014 puts
010095f4 g     F .text	00000040 mbrtowc
01018e14 g     F .text	000001a4 find_first_empty_cluster
01006714 g     F .text	00000068 _vfscanf_r
01009ccc g     F .text	000000b0 __ratio
01019918 g     F .text	000000c4 alt_up_sd_card_open_dev
010141f4 g     F .text	00000060 alt_up_audio_read_fifo_head
010158a4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
010133e0 g     F .text	00000224 altera_avalon_jtag_uart_read
01002690 g     F .text	00000014 malloc
01002e28 g     F .text	00000034 _printf_r
01002634 g     F .text	00000008 __udivsi3
01011d24 g     F .text	000000c4 isatty
010092f0 g     F .text	0000002c iswspace
0101c978 g     O .rodata	000000c8 __mprec_tens
01015f40 g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
0100931c g     F .text	00000008 __locale_charset
0100ef7c g     F .text	000000a4 __fixunsdfsi
0101bc68 g     F .text	00000090 alt_icache_flush
01020590 g     O .bss	00000004 __malloc_top_pad
01001394 g     F .text	000000a8 get_card_from_deck
0101437c g     F .text	0000008c alt_up_av_config_read_data
0100d6f0 g     F .text	00000024 strtoul
0101e900 g     O .rwdata	00000004 __mb_cur_max
01009324 g     F .text	0000000c _localeconv_r
0100d714 g     F .text	000002f0 _strtoull_r
0100a654 g     F .text	0000003c __i2b
01008cd4 g     F .text	0000049c __sfvwrite_r
010180f0 g     F .text	000000c0 get_dir_divider_location
01002fc8 g     F .text	00000070 _sbrk_r
01016734 g     F .text	000000d8 helper_plot_pixel
01017d90 g     F .text	000000d0 filename_to_upper_case
0101a344 g     F .text	00000090 alt_up_sd_card_set_attributes
01017108 g     F .text	00000284 Read_File_Record_At_Offset
01000f88 g     F .text	0000018c messaging
0100ede0 g     F .text	00000078 _read_r
01020584 g     O .bss	00000004 sdcard
0101d4fc g     O .rwdata	0000000c __lc_ctype
0101e918 g     O .rwdata	00000004 alt_max_fd
01015094 g     F .text	00000050 alt_up_rs232_check_parity
01014254 g     F .text	00000060 alt_up_audio_write_fifo_head
010115ac g     F .text	00000138 __unpack_d
010189b0 g     F .text	00000464 find_file_in_directory
0100df94 g     F .text	00000110 _fclose_r
01008320 g     F .text	00000034 fflush
01020594 g     O .bss	00000004 __malloc_max_sbrked_mem
0101b5b4 g     F .text	000001c0 alt_irq_register
01019aa4 g     F .text	00000074 alt_up_sd_card_is_FAT16
010102e4 g     F .text	00000074 __adddf3
0100fcec g     F .text	00000078 __nesf2
01009bac g     F .text	00000120 __b2d
010158d8 g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
0100f68c g     F .text	00000660 __umoddi3
01011f34 g     F .text	000000f4 lseek
0101e8fc g     O .rwdata	00000004 _global_impure_ptr
0101849c g     F .text	00000514 get_home_directory_cluster_for_file
0100abe8 g     F .text	000005f4 _realloc_r
01101f38 g       *ABS*	00000000 __bss_end
010016bc g     F .text	00000090 turn
01015a44 g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
0101271c g     F .text	0000010c alt_tick
01101640 g     O .bss	00000100 __hexdig
0100f020 g     F .text	0000066c __udivdi3
0101ca40 g     O .rodata	00000028 __mprec_bigtens
0100a8dc g     F .text	00000120 __s2b
01000598 g     F .text	00000044 sdcard_fopen
01010ee8 g     F .text	00000194 __floatunsidf
01009acc g     F .text	00000060 __mcmp
010205f8 g     O .bss	00000004 current_sector_index
01013aa8 g     F .text	00000040 alt_up_audio_open_dev
0101e8f4 g     O .rwdata	00000004 __ctype_ptr
01008488 g     F .text	00000018 __fp_lock_all
01013ee4 g     F .text	00000070 alt_up_audio_play_r
01012684 g     F .text	00000098 alt_alarm_stop
0100d174 g     F .text	00000024 strtol
01016e74 g     F .text	000000e4 mark_cluster
010205fc g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
0101d530 g     O .rwdata	00000028 alt_dev_null
01019330 g     F .text	000001b8 convert_filename_to_name_extension
010110fc g     F .text	000000c8 __unpack_f
01014f38 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0101b180 g     F .text	00000044 alt_dcache_flush_all
01009998 g     F .text	00000070 __hi0bits
010205cc g     O .bss	00000004 is_sd_card_formated_as_FAT16
01016670 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01001114 g     F .text	00000280 initialize_dealer
01010d9c g     F .text	000000d8 __fixdfsi
01018fb8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0100cf08 g     F .text	0000001c strtod
0101e930 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0101e910 g     O .rwdata	00000008 alt_dev_list
01012828 g     F .text	00000124 write
0100ab00 g     F .text	000000e8 _putc_r
010205f0 g     O .bss	00000004 device_pointer
01013a80 g     F .text	00000028 alt_timestamp_freq
0101680c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0100fd64 g     F .text	00000078 __gtsf2
0101ccf4 g       *ABS*	00000000 __ram_rodata_end
01011bec g     F .text	000000d8 fstat
01015230 g     F .text	00000094 alt_up_rs232_write_fd
01020574 g     O .bss	00000004 dealer_chip
01010c1c g     F .text	00000088 __ledf2
0100143c g     F .text	00000138 deal_hands
0102056c g     O .bss	00000004 globalInd
0100a7bc g     F .text	00000120 __pow5mult
010205a0 g     O .bss	00000004 __nlocale_changed
0100263c g     F .text	00000008 __umodsi3
01003038 g     F .text	00000034 _scanf_r
01101f38 g       *ABS*	00000000 end
010117ac g     F .text	00000160 __pack_f
01015304 g     F .text	00000084 alt_up_char_buffer_init
01012ee4 g     F .text	000000b8 altera_avalon_jtag_uart_init
0101c16c g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010138b8 g     F .text	00000088 alt_avalon_timer_sc_init
0101107c g     F .text	00000080 __clzsi2
01013604 g     F .text	00000240 altera_avalon_jtag_uart_write
010083ac g     F .text	00000004 __sfp_lock_acquire
01009674 g     F .text	000000e4 memchr
01014b60 g     F .text	00000078 alt_up_character_lcd_write
01003180 g     F .text	00001ec4 ___vfprintf_internal_r
0100b568 g     F .text	00000060 _sprintf_r
010089c0 g     F .text	00000314 _free_r
01012134 g     F .text	00000258 alt_printf
0101bef0 g     F .text	000001b0 __call_exitprocs
010017e0 g     F .text	000004b4 get_bet_for_player
010205a4 g     O .bss	00000004 __mlocale_changed
0101e8f0 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
010205b8 g     O .bss	00000004 _alt_tick_rate
0100d198 g     F .text	00000318 _strtoll_r
01002f50 g     F .text	00000078 rand
010140c8 g     F .text	0000012c alt_up_audio_write_fifo
0100a2b4 g     F .text	0000014c __lshift
01014318 g     F .text	00000064 alt_up_av_config_write_data
010205bc g     O .bss	00000004 _alt_nticks
010123cc g     F .text	00000124 read
010129e0 g     F .text	00000384 alt_sys_init
01014dc4 g     F .text	000000b0 alt_up_character_lcd_shift_display
01013fc4 g     F .text	00000104 alt_up_audio_read_fifo
0101bdb8 g     F .text	00000134 __register_exitproc
010149d8 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
01013bd0 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0101e8e8 g     O .rwdata	00000004 pixel_buffer_addr2
01015054 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0100a400 g     F .text	00000254 __multiply
01014e74 g     F .text	00000090 alt_up_character_lcd_erase_pos
01013278 g     F .text	00000074 altera_avalon_jtag_uart_close
01002644 g     F .text	00000038 __mulsi3
0101ccf4 g       *ABS*	00000000 __ram_rwdata_start
0101c170 g       *ABS*	00000000 __ram_rodata_start
01020618 g     O .bss	00000028 __malloc_current_mallinfo
01009fac g     F .text	0000017c __d2b
01000730 g     F .text	00000088 sdcard_audio_read_little_end
010205c8 g     O .bss	00000004 initialized
01012d9c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100d4b0 g     F .text	00000240 _strtoul_r
01001d50 g     F .text	000000c4 player_still_playing
0101bb98 g     F .text	000000d0 alt_get_fd
01000c04 g     F .text	00000350 load_bitmap
01101740 g     O .bss	00000014 search_data
010116e4 g     F .text	000000c8 __fpcmp_parts_d
0100df24 g     F .text	00000070 _close_r
01013b84 g     F .text	0000004c alt_up_audio_enable_write_interrupt
0101bd44 g     F .text	00000074 memcmp
01012e4c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01101f38 g       *ABS*	00000000 __alt_stack_base
01012e94 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010067f0 g     F .text	0000013c __swsetup_r
01000f54 g     F .text	00000034 init
0101071c g     F .text	00000258 __divdf3
01013b34 g     F .text	00000050 alt_up_audio_disable_read_interrupt
01008558 g     F .text	000000f0 __sfp
01101754 g     O .bss	00000054 boot_sector_data
01009e10 g     F .text	00000058 __copybits
0101ccf4 g     O .rwdata	00000408 __malloc_av_
010083b8 g     F .text	00000004 __sinit_lock_release
01010358 g     F .text	000003c4 __muldf3
0100b6b4 g     F .text	00000060 __sread
01008854 g     F .text	00000040 fread
01014fc0 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0101ba78 g     F .text	00000120 alt_find_file
0101b1c4 g     F .text	000000b4 alt_dev_llist_insert
010120f4 g     F .text	00000020 __malloc_lock
010125c8 g     F .text	000000bc sbrk
01008124 g     F .text	000001fc _fflush_r
0100de5c g     F .text	000000c8 _calloc_r
0102056c g       *ABS*	00000000 __bss_start
01020588 g     O .bss	00000004 data
010098d8 g     F .text	00000098 memset
01001e14 g     F .text	000006e4 main
01013e70 g     F .text	00000074 alt_up_audio_write_fifo_space
010205b4 g     O .bss	00000004 alt_envp
01020598 g     O .bss	00000004 __malloc_max_total_mem
0101584c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
01015388 g     F .text	00000040 alt_up_char_buffer_open_dev
01012df4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100ddc8 g     F .text	0000001c __swbuf
01002f34 g     F .text	0000001c srand
010007b8 g     F .text	000000a4 handle_timer_interrupts
0100fddc g     F .text	00000078 __ltsf2
0101a3d4 g     F .text	0000008c alt_up_sd_card_get_attributes
01008648 g     F .text	0000020c _fread_r
01016ba8 g     F .text	000000c8 Write_Sector_Data
0101a7fc g     F .text	00000624 alt_up_sd_card_write
01014d14 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100b5c8 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100e0a4 g     F .text	00000014 fclose
0100cf24 g     F .text	00000250 _strtol_r
01010e74 g     F .text	00000074 __truncdfsf2
01013940 g     F .text	000000a4 alt_timestamp_start
01000204 g     F .text	00000094 initialize_vga
01101da8 g     O .bss	00000190 _atexit0
01006b70 g     F .text	000015b4 _dtoa_r
010026a4 g     F .text	00000740 _malloc_r
0101e91c g     O .rwdata	00000004 alt_errno
0100da04 g     F .text	000000dc __submore
01000610 g     F .text	00000048 sdcard_write
01009238 g     F .text	000000b8 _fwalk
01009634 g     F .text	00000040 _mbtowc_r
0100a9fc g     F .text	00000104 putc
01002574 g     F .text	00000060 __divsi3
0101caf0 g     O .rodata	00000014 __thenan_df
01014b20 g     F .text	00000040 alt_up_character_lcd_open_dev
01008894 g     F .text	0000012c _malloc_trim_r
0101c170 g       *ABS*	00000000 __CTOR_END__
010205d4 g     O .bss	00000004 status_register
01014aec g     F .text	00000034 alt_up_character_lcd_init
0100b714 g     F .text	000000bc strcmp
010205dc g     O .bss	00000004 command_register
0101c170 g       *ABS*	00000000 __flash_rodata_start
0101c170 g       *ABS*	00000000 __DTOR_LIST__
010152c4 g     F .text	00000040 alt_up_rs232_open_dev
010109fc g     F .text	00000088 __nedf2
010142b4 g     F .text	00000064 alt_up_av_config_open_dev
010129ac g     F .text	00000034 alt_irq_init
01000b58 g     F .text	000000ac sdcard_read_int
01012550 g     F .text	00000078 alt_release_fd
01016dbc g     F .text	000000b8 get_cluster_flag
0100b4f4 g     F .text	00000074 sprintf
01014f04 g     F .text	00000034 alt_up_character_lcd_cursor_off
0101cb04 g     O .rodata	00000100 __clz_tab
0101738c g     F .text	000002b8 Write_File_Record_At_Offset
010205a8 g     O .bss	00000004 _PathLocale
0102058c g     O .bss	00000004 pixel_buffer
0100cde4 g     F .text	00000124 strtof
0101bcf8 g     F .text	00000014 atexit
01020640 g     O .bss	0004b000 old_pixel_colors
0100dde4 g     F .text	00000078 _write_r
01014510 g     F .text	00000038 alt_up_av_config_read_ready
010093c4 g     F .text	0000001c setlocale
0100306c g     F .text	00000048 scanf
01017644 g     F .text	00000648 Check_for_DOS_FAT
010194e8 g     F .text	000002dc create_file
0100b4ec g     F .text	00000008 nanf
0101e8f8 g     O .rwdata	00000004 _impure_ptr
010205d8 g     O .bss	00000004 CSD_register_w0
010205ac g     O .bss	00000004 alt_argc
01009574 g     F .text	00000080 _mbrtowc_r
010205c0 g     O .bss	00000004 altera_avalon_timer_ts_base
0101b33c g     F .text	00000064 _do_dtors
0100b1dc g     F .text	000001c4 __srefill_r
010005dc g     F .text	00000034 sdcard_fclose
01000020 g       .exceptions	00000000 alt_irq_entry
01009b2c g     F .text	00000080 __ulp
0100b3bc g     F .text	00000040 __isinfd
01008470 g     F .text	00000018 __fp_unlock_all
0101e908 g     O .rwdata	00000008 alt_fs_list
0106b640 g     O .bss	0004b000 pixel_colors
01017e60 g     F .text	00000290 check_file_name_for_FAT16_compliance
010205e4 g     O .bss	00000004 buffer_memory
01014f6c g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01013e00 g     F .text	00000070 alt_up_audio_record_l
010150e4 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01009330 g     F .text	00000010 localeconv
010139e4 g     F .text	0000009c alt_timestamp
01014440 g     F .text	00000038 alt_up_av_config_enable_interrupt
010006f4 g     F .text	0000003c sdcard_read
0100e150 g     F .text	00000068 __hexdig_init
010205e8 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
010144a8 g     F .text	00000068 alt_up_av_config_read_acknowledge
01014848 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0101e930 g       *ABS*	00000000 _edata
01101f38 g       *ABS*	00000000 _end
011017a8 g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100677c g     F .text	00000074 vfscanf
010197c4 g     F .text	00000154 copy_file_record_name_to_string
010132ec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01000658 g     F .text	0000009c sdcard_print
01017c8c g     F .text	00000104 Look_for_FAT16
01013f54 g     F .text	00000070 alt_up_audio_play_l
0100b638 g     F .text	0000007c __swrite
0101e8ec g     O .rwdata	00000004 __malloc_trim_threshold
0101ba58 g     F .text	00000020 altera_nios2_qsys_irq_init
0101bd0c g     F .text	00000038 exit
01019bec g     F .text	000003b0 alt_up_sd_card_find_next
01009170 g     F .text	000000c8 _fwalk_reent
0100a128 g     F .text	0000018c __mdiff
01000464 g     F .text	00000098 draw_pixel_fast
01014974 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
01000298 g     F .text	000001cc draw_to_screen
010025d4 g     F .text	00000060 __modsi3
01016cc0 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010083b0 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01014bd8 g     F .text	00000078 alt_up_character_lcd_string
0100b42c g     F .text	000000c0 __sccl
0101c6a0 g     O .rodata	00000101 _ctype_
010111c4 g     F .text	000000a8 __fpcmp_parts_f
01001574 g     F .text	00000148 flop
0101c0e0 g     F .text	00000020 _exit
0100b3fc g     F .text	00000030 __isnand
0101190c g     F .text	00000154 alt_alarm_start
0100ee58 g     F .text	00000124 __muldi3
0101aff4 g     F .text	000000fc Read_Sector_Data_CRC
0101a460 g     F .text	0000039c alt_up_sd_card_read
010093e0 g     F .text	00000194 __smakebuf_r
010030b4 g     F .text	00000074 strlen
0101b86c g     F .text	0000018c open
010008ac g     F .text	00000258 start_audio
01010b0c g     F .text	00000088 __gedf2
0101238c g     F .text	00000040 alt_putchar
0100e268 g     F .text	000007fc __gethex
01020570 g     O .bss	00000004 globalMaxInd
010145f4 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
0101b434 g     F .text	00000030 alt_icache_flush_all
01014c9c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101e92c g     O .rwdata	00000004 alt_priority_mask
010b6640 g     O .bss	0004b000 initial_pixel_colors
01005044 g     F .text	00000024 __vfprintf_internal
01014910 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
0100174c g     F .text	00000094 river
01010264 g     F .text	00000080 __subdf3
01000b04 g     F .text	00000054 skip
010004fc g     F .text	0000009c initialize_sdcard
01009a08 g     F .text	000000c4 __lo0bits
01005068 g     F .text	00001688 __svfscanf_r
0101e924 g     O .rwdata	00000008 alt_alarm_list
0100dae0 g     F .text	0000019c _ungetc_r
0101b2d8 g     F .text	00000064 _do_ctors
01015018 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01011a60 g     F .text	00000100 close
01011e48 g     F .text	00000080 alt_load
01013ae8 g     F .text	0000004c alt_up_audio_enable_read_interrupt
010146ec g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
01011298 g     F .text	00000314 __pack_d
010181b0 g     F .text	000002ec match_file_record_to_name_ext
0100267c g     F .text	00000014 free
010083b4 g     F .text	00000004 __sinit_lock_acquire
0100a690 g     F .text	0000012c __multadd
01009970 g     F .text	00000028 _Bfree
010147e4 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
01013c20 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04434 	movhi	r3,272
 1000134:	18c72a04 	addi	r3,r3,7336
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04434 	movhi	r3,272
 100014c:	18c72a04 	addi	r3,r3,7336
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001d4:	d69a3914 	ori	gp,gp,26852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001dc:	10815b14 	ori	r2,r2,1388

    movhi r3, %hi(__bss_end)
 10001e0:	00c04434 	movhi	r3,272
    ori r3, r3, %lo(__bss_end)
 10001e4:	18c7ce14 	ori	r3,r3,7992

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	1011e480 	call	1011e48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10120880 	call	1012088 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <initialize_vga>:
alt_up_char_buffer_dev *char_buffer;

unsigned int pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
unsigned int pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);

void initialize_vga() {
 1000204:	defffe04 	addi	sp,sp,-8
 1000208:	dfc00115 	stw	ra,4(sp)
 100020c:	df000015 	stw	fp,0(sp)
 1000210:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
 1000214:	010040b4 	movhi	r4,258
 1000218:	21305c04 	addi	r4,r4,-16016
 100021c:	10156080 	call	1015608 <alt_up_pixel_buffer_dma_open_dev>
 1000220:	d0a72a15 	stw	r2,-25432(gp)
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr1);
 1000224:	d1272a17 	ldw	r4,-25432(gp)
 1000228:	d1600017 	ldw	r5,-32768(gp)
 100022c:	10157f40 	call	10157f4 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000230:	d1272a17 	ldw	r4,-25432(gp)
 1000234:	101584c0 	call	101584c <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 1000238:	d1272a17 	ldw	r4,-25432(gp)
 100023c:	10158a40 	call	10158a4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000240:	1004c03a 	cmpne	r2,r2,zero
 1000244:	103ffc1e 	bne	r2,zero,1000238 <initialize_vga+0x34>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,
 1000248:	d1272a17 	ldw	r4,-25432(gp)
 100024c:	d1600117 	ldw	r5,-32764(gp)
 1000250:	10157f40 	call	10157f4 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	pixel_buffer_addr2);
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1000254:	d1272a17 	ldw	r4,-25432(gp)
 1000258:	000b883a 	mov	r5,zero
 100025c:	10158d80 	call	10158d8 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
 1000260:	d1272a17 	ldw	r4,-25432(gp)
 1000264:	01400044 	movi	r5,1
 1000268:	10158d80 	call	10158d8 <alt_up_pixel_buffer_dma_clear_screen>

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
 100026c:	010040b4 	movhi	r4,258
 1000270:	21306204 	addi	r4,r4,-15992
 1000274:	10153880 	call	1015388 <alt_up_char_buffer_open_dev>
 1000278:	d0a72715 	stw	r2,-25444(gp)
	alt_up_char_buffer_init(char_buffer);
 100027c:	d1272717 	ldw	r4,-25444(gp)
 1000280:	10153040 	call	1015304 <alt_up_char_buffer_init>
}
 1000284:	e037883a 	mov	sp,fp
 1000288:	dfc00117 	ldw	ra,4(sp)
 100028c:	df000017 	ldw	fp,0(sp)
 1000290:	dec00204 	addi	sp,sp,8
 1000294:	f800283a 	ret

01000298 <draw_to_screen>:

void draw_to_screen() {
 1000298:	defff804 	addi	sp,sp,-32
 100029c:	dfc00715 	stw	ra,28(sp)
 10002a0:	df000615 	stw	fp,24(sp)
 10002a4:	dcc00515 	stw	r19,20(sp)
 10002a8:	dc800415 	stw	r18,16(sp)
 10002ac:	dc400315 	stw	r17,12(sp)
 10002b0:	dc000215 	stw	r16,8(sp)
 10002b4:	df000204 	addi	fp,sp,8
	int i, j;
	for (i=0; i<RESOLUTION_X; i++){
 10002b8:	e03fff15 	stw	zero,-4(fp)
 10002bc:	00005d06 	br	1000434 <draw_to_screen+0x19c>
		for (j=0; j<RESOLUTION_Y; j++){
 10002c0:	e03ffe15 	stw	zero,-8(fp)
 10002c4:	00005506 	br	100041c <draw_to_screen+0x184>
			if (pixel_colors[i][j] != old_pixel_colors[i][j]) {
 10002c8:	e13fff17 	ldw	r4,-4(fp)
 10002cc:	e43ffe17 	ldw	r16,-8(fp)
 10002d0:	044041f4 	movhi	r17,263
 10002d4:	8c6d9004 	addi	r17,r17,-18880
 10002d8:	01403c04 	movi	r5,240
 10002dc:	10026440 	call	1002644 <__mulsi3>
 10002e0:	1405883a 	add	r2,r2,r16
 10002e4:	1085883a 	add	r2,r2,r2
 10002e8:	1085883a 	add	r2,r2,r2
 10002ec:	1445883a 	add	r2,r2,r17
 10002f0:	14800017 	ldw	r18,0(r2)
 10002f4:	e13fff17 	ldw	r4,-4(fp)
 10002f8:	e43ffe17 	ldw	r16,-8(fp)
 10002fc:	044040b4 	movhi	r17,258
 1000300:	8c419004 	addi	r17,r17,1600
 1000304:	01403c04 	movi	r5,240
 1000308:	10026440 	call	1002644 <__mulsi3>
 100030c:	1405883a 	add	r2,r2,r16
 1000310:	1085883a 	add	r2,r2,r2
 1000314:	1085883a 	add	r2,r2,r2
 1000318:	1445883a 	add	r2,r2,r17
 100031c:	10800017 	ldw	r2,0(r2)
 1000320:	90803b26 	beq	r18,r2,1000410 <draw_to_screen+0x178>
				draw_pixel_fast(pixel_buffer, pixel_colors[i][j], i, j);
 1000324:	d4a72a17 	ldw	r18,-25432(gp)
 1000328:	e13fff17 	ldw	r4,-4(fp)
 100032c:	e43ffe17 	ldw	r16,-8(fp)
 1000330:	044041f4 	movhi	r17,263
 1000334:	8c6d9004 	addi	r17,r17,-18880
 1000338:	01403c04 	movi	r5,240
 100033c:	10026440 	call	1002644 <__mulsi3>
 1000340:	1405883a 	add	r2,r2,r16
 1000344:	1085883a 	add	r2,r2,r2
 1000348:	1085883a 	add	r2,r2,r2
 100034c:	1445883a 	add	r2,r2,r17
 1000350:	11400017 	ldw	r5,0(r2)
 1000354:	9009883a 	mov	r4,r18
 1000358:	e1bfff17 	ldw	r6,-4(fp)
 100035c:	e1fffe17 	ldw	r7,-8(fp)
 1000360:	10004640 	call	1000464 <draw_pixel_fast>
				old_pixel_colors[i][j] = pixel_colors[i][j];
 1000364:	e4bfff17 	ldw	r18,-4(fp)
 1000368:	e4fffe17 	ldw	r19,-8(fp)
 100036c:	e13fff17 	ldw	r4,-4(fp)
 1000370:	e43ffe17 	ldw	r16,-8(fp)
 1000374:	044041f4 	movhi	r17,263
 1000378:	8c6d9004 	addi	r17,r17,-18880
 100037c:	01403c04 	movi	r5,240
 1000380:	10026440 	call	1002644 <__mulsi3>
 1000384:	1405883a 	add	r2,r2,r16
 1000388:	1085883a 	add	r2,r2,r2
 100038c:	1085883a 	add	r2,r2,r2
 1000390:	1445883a 	add	r2,r2,r17
 1000394:	14000017 	ldw	r16,0(r2)
 1000398:	044040b4 	movhi	r17,258
 100039c:	8c419004 	addi	r17,r17,1600
 10003a0:	9009883a 	mov	r4,r18
 10003a4:	01403c04 	movi	r5,240
 10003a8:	10026440 	call	1002644 <__mulsi3>
 10003ac:	14c5883a 	add	r2,r2,r19
 10003b0:	1085883a 	add	r2,r2,r2
 10003b4:	1085883a 	add	r2,r2,r2
 10003b8:	1445883a 	add	r2,r2,r17
 10003bc:	14000015 	stw	r16,0(r2)
				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 10003c0:	d1272a17 	ldw	r4,-25432(gp)
 10003c4:	101584c0 	call	101584c <alt_up_pixel_buffer_dma_swap_buffers>
				draw_pixel_fast(pixel_buffer, pixel_colors[i][j], i, j);
 10003c8:	d4a72a17 	ldw	r18,-25432(gp)
 10003cc:	e13fff17 	ldw	r4,-4(fp)
 10003d0:	e43ffe17 	ldw	r16,-8(fp)
 10003d4:	044041f4 	movhi	r17,263
 10003d8:	8c6d9004 	addi	r17,r17,-18880
 10003dc:	01403c04 	movi	r5,240
 10003e0:	10026440 	call	1002644 <__mulsi3>
 10003e4:	1405883a 	add	r2,r2,r16
 10003e8:	1085883a 	add	r2,r2,r2
 10003ec:	1085883a 	add	r2,r2,r2
 10003f0:	1445883a 	add	r2,r2,r17
 10003f4:	11400017 	ldw	r5,0(r2)
 10003f8:	9009883a 	mov	r4,r18
 10003fc:	e1bfff17 	ldw	r6,-4(fp)
 1000400:	e1fffe17 	ldw	r7,-8(fp)
 1000404:	10004640 	call	1000464 <draw_pixel_fast>
				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000408:	d1272a17 	ldw	r4,-25432(gp)
 100040c:	101584c0 	call	101584c <alt_up_pixel_buffer_dma_swap_buffers>
}

void draw_to_screen() {
	int i, j;
	for (i=0; i<RESOLUTION_X; i++){
		for (j=0; j<RESOLUTION_Y; j++){
 1000410:	e0bffe17 	ldw	r2,-8(fp)
 1000414:	10800044 	addi	r2,r2,1
 1000418:	e0bffe15 	stw	r2,-8(fp)
 100041c:	e0bffe17 	ldw	r2,-8(fp)
 1000420:	10803c10 	cmplti	r2,r2,240
 1000424:	103fa81e 	bne	r2,zero,10002c8 <draw_to_screen+0x30>
	alt_up_char_buffer_init(char_buffer);
}

void draw_to_screen() {
	int i, j;
	for (i=0; i<RESOLUTION_X; i++){
 1000428:	e0bfff17 	ldw	r2,-4(fp)
 100042c:	10800044 	addi	r2,r2,1
 1000430:	e0bfff15 	stw	r2,-4(fp)
 1000434:	e0bfff17 	ldw	r2,-4(fp)
 1000438:	10805010 	cmplti	r2,r2,320
 100043c:	103fa01e 	bne	r2,zero,10002c0 <draw_to_screen+0x28>
				draw_pixel_fast(pixel_buffer, pixel_colors[i][j], i, j);
				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
			}
		}
	}
}
 1000440:	e037883a 	mov	sp,fp
 1000444:	dfc00517 	ldw	ra,20(sp)
 1000448:	df000417 	ldw	fp,16(sp)
 100044c:	dcc00317 	ldw	r19,12(sp)
 1000450:	dc800217 	ldw	r18,8(sp)
 1000454:	dc400117 	ldw	r17,4(sp)
 1000458:	dc000017 	ldw	r16,0(sp)
 100045c:	dec00604 	addi	sp,sp,24
 1000460:	f800283a 	ret

01000464 <draw_pixel_fast>:
 * DO NOT USE THIS FUNCTION IF ANY OF THE ABOVE ARE NOT GUARANATEED, OR YOU
 * MAY WRITE TO INVALID MEMORY LOCATIONS, CRASHING YOUR PROGRAM, OR
 * CAUSING UNEXPECTED BEHAVIOR.
 */
int draw_pixel_fast(alt_up_pixel_buffer_dma_dev *pixel_buffer,
	unsigned int color, unsigned int x, unsigned int y) {
 1000464:	defff904 	addi	sp,sp,-28
 1000468:	dfc00615 	stw	ra,24(sp)
 100046c:	df000515 	stw	fp,20(sp)
 1000470:	df000504 	addi	fp,sp,20
 1000474:	e13ffc15 	stw	r4,-16(fp)
 1000478:	e17ffd15 	stw	r5,-12(fp)
 100047c:	e1bffe15 	stw	r6,-8(fp)
 1000480:	e1ffff15 	stw	r7,-4(fp)
	unsigned int addr;

	addr = ((x & pixel_buffer->x_coord_mask) << 1);
 1000484:	e0bffc17 	ldw	r2,-16(fp)
 1000488:	10c01217 	ldw	r3,72(r2)
 100048c:	e0bffe17 	ldw	r2,-8(fp)
 1000490:	1884703a 	and	r2,r3,r2
 1000494:	1085883a 	add	r2,r2,r2
 1000498:	e0bffb15 	stw	r2,-20(fp)
	addr += (((y & pixel_buffer->y_coord_mask) * 320) << 1);
 100049c:	e0bffc17 	ldw	r2,-16(fp)
 10004a0:	10c01417 	ldw	r3,80(r2)
 10004a4:	e0bfff17 	ldw	r2,-4(fp)
 10004a8:	1888703a 	and	r4,r3,r2
 10004ac:	01405004 	movi	r5,320
 10004b0:	10026440 	call	1002644 <__mulsi3>
 10004b4:	1085883a 	add	r2,r2,r2
 10004b8:	1007883a 	mov	r3,r2
 10004bc:	e0bffb17 	ldw	r2,-20(fp)
 10004c0:	10c5883a 	add	r2,r2,r3
 10004c4:	e0bffb15 	stw	r2,-20(fp)

	IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 10004c8:	e0bffc17 	ldw	r2,-16(fp)
 10004cc:	10800c17 	ldw	r2,48(r2)
 10004d0:	1007883a 	mov	r3,r2
 10004d4:	e0bffb17 	ldw	r2,-20(fp)
 10004d8:	1885883a 	add	r2,r3,r2
 10004dc:	e0fffd17 	ldw	r3,-12(fp)
 10004e0:	10c0002d 	sthio	r3,0(r2)

	return 0;
 10004e4:	0005883a 	mov	r2,zero
}
 10004e8:	e037883a 	mov	sp,fp
 10004ec:	dfc00117 	ldw	ra,4(sp)
 10004f0:	df000017 	ldw	fp,0(sp)
 10004f4:	dec00204 	addi	sp,sp,8
 10004f8:	f800283a 	ret

010004fc <initialize_sdcard>:

alt_up_sd_card_dev* sdcard;


/* Initializes SD Card module */
void initialize_sdcard() {
 10004fc:	defffe04 	addi	sp,sp,-8
 1000500:	dfc00115 	stw	ra,4(sp)
 1000504:	df000015 	stw	fp,0(sp)
 1000508:	d839883a 	mov	fp,sp
	sdcard = alt_up_sd_card_open_dev("/dev/sdcard");
 100050c:	010040b4 	movhi	r4,258
 1000510:	21306704 	addi	r4,r4,-15972
 1000514:	10199180 	call	1019918 <alt_up_sd_card_open_dev>
 1000518:	d0a72815 	stw	r2,-25440(gp)
	if(sdcard == NULL) printf("\nError: SD Card Module cannot be initialized");
 100051c:	d0a72817 	ldw	r2,-25440(gp)
 1000520:	1004c03a 	cmpne	r2,r2,zero
 1000524:	1000031e 	bne	r2,zero,1000534 <initialize_sdcard+0x38>
 1000528:	010040b4 	movhi	r4,258
 100052c:	21306a04 	addi	r4,r4,-15960
 1000530:	1002de40 	call	1002de4 <printf>
	if(!alt_up_sd_card_is_Present()){
 1000534:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1000538:	1080005c 	xori	r2,r2,1
 100053c:	10803fcc 	andi	r2,r2,255
 1000540:	1005003a 	cmpeq	r2,r2,zero
 1000544:	1000041e 	bne	r2,zero,1000558 <initialize_sdcard+0x5c>
		printf("\nSD Card not connected");
 1000548:	010040b4 	movhi	r4,258
 100054c:	21307604 	addi	r4,r4,-15912
 1000550:	1002de40 	call	1002de4 <printf>
		return;
 1000554:	00000b06 	br	1000584 <initialize_sdcard+0x88>
	}
	if(alt_up_sd_card_is_FAT16()) printf("\nSD Card Module initialized");
 1000558:	1019aa40 	call	1019aa4 <alt_up_sd_card_is_FAT16>
 100055c:	10803fcc 	andi	r2,r2,255
 1000560:	1005003a 	cmpeq	r2,r2,zero
 1000564:	1000041e 	bne	r2,zero,1000578 <initialize_sdcard+0x7c>
 1000568:	010040b4 	movhi	r4,258
 100056c:	21307c04 	addi	r4,r4,-15888
 1000570:	1002de40 	call	1002de4 <printf>
 1000574:	00000306 	br	1000584 <initialize_sdcard+0x88>
	else printf("Error: File system not recognized.\n");
 1000578:	010040b4 	movhi	r4,258
 100057c:	21308304 	addi	r4,r4,-15860
 1000580:	1002f200 	call	1002f20 <puts>
}
 1000584:	e037883a 	mov	sp,fp
 1000588:	dfc00117 	ldw	ra,4(sp)
 100058c:	df000017 	ldw	fp,0(sp)
 1000590:	dec00204 	addi	sp,sp,8
 1000594:	f800283a 	ret

01000598 <sdcard_fopen>:
/* Opens a file whose name is stored in filename.
 * If create is true, file will be created if it can't be found.
 * Returns: short int containing file handle if successful,
 * -1 if file could not be opened, -2 if file is already open
 */
short int sdcard_fopen(char* filename, bool create) {
 1000598:	defffc04 	addi	sp,sp,-16
 100059c:	dfc00315 	stw	ra,12(sp)
 10005a0:	df000215 	stw	fp,8(sp)
 10005a4:	df000204 	addi	fp,sp,8
 10005a8:	e13ffe15 	stw	r4,-8(fp)
 10005ac:	e17fff05 	stb	r5,-4(fp)
	return alt_up_sd_card_fopen(filename, create);
 10005b0:	e17fff03 	ldbu	r5,-4(fp)
 10005b4:	e13ffe17 	ldw	r4,-8(fp)
 10005b8:	1019f9c0 	call	1019f9c <alt_up_sd_card_fopen>
 10005bc:	10bfffcc 	andi	r2,r2,65535
 10005c0:	10a0001c 	xori	r2,r2,32768
 10005c4:	10a00004 	addi	r2,r2,-32768
}
 10005c8:	e037883a 	mov	sp,fp
 10005cc:	dfc00117 	ldw	ra,4(sp)
 10005d0:	df000017 	ldw	fp,0(sp)
 10005d4:	dec00204 	addi	sp,sp,8
 10005d8:	f800283a 	ret

010005dc <sdcard_fclose>:

/* Closes file denoted by handle in sdcard_file
 * Returns: true if successful, false if failed
 */
bool sdcard_fclose(short int sdcard_file) {
 10005dc:	defffd04 	addi	sp,sp,-12
 10005e0:	dfc00215 	stw	ra,8(sp)
 10005e4:	df000115 	stw	fp,4(sp)
 10005e8:	df000104 	addi	fp,sp,4
 10005ec:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(sdcard_file);
 10005f0:	e13fff0f 	ldh	r4,-4(fp)
 10005f4:	101ae200 	call	101ae20 <alt_up_sd_card_fclose>
 10005f8:	10803fcc 	andi	r2,r2,255
}
 10005fc:	e037883a 	mov	sp,fp
 1000600:	dfc00117 	ldw	ra,4(sp)
 1000604:	df000017 	ldw	fp,0(sp)
 1000608:	dec00204 	addi	sp,sp,8
 100060c:	f800283a 	ret

01000610 <sdcard_write>:


/* Writes a single byte of data to the file denoted by handle in sdcard_file
 * Returns: true if successful, false if failed
 */
bool sdcard_write(short int sdcard_file, unsigned char data) {
 1000610:	defffc04 	addi	sp,sp,-16
 1000614:	dfc00315 	stw	ra,12(sp)
 1000618:	df000215 	stw	fp,8(sp)
 100061c:	df000204 	addi	fp,sp,8
 1000620:	e13ffe0d 	sth	r4,-8(fp)
 1000624:	e17fff05 	stb	r5,-4(fp)
	return alt_up_sd_card_write(sdcard_file, data);
 1000628:	e13ffe0f 	ldh	r4,-8(fp)
 100062c:	e0bfff03 	ldbu	r2,-4(fp)
 1000630:	11403fcc 	andi	r5,r2,255
 1000634:	2940201c 	xori	r5,r5,128
 1000638:	297fe004 	addi	r5,r5,-128
 100063c:	101a7fc0 	call	101a7fc <alt_up_sd_card_write>
 1000640:	10803fcc 	andi	r2,r2,255
}
 1000644:	e037883a 	mov	sp,fp
 1000648:	dfc00117 	ldw	ra,4(sp)
 100064c:	df000017 	ldw	fp,0(sp)
 1000650:	dec00204 	addi	sp,sp,8
 1000654:	f800283a 	ret

01000658 <sdcard_print>:

/* Writes a string to the file identified by sdcard_file
 * Returns: true if successful, false if failed
 */
bool sdcard_print(short int sdcard_file, unsigned char* string) {
 1000658:	defff904 	addi	sp,sp,-28
 100065c:	dfc00615 	stw	ra,24(sp)
 1000660:	df000515 	stw	fp,20(sp)
 1000664:	dc000415 	stw	r16,16(sp)
 1000668:	df000404 	addi	fp,sp,16
 100066c:	e17ffe15 	stw	r5,-8(fp)
 1000670:	e13ffd0d 	sth	r4,-12(fp)
	int i;
	for(i = 0; i < strlen(string); i++) {
 1000674:	e03ffc15 	stw	zero,-16(fp)
 1000678:	00001106 	br	10006c0 <sdcard_print+0x68>
		if(!sdcard_write(sdcard_file, string[i])) return false;
 100067c:	e13ffd0f 	ldh	r4,-12(fp)
 1000680:	e0bffc17 	ldw	r2,-16(fp)
 1000684:	1007883a 	mov	r3,r2
 1000688:	e0bffe17 	ldw	r2,-8(fp)
 100068c:	1885883a 	add	r2,r3,r2
 1000690:	10800003 	ldbu	r2,0(r2)
 1000694:	11403fcc 	andi	r5,r2,255
 1000698:	10006100 	call	1000610 <sdcard_write>
 100069c:	1080005c 	xori	r2,r2,1
 10006a0:	10803fcc 	andi	r2,r2,255
 10006a4:	1005003a 	cmpeq	r2,r2,zero
 10006a8:	1000021e 	bne	r2,zero,10006b4 <sdcard_print+0x5c>
 10006ac:	e03fff15 	stw	zero,-4(fp)
 10006b0:	00000906 	br	10006d8 <sdcard_print+0x80>
/* Writes a string to the file identified by sdcard_file
 * Returns: true if successful, false if failed
 */
bool sdcard_print(short int sdcard_file, unsigned char* string) {
	int i;
	for(i = 0; i < strlen(string); i++) {
 10006b4:	e0bffc17 	ldw	r2,-16(fp)
 10006b8:	10800044 	addi	r2,r2,1
 10006bc:	e0bffc15 	stw	r2,-16(fp)
 10006c0:	e43ffc17 	ldw	r16,-16(fp)
 10006c4:	e13ffe17 	ldw	r4,-8(fp)
 10006c8:	10030b40 	call	10030b4 <strlen>
 10006cc:	80bfeb36 	bltu	r16,r2,100067c <sdcard_print+0x24>
		if(!sdcard_write(sdcard_file, string[i])) return false;
	}
	return true;
 10006d0:	00800044 	movi	r2,1
 10006d4:	e0bfff15 	stw	r2,-4(fp)
 10006d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10006dc:	e037883a 	mov	sp,fp
 10006e0:	dfc00217 	ldw	ra,8(sp)
 10006e4:	df000117 	ldw	fp,4(sp)
 10006e8:	dc000017 	ldw	r16,0(sp)
 10006ec:	dec00304 	addi	sp,sp,12
 10006f0:	f800283a 	ret

010006f4 <sdcard_read>:

/* Reads a single byte of data to the file identified by sdcard_file
 * Returns: a data byte if successful, -1 if file handle is invalid, -2 if it could not read from SD card
 */
short int sdcard_read(short int sdcard_file) {
 10006f4:	defffd04 	addi	sp,sp,-12
 10006f8:	dfc00215 	stw	ra,8(sp)
 10006fc:	df000115 	stw	fp,4(sp)
 1000700:	df000104 	addi	fp,sp,4
 1000704:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_read(sdcard_file);
 1000708:	e13fff0f 	ldh	r4,-4(fp)
 100070c:	101a4600 	call	101a460 <alt_up_sd_card_read>
 1000710:	10bfffcc 	andi	r2,r2,65535
 1000714:	10a0001c 	xori	r2,r2,32768
 1000718:	10a00004 	addi	r2,r2,-32768
}
 100071c:	e037883a 	mov	sp,fp
 1000720:	dfc00117 	ldw	ra,4(sp)
 1000724:	df000017 	ldw	fp,0(sp)
 1000728:	dec00204 	addi	sp,sp,8
 100072c:	f800283a 	ret

01000730 <sdcard_audio_read_little_end>:

unsigned int sdcard_audio_read_little_end (short int fp) {
 1000730:	defffb04 	addi	sp,sp,-20
 1000734:	dfc00415 	stw	ra,16(sp)
 1000738:	df000315 	stw	fp,12(sp)
 100073c:	df000304 	addi	fp,sp,12
 1000740:	e13fff0d 	sth	r4,-4(fp)
	unsigned int part_read;
	unsigned int full_read;

	part_read = sdcard_read(fp);
 1000744:	e13fff0f 	ldh	r4,-4(fp)
 1000748:	10006f40 	call	10006f4 <sdcard_read>
 100074c:	10bfffcc 	andi	r2,r2,65535
 1000750:	10a0001c 	xori	r2,r2,32768
 1000754:	10a00004 	addi	r2,r2,-32768
 1000758:	e0bffe15 	stw	r2,-8(fp)
	full_read = part_read % 0x100;
 100075c:	e0bffe17 	ldw	r2,-8(fp)
 1000760:	10803fcc 	andi	r2,r2,255
 1000764:	e0bffd15 	stw	r2,-12(fp)

	part_read = sdcard_read(fp);
 1000768:	e13fff0f 	ldh	r4,-4(fp)
 100076c:	10006f40 	call	10006f4 <sdcard_read>
 1000770:	10bfffcc 	andi	r2,r2,65535
 1000774:	10a0001c 	xori	r2,r2,32768
 1000778:	10a00004 	addi	r2,r2,-32768
 100077c:	e0bffe15 	stw	r2,-8(fp)
	part_read = part_read % 0x100;
 1000780:	e0bffe17 	ldw	r2,-8(fp)
 1000784:	10803fcc 	andi	r2,r2,255
 1000788:	e0bffe15 	stw	r2,-8(fp)
	full_read = part_read*16*16 + full_read;
 100078c:	e0bffe17 	ldw	r2,-8(fp)
 1000790:	1006923a 	slli	r3,r2,8
 1000794:	e0bffd17 	ldw	r2,-12(fp)
 1000798:	10c5883a 	add	r2,r2,r3
 100079c:	e0bffd15 	stw	r2,-12(fp)

	return full_read;
 10007a0:	e0bffd17 	ldw	r2,-12(fp)
}
 10007a4:	e037883a 	mov	sp,fp
 10007a8:	dfc00117 	ldw	ra,4(sp)
 10007ac:	df000017 	ldw	fp,0(sp)
 10007b0:	dec00204 	addi	sp,sp,8
 10007b4:	f800283a 	ret

010007b8 <handle_timer_interrupts>:
short int fp;
unsigned int *data;
int globalInd = 0;
int globalMaxInd = 0;

alt_u32 handle_timer_interrupts(alt_up_audio_dev * device) {
 10007b8:	defffd04 	addi	sp,sp,-12
 10007bc:	dfc00215 	stw	ra,8(sp)
 10007c0:	df000115 	stw	fp,4(sp)
 10007c4:	df000104 	addi	fp,sp,4
 10007c8:	e13fff15 	stw	r4,-4(fp)
	if (alt_up_audio_write_fifo_space(device, ALT_UP_AUDIO_LEFT) > 33){
 10007cc:	e13fff17 	ldw	r4,-4(fp)
 10007d0:	000b883a 	mov	r5,zero
 10007d4:	1013e700 	call	1013e70 <alt_up_audio_write_fifo_space>
 10007d8:	108008b0 	cmpltui	r2,r2,34
 10007dc:	1000191e 	bne	r2,zero,1000844 <handle_timer_interrupts+0x8c>
		alt_up_audio_write_fifo (device, &(data[globalInd*32]), 32, ALT_UP_AUDIO_LEFT);
 10007e0:	d0a72217 	ldw	r2,-25464(gp)
 10007e4:	100491fa 	slli	r2,r2,7
 10007e8:	1007883a 	mov	r3,r2
 10007ec:	d0a72917 	ldw	r2,-25436(gp)
 10007f0:	188b883a 	add	r5,r3,r2
 10007f4:	e13fff17 	ldw	r4,-4(fp)
 10007f8:	01800804 	movi	r6,32
 10007fc:	000f883a 	mov	r7,zero
 1000800:	10140c80 	call	10140c8 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (device, &(data[globalInd*32]), 32, ALT_UP_AUDIO_RIGHT);
 1000804:	d0a72217 	ldw	r2,-25464(gp)
 1000808:	100491fa 	slli	r2,r2,7
 100080c:	1007883a 	mov	r3,r2
 1000810:	d0a72917 	ldw	r2,-25436(gp)
 1000814:	188b883a 	add	r5,r3,r2
 1000818:	e13fff17 	ldw	r4,-4(fp)
 100081c:	01800804 	movi	r6,32
 1000820:	01c00044 	movi	r7,1
 1000824:	10140c80 	call	10140c8 <alt_up_audio_write_fifo>
		globalInd++;
 1000828:	d0a72217 	ldw	r2,-25464(gp)
 100082c:	10800044 	addi	r2,r2,1
 1000830:	d0a72215 	stw	r2,-25464(gp)
		if (globalInd > globalMaxInd){
 1000834:	d0e72217 	ldw	r3,-25464(gp)
 1000838:	d0a72317 	ldw	r2,-25460(gp)
 100083c:	10c0010e 	bge	r2,r3,1000844 <handle_timer_interrupts+0x8c>
			globalInd = 0;
 1000840:	d0272215 	stw	zero,-25464(gp)
		}
	}
	return 1;
 1000844:	00800044 	movi	r2,1
}
 1000848:	e037883a 	mov	sp,fp
 100084c:	dfc00117 	ldw	ra,4(sp)
 1000850:	df000017 	ldw	fp,0(sp)
 1000854:	dec00204 	addi	sp,sp,8
 1000858:	f800283a 	ret

0100085c <initialize_audio>:

void initialize_audio() {
 100085c:	defffd04 	addi	sp,sp,-12
 1000860:	dfc00215 	stw	ra,8(sp)
 1000864:	df000115 	stw	fp,4(sp)
 1000868:	df000104 	addi	fp,sp,4
	alt_up_av_config_dev * av_config = alt_up_av_config_open_dev("/dev/audio_config");
 100086c:	010040b4 	movhi	r4,258
 1000870:	21308c04 	addi	r4,r4,-15824
 1000874:	10142b40 	call	10142b4 <alt_up_av_config_open_dev>
 1000878:	e0bfff15 	stw	r2,-4(fp)
	if (!alt_up_av_config_read_ready(av_config)) {
 100087c:	e13fff17 	ldw	r4,-4(fp)
 1000880:	10145100 	call	1014510 <alt_up_av_config_read_ready>
 1000884:	1004c03a 	cmpne	r2,r2,zero
 1000888:	1000031e 	bne	r2,zero,1000898 <initialize_audio+0x3c>
		printf("Audio can not be initialised\n");
 100088c:	010040b4 	movhi	r4,258
 1000890:	21309104 	addi	r4,r4,-15804
 1000894:	1002f200 	call	1002f20 <puts>
	}
}
 1000898:	e037883a 	mov	sp,fp
 100089c:	dfc00117 	ldw	ra,4(sp)
 10008a0:	df000017 	ldw	fp,0(sp)
 10008a4:	dec00204 	addi	sp,sp,8
 10008a8:	f800283a 	ret

010008ac <start_audio>:

alt_up_audio_dev * start_audio(){
 10008ac:	defff304 	addi	sp,sp,-52
 10008b0:	dfc00c15 	stw	ra,48(sp)
 10008b4:	df000b15 	stw	fp,44(sp)
 10008b8:	dc400a15 	stw	r17,40(sp)
 10008bc:	dc000915 	stw	r16,36(sp)
 10008c0:	df000904 	addi	fp,sp,36
 10008c4:	e6ffff15 	stw	sp,-4(fp)
 10008c8:	d805883a 	mov	r2,sp
 10008cc:	e0bffd15 	stw	r2,-12(fp)
	// open the Audio port;
	alt_up_audio_dev * audio_device = alt_up_audio_open_dev("/dev/audio");
 10008d0:	010040b4 	movhi	r4,258
 10008d4:	21309904 	addi	r4,r4,-15772
 10008d8:	1013aa80 	call	1013aa8 <alt_up_audio_open_dev>
 10008dc:	e0bffb15 	stw	r2,-20(fp)
	if ( audio_device == NULL)
 10008e0:	e0bffb17 	ldw	r2,-20(fp)
 10008e4:	1004c03a 	cmpne	r2,r2,zero
 10008e8:	1000041e 	bne	r2,zero,10008fc <start_audio+0x50>
		alt_printf ("\nError: could not open audio device \n");
 10008ec:	010040b4 	movhi	r4,258
 10008f0:	21309c04 	addi	r4,r4,-15760
 10008f4:	10121340 	call	1012134 <alt_printf>
 10008f8:	00000306 	br	1000908 <start_audio+0x5c>
	else
		alt_printf ("\nOpened audio device \n");
 10008fc:	010040b4 	movhi	r4,258
 1000900:	2130a604 	addi	r4,r4,-15720
 1000904:	10121340 	call	1012134 <alt_printf>

	alt_up_audio_reset_audio_core(audio_device);
 1000908:	e13ffb17 	ldw	r4,-20(fp)
 100090c:	1013c980 	call	1013c98 <alt_up_audio_reset_audio_core>

	alt_up_audio_enable_write_interrupt(audio_device);
 1000910:	e13ffb17 	ldw	r4,-20(fp)
 1000914:	1013b840 	call	1013b84 <alt_up_audio_enable_write_interrupt>

	char * file = "Kirby5.wav";
 1000918:	008040b4 	movhi	r2,258
 100091c:	10b0ac04 	addi	r2,r2,-15696
 1000920:	e0bffa15 	stw	r2,-24(fp)
	fp = sdcard_fopen(file, 0);
 1000924:	e13ffa17 	ldw	r4,-24(fp)
 1000928:	000b883a 	mov	r5,zero
 100092c:	10005980 	call	1000598 <sdcard_fopen>
 1000930:	d0a7260d 	sth	r2,-25448(gp)
	if (fp == -1) {
 1000934:	d0a7260b 	ldhu	r2,-25448(gp)
 1000938:	10bfffcc 	andi	r2,r2,65535
 100093c:	10a0001c 	xori	r2,r2,32768
 1000940:	10a00004 	addi	r2,r2,-32768
 1000944:	10bfffd8 	cmpnei	r2,r2,-1
 1000948:	1000051e 	bne	r2,zero,1000960 <start_audio+0xb4>
		alt_printf("\nError opening wav file %s", file);
 100094c:	010040b4 	movhi	r4,258
 1000950:	2130af04 	addi	r4,r4,-15684
 1000954:	e17ffa17 	ldw	r5,-24(fp)
 1000958:	10121340 	call	1012134 <alt_printf>
 100095c:	00001106 	br	10009a4 <start_audio+0xf8>
	} else if (fp == -2) {
 1000960:	d0a7260b 	ldhu	r2,-25448(gp)
 1000964:	10bfffcc 	andi	r2,r2,65535
 1000968:	10a0001c 	xori	r2,r2,32768
 100096c:	10a00004 	addi	r2,r2,-32768
 1000970:	10bfff98 	cmpnei	r2,r2,-2
 1000974:	10000b1e 	bne	r2,zero,10009a4 <start_audio+0xf8>
		alt_printf("\nwav file %s already open", file);
 1000978:	010040b4 	movhi	r4,258
 100097c:	2130b604 	addi	r4,r4,-15656
 1000980:	e17ffa17 	ldw	r5,-24(fp)
 1000984:	10121340 	call	1012134 <alt_printf>
	}

	unsigned int read;
	while(read != 0x6174){
 1000988:	00000606 	br	10009a4 <start_audio+0xf8>
		read = sdcard_audio_read_little_end(fp);
 100098c:	d0a7260b 	ldhu	r2,-25448(gp)
 1000990:	113fffcc 	andi	r4,r2,65535
 1000994:	2120001c 	xori	r4,r4,32768
 1000998:	21200004 	addi	r4,r4,-32768
 100099c:	10007300 	call	1000730 <sdcard_audio_read_little_end>
 10009a0:	e0bff915 	stw	r2,-28(fp)
	} else if (fp == -2) {
		alt_printf("\nwav file %s already open", file);
	}

	unsigned int read;
	while(read != 0x6174){
 10009a4:	e0bff917 	ldw	r2,-28(fp)
 10009a8:	10985d18 	cmpnei	r2,r2,24948
 10009ac:	103ff71e 	bne	r2,zero,100098c <start_audio+0xe0>
		read = sdcard_audio_read_little_end(fp);
	}
	read = sdcard_audio_read_little_end(fp);
 10009b0:	d0a7260b 	ldhu	r2,-25448(gp)
 10009b4:	113fffcc 	andi	r4,r2,65535
 10009b8:	2120001c 	xori	r4,r4,32768
 10009bc:	21200004 	addi	r4,r4,-32768
 10009c0:	10007300 	call	1000730 <sdcard_audio_read_little_end>
 10009c4:	e0bff915 	stw	r2,-28(fp)
	read = read + sdcard_audio_read_little_end(fp)*16*16*16*16;
 10009c8:	d0a7260b 	ldhu	r2,-25448(gp)
 10009cc:	113fffcc 	andi	r4,r2,65535
 10009d0:	2120001c 	xori	r4,r4,32768
 10009d4:	21200004 	addi	r4,r4,-32768
 10009d8:	10007300 	call	1000730 <sdcard_audio_read_little_end>
 10009dc:	1006943a 	slli	r3,r2,16
 10009e0:	e0bff917 	ldw	r2,-28(fp)
 10009e4:	10c5883a 	add	r2,r2,r3
 10009e8:	e0bff915 	stw	r2,-28(fp)

	unsigned int data2[read][32];
 10009ec:	e0bff917 	ldw	r2,-28(fp)
 10009f0:	100491fa 	slli	r2,r2,7
 10009f4:	108000c4 	addi	r2,r2,3
 10009f8:	108000c4 	addi	r2,r2,3
 10009fc:	1004d0ba 	srli	r2,r2,2
 1000a00:	1085883a 	add	r2,r2,r2
 1000a04:	1085883a 	add	r2,r2,r2
 1000a08:	d8b7c83a 	sub	sp,sp,r2
 1000a0c:	e6fffe15 	stw	sp,-8(fp)
 1000a10:	e0fffe17 	ldw	r3,-8(fp)
 1000a14:	188000c4 	addi	r2,r3,3
 1000a18:	1004d0ba 	srli	r2,r2,2
 1000a1c:	1085883a 	add	r2,r2,r2
 1000a20:	1085883a 	add	r2,r2,r2
 1000a24:	e0bffe15 	stw	r2,-8(fp)
 1000a28:	e0bffe17 	ldw	r2,-8(fp)
 1000a2c:	e0bffc15 	stw	r2,-16(fp)

	int i, j;
	for (i=0; i < read/64; i++){
 1000a30:	e03ff815 	stw	zero,-32(fp)
 1000a34:	00001a06 	br	1000aa0 <start_audio+0x1f4>
		for (j=0; j < 32; j++){
 1000a38:	e03ff715 	stw	zero,-36(fp)
 1000a3c:	00001206 	br	1000a88 <start_audio+0x1dc>
			data2[i][j] = sdcard_audio_read_little_end(fp);
 1000a40:	e43ff817 	ldw	r16,-32(fp)
 1000a44:	e47ff717 	ldw	r17,-36(fp)
 1000a48:	d0a7260b 	ldhu	r2,-25448(gp)
 1000a4c:	113fffcc 	andi	r4,r2,65535
 1000a50:	2120001c 	xori	r4,r4,32768
 1000a54:	21200004 	addi	r4,r4,-32768
 1000a58:	10007300 	call	1000730 <sdcard_audio_read_little_end>
 1000a5c:	1009883a 	mov	r4,r2
 1000a60:	e0fffc17 	ldw	r3,-16(fp)
 1000a64:	8004917a 	slli	r2,r16,5
 1000a68:	1445883a 	add	r2,r2,r17
 1000a6c:	1085883a 	add	r2,r2,r2
 1000a70:	1085883a 	add	r2,r2,r2
 1000a74:	10c5883a 	add	r2,r2,r3
 1000a78:	11000015 	stw	r4,0(r2)

	unsigned int data2[read][32];

	int i, j;
	for (i=0; i < read/64; i++){
		for (j=0; j < 32; j++){
 1000a7c:	e0bff717 	ldw	r2,-36(fp)
 1000a80:	10800044 	addi	r2,r2,1
 1000a84:	e0bff715 	stw	r2,-36(fp)
 1000a88:	e0bff717 	ldw	r2,-36(fp)
 1000a8c:	10800810 	cmplti	r2,r2,32
 1000a90:	103feb1e 	bne	r2,zero,1000a40 <start_audio+0x194>
	read = read + sdcard_audio_read_little_end(fp)*16*16*16*16;

	unsigned int data2[read][32];

	int i, j;
	for (i=0; i < read/64; i++){
 1000a94:	e0bff817 	ldw	r2,-32(fp)
 1000a98:	10800044 	addi	r2,r2,1
 1000a9c:	e0bff815 	stw	r2,-32(fp)
 1000aa0:	e0bff817 	ldw	r2,-32(fp)
 1000aa4:	e0fff917 	ldw	r3,-28(fp)
 1000aa8:	1806d1ba 	srli	r3,r3,6
 1000aac:	10ffe236 	bltu	r2,r3,1000a38 <start_audio+0x18c>
			data2[i][j] = sdcard_audio_read_little_end(fp);
		}
	}


	data = data2;
 1000ab0:	e0bffc17 	ldw	r2,-16(fp)
 1000ab4:	d0a72915 	stw	r2,-25436(gp)

	globalMaxInd = read/64;
 1000ab8:	e0bff917 	ldw	r2,-28(fp)
 1000abc:	1004d1ba 	srli	r2,r2,6
 1000ac0:	d0a72315 	stw	r2,-25460(gp)
	// Start the interrupt
	static alt_alarm alarm;
	alt_alarm_start(&alarm, 1, handle_timer_interrupts, audio_device);
 1000ac4:	01804034 	movhi	r6,256
 1000ac8:	3181ee04 	addi	r6,r6,1976
 1000acc:	010040b4 	movhi	r4,258
 1000ad0:	21018004 	addi	r4,r4,1536
 1000ad4:	01400044 	movi	r5,1
 1000ad8:	e1fffb17 	ldw	r7,-20(fp)
 1000adc:	101190c0 	call	101190c <alt_alarm_start>
 1000ae0:	e6fffd17 	ldw	sp,-12(fp)
}
 1000ae4:	e6ffff17 	ldw	sp,-4(fp)
 1000ae8:	e037883a 	mov	sp,fp
 1000aec:	dfc00317 	ldw	ra,12(sp)
 1000af0:	df000217 	ldw	fp,8(sp)
 1000af4:	dc400117 	ldw	r17,4(sp)
 1000af8:	dc000017 	ldw	r16,0(sp)
 1000afc:	dec00404 	addi	sp,sp,16
 1000b00:	f800283a 	ret

01000b04 <skip>:
        int width;
        int height;
        int *data;
} Bitmap;

void skip(short int fp, int chars) {
 1000b04:	defffb04 	addi	sp,sp,-20
 1000b08:	dfc00415 	stw	ra,16(sp)
 1000b0c:	df000315 	stw	fp,12(sp)
 1000b10:	df000304 	addi	fp,sp,12
 1000b14:	e17fff15 	stw	r5,-4(fp)
 1000b18:	e13ffe0d 	sth	r4,-8(fp)
   int i;
   for (i=0; i<chars; i++)
 1000b1c:	e03ffd15 	stw	zero,-12(fp)
 1000b20:	00000506 	br	1000b38 <skip+0x34>
      sdcard_read(fp);
 1000b24:	e13ffe0f 	ldh	r4,-8(fp)
 1000b28:	10006f40 	call	10006f4 <sdcard_read>
        int *data;
} Bitmap;

void skip(short int fp, int chars) {
   int i;
   for (i=0; i<chars; i++)
 1000b2c:	e0bffd17 	ldw	r2,-12(fp)
 1000b30:	10800044 	addi	r2,r2,1
 1000b34:	e0bffd15 	stw	r2,-12(fp)
 1000b38:	e0fffd17 	ldw	r3,-12(fp)
 1000b3c:	e0bfff17 	ldw	r2,-4(fp)
 1000b40:	18bff816 	blt	r3,r2,1000b24 <skip+0x20>
      sdcard_read(fp);
}
 1000b44:	e037883a 	mov	sp,fp
 1000b48:	dfc00117 	ldw	ra,4(sp)
 1000b4c:	df000017 	ldw	fp,0(sp)
 1000b50:	dec00204 	addi	sp,sp,8
 1000b54:	f800283a 	ret

01000b58 <sdcard_read_int>:

int sdcard_read_int (short int fp) {
 1000b58:	defff904 	addi	sp,sp,-28
 1000b5c:	dfc00615 	stw	ra,24(sp)
 1000b60:	df000515 	stw	fp,20(sp)
 1000b64:	dc000415 	stw	r16,16(sp)
 1000b68:	df000404 	addi	fp,sp,16
 1000b6c:	e13fff0d 	sth	r4,-4(fp)
	unsigned char arr[4];
	int i;
	for (i=0; i<4; i++) {
 1000b70:	e03ffd15 	stw	zero,-12(fp)
 1000b74:	00000a06 	br	1000ba0 <sdcard_read_int+0x48>
		arr[i] = sdcard_read(fp);
 1000b78:	e43ffd17 	ldw	r16,-12(fp)
 1000b7c:	e13fff0f 	ldh	r4,-4(fp)
 1000b80:	10006f40 	call	10006f4 <sdcard_read>
 1000b84:	1007883a 	mov	r3,r2
 1000b88:	e0bffe04 	addi	r2,fp,-8
 1000b8c:	1405883a 	add	r2,r2,r16
 1000b90:	10c00005 	stb	r3,0(r2)
}

int sdcard_read_int (short int fp) {
	unsigned char arr[4];
	int i;
	for (i=0; i<4; i++) {
 1000b94:	e0bffd17 	ldw	r2,-12(fp)
 1000b98:	10800044 	addi	r2,r2,1
 1000b9c:	e0bffd15 	stw	r2,-12(fp)
 1000ba0:	e0bffd17 	ldw	r2,-12(fp)
 1000ba4:	10800110 	cmplti	r2,r2,4
 1000ba8:	103ff31e 	bne	r2,zero,1000b78 <sdcard_read_int+0x20>
		arr[i] = sdcard_read(fp);
	}
	int num = (arr[3] << 24) + (arr[2] << 16) + (arr[1] << 8) + arr[0];
 1000bac:	e0bffec3 	ldbu	r2,-5(fp)
 1000bb0:	10803fcc 	andi	r2,r2,255
 1000bb4:	1006963a 	slli	r3,r2,24
 1000bb8:	e0bffe83 	ldbu	r2,-6(fp)
 1000bbc:	10803fcc 	andi	r2,r2,255
 1000bc0:	1004943a 	slli	r2,r2,16
 1000bc4:	1887883a 	add	r3,r3,r2
 1000bc8:	e0bffe43 	ldbu	r2,-7(fp)
 1000bcc:	10803fcc 	andi	r2,r2,255
 1000bd0:	1004923a 	slli	r2,r2,8
 1000bd4:	1887883a 	add	r3,r3,r2
 1000bd8:	e0bffe03 	ldbu	r2,-8(fp)
 1000bdc:	10803fcc 	andi	r2,r2,255
 1000be0:	1885883a 	add	r2,r3,r2
 1000be4:	e0bffc15 	stw	r2,-16(fp)
	return num;
 1000be8:	e0bffc17 	ldw	r2,-16(fp)
}
 1000bec:	e037883a 	mov	sp,fp
 1000bf0:	dfc00217 	ldw	ra,8(sp)
 1000bf4:	df000117 	ldw	fp,4(sp)
 1000bf8:	dc000017 	ldw	r16,0(sp)
 1000bfc:	dec00304 	addi	sp,sp,12
 1000c00:	f800283a 	ret

01000c04 <load_bitmap>:

void * load_bitmap(char *file) {
 1000c04:	defff304 	addi	sp,sp,-52
 1000c08:	dfc00c15 	stw	ra,48(sp)
 1000c0c:	df000b15 	stw	fp,44(sp)
 1000c10:	dc000a15 	stw	r16,40(sp)
 1000c14:	df000a04 	addi	fp,sp,40
 1000c18:	e13ffd15 	stw	r4,-12(fp)
	Bitmap * bitmap = malloc(sizeof(Bitmap));
 1000c1c:	01000304 	movi	r4,12
 1000c20:	10026900 	call	1002690 <malloc>
 1000c24:	e0bffc15 	stw	r2,-16(fp)
	short int fp;
	fp = sdcard_fopen(file, 0);
 1000c28:	e13ffd17 	ldw	r4,-12(fp)
 1000c2c:	000b883a 	mov	r5,zero
 1000c30:	10005980 	call	1000598 <sdcard_fopen>
 1000c34:	e0bffb0d 	sth	r2,-20(fp)
	if (fp == -1) {
 1000c38:	e0bffb0f 	ldh	r2,-20(fp)
 1000c3c:	10bfffd8 	cmpnei	r2,r2,-1
 1000c40:	1000051e 	bne	r2,zero,1000c58 <load_bitmap+0x54>
		alt_printf("\nError opening bmp file %s", file);
 1000c44:	010040b4 	movhi	r4,258
 1000c48:	2130bd04 	addi	r4,r4,-15628
 1000c4c:	e17ffd17 	ldw	r5,-12(fp)
 1000c50:	10121340 	call	1012134 <alt_printf>
 1000c54:	00000706 	br	1000c74 <load_bitmap+0x70>
	} else if (fp == -2) {
 1000c58:	e0bffb0f 	ldh	r2,-20(fp)
 1000c5c:	10bfff98 	cmpnei	r2,r2,-2
 1000c60:	1000041e 	bne	r2,zero,1000c74 <load_bitmap+0x70>
		alt_printf("\bmp file %s already open", file);
 1000c64:	010040b4 	movhi	r4,258
 1000c68:	2130c404 	addi	r4,r4,-15600
 1000c6c:	e17ffd17 	ldw	r5,-12(fp)
 1000c70:	10121340 	call	1012134 <alt_printf>
	}
	if (sdcard_read(fp)!='B' || sdcard_read(fp)!='M')
 1000c74:	e13ffb0f 	ldh	r4,-20(fp)
 1000c78:	10006f40 	call	10006f4 <sdcard_read>
 1000c7c:	10bfffcc 	andi	r2,r2,65535
 1000c80:	10a0001c 	xori	r2,r2,32768
 1000c84:	10a00004 	addi	r2,r2,-32768
 1000c88:	10801098 	cmpnei	r2,r2,66
 1000c8c:	1000071e 	bne	r2,zero,1000cac <load_bitmap+0xa8>
 1000c90:	e13ffb0f 	ldh	r4,-20(fp)
 1000c94:	10006f40 	call	10006f4 <sdcard_read>
 1000c98:	10bfffcc 	andi	r2,r2,65535
 1000c9c:	10a0001c 	xori	r2,r2,32768
 1000ca0:	10a00004 	addi	r2,r2,-32768
 1000ca4:	10801360 	cmpeqi	r2,r2,77
 1000ca8:	1000061e 	bne	r2,zero,1000cc4 <load_bitmap+0xc0>
	{
		sdcard_fclose(fp);
 1000cac:	e13ffb0f 	ldh	r4,-20(fp)
 1000cb0:	10005dc0 	call	10005dc <sdcard_fclose>
		alt_printf("\n%s is not a bitmap file.\n",file);
 1000cb4:	010040b4 	movhi	r4,258
 1000cb8:	2130cb04 	addi	r4,r4,-15572
 1000cbc:	e17ffd17 	ldw	r5,-12(fp)
 1000cc0:	10121340 	call	1012134 <alt_printf>
	long index;
	short int color_data, red, blue, green;
	int num_colors;
	int x;

	skip(fp,16);
 1000cc4:	e13ffb0f 	ldh	r4,-20(fp)
 1000cc8:	01400404 	movi	r5,16
 1000ccc:	1000b040 	call	1000b04 <skip>
	bitmap->width = sdcard_read_int(fp);
 1000cd0:	e13ffb0f 	ldh	r4,-20(fp)
 1000cd4:	1000b580 	call	1000b58 <sdcard_read_int>
 1000cd8:	1007883a 	mov	r3,r2
 1000cdc:	e0bffc17 	ldw	r2,-16(fp)
 1000ce0:	10c00015 	stw	r3,0(r2)
	bitmap->height = sdcard_read_int(fp);
 1000ce4:	e13ffb0f 	ldh	r4,-20(fp)
 1000ce8:	1000b580 	call	1000b58 <sdcard_read_int>
 1000cec:	1007883a 	mov	r3,r2
 1000cf0:	e0bffc17 	ldw	r2,-16(fp)
 1000cf4:	10c00115 	stw	r3,4(r2)
	skip(fp,20);
 1000cf8:	e13ffb0f 	ldh	r4,-20(fp)
 1000cfc:	01400504 	movi	r5,20
 1000d00:	1000b040 	call	1000b04 <skip>
	num_colors = sdcard_read_int(fp);
 1000d04:	e13ffb0f 	ldh	r4,-20(fp)
 1000d08:	1000b580 	call	1000b58 <sdcard_read_int>
 1000d0c:	e0bff715 	stw	r2,-36(fp)
	skip(fp,4);
 1000d10:	e13ffb0f 	ldh	r4,-20(fp)
 1000d14:	01400104 	movi	r5,4
 1000d18:	1000b040 	call	1000b04 <skip>

	/* assume we are working with an 8-bit file */
	if (num_colors == 0) num_colors = 256;
 1000d1c:	e0bff717 	ldw	r2,-36(fp)
 1000d20:	1004c03a 	cmpne	r2,r2,zero
 1000d24:	1000021e 	bne	r2,zero,1000d30 <load_bitmap+0x12c>
 1000d28:	00804004 	movi	r2,256
 1000d2c:	e0bff715 	stw	r2,-36(fp)

	/* try to allocate memory */
	if (( bitmap->data = malloc(bitmap->width*bitmap->height*sizeof(int))) == NULL) {
 1000d30:	e0bffc17 	ldw	r2,-16(fp)
 1000d34:	11000017 	ldw	r4,0(r2)
 1000d38:	e0bffc17 	ldw	r2,-16(fp)
 1000d3c:	11400117 	ldw	r5,4(r2)
 1000d40:	10026440 	call	1002644 <__mulsi3>
 1000d44:	1085883a 	add	r2,r2,r2
 1000d48:	1085883a 	add	r2,r2,r2
 1000d4c:	1009883a 	mov	r4,r2
 1000d50:	10026900 	call	1002690 <malloc>
 1000d54:	1007883a 	mov	r3,r2
 1000d58:	e0bffc17 	ldw	r2,-16(fp)
 1000d5c:	10c00215 	stw	r3,8(r2)
 1000d60:	e0bffc17 	ldw	r2,-16(fp)
 1000d64:	10800217 	ldw	r2,8(r2)
 1000d68:	1004c03a 	cmpne	r2,r2,zero
 1000d6c:	1000061e 	bne	r2,zero,1000d88 <load_bitmap+0x184>
		sdcard_fclose(fp);
 1000d70:	e13ffb0f 	ldh	r4,-20(fp)
 1000d74:	10005dc0 	call	10005dc <sdcard_fclose>
		alt_printf("\nError allocating memory for bitmap data %s", file);
 1000d78:	010040b4 	movhi	r4,258
 1000d7c:	2130d204 	addi	r4,r4,-15544
 1000d80:	e17ffd17 	ldw	r5,-12(fp)
 1000d84:	10121340 	call	1012134 <alt_printf>
	}

	/* Ignore the palette information for now */
	skip(fp, num_colors*4);
 1000d88:	e13ffb0f 	ldh	r4,-20(fp)
 1000d8c:	e0bff717 	ldw	r2,-36(fp)
 1000d90:	1085883a 	add	r2,r2,r2
 1000d94:	1085883a 	add	r2,r2,r2
 1000d98:	100b883a 	mov	r5,r2
 1000d9c:	1000b040 	call	1000b04 <skip>

	/* read the bitmap */
	for (index = bitmap->height-1; index >=0; index--) {
 1000da0:	e0bffc17 	ldw	r2,-16(fp)
 1000da4:	10800117 	ldw	r2,4(r2)
 1000da8:	10bfffc4 	addi	r2,r2,-1
 1000dac:	e0bffa15 	stw	r2,-24(fp)
 1000db0:	00005c06 	br	1000f24 <load_bitmap+0x320>
		for (x = 0; x < bitmap->width; x++){
 1000db4:	e03ff615 	stw	zero,-40(fp)
 1000db8:	00003406 	br	1000e8c <load_bitmap+0x288>
			color_data = sdcard_read(fp);
 1000dbc:	e13ffb0f 	ldh	r4,-20(fp)
 1000dc0:	10006f40 	call	10006f4 <sdcard_read>
 1000dc4:	e0bff98d 	sth	r2,-26(fp)
			red = ((color_data & 0xE0) >> 5) * 31 / 7;
 1000dc8:	e0bff98b 	ldhu	r2,-26(fp)
 1000dcc:	10bfffcc 	andi	r2,r2,65535
 1000dd0:	1080380c 	andi	r2,r2,224
 1000dd4:	1009d17a 	srai	r4,r2,5
 1000dd8:	014007c4 	movi	r5,31
 1000ddc:	10026440 	call	1002644 <__mulsi3>
 1000de0:	1009883a 	mov	r4,r2
 1000de4:	014001c4 	movi	r5,7
 1000de8:	10025740 	call	1002574 <__divsi3>
 1000dec:	e0bff90d 	sth	r2,-28(fp)
			green = ((color_data & 0x1C) >> 2) * 63 / 7;
 1000df0:	e0bff98b 	ldhu	r2,-26(fp)
 1000df4:	10bfffcc 	andi	r2,r2,65535
 1000df8:	1080070c 	andi	r2,r2,28
 1000dfc:	1009d0ba 	srai	r4,r2,2
 1000e00:	01400244 	movi	r5,9
 1000e04:	10026440 	call	1002644 <__mulsi3>
 1000e08:	e0bff80d 	sth	r2,-32(fp)
			blue = ((color_data & 0x03)) * 31 / 3;
 1000e0c:	e0bff98b 	ldhu	r2,-26(fp)
 1000e10:	10bfffcc 	andi	r2,r2,65535
 1000e14:	110000cc 	andi	r4,r2,3
 1000e18:	014007c4 	movi	r5,31
 1000e1c:	10026440 	call	1002644 <__mulsi3>
 1000e20:	1009883a 	mov	r4,r2
 1000e24:	014000c4 	movi	r5,3
 1000e28:	10025740 	call	1002574 <__divsi3>
 1000e2c:	e0bff88d 	sth	r2,-30(fp)
			bitmap->data[(index*bitmap->width) + x] = (blue << 11 ) + (green << 5 ) + (red);
 1000e30:	e0bffc17 	ldw	r2,-16(fp)
 1000e34:	14000217 	ldw	r16,8(r2)
 1000e38:	e0bffc17 	ldw	r2,-16(fp)
 1000e3c:	11000017 	ldw	r4,0(r2)
 1000e40:	e17ffa17 	ldw	r5,-24(fp)
 1000e44:	10026440 	call	1002644 <__mulsi3>
 1000e48:	1007883a 	mov	r3,r2
 1000e4c:	e0bff617 	ldw	r2,-40(fp)
 1000e50:	1885883a 	add	r2,r3,r2
 1000e54:	1085883a 	add	r2,r2,r2
 1000e58:	1085883a 	add	r2,r2,r2
 1000e5c:	8089883a 	add	r4,r16,r2
 1000e60:	e0bff88f 	ldh	r2,-30(fp)
 1000e64:	100692fa 	slli	r3,r2,11
 1000e68:	e0bff80f 	ldh	r2,-32(fp)
 1000e6c:	1004917a 	slli	r2,r2,5
 1000e70:	1887883a 	add	r3,r3,r2
 1000e74:	e0bff90f 	ldh	r2,-28(fp)
 1000e78:	1885883a 	add	r2,r3,r2
 1000e7c:	20800015 	stw	r2,0(r4)
	/* Ignore the palette information for now */
	skip(fp, num_colors*4);

	/* read the bitmap */
	for (index = bitmap->height-1; index >=0; index--) {
		for (x = 0; x < bitmap->width; x++){
 1000e80:	e0bff617 	ldw	r2,-40(fp)
 1000e84:	10800044 	addi	r2,r2,1
 1000e88:	e0bff615 	stw	r2,-40(fp)
 1000e8c:	e0bffc17 	ldw	r2,-16(fp)
 1000e90:	10c00017 	ldw	r3,0(r2)
 1000e94:	e0bff617 	ldw	r2,-40(fp)
 1000e98:	10ffc816 	blt	r2,r3,1000dbc <load_bitmap+0x1b8>
			red = ((color_data & 0xE0) >> 5) * 31 / 7;
			green = ((color_data & 0x1C) >> 2) * 63 / 7;
			blue = ((color_data & 0x03)) * 31 / 3;
			bitmap->data[(index*bitmap->width) + x] = (blue << 11 ) + (green << 5 ) + (red);
		}
		if (bitmap->width % 4) skip(fp, (4 - bitmap->width % 4));
 1000e9c:	e0bffc17 	ldw	r2,-16(fp)
 1000ea0:	10800017 	ldw	r2,0(r2)
 1000ea4:	108000cc 	andi	r2,r2,3
 1000ea8:	1005003a 	cmpeq	r2,r2,zero
 1000eac:	10001a1e 	bne	r2,zero,1000f18 <load_bitmap+0x314>
 1000eb0:	e0bffb0f 	ldh	r2,-20(fp)
 1000eb4:	e0bffe15 	stw	r2,-8(fp)
 1000eb8:	e0bffc17 	ldw	r2,-16(fp)
 1000ebc:	10c00017 	ldw	r3,0(r2)
 1000ec0:	00a00034 	movhi	r2,32768
 1000ec4:	108000c4 	addi	r2,r2,3
 1000ec8:	1886703a 	and	r3,r3,r2
 1000ecc:	e0ffff15 	stw	r3,-4(fp)
 1000ed0:	e0ffff17 	ldw	r3,-4(fp)
 1000ed4:	1804403a 	cmpge	r2,r3,zero
 1000ed8:	10000a1e 	bne	r2,zero,1000f04 <load_bitmap+0x300>
 1000edc:	e0bfff17 	ldw	r2,-4(fp)
 1000ee0:	10bfffc4 	addi	r2,r2,-1
 1000ee4:	e0bfff15 	stw	r2,-4(fp)
 1000ee8:	00bfff04 	movi	r2,-4
 1000eec:	e0ffff17 	ldw	r3,-4(fp)
 1000ef0:	1886b03a 	or	r3,r3,r2
 1000ef4:	e0ffff15 	stw	r3,-4(fp)
 1000ef8:	e0bfff17 	ldw	r2,-4(fp)
 1000efc:	10800044 	addi	r2,r2,1
 1000f00:	e0bfff15 	stw	r2,-4(fp)
 1000f04:	e0bfff17 	ldw	r2,-4(fp)
 1000f08:	00c00104 	movi	r3,4
 1000f0c:	188bc83a 	sub	r5,r3,r2
 1000f10:	e13ffe17 	ldw	r4,-8(fp)
 1000f14:	1000b040 	call	1000b04 <skip>

	/* Ignore the palette information for now */
	skip(fp, num_colors*4);

	/* read the bitmap */
	for (index = bitmap->height-1; index >=0; index--) {
 1000f18:	e0bffa17 	ldw	r2,-24(fp)
 1000f1c:	10bfffc4 	addi	r2,r2,-1
 1000f20:	e0bffa15 	stw	r2,-24(fp)
 1000f24:	e0bffa17 	ldw	r2,-24(fp)
 1000f28:	1004403a 	cmpge	r2,r2,zero
 1000f2c:	103fa11e 	bne	r2,zero,1000db4 <load_bitmap+0x1b0>
			blue = ((color_data & 0x03)) * 31 / 3;
			bitmap->data[(index*bitmap->width) + x] = (blue << 11 ) + (green << 5 ) + (red);
		}
		if (bitmap->width % 4) skip(fp, (4 - bitmap->width % 4));
	}
	sdcard_fclose(fp);
 1000f30:	e13ffb0f 	ldh	r4,-20(fp)
 1000f34:	10005dc0 	call	10005dc <sdcard_fclose>
	return bitmap;
 1000f38:	e0bffc17 	ldw	r2,-16(fp)
}
 1000f3c:	e037883a 	mov	sp,fp
 1000f40:	dfc00217 	ldw	ra,8(sp)
 1000f44:	df000117 	ldw	fp,4(sp)
 1000f48:	dc000017 	ldw	r16,0(sp)
 1000f4c:	dec00304 	addi	sp,sp,12
 1000f50:	f800283a 	ret

01000f54 <init>:
#include "audio.h"
#include "bitmap.h"

#define MAX_MESSAGE_LENGTH 30

void init() {
 1000f54:	defffe04 	addi	sp,sp,-8
 1000f58:	dfc00115 	stw	ra,4(sp)
 1000f5c:	df000015 	stw	fp,0(sp)
 1000f60:	d839883a 	mov	fp,sp
	initialize_vga();
 1000f64:	10002040 	call	1000204 <initialize_vga>
	initialize_sdcard();
 1000f68:	10004fc0 	call	10004fc <initialize_sdcard>
	alt_timestamp_start();
 1000f6c:	10139400 	call	1013940 <alt_timestamp_start>
	initialize_audio();
 1000f70:	100085c0 	call	100085c <initialize_audio>
}
 1000f74:	e037883a 	mov	sp,fp
 1000f78:	dfc00117 	ldw	ra,4(sp)
 1000f7c:	df000017 	ldw	fp,0(sp)
 1000f80:	dec00204 	addi	sp,sp,8
 1000f84:	f800283a 	ret

01000f88 <messaging>:

void messaging() {
 1000f88:	defff204 	addi	sp,sp,-56
 1000f8c:	dfc00d15 	stw	ra,52(sp)
 1000f90:	df000c15 	stw	fp,48(sp)
 1000f94:	dc000b15 	stw	r16,44(sp)
 1000f98:	df000b04 	addi	fp,sp,44
	 int num_to_receive;
	 unsigned char data;
	 unsigned char parity;
	 unsigned char message[MAX_MESSAGE_LENGTH];

	 printf("UART Initialization\n");
 1000f9c:	010040b4 	movhi	r4,258
 1000fa0:	2130dd04 	addi	r4,r4,-15500
 1000fa4:	1002f200 	call	1002f20 <puts>
	 alt_up_rs232_dev* uart = alt_up_rs232_open_dev("/dev/rs232_0");
 1000fa8:	010040b4 	movhi	r4,258
 1000fac:	2130e204 	addi	r4,r4,-15480
 1000fb0:	10152c40 	call	10152c4 <alt_up_rs232_open_dev>
 1000fb4:	e0bff515 	stw	r2,-44(fp)


	 // main loop to send back data
	 while (1) {

		 printf("Clearing read buffer to start\n");
 1000fb8:	010040b4 	movhi	r4,258
 1000fbc:	2130e604 	addi	r4,r4,-15464
 1000fc0:	1002f200 	call	1002f20 <puts>
		 while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 1000fc4:	00000406 	br	1000fd8 <messaging+0x50>
		 alt_up_rs232_read_data(uart, &data, &parity);
 1000fc8:	e17ff804 	addi	r5,fp,-32
 1000fcc:	e1bff844 	addi	r6,fp,-31
 1000fd0:	e13ff517 	ldw	r4,-44(fp)
 1000fd4:	101512c0 	call	101512c <alt_up_rs232_read_data>

	 // main loop to send back data
	 while (1) {

		 printf("Clearing read buffer to start\n");
		 while (alt_up_rs232_get_used_space_in_read_FIFO(uart)) {
 1000fd8:	e13ff517 	ldw	r4,-44(fp)
 1000fdc:	10150180 	call	1015018 <alt_up_rs232_get_used_space_in_read_FIFO>
 1000fe0:	1004c03a 	cmpne	r2,r2,zero
 1000fe4:	103ff81e 	bne	r2,zero,1000fc8 <messaging+0x40>
		 alt_up_rs232_read_data(uart, &data, &parity);
		 }

		 // wait for something to be in the buffer
		 printf("Waiting for some data from the Middleman\n");
 1000fe8:	010040b4 	movhi	r4,258
 1000fec:	2130ee04 	addi	r4,r4,-15432
 1000ff0:	1002f200 	call	1002f20 <puts>
		 while (alt_up_rs232_get_used_space_in_read_FIFO(uart) == 0)
 1000ff4:	e13ff517 	ldw	r4,-44(fp)
 1000ff8:	10150180 	call	1015018 <alt_up_rs232_get_used_space_in_read_FIFO>
 1000ffc:	1005003a 	cmpeq	r2,r2,zero
 1001000:	103ffc1e 	bne	r2,zero,1000ff4 <messaging+0x6c>
			 ;

		 // save data in a character array
		 alt_up_rs232_read_data(uart, &data, &parity);
 1001004:	e17ff804 	addi	r5,fp,-32
 1001008:	e1bff844 	addi	r6,fp,-31
 100100c:	e13ff517 	ldw	r4,-44(fp)
 1001010:	101512c0 	call	101512c <alt_up_rs232_read_data>
		 num_to_receive = (int)data;
 1001014:	e0bff803 	ldbu	r2,-32(fp)
 1001018:	10803fcc 	andi	r2,r2,255
 100101c:	e0bff615 	stw	r2,-40(fp)

		 printf("About to receive %d characters:\n", num_to_receive);
 1001020:	010040b4 	movhi	r4,258
 1001024:	2130f904 	addi	r4,r4,-15388
 1001028:	e17ff617 	ldw	r5,-40(fp)
 100102c:	1002de40 	call	1002de4 <printf>
		 for (i = 0; i < num_to_receive; i++) {
 1001030:	e03ff715 	stw	zero,-36(fp)
 1001034:	00001306 	br	1001084 <messaging+0xfc>
			 while (alt_up_rs232_get_used_space_in_read_FIFO(uart) == 0)
 1001038:	e13ff517 	ldw	r4,-44(fp)
 100103c:	10150180 	call	1015018 <alt_up_rs232_get_used_space_in_read_FIFO>
 1001040:	1005003a 	cmpeq	r2,r2,zero
 1001044:	103ffc1e 	bne	r2,zero,1001038 <messaging+0xb0>
				 ;
			 alt_up_rs232_read_data(uart, &data, &parity);
 1001048:	e17ff804 	addi	r5,fp,-32
 100104c:	e1bff844 	addi	r6,fp,-31
 1001050:	e13ff517 	ldw	r4,-44(fp)
 1001054:	101512c0 	call	101512c <alt_up_rs232_read_data>
			 printf("%c", data);
 1001058:	e0bff803 	ldbu	r2,-32(fp)
 100105c:	11003fcc 	andi	r4,r2,255
 1001060:	1002e5c0 	call	1002e5c <putchar>
			 message[i] = data;
 1001064:	e0fff717 	ldw	r3,-36(fp)
 1001068:	e13ff803 	ldbu	r4,-32(fp)
 100106c:	e0bff884 	addi	r2,fp,-30
 1001070:	10c5883a 	add	r2,r2,r3
 1001074:	11000005 	stb	r4,0(r2)
		 // save data in a character array
		 alt_up_rs232_read_data(uart, &data, &parity);
		 num_to_receive = (int)data;

		 printf("About to receive %d characters:\n", num_to_receive);
		 for (i = 0; i < num_to_receive; i++) {
 1001078:	e0bff717 	ldw	r2,-36(fp)
 100107c:	10800044 	addi	r2,r2,1
 1001080:	e0bff715 	stw	r2,-36(fp)
 1001084:	e0fff717 	ldw	r3,-36(fp)
 1001088:	e0bff617 	ldw	r2,-40(fp)
 100108c:	18bfea16 	blt	r3,r2,1001038 <messaging+0xb0>
				 ;
			 alt_up_rs232_read_data(uart, &data, &parity);
			 printf("%c", data);
			 message[i] = data;
		 }
		 message[i] = '\0';
 1001090:	e0fff717 	ldw	r3,-36(fp)
 1001094:	e0bff884 	addi	r2,fp,-30
 1001098:	10c5883a 	add	r2,r2,r3
 100109c:	10000005 	stb	zero,0(r2)

		 printf("\n%s", message);
 10010a0:	e17ff884 	addi	r5,fp,-30
 10010a4:	010040b4 	movhi	r4,258
 10010a8:	21310204 	addi	r4,r4,-15352
 10010ac:	1002de40 	call	1002de4 <printf>

		 // Now send the actual message to the Middleman
		 alt_up_rs232_write_data(uart, (unsigned char) strlen(message));
 10010b0:	e13ff884 	addi	r4,fp,-30
 10010b4:	10030b40 	call	10030b4 <strlen>
 10010b8:	11403fcc 	andi	r5,r2,255
 10010bc:	e13ff517 	ldw	r4,-44(fp)
 10010c0:	10150e40 	call	10150e4 <alt_up_rs232_write_data>
		 for (i = 0; i < strlen(message); i++) {
 10010c4:	e03ff715 	stw	zero,-36(fp)
 10010c8:	00000a06 	br	10010f4 <messaging+0x16c>
			 alt_up_rs232_write_data(uart, message[i]);
 10010cc:	e0fff717 	ldw	r3,-36(fp)
 10010d0:	e0bff884 	addi	r2,fp,-30
 10010d4:	10c5883a 	add	r2,r2,r3
 10010d8:	10800003 	ldbu	r2,0(r2)
 10010dc:	11403fcc 	andi	r5,r2,255
 10010e0:	e13ff517 	ldw	r4,-44(fp)
 10010e4:	10150e40 	call	10150e4 <alt_up_rs232_write_data>

		 printf("\n%s", message);

		 // Now send the actual message to the Middleman
		 alt_up_rs232_write_data(uart, (unsigned char) strlen(message));
		 for (i = 0; i < strlen(message); i++) {
 10010e8:	e0bff717 	ldw	r2,-36(fp)
 10010ec:	10800044 	addi	r2,r2,1
 10010f0:	e0bff715 	stw	r2,-36(fp)
 10010f4:	e43ff717 	ldw	r16,-36(fp)
 10010f8:	e13ff884 	addi	r4,fp,-30
 10010fc:	10030b40 	call	10030b4 <strlen>
 1001100:	80bff236 	bltu	r16,r2,10010cc <messaging+0x144>
			 alt_up_rs232_write_data(uart, message[i]);
		 }

		 printf("\nMessage has been sent! Please send another message\n");
 1001104:	010040b4 	movhi	r4,258
 1001108:	21310304 	addi	r4,r4,-15348
 100110c:	1002f200 	call	1002f20 <puts>

	 }
 1001110:	003fa906 	br	1000fb8 <messaging+0x30>

01001114 <initialize_dealer>:
  BET,
  GAME_OVER
} GameState;

/* Method definitions */
void initialize_dealer(int number_players) {
 1001114:	defff904 	addi	sp,sp,-28
 1001118:	dfc00615 	stw	ra,24(sp)
 100111c:	df000515 	stw	fp,20(sp)
 1001120:	dc000415 	stw	r16,16(sp)
 1001124:	df000404 	addi	fp,sp,16
 1001128:	e13fff15 	stw	r4,-4(fp)
  dealer = malloc(sizeof(Dealer));
 100112c:	01000804 	movi	r4,32
 1001130:	10026900 	call	1002690 <malloc>
 1001134:	d0a72515 	stw	r2,-25452(gp)

  /* Setup deck of cards */
  dealer->cards_in_deck = 52;
 1001138:	d0e72517 	ldw	r3,-25452(gp)
 100113c:	00800d04 	movi	r2,52
 1001140:	18800245 	stb	r2,9(r3)
  dealer->deck = malloc(sizeof(Card) * 52);
 1001144:	d4272517 	ldw	r16,-25452(gp)
 1001148:	01001a04 	movi	r4,104
 100114c:	10026900 	call	1002690 <malloc>
 1001150:	80800115 	stw	r2,4(r16)
  int i, j;
  for (i=0; i<4; i++) {
 1001154:	e03ffd15 	stw	zero,-12(fp)
 1001158:	00002306 	br	10011e8 <initialize_dealer+0xd4>
    for (j=0; j<13; j++) {
 100115c:	e03ffc15 	stw	zero,-16(fp)
 1001160:	00001b06 	br	10011d0 <initialize_dealer+0xbc>
      dealer->deck[i*13+j].suite = i;
 1001164:	d0a72517 	ldw	r2,-25452(gp)
 1001168:	14000117 	ldw	r16,4(r2)
 100116c:	e13ffd17 	ldw	r4,-12(fp)
 1001170:	01400344 	movi	r5,13
 1001174:	10026440 	call	1002644 <__mulsi3>
 1001178:	1007883a 	mov	r3,r2
 100117c:	e0bffc17 	ldw	r2,-16(fp)
 1001180:	1885883a 	add	r2,r3,r2
 1001184:	1085883a 	add	r2,r2,r2
 1001188:	8087883a 	add	r3,r16,r2
 100118c:	e0bffd17 	ldw	r2,-12(fp)
 1001190:	18800045 	stb	r2,1(r3)
      dealer->deck[i*13+j].value = j;
 1001194:	d0a72517 	ldw	r2,-25452(gp)
 1001198:	14000117 	ldw	r16,4(r2)
 100119c:	e13ffd17 	ldw	r4,-12(fp)
 10011a0:	01400344 	movi	r5,13
 10011a4:	10026440 	call	1002644 <__mulsi3>
 10011a8:	1007883a 	mov	r3,r2
 10011ac:	e0bffc17 	ldw	r2,-16(fp)
 10011b0:	1885883a 	add	r2,r3,r2
 10011b4:	1085883a 	add	r2,r2,r2
 10011b8:	8087883a 	add	r3,r16,r2
 10011bc:	e0bffc17 	ldw	r2,-16(fp)
 10011c0:	18800005 	stb	r2,0(r3)
  /* Setup deck of cards */
  dealer->cards_in_deck = 52;
  dealer->deck = malloc(sizeof(Card) * 52);
  int i, j;
  for (i=0; i<4; i++) {
    for (j=0; j<13; j++) {
 10011c4:	e0bffc17 	ldw	r2,-16(fp)
 10011c8:	10800044 	addi	r2,r2,1
 10011cc:	e0bffc15 	stw	r2,-16(fp)
 10011d0:	e0bffc17 	ldw	r2,-16(fp)
 10011d4:	10800350 	cmplti	r2,r2,13
 10011d8:	103fe21e 	bne	r2,zero,1001164 <initialize_dealer+0x50>

  /* Setup deck of cards */
  dealer->cards_in_deck = 52;
  dealer->deck = malloc(sizeof(Card) * 52);
  int i, j;
  for (i=0; i<4; i++) {
 10011dc:	e0bffd17 	ldw	r2,-12(fp)
 10011e0:	10800044 	addi	r2,r2,1
 10011e4:	e0bffd15 	stw	r2,-12(fp)
 10011e8:	e0bffd17 	ldw	r2,-12(fp)
 10011ec:	10800110 	cmplti	r2,r2,4
 10011f0:	103fda1e 	bne	r2,zero,100115c <initialize_dealer+0x48>
    }
  }

  /* Shuffle cards in deck */
  Card temp;
  for (i=0; i<51; i++) {
 10011f4:	e03ffd15 	stw	zero,-12(fp)
 10011f8:	00002e06 	br	10012b4 <initialize_dealer+0x1a0>
    temp = dealer->deck[i];
 10011fc:	d0a72517 	ldw	r2,-25452(gp)
 1001200:	10c00117 	ldw	r3,4(r2)
 1001204:	e0bffd17 	ldw	r2,-12(fp)
 1001208:	1085883a 	add	r2,r2,r2
 100120c:	1887883a 	add	r3,r3,r2
 1001210:	18800003 	ldbu	r2,0(r3)
 1001214:	e0bffe05 	stb	r2,-8(fp)
 1001218:	18800043 	ldbu	r2,1(r3)
 100121c:	e0bffe45 	stb	r2,-7(fp)
    j = rand()%(52-(i+1)) + (i+1);
 1001220:	1002f500 	call	1002f50 <rand>
 1001224:	1009883a 	mov	r4,r2
 1001228:	00c00cc4 	movi	r3,51
 100122c:	e0bffd17 	ldw	r2,-12(fp)
 1001230:	188bc83a 	sub	r5,r3,r2
 1001234:	10025d40 	call	10025d4 <__modsi3>
 1001238:	1007883a 	mov	r3,r2
 100123c:	e0bffd17 	ldw	r2,-12(fp)
 1001240:	1885883a 	add	r2,r3,r2
 1001244:	10800044 	addi	r2,r2,1
 1001248:	e0bffc15 	stw	r2,-16(fp)
    dealer->deck[i] = dealer->deck[j];
 100124c:	d0a72517 	ldw	r2,-25452(gp)
 1001250:	10c00117 	ldw	r3,4(r2)
 1001254:	e0bffd17 	ldw	r2,-12(fp)
 1001258:	1085883a 	add	r2,r2,r2
 100125c:	1889883a 	add	r4,r3,r2
 1001260:	d0a72517 	ldw	r2,-25452(gp)
 1001264:	10c00117 	ldw	r3,4(r2)
 1001268:	e0bffc17 	ldw	r2,-16(fp)
 100126c:	1085883a 	add	r2,r2,r2
 1001270:	1887883a 	add	r3,r3,r2
 1001274:	18800003 	ldbu	r2,0(r3)
 1001278:	20800005 	stb	r2,0(r4)
 100127c:	18800043 	ldbu	r2,1(r3)
 1001280:	20800045 	stb	r2,1(r4)
    dealer->deck[j] = temp;
 1001284:	d0a72517 	ldw	r2,-25452(gp)
 1001288:	10c00117 	ldw	r3,4(r2)
 100128c:	e0bffc17 	ldw	r2,-16(fp)
 1001290:	1085883a 	add	r2,r2,r2
 1001294:	1887883a 	add	r3,r3,r2
 1001298:	e0bffe03 	ldbu	r2,-8(fp)
 100129c:	18800005 	stb	r2,0(r3)
 10012a0:	e0bffe43 	ldbu	r2,-7(fp)
 10012a4:	18800045 	stb	r2,1(r3)
    }
  }

  /* Shuffle cards in deck */
  Card temp;
  for (i=0; i<51; i++) {
 10012a8:	e0bffd17 	ldw	r2,-12(fp)
 10012ac:	10800044 	addi	r2,r2,1
 10012b0:	e0bffd15 	stw	r2,-12(fp)
 10012b4:	e0bffd17 	ldw	r2,-12(fp)
 10012b8:	10800cd0 	cmplti	r2,r2,51
 10012bc:	103fcf1e 	bne	r2,zero,10011fc <initialize_dealer+0xe8>
    dealer->deck[i] = dealer->deck[j];
    dealer->deck[j] = temp;
  }

  /* Setup players */
  dealer->number_players = number_players;
 10012c0:	d0e72517 	ldw	r3,-25452(gp)
 10012c4:	e0bfff17 	ldw	r2,-4(fp)
 10012c8:	18800205 	stb	r2,8(r3)
  dealer->players = malloc(sizeof(Player) * number_players);
 10012cc:	d4272517 	ldw	r16,-25452(gp)
 10012d0:	e13fff17 	ldw	r4,-4(fp)
 10012d4:	01400504 	movi	r5,20
 10012d8:	10026440 	call	1002644 <__mulsi3>
 10012dc:	1009883a 	mov	r4,r2
 10012e0:	10026900 	call	1002690 <malloc>
 10012e4:	80800015 	stw	r2,0(r16)
  for (i=0; i<number_players; i++) {
 10012e8:	e03ffd15 	stw	zero,-12(fp)
 10012ec:	00001a06 	br	1001358 <initialize_dealer+0x244>
    dealer->players[i].active = true;
 10012f0:	d0a72517 	ldw	r2,-25452(gp)
 10012f4:	14000017 	ldw	r16,0(r2)
 10012f8:	e13ffd17 	ldw	r4,-12(fp)
 10012fc:	01400504 	movi	r5,20
 1001300:	10026440 	call	1002644 <__mulsi3>
 1001304:	8087883a 	add	r3,r16,r2
 1001308:	00800044 	movi	r2,1
 100130c:	18800205 	stb	r2,8(r3)
    dealer->players[i].money = 0;
 1001310:	d0a72517 	ldw	r2,-25452(gp)
 1001314:	14000017 	ldw	r16,0(r2)
 1001318:	e13ffd17 	ldw	r4,-12(fp)
 100131c:	01400504 	movi	r5,20
 1001320:	10026440 	call	1002644 <__mulsi3>
 1001324:	8085883a 	add	r2,r16,r2
 1001328:	10000415 	stw	zero,16(r2)
    dealer->players[i].total_money = 3000;
 100132c:	d0a72517 	ldw	r2,-25452(gp)
 1001330:	14000017 	ldw	r16,0(r2)
 1001334:	e13ffd17 	ldw	r4,-12(fp)
 1001338:	01400504 	movi	r5,20
 100133c:	10026440 	call	1002644 <__mulsi3>
 1001340:	8087883a 	add	r3,r16,r2
 1001344:	0082ee04 	movi	r2,3000
 1001348:	18800115 	stw	r2,4(r3)
  }

  /* Setup players */
  dealer->number_players = number_players;
  dealer->players = malloc(sizeof(Player) * number_players);
  for (i=0; i<number_players; i++) {
 100134c:	e0bffd17 	ldw	r2,-12(fp)
 1001350:	10800044 	addi	r2,r2,1
 1001354:	e0bffd15 	stw	r2,-12(fp)
 1001358:	e0fffd17 	ldw	r3,-12(fp)
 100135c:	e0bfff17 	ldw	r2,-4(fp)
 1001360:	18bfe316 	blt	r3,r2,10012f0 <initialize_dealer+0x1dc>
    dealer->players[i].money = 0;
    dealer->players[i].total_money = 3000;
  }

  /* Cards on table, zero in the beginning */
  dealer->number_cards_on_table = 0;
 1001364:	d0a72517 	ldw	r2,-25452(gp)
 1001368:	10000505 	stb	zero,20(r2)
  dealer->pot = 0;
 100136c:	d0a72517 	ldw	r2,-25452(gp)
 1001370:	10000615 	stw	zero,24(r2)
  dealer->current_bet = 0;
 1001374:	d0a72517 	ldw	r2,-25452(gp)
 1001378:	10000715 	stw	zero,28(r2)
}
 100137c:	e037883a 	mov	sp,fp
 1001380:	dfc00217 	ldw	ra,8(sp)
 1001384:	df000117 	ldw	fp,4(sp)
 1001388:	dc000017 	ldw	r16,0(sp)
 100138c:	dec00304 	addi	sp,sp,12
 1001390:	f800283a 	ret

01001394 <get_card_from_deck>:

/* Returns a random card from the deck */
Card get_card_from_deck() {
 1001394:	defffd04 	addi	sp,sp,-12
 1001398:	df000215 	stw	fp,8(sp)
 100139c:	df000204 	addi	fp,sp,8
  dealer->cards_in_deck--;
 10013a0:	d0e72517 	ldw	r3,-25452(gp)
 10013a4:	18800243 	ldbu	r2,9(r3)
 10013a8:	10bfffc4 	addi	r2,r2,-1
 10013ac:	18800245 	stb	r2,9(r3)
  return dealer->deck[dealer->cards_in_deck];
 10013b0:	d0a72517 	ldw	r2,-25452(gp)
 10013b4:	10c00117 	ldw	r3,4(r2)
 10013b8:	d0a72517 	ldw	r2,-25452(gp)
 10013bc:	10800243 	ldbu	r2,9(r2)
 10013c0:	10803fcc 	andi	r2,r2,255
 10013c4:	1080201c 	xori	r2,r2,128
 10013c8:	10bfe004 	addi	r2,r2,-128
 10013cc:	1085883a 	add	r2,r2,r2
 10013d0:	1887883a 	add	r3,r3,r2
 10013d4:	18800003 	ldbu	r2,0(r3)
 10013d8:	e0bffe05 	stb	r2,-8(fp)
 10013dc:	18800043 	ldbu	r2,1(r3)
 10013e0:	e0bffe45 	stb	r2,-7(fp)
 10013e4:	e03fff15 	stw	zero,-4(fp)
 10013e8:	e0bffe03 	ldbu	r2,-8(fp)
 10013ec:	10c03fcc 	andi	r3,r2,255
 10013f0:	00bfc004 	movi	r2,-256
 10013f4:	e13fff17 	ldw	r4,-4(fp)
 10013f8:	2084703a 	and	r2,r4,r2
 10013fc:	10c4b03a 	or	r2,r2,r3
 1001400:	e0bfff15 	stw	r2,-4(fp)
 1001404:	e0bffe43 	ldbu	r2,-7(fp)
 1001408:	10803fcc 	andi	r2,r2,255
 100140c:	1006923a 	slli	r3,r2,8
 1001410:	00bffff4 	movhi	r2,65535
 1001414:	10803fc4 	addi	r2,r2,255
 1001418:	e13fff17 	ldw	r4,-4(fp)
 100141c:	2084703a 	and	r2,r4,r2
 1001420:	10c4b03a 	or	r2,r2,r3
 1001424:	e0bfff15 	stw	r2,-4(fp)
 1001428:	e0bfff17 	ldw	r2,-4(fp)
}
 100142c:	e037883a 	mov	sp,fp
 1001430:	df000017 	ldw	fp,0(sp)
 1001434:	dec00104 	addi	sp,sp,4
 1001438:	f800283a 	ret

0100143c <deal_hands>:

/* Deals two cards to all players in the game */
void deal_hands() {
 100143c:	defffc04 	addi	sp,sp,-16
 1001440:	dfc00315 	stw	ra,12(sp)
 1001444:	df000215 	stw	fp,8(sp)
 1001448:	dc000115 	stw	r16,4(sp)
 100144c:	df000104 	addi	fp,sp,4
  int i;
  for (i=0; i<dealer->number_players; i++) {
 1001450:	e03fff15 	stw	zero,-4(fp)
 1001454:	00003a06 	br	1001540 <deal_hands+0x104>
    dealer->players[i].hand[0] = get_card_from_deck();
 1001458:	d0a72517 	ldw	r2,-25452(gp)
 100145c:	14000017 	ldw	r16,0(r2)
 1001460:	e13fff17 	ldw	r4,-4(fp)
 1001464:	01400504 	movi	r5,20
 1001468:	10026440 	call	1002644 <__mulsi3>
 100146c:	80a1883a 	add	r16,r16,r2
 1001470:	10013940 	call	1001394 <get_card_from_deck>
 1001474:	117fffcc 	andi	r5,r2,65535
 1001478:	2960001c 	xori	r5,r5,32768
 100147c:	29600004 	addi	r5,r5,-32768
 1001480:	28803fcc 	andi	r2,r5,255
 1001484:	11003fcc 	andi	r4,r2,255
 1001488:	80c00017 	ldw	r3,0(r16)
 100148c:	00bfc004 	movi	r2,-256
 1001490:	1884703a 	and	r2,r3,r2
 1001494:	1104b03a 	or	r2,r2,r4
 1001498:	80800015 	stw	r2,0(r16)
 100149c:	2804d23a 	srli	r2,r5,8
 10014a0:	10803fcc 	andi	r2,r2,255
 10014a4:	10803fcc 	andi	r2,r2,255
 10014a8:	1008923a 	slli	r4,r2,8
 10014ac:	80c00017 	ldw	r3,0(r16)
 10014b0:	00bffff4 	movhi	r2,65535
 10014b4:	10803fc4 	addi	r2,r2,255
 10014b8:	1884703a 	and	r2,r3,r2
 10014bc:	1104b03a 	or	r2,r2,r4
 10014c0:	80800015 	stw	r2,0(r16)
    dealer->players[i].hand[1] = get_card_from_deck();
 10014c4:	d0a72517 	ldw	r2,-25452(gp)
 10014c8:	14000017 	ldw	r16,0(r2)
 10014cc:	e13fff17 	ldw	r4,-4(fp)
 10014d0:	01400504 	movi	r5,20
 10014d4:	10026440 	call	1002644 <__mulsi3>
 10014d8:	80a1883a 	add	r16,r16,r2
 10014dc:	10013940 	call	1001394 <get_card_from_deck>
 10014e0:	117fffcc 	andi	r5,r2,65535
 10014e4:	2960001c 	xori	r5,r5,32768
 10014e8:	29600004 	addi	r5,r5,-32768
 10014ec:	28803fcc 	andi	r2,r5,255
 10014f0:	11003fcc 	andi	r4,r2,255
 10014f4:	80c0008b 	ldhu	r3,2(r16)
 10014f8:	00bfc004 	movi	r2,-256
 10014fc:	1884703a 	and	r2,r3,r2
 1001500:	1007883a 	mov	r3,r2
 1001504:	2005883a 	mov	r2,r4
 1001508:	1884b03a 	or	r2,r3,r2
 100150c:	8080008d 	sth	r2,2(r16)
 1001510:	2804d23a 	srli	r2,r5,8
 1001514:	10803fcc 	andi	r2,r2,255
 1001518:	1008923a 	slli	r4,r2,8
 100151c:	8080008b 	ldhu	r2,2(r16)
 1001520:	10803fcc 	andi	r2,r2,255
 1001524:	1007883a 	mov	r3,r2
 1001528:	2005883a 	mov	r2,r4
 100152c:	1884b03a 	or	r2,r3,r2
 1001530:	8080008d 	sth	r2,2(r16)
}

/* Deals two cards to all players in the game */
void deal_hands() {
  int i;
  for (i=0; i<dealer->number_players; i++) {
 1001534:	e0bfff17 	ldw	r2,-4(fp)
 1001538:	10800044 	addi	r2,r2,1
 100153c:	e0bfff15 	stw	r2,-4(fp)
 1001540:	d0a72517 	ldw	r2,-25452(gp)
 1001544:	10800203 	ldbu	r2,8(r2)
 1001548:	10c03fcc 	andi	r3,r2,255
 100154c:	18c0201c 	xori	r3,r3,128
 1001550:	18ffe004 	addi	r3,r3,-128
 1001554:	e0bfff17 	ldw	r2,-4(fp)
 1001558:	10ffbf16 	blt	r2,r3,1001458 <deal_hands+0x1c>
    dealer->players[i].hand[0] = get_card_from_deck();
    dealer->players[i].hand[1] = get_card_from_deck();
  }
}
 100155c:	e037883a 	mov	sp,fp
 1001560:	dfc00217 	ldw	ra,8(sp)
 1001564:	df000117 	ldw	fp,4(sp)
 1001568:	dc000017 	ldw	r16,0(sp)
 100156c:	dec00304 	addi	sp,sp,12
 1001570:	f800283a 	ret

01001574 <flop>:

/* Plays the flop */
void flop() {
 1001574:	defffd04 	addi	sp,sp,-12
 1001578:	dfc00215 	stw	ra,8(sp)
 100157c:	df000115 	stw	fp,4(sp)
 1001580:	dc000015 	stw	r16,0(sp)
 1001584:	d839883a 	mov	fp,sp
  dealer->cards_on_table[0] = get_card_from_deck();
 1001588:	d4272517 	ldw	r16,-25452(gp)
 100158c:	10013940 	call	1001394 <get_card_from_deck>
 1001590:	117fffcc 	andi	r5,r2,65535
 1001594:	2960001c 	xori	r5,r5,32768
 1001598:	29600004 	addi	r5,r5,-32768
 100159c:	28803fcc 	andi	r2,r5,255
 10015a0:	11003fcc 	andi	r4,r2,255
 10015a4:	80c0028b 	ldhu	r3,10(r16)
 10015a8:	00bfc004 	movi	r2,-256
 10015ac:	1884703a 	and	r2,r3,r2
 10015b0:	1007883a 	mov	r3,r2
 10015b4:	2005883a 	mov	r2,r4
 10015b8:	1884b03a 	or	r2,r3,r2
 10015bc:	8080028d 	sth	r2,10(r16)
 10015c0:	2804d23a 	srli	r2,r5,8
 10015c4:	10803fcc 	andi	r2,r2,255
 10015c8:	1008923a 	slli	r4,r2,8
 10015cc:	8080028b 	ldhu	r2,10(r16)
 10015d0:	10803fcc 	andi	r2,r2,255
 10015d4:	1007883a 	mov	r3,r2
 10015d8:	2005883a 	mov	r2,r4
 10015dc:	1884b03a 	or	r2,r3,r2
 10015e0:	8080028d 	sth	r2,10(r16)
  dealer->cards_on_table[1] = get_card_from_deck();
 10015e4:	d4272517 	ldw	r16,-25452(gp)
 10015e8:	10013940 	call	1001394 <get_card_from_deck>
 10015ec:	117fffcc 	andi	r5,r2,65535
 10015f0:	2960001c 	xori	r5,r5,32768
 10015f4:	29600004 	addi	r5,r5,-32768
 10015f8:	28803fcc 	andi	r2,r5,255
 10015fc:	11003fcc 	andi	r4,r2,255
 1001600:	80c00317 	ldw	r3,12(r16)
 1001604:	00bfc004 	movi	r2,-256
 1001608:	1884703a 	and	r2,r3,r2
 100160c:	1104b03a 	or	r2,r2,r4
 1001610:	80800315 	stw	r2,12(r16)
 1001614:	2804d23a 	srli	r2,r5,8
 1001618:	10803fcc 	andi	r2,r2,255
 100161c:	10803fcc 	andi	r2,r2,255
 1001620:	1008923a 	slli	r4,r2,8
 1001624:	80c00317 	ldw	r3,12(r16)
 1001628:	00bffff4 	movhi	r2,65535
 100162c:	10803fc4 	addi	r2,r2,255
 1001630:	1884703a 	and	r2,r3,r2
 1001634:	1104b03a 	or	r2,r2,r4
 1001638:	80800315 	stw	r2,12(r16)
  dealer->cards_on_table[2] = get_card_from_deck();
 100163c:	d4272517 	ldw	r16,-25452(gp)
 1001640:	10013940 	call	1001394 <get_card_from_deck>
 1001644:	117fffcc 	andi	r5,r2,65535
 1001648:	2960001c 	xori	r5,r5,32768
 100164c:	29600004 	addi	r5,r5,-32768
 1001650:	28803fcc 	andi	r2,r5,255
 1001654:	11003fcc 	andi	r4,r2,255
 1001658:	80c0038b 	ldhu	r3,14(r16)
 100165c:	00bfc004 	movi	r2,-256
 1001660:	1884703a 	and	r2,r3,r2
 1001664:	1007883a 	mov	r3,r2
 1001668:	2005883a 	mov	r2,r4
 100166c:	1884b03a 	or	r2,r3,r2
 1001670:	8080038d 	sth	r2,14(r16)
 1001674:	2804d23a 	srli	r2,r5,8
 1001678:	10803fcc 	andi	r2,r2,255
 100167c:	1008923a 	slli	r4,r2,8
 1001680:	8080038b 	ldhu	r2,14(r16)
 1001684:	10803fcc 	andi	r2,r2,255
 1001688:	1007883a 	mov	r3,r2
 100168c:	2005883a 	mov	r2,r4
 1001690:	1884b03a 	or	r2,r3,r2
 1001694:	8080038d 	sth	r2,14(r16)
  dealer->number_cards_on_table = 3;
 1001698:	d0e72517 	ldw	r3,-25452(gp)
 100169c:	008000c4 	movi	r2,3
 10016a0:	18800505 	stb	r2,20(r3)
}
 10016a4:	e037883a 	mov	sp,fp
 10016a8:	dfc00217 	ldw	ra,8(sp)
 10016ac:	df000117 	ldw	fp,4(sp)
 10016b0:	dc000017 	ldw	r16,0(sp)
 10016b4:	dec00304 	addi	sp,sp,12
 10016b8:	f800283a 	ret

010016bc <turn>:

/* Plays the turn */
void turn() {
 10016bc:	defffd04 	addi	sp,sp,-12
 10016c0:	dfc00215 	stw	ra,8(sp)
 10016c4:	df000115 	stw	fp,4(sp)
 10016c8:	dc000015 	stw	r16,0(sp)
 10016cc:	d839883a 	mov	fp,sp
  dealer->cards_on_table[3] = get_card_from_deck();
 10016d0:	d4272517 	ldw	r16,-25452(gp)
 10016d4:	10013940 	call	1001394 <get_card_from_deck>
 10016d8:	117fffcc 	andi	r5,r2,65535
 10016dc:	2960001c 	xori	r5,r5,32768
 10016e0:	29600004 	addi	r5,r5,-32768
 10016e4:	28803fcc 	andi	r2,r5,255
 10016e8:	11003fcc 	andi	r4,r2,255
 10016ec:	80c00417 	ldw	r3,16(r16)
 10016f0:	00bfc004 	movi	r2,-256
 10016f4:	1884703a 	and	r2,r3,r2
 10016f8:	1104b03a 	or	r2,r2,r4
 10016fc:	80800415 	stw	r2,16(r16)
 1001700:	2804d23a 	srli	r2,r5,8
 1001704:	10803fcc 	andi	r2,r2,255
 1001708:	10803fcc 	andi	r2,r2,255
 100170c:	1008923a 	slli	r4,r2,8
 1001710:	80c00417 	ldw	r3,16(r16)
 1001714:	00bffff4 	movhi	r2,65535
 1001718:	10803fc4 	addi	r2,r2,255
 100171c:	1884703a 	and	r2,r3,r2
 1001720:	1104b03a 	or	r2,r2,r4
 1001724:	80800415 	stw	r2,16(r16)
  dealer->number_cards_on_table = 4;
 1001728:	d0e72517 	ldw	r3,-25452(gp)
 100172c:	00800104 	movi	r2,4
 1001730:	18800505 	stb	r2,20(r3)
}
 1001734:	e037883a 	mov	sp,fp
 1001738:	dfc00217 	ldw	ra,8(sp)
 100173c:	df000117 	ldw	fp,4(sp)
 1001740:	dc000017 	ldw	r16,0(sp)
 1001744:	dec00304 	addi	sp,sp,12
 1001748:	f800283a 	ret

0100174c <river>:

/* Plays the flop */
void river() {
 100174c:	defffd04 	addi	sp,sp,-12
 1001750:	dfc00215 	stw	ra,8(sp)
 1001754:	df000115 	stw	fp,4(sp)
 1001758:	dc000015 	stw	r16,0(sp)
 100175c:	d839883a 	mov	fp,sp
  dealer->cards_on_table[4] = get_card_from_deck();
 1001760:	d4272517 	ldw	r16,-25452(gp)
 1001764:	10013940 	call	1001394 <get_card_from_deck>
 1001768:	117fffcc 	andi	r5,r2,65535
 100176c:	2960001c 	xori	r5,r5,32768
 1001770:	29600004 	addi	r5,r5,-32768
 1001774:	28803fcc 	andi	r2,r5,255
 1001778:	11003fcc 	andi	r4,r2,255
 100177c:	80c0048b 	ldhu	r3,18(r16)
 1001780:	00bfc004 	movi	r2,-256
 1001784:	1884703a 	and	r2,r3,r2
 1001788:	1007883a 	mov	r3,r2
 100178c:	2005883a 	mov	r2,r4
 1001790:	1884b03a 	or	r2,r3,r2
 1001794:	8080048d 	sth	r2,18(r16)
 1001798:	2804d23a 	srli	r2,r5,8
 100179c:	10803fcc 	andi	r2,r2,255
 10017a0:	1008923a 	slli	r4,r2,8
 10017a4:	8080048b 	ldhu	r2,18(r16)
 10017a8:	10803fcc 	andi	r2,r2,255
 10017ac:	1007883a 	mov	r3,r2
 10017b0:	2005883a 	mov	r2,r4
 10017b4:	1884b03a 	or	r2,r3,r2
 10017b8:	8080048d 	sth	r2,18(r16)
  dealer->number_cards_on_table = 5;
 10017bc:	d0e72517 	ldw	r3,-25452(gp)
 10017c0:	00800144 	movi	r2,5
 10017c4:	18800505 	stb	r2,20(r3)
}
 10017c8:	e037883a 	mov	sp,fp
 10017cc:	dfc00217 	ldw	ra,8(sp)
 10017d0:	df000117 	ldw	fp,4(sp)
 10017d4:	dc000017 	ldw	r16,0(sp)
 10017d8:	dec00304 	addi	sp,sp,12
 10017dc:	f800283a 	ret

010017e0 <get_bet_for_player>:

/* Gets player bet if player still playing
 * TODO change in de2 env
 */
int get_bet_for_player(int pid) {
 10017e0:	defff404 	addi	sp,sp,-48
 10017e4:	dfc00b15 	stw	ra,44(sp)
 10017e8:	df000a15 	stw	fp,40(sp)
 10017ec:	dcc00915 	stw	r19,36(sp)
 10017f0:	dc800815 	stw	r18,32(sp)
 10017f4:	dc400715 	stw	r17,28(sp)
 10017f8:	dc000615 	stw	r16,24(sp)
 10017fc:	df000604 	addi	fp,sp,24
 1001800:	e13ffe15 	stw	r4,-8(fp)
  printf("\n\n----------------------------------------");
 1001804:	010040b4 	movhi	r4,258
 1001808:	21311004 	addi	r4,r4,-15296
 100180c:	1002de40 	call	1002de4 <printf>
  printf("\nYour total money %d and bet money %d", dealer->players[pid].total_money, dealer->players[pid].money);
 1001810:	d0a72517 	ldw	r2,-25452(gp)
 1001814:	14000017 	ldw	r16,0(r2)
 1001818:	e13ffe17 	ldw	r4,-8(fp)
 100181c:	01400504 	movi	r5,20
 1001820:	10026440 	call	1002644 <__mulsi3>
 1001824:	8085883a 	add	r2,r16,r2
 1001828:	14400117 	ldw	r17,4(r2)
 100182c:	d0a72517 	ldw	r2,-25452(gp)
 1001830:	14000017 	ldw	r16,0(r2)
 1001834:	e13ffe17 	ldw	r4,-8(fp)
 1001838:	01400504 	movi	r5,20
 100183c:	10026440 	call	1002644 <__mulsi3>
 1001840:	8085883a 	add	r2,r16,r2
 1001844:	11800417 	ldw	r6,16(r2)
 1001848:	010040b4 	movhi	r4,258
 100184c:	21311b04 	addi	r4,r4,-15252
 1001850:	880b883a 	mov	r5,r17
 1001854:	1002de40 	call	1002de4 <printf>
  printf("\nPlayer %d\n Enter your action (0 - Bet, 1 - Call, 2 - Check, 3 - Raise, 4 - Fold): ", pid);
 1001858:	010040b4 	movhi	r4,258
 100185c:	21312504 	addi	r4,r4,-15212
 1001860:	e17ffe17 	ldw	r5,-8(fp)
 1001864:	1002de40 	call	1002de4 <printf>
  scanf("%d", &dealer->players[pid].action);
 1001868:	d0a72517 	ldw	r2,-25452(gp)
 100186c:	14000017 	ldw	r16,0(r2)
 1001870:	e13ffe17 	ldw	r4,-8(fp)
 1001874:	01400504 	movi	r5,20
 1001878:	10026440 	call	1002644 <__mulsi3>
 100187c:	8085883a 	add	r2,r16,r2
 1001880:	11400304 	addi	r5,r2,12
 1001884:	010040b4 	movhi	r4,258
 1001888:	21313a04 	addi	r4,r4,-15128
 100188c:	100306c0 	call	100306c <scanf>

  if (dealer->players[pid].action == START_BET) {
 1001890:	d0a72517 	ldw	r2,-25452(gp)
 1001894:	14000017 	ldw	r16,0(r2)
 1001898:	e13ffe17 	ldw	r4,-8(fp)
 100189c:	01400504 	movi	r5,20
 10018a0:	10026440 	call	1002644 <__mulsi3>
 10018a4:	8085883a 	add	r2,r16,r2
 10018a8:	10800317 	ldw	r2,12(r2)
 10018ac:	1004c03a 	cmpne	r2,r2,zero
 10018b0:	1000281e 	bne	r2,zero,1001954 <get_bet_for_player+0x174>
    int m;
    printf("\nBetting value: ");
 10018b4:	010040b4 	movhi	r4,258
 10018b8:	21313b04 	addi	r4,r4,-15124
 10018bc:	1002de40 	call	1002de4 <printf>
    scanf("%d", &m);
 10018c0:	e17ffc04 	addi	r5,fp,-16
 10018c4:	010040b4 	movhi	r4,258
 10018c8:	21313a04 	addi	r4,r4,-15128
 10018cc:	100306c0 	call	100306c <scanf>
    dealer->current_bet = m;
 10018d0:	d0e72517 	ldw	r3,-25452(gp)
 10018d4:	e0bffc17 	ldw	r2,-16(fp)
 10018d8:	18800715 	stw	r2,28(r3)
    dealer->players[pid].money = m;
 10018dc:	d0a72517 	ldw	r2,-25452(gp)
 10018e0:	14000017 	ldw	r16,0(r2)
 10018e4:	e13ffe17 	ldw	r4,-8(fp)
 10018e8:	01400504 	movi	r5,20
 10018ec:	10026440 	call	1002644 <__mulsi3>
 10018f0:	8087883a 	add	r3,r16,r2
 10018f4:	e0bffc17 	ldw	r2,-16(fp)
 10018f8:	18800415 	stw	r2,16(r3)
    dealer->players[pid].total_money -= dealer->players[pid].money;
 10018fc:	d0a72517 	ldw	r2,-25452(gp)
 1001900:	14000017 	ldw	r16,0(r2)
 1001904:	e13ffe17 	ldw	r4,-8(fp)
 1001908:	01400504 	movi	r5,20
 100190c:	10026440 	call	1002644 <__mulsi3>
 1001910:	80a3883a 	add	r17,r16,r2
 1001914:	d0a72517 	ldw	r2,-25452(gp)
 1001918:	14000017 	ldw	r16,0(r2)
 100191c:	e13ffe17 	ldw	r4,-8(fp)
 1001920:	01400504 	movi	r5,20
 1001924:	10026440 	call	1002644 <__mulsi3>
 1001928:	8085883a 	add	r2,r16,r2
 100192c:	14800117 	ldw	r18,4(r2)
 1001930:	d0a72517 	ldw	r2,-25452(gp)
 1001934:	14000017 	ldw	r16,0(r2)
 1001938:	e13ffe17 	ldw	r4,-8(fp)
 100193c:	01400504 	movi	r5,20
 1001940:	10026440 	call	1002644 <__mulsi3>
 1001944:	8085883a 	add	r2,r16,r2
 1001948:	10800417 	ldw	r2,16(r2)
 100194c:	9085c83a 	sub	r2,r18,r2
 1001950:	88800115 	stw	r2,4(r17)
  }

  if (dealer->players[pid].action == CALL) {
 1001954:	d0a72517 	ldw	r2,-25452(gp)
 1001958:	14000017 	ldw	r16,0(r2)
 100195c:	e13ffe17 	ldw	r4,-8(fp)
 1001960:	01400504 	movi	r5,20
 1001964:	10026440 	call	1002644 <__mulsi3>
 1001968:	8085883a 	add	r2,r16,r2
 100196c:	10800317 	ldw	r2,12(r2)
 1001970:	10800058 	cmpnei	r2,r2,1
 1001974:	1000321e 	bne	r2,zero,1001a40 <get_bet_for_player+0x260>
    dealer->players[pid].total_money -= (dealer->current_bet - dealer->players[pid].money);
 1001978:	d0a72517 	ldw	r2,-25452(gp)
 100197c:	14000017 	ldw	r16,0(r2)
 1001980:	e13ffe17 	ldw	r4,-8(fp)
 1001984:	01400504 	movi	r5,20
 1001988:	10026440 	call	1002644 <__mulsi3>
 100198c:	80a3883a 	add	r17,r16,r2
 1001990:	d0a72517 	ldw	r2,-25452(gp)
 1001994:	14000017 	ldw	r16,0(r2)
 1001998:	e13ffe17 	ldw	r4,-8(fp)
 100199c:	01400504 	movi	r5,20
 10019a0:	10026440 	call	1002644 <__mulsi3>
 10019a4:	8085883a 	add	r2,r16,r2
 10019a8:	14800117 	ldw	r18,4(r2)
 10019ac:	d0a72517 	ldw	r2,-25452(gp)
 10019b0:	14c00717 	ldw	r19,28(r2)
 10019b4:	d0a72517 	ldw	r2,-25452(gp)
 10019b8:	14000017 	ldw	r16,0(r2)
 10019bc:	e13ffe17 	ldw	r4,-8(fp)
 10019c0:	01400504 	movi	r5,20
 10019c4:	10026440 	call	1002644 <__mulsi3>
 10019c8:	8085883a 	add	r2,r16,r2
 10019cc:	10800417 	ldw	r2,16(r2)
 10019d0:	9885c83a 	sub	r2,r19,r2
 10019d4:	9085c83a 	sub	r2,r18,r2
 10019d8:	88800115 	stw	r2,4(r17)
    dealer->players[pid].money += (dealer->current_bet - dealer->players[pid].money);
 10019dc:	d0a72517 	ldw	r2,-25452(gp)
 10019e0:	14000017 	ldw	r16,0(r2)
 10019e4:	e13ffe17 	ldw	r4,-8(fp)
 10019e8:	01400504 	movi	r5,20
 10019ec:	10026440 	call	1002644 <__mulsi3>
 10019f0:	80a3883a 	add	r17,r16,r2
 10019f4:	d0a72517 	ldw	r2,-25452(gp)
 10019f8:	14000017 	ldw	r16,0(r2)
 10019fc:	e13ffe17 	ldw	r4,-8(fp)
 1001a00:	01400504 	movi	r5,20
 1001a04:	10026440 	call	1002644 <__mulsi3>
 1001a08:	8085883a 	add	r2,r16,r2
 1001a0c:	14800417 	ldw	r18,16(r2)
 1001a10:	d0a72517 	ldw	r2,-25452(gp)
 1001a14:	14c00717 	ldw	r19,28(r2)
 1001a18:	d0a72517 	ldw	r2,-25452(gp)
 1001a1c:	14000017 	ldw	r16,0(r2)
 1001a20:	e13ffe17 	ldw	r4,-8(fp)
 1001a24:	01400504 	movi	r5,20
 1001a28:	10026440 	call	1002644 <__mulsi3>
 1001a2c:	8085883a 	add	r2,r16,r2
 1001a30:	10800417 	ldw	r2,16(r2)
 1001a34:	9885c83a 	sub	r2,r19,r2
 1001a38:	9085883a 	add	r2,r18,r2
 1001a3c:	88800415 	stw	r2,16(r17)
  }

  if (dealer->players[pid].action == RAISE) {
 1001a40:	d0a72517 	ldw	r2,-25452(gp)
 1001a44:	14000017 	ldw	r16,0(r2)
 1001a48:	e13ffe17 	ldw	r4,-8(fp)
 1001a4c:	01400504 	movi	r5,20
 1001a50:	10026440 	call	1002644 <__mulsi3>
 1001a54:	8085883a 	add	r2,r16,r2
 1001a58:	10800317 	ldw	r2,12(r2)
 1001a5c:	108000d8 	cmpnei	r2,r2,3
 1001a60:	10003f1e 	bne	r2,zero,1001b60 <get_bet_for_player+0x380>
    int m;
    printf("\nHow much do you want to raise by: ");
 1001a64:	010040b4 	movhi	r4,258
 1001a68:	21314004 	addi	r4,r4,-15104
 1001a6c:	1002de40 	call	1002de4 <printf>
    scanf("%d", &m);
 1001a70:	e17ffd04 	addi	r5,fp,-12
 1001a74:	010040b4 	movhi	r4,258
 1001a78:	21313a04 	addi	r4,r4,-15128
 1001a7c:	100306c0 	call	100306c <scanf>
    dealer->current_bet += m;
 1001a80:	d1272517 	ldw	r4,-25452(gp)
 1001a84:	d0a72517 	ldw	r2,-25452(gp)
 1001a88:	10c00717 	ldw	r3,28(r2)
 1001a8c:	e0bffd17 	ldw	r2,-12(fp)
 1001a90:	1885883a 	add	r2,r3,r2
 1001a94:	20800715 	stw	r2,28(r4)
    dealer->players[pid].total_money -= (dealer->current_bet - dealer->players[pid].money);
 1001a98:	d0a72517 	ldw	r2,-25452(gp)
 1001a9c:	14000017 	ldw	r16,0(r2)
 1001aa0:	e13ffe17 	ldw	r4,-8(fp)
 1001aa4:	01400504 	movi	r5,20
 1001aa8:	10026440 	call	1002644 <__mulsi3>
 1001aac:	80a3883a 	add	r17,r16,r2
 1001ab0:	d0a72517 	ldw	r2,-25452(gp)
 1001ab4:	14000017 	ldw	r16,0(r2)
 1001ab8:	e13ffe17 	ldw	r4,-8(fp)
 1001abc:	01400504 	movi	r5,20
 1001ac0:	10026440 	call	1002644 <__mulsi3>
 1001ac4:	8085883a 	add	r2,r16,r2
 1001ac8:	14800117 	ldw	r18,4(r2)
 1001acc:	d0a72517 	ldw	r2,-25452(gp)
 1001ad0:	14c00717 	ldw	r19,28(r2)
 1001ad4:	d0a72517 	ldw	r2,-25452(gp)
 1001ad8:	14000017 	ldw	r16,0(r2)
 1001adc:	e13ffe17 	ldw	r4,-8(fp)
 1001ae0:	01400504 	movi	r5,20
 1001ae4:	10026440 	call	1002644 <__mulsi3>
 1001ae8:	8085883a 	add	r2,r16,r2
 1001aec:	10800417 	ldw	r2,16(r2)
 1001af0:	9885c83a 	sub	r2,r19,r2
 1001af4:	9085c83a 	sub	r2,r18,r2
 1001af8:	88800115 	stw	r2,4(r17)
    dealer->players[pid].money += (dealer->current_bet - dealer->players[pid].money);
 1001afc:	d0a72517 	ldw	r2,-25452(gp)
 1001b00:	14000017 	ldw	r16,0(r2)
 1001b04:	e13ffe17 	ldw	r4,-8(fp)
 1001b08:	01400504 	movi	r5,20
 1001b0c:	10026440 	call	1002644 <__mulsi3>
 1001b10:	80a3883a 	add	r17,r16,r2
 1001b14:	d0a72517 	ldw	r2,-25452(gp)
 1001b18:	14000017 	ldw	r16,0(r2)
 1001b1c:	e13ffe17 	ldw	r4,-8(fp)
 1001b20:	01400504 	movi	r5,20
 1001b24:	10026440 	call	1002644 <__mulsi3>
 1001b28:	8085883a 	add	r2,r16,r2
 1001b2c:	14800417 	ldw	r18,16(r2)
 1001b30:	d0a72517 	ldw	r2,-25452(gp)
 1001b34:	14c00717 	ldw	r19,28(r2)
 1001b38:	d0a72517 	ldw	r2,-25452(gp)
 1001b3c:	14000017 	ldw	r16,0(r2)
 1001b40:	e13ffe17 	ldw	r4,-8(fp)
 1001b44:	01400504 	movi	r5,20
 1001b48:	10026440 	call	1002644 <__mulsi3>
 1001b4c:	8085883a 	add	r2,r16,r2
 1001b50:	10800417 	ldw	r2,16(r2)
 1001b54:	9885c83a 	sub	r2,r19,r2
 1001b58:	9085883a 	add	r2,r18,r2
 1001b5c:	88800415 	stw	r2,16(r17)
  }

  if (dealer->players[pid].action == FOLD) {
 1001b60:	d0a72517 	ldw	r2,-25452(gp)
 1001b64:	14000017 	ldw	r16,0(r2)
 1001b68:	e13ffe17 	ldw	r4,-8(fp)
 1001b6c:	01400504 	movi	r5,20
 1001b70:	10026440 	call	1002644 <__mulsi3>
 1001b74:	8085883a 	add	r2,r16,r2
 1001b78:	10800317 	ldw	r2,12(r2)
 1001b7c:	10800118 	cmpnei	r2,r2,4
 1001b80:	1000271e 	bne	r2,zero,1001c20 <get_bet_for_player+0x440>
    dealer->players[pid].active = false;
 1001b84:	d0a72517 	ldw	r2,-25452(gp)
 1001b88:	14000017 	ldw	r16,0(r2)
 1001b8c:	e13ffe17 	ldw	r4,-8(fp)
 1001b90:	01400504 	movi	r5,20
 1001b94:	10026440 	call	1002644 <__mulsi3>
 1001b98:	8085883a 	add	r2,r16,r2
 1001b9c:	10000205 	stb	zero,8(r2)

    int i, active_players = 0;
 1001ba0:	e03ffa15 	stw	zero,-24(fp)
    for (i=0; i<dealer->number_players; i++) {
 1001ba4:	e03ffb15 	stw	zero,-20(fp)
 1001ba8:	00001006 	br	1001bec <get_bet_for_player+0x40c>
      if (dealer->players[i].active) active_players++;
 1001bac:	d0a72517 	ldw	r2,-25452(gp)
 1001bb0:	14000017 	ldw	r16,0(r2)
 1001bb4:	e13ffb17 	ldw	r4,-20(fp)
 1001bb8:	01400504 	movi	r5,20
 1001bbc:	10026440 	call	1002644 <__mulsi3>
 1001bc0:	8085883a 	add	r2,r16,r2
 1001bc4:	10800203 	ldbu	r2,8(r2)
 1001bc8:	10803fcc 	andi	r2,r2,255
 1001bcc:	1005003a 	cmpeq	r2,r2,zero
 1001bd0:	1000031e 	bne	r2,zero,1001be0 <get_bet_for_player+0x400>
 1001bd4:	e0bffa17 	ldw	r2,-24(fp)
 1001bd8:	10800044 	addi	r2,r2,1
 1001bdc:	e0bffa15 	stw	r2,-24(fp)

  if (dealer->players[pid].action == FOLD) {
    dealer->players[pid].active = false;

    int i, active_players = 0;
    for (i=0; i<dealer->number_players; i++) {
 1001be0:	e0bffb17 	ldw	r2,-20(fp)
 1001be4:	10800044 	addi	r2,r2,1
 1001be8:	e0bffb15 	stw	r2,-20(fp)
 1001bec:	d0a72517 	ldw	r2,-25452(gp)
 1001bf0:	10800203 	ldbu	r2,8(r2)
 1001bf4:	10c03fcc 	andi	r3,r2,255
 1001bf8:	18c0201c 	xori	r3,r3,128
 1001bfc:	18ffe004 	addi	r3,r3,-128
 1001c00:	e0bffb17 	ldw	r2,-20(fp)
 1001c04:	10ffe916 	blt	r2,r3,1001bac <get_bet_for_player+0x3cc>
      if (dealer->players[i].active) active_players++;
    }
    if (active_players == 1) return -1;
 1001c08:	e0bffa17 	ldw	r2,-24(fp)
 1001c0c:	10800058 	cmpnei	r2,r2,1
 1001c10:	1000031e 	bne	r2,zero,1001c20 <get_bet_for_player+0x440>
 1001c14:	00bfffc4 	movi	r2,-1
 1001c18:	e0bfff15 	stw	r2,-4(fp)
 1001c1c:	00001306 	br	1001c6c <get_bet_for_player+0x48c>
  }
  printf("\nYour total money %d and bet money %d", dealer->players[pid].total_money, dealer->players[pid].money);
 1001c20:	d0a72517 	ldw	r2,-25452(gp)
 1001c24:	14000017 	ldw	r16,0(r2)
 1001c28:	e13ffe17 	ldw	r4,-8(fp)
 1001c2c:	01400504 	movi	r5,20
 1001c30:	10026440 	call	1002644 <__mulsi3>
 1001c34:	8085883a 	add	r2,r16,r2
 1001c38:	14400117 	ldw	r17,4(r2)
 1001c3c:	d0a72517 	ldw	r2,-25452(gp)
 1001c40:	14000017 	ldw	r16,0(r2)
 1001c44:	e13ffe17 	ldw	r4,-8(fp)
 1001c48:	01400504 	movi	r5,20
 1001c4c:	10026440 	call	1002644 <__mulsi3>
 1001c50:	8085883a 	add	r2,r16,r2
 1001c54:	11800417 	ldw	r6,16(r2)
 1001c58:	010040b4 	movhi	r4,258
 1001c5c:	21311b04 	addi	r4,r4,-15252
 1001c60:	880b883a 	mov	r5,r17
 1001c64:	1002de40 	call	1002de4 <printf>
  return 0;
 1001c68:	e03fff15 	stw	zero,-4(fp)
 1001c6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1001c70:	e037883a 	mov	sp,fp
 1001c74:	dfc00517 	ldw	ra,20(sp)
 1001c78:	df000417 	ldw	fp,16(sp)
 1001c7c:	dcc00317 	ldw	r19,12(sp)
 1001c80:	dc800217 	ldw	r18,8(sp)
 1001c84:	dc400117 	ldw	r17,4(sp)
 1001c88:	dc000017 	ldw	r16,0(sp)
 1001c8c:	dec00604 	addi	sp,sp,24
 1001c90:	f800283a 	ret

01001c94 <still_betting>:

/* Returns true if players are still in the process of betting */
bool still_betting() {
 1001c94:	defffb04 	addi	sp,sp,-20
 1001c98:	dfc00415 	stw	ra,16(sp)
 1001c9c:	df000315 	stw	fp,12(sp)
 1001ca0:	dc000215 	stw	r16,8(sp)
 1001ca4:	df000204 	addi	fp,sp,8
  int i;
  for (i=0; i<dealer->number_players; i++) {
 1001ca8:	e03ffe15 	stw	zero,-8(fp)
 1001cac:	00001906 	br	1001d14 <still_betting+0x80>
    if (dealer->players[i].money < dealer->current_bet && dealer->players[i].total_money > 0)
 1001cb0:	d0a72517 	ldw	r2,-25452(gp)
 1001cb4:	14000017 	ldw	r16,0(r2)
 1001cb8:	e13ffe17 	ldw	r4,-8(fp)
 1001cbc:	01400504 	movi	r5,20
 1001cc0:	10026440 	call	1002644 <__mulsi3>
 1001cc4:	8085883a 	add	r2,r16,r2
 1001cc8:	10c00417 	ldw	r3,16(r2)
 1001ccc:	d0a72517 	ldw	r2,-25452(gp)
 1001cd0:	10800717 	ldw	r2,28(r2)
 1001cd4:	18800c0e 	bge	r3,r2,1001d08 <still_betting+0x74>
 1001cd8:	d0a72517 	ldw	r2,-25452(gp)
 1001cdc:	14000017 	ldw	r16,0(r2)
 1001ce0:	e13ffe17 	ldw	r4,-8(fp)
 1001ce4:	01400504 	movi	r5,20
 1001ce8:	10026440 	call	1002644 <__mulsi3>
 1001cec:	8085883a 	add	r2,r16,r2
 1001cf0:	10800117 	ldw	r2,4(r2)
 1001cf4:	10800050 	cmplti	r2,r2,1
 1001cf8:	1000031e 	bne	r2,zero,1001d08 <still_betting+0x74>
    return true;
 1001cfc:	00800044 	movi	r2,1
 1001d00:	e0bfff15 	stw	r2,-4(fp)
 1001d04:	00000b06 	br	1001d34 <still_betting+0xa0>
}

/* Returns true if players are still in the process of betting */
bool still_betting() {
  int i;
  for (i=0; i<dealer->number_players; i++) {
 1001d08:	e0bffe17 	ldw	r2,-8(fp)
 1001d0c:	10800044 	addi	r2,r2,1
 1001d10:	e0bffe15 	stw	r2,-8(fp)
 1001d14:	d0a72517 	ldw	r2,-25452(gp)
 1001d18:	10800203 	ldbu	r2,8(r2)
 1001d1c:	10c03fcc 	andi	r3,r2,255
 1001d20:	18c0201c 	xori	r3,r3,128
 1001d24:	18ffe004 	addi	r3,r3,-128
 1001d28:	e0bffe17 	ldw	r2,-8(fp)
 1001d2c:	10ffe016 	blt	r2,r3,1001cb0 <still_betting+0x1c>
    if (dealer->players[i].money < dealer->current_bet && dealer->players[i].total_money > 0)
    return true;
  }
  return false;
 1001d30:	e03fff15 	stw	zero,-4(fp)
 1001d34:	e0bfff17 	ldw	r2,-4(fp)
}
 1001d38:	e037883a 	mov	sp,fp
 1001d3c:	dfc00217 	ldw	ra,8(sp)
 1001d40:	df000117 	ldw	fp,4(sp)
 1001d44:	dc000017 	ldw	r16,0(sp)
 1001d48:	dec00304 	addi	sp,sp,12
 1001d4c:	f800283a 	ret

01001d50 <player_still_playing>:

/* Returns true if player still has to put forward money */
bool player_still_playing(int pid) {
 1001d50:	defffb04 	addi	sp,sp,-20
 1001d54:	dfc00415 	stw	ra,16(sp)
 1001d58:	df000315 	stw	fp,12(sp)
 1001d5c:	dc000215 	stw	r16,8(sp)
 1001d60:	df000204 	addi	fp,sp,8
 1001d64:	e13ffe15 	stw	r4,-8(fp)
  if (!dealer->players[pid].active) return false;
 1001d68:	d0a72517 	ldw	r2,-25452(gp)
 1001d6c:	14000017 	ldw	r16,0(r2)
 1001d70:	e13ffe17 	ldw	r4,-8(fp)
 1001d74:	01400504 	movi	r5,20
 1001d78:	10026440 	call	1002644 <__mulsi3>
 1001d7c:	8085883a 	add	r2,r16,r2
 1001d80:	10800203 	ldbu	r2,8(r2)
 1001d84:	1080005c 	xori	r2,r2,1
 1001d88:	10803fcc 	andi	r2,r2,255
 1001d8c:	1005003a 	cmpeq	r2,r2,zero
 1001d90:	1000021e 	bne	r2,zero,1001d9c <player_still_playing+0x4c>
 1001d94:	e03fff15 	stw	zero,-4(fp)
 1001d98:	00001706 	br	1001df8 <player_still_playing+0xa8>
  else if (dealer->players[pid].money < dealer->current_bet && dealer->players[pid].total_money > 0)
 1001d9c:	d0a72517 	ldw	r2,-25452(gp)
 1001da0:	14000017 	ldw	r16,0(r2)
 1001da4:	e13ffe17 	ldw	r4,-8(fp)
 1001da8:	01400504 	movi	r5,20
 1001dac:	10026440 	call	1002644 <__mulsi3>
 1001db0:	8085883a 	add	r2,r16,r2
 1001db4:	10c00417 	ldw	r3,16(r2)
 1001db8:	d0a72517 	ldw	r2,-25452(gp)
 1001dbc:	10800717 	ldw	r2,28(r2)
 1001dc0:	18800c0e 	bge	r3,r2,1001df4 <player_still_playing+0xa4>
 1001dc4:	d0a72517 	ldw	r2,-25452(gp)
 1001dc8:	14000017 	ldw	r16,0(r2)
 1001dcc:	e13ffe17 	ldw	r4,-8(fp)
 1001dd0:	01400504 	movi	r5,20
 1001dd4:	10026440 	call	1002644 <__mulsi3>
 1001dd8:	8085883a 	add	r2,r16,r2
 1001ddc:	10800117 	ldw	r2,4(r2)
 1001de0:	10800050 	cmplti	r2,r2,1
 1001de4:	1000031e 	bne	r2,zero,1001df4 <player_still_playing+0xa4>
  return true;
 1001de8:	00800044 	movi	r2,1
 1001dec:	e0bfff15 	stw	r2,-4(fp)
 1001df0:	00000106 	br	1001df8 <player_still_playing+0xa8>

  return false;
 1001df4:	e03fff15 	stw	zero,-4(fp)
 1001df8:	e0bfff17 	ldw	r2,-4(fp)
}
 1001dfc:	e037883a 	mov	sp,fp
 1001e00:	dfc00217 	ldw	ra,8(sp)
 1001e04:	df000117 	ldw	fp,4(sp)
 1001e08:	dc000017 	ldw	r16,0(sp)
 1001e0c:	dec00304 	addi	sp,sp,12
 1001e10:	f800283a 	ret

01001e14 <main>:

int main()
{
 1001e14:	defff404 	addi	sp,sp,-48
 1001e18:	dfc00b15 	stw	ra,44(sp)
 1001e1c:	df000a15 	stw	fp,40(sp)
 1001e20:	dcc00915 	stw	r19,36(sp)
 1001e24:	dc800815 	stw	r18,32(sp)
 1001e28:	dc400715 	stw	r17,28(sp)
 1001e2c:	dc000615 	stw	r16,24(sp)
 1001e30:	df000604 	addi	fp,sp,24
	init();
 1001e34:	1000f540 	call	1000f54 <init>
	srand(alt_timestamp()); int i; // TODO change in de2 env
 1001e38:	10139e40 	call	10139e4 <alt_timestamp>
 1001e3c:	1009883a 	mov	r4,r2
 1001e40:	1002f340 	call	1002f34 <srand>
	GameState state = SETUP;
 1001e44:	e03ffd15 	stw	zero,-12(fp)
 1001e48:	00000006 	br	1001e4c <main+0x38>

	for (;;) {
	switch (state) {
 1001e4c:	e0bffd17 	ldw	r2,-12(fp)
 1001e50:	108001e8 	cmpgeui	r2,r2,7
 1001e54:	103ffd1e 	bne	r2,zero,1001e4c <main+0x38>
 1001e58:	e0bffd17 	ldw	r2,-12(fp)
 1001e5c:	1085883a 	add	r2,r2,r2
 1001e60:	1087883a 	add	r3,r2,r2
 1001e64:	00804034 	movhi	r2,256
 1001e68:	10879e04 	addi	r2,r2,7800
 1001e6c:	1885883a 	add	r2,r3,r2
 1001e70:	10800017 	ldw	r2,0(r2)
 1001e74:	1000683a 	jmp	r2
 1001e78:	01001e94 	movui	r4,122
 1001e7c:	01001edc 	xori	r4,zero,123
 1001e80:	01001fdc 	xori	r4,zero,127
 1001e84:	01002088 	cmpgei	r4,zero,130
 1001e88:	010020d8 	cmpnei	r4,zero,131
 1001e8c:	01002128 	cmpgeui	r4,zero,132
 1001e90:	010024a4 	muli	r4,zero,146
	  case SETUP:
		initialize_dealer(2);
 1001e94:	01000084 	movi	r4,2
 1001e98:	10011140 	call	1001114 <initialize_dealer>

		/* Move dealer chip to the next player */
		if (dealer_chip == dealer->number_players-1) dealer_chip = 0;
 1001e9c:	d0a72517 	ldw	r2,-25452(gp)
 1001ea0:	10800203 	ldbu	r2,8(r2)
 1001ea4:	10803fcc 	andi	r2,r2,255
 1001ea8:	1080201c 	xori	r2,r2,128
 1001eac:	10bfe004 	addi	r2,r2,-128
 1001eb0:	10ffffc4 	addi	r3,r2,-1
 1001eb4:	d0a72417 	ldw	r2,-25456(gp)
 1001eb8:	1880021e 	bne	r3,r2,1001ec4 <main+0xb0>
 1001ebc:	d0272415 	stw	zero,-25456(gp)
 1001ec0:	00000306 	br	1001ed0 <main+0xbc>
		else dealer_chip++;
 1001ec4:	d0a72417 	ldw	r2,-25456(gp)
 1001ec8:	10800044 	addi	r2,r2,1
 1001ecc:	d0a72415 	stw	r2,-25456(gp)

		state = DEAL_HANDS;
 1001ed0:	00800044 	movi	r2,1
 1001ed4:	e0bffd15 	stw	r2,-12(fp)
		break;
 1001ed8:	003fdc06 	br	1001e4c <main+0x38>

	  case DEAL_HANDS:
		deal_hands();
 1001edc:	100143c0 	call	100143c <deal_hands>

		for (i=0; i<dealer->number_players; i++) {
 1001ee0:	e03ffe15 	stw	zero,-8(fp)
 1001ee4:	00003306 	br	1001fb4 <main+0x1a0>
		  printf("\n\nDealt cards for Player %d: Suite %d, Value %d & Suite %d, Value %d", i,
 1001ee8:	d0a72517 	ldw	r2,-25452(gp)
 1001eec:	14000017 	ldw	r16,0(r2)
 1001ef0:	e13ffe17 	ldw	r4,-8(fp)
 1001ef4:	01400504 	movi	r5,20
 1001ef8:	10026440 	call	1002644 <__mulsi3>
 1001efc:	8085883a 	add	r2,r16,r2
 1001f00:	10800043 	ldbu	r2,1(r2)
 1001f04:	14403fcc 	andi	r17,r2,255
 1001f08:	8c40201c 	xori	r17,r17,128
 1001f0c:	8c7fe004 	addi	r17,r17,-128
 1001f10:	d0a72517 	ldw	r2,-25452(gp)
 1001f14:	14000017 	ldw	r16,0(r2)
 1001f18:	e13ffe17 	ldw	r4,-8(fp)
 1001f1c:	01400504 	movi	r5,20
 1001f20:	10026440 	call	1002644 <__mulsi3>
 1001f24:	8085883a 	add	r2,r16,r2
 1001f28:	10800003 	ldbu	r2,0(r2)
 1001f2c:	14803fcc 	andi	r18,r2,255
 1001f30:	9480201c 	xori	r18,r18,128
 1001f34:	94bfe004 	addi	r18,r18,-128
 1001f38:	d0a72517 	ldw	r2,-25452(gp)
 1001f3c:	14000017 	ldw	r16,0(r2)
 1001f40:	e13ffe17 	ldw	r4,-8(fp)
 1001f44:	01400504 	movi	r5,20
 1001f48:	10026440 	call	1002644 <__mulsi3>
 1001f4c:	8085883a 	add	r2,r16,r2
 1001f50:	108000c3 	ldbu	r2,3(r2)
 1001f54:	14c03fcc 	andi	r19,r2,255
 1001f58:	9cc0201c 	xori	r19,r19,128
 1001f5c:	9cffe004 	addi	r19,r19,-128
 1001f60:	d0a72517 	ldw	r2,-25452(gp)
 1001f64:	14000017 	ldw	r16,0(r2)
 1001f68:	e13ffe17 	ldw	r4,-8(fp)
 1001f6c:	01400504 	movi	r5,20
 1001f70:	10026440 	call	1002644 <__mulsi3>
 1001f74:	8085883a 	add	r2,r16,r2
 1001f78:	10800083 	ldbu	r2,2(r2)
 1001f7c:	10803fcc 	andi	r2,r2,255
 1001f80:	1080201c 	xori	r2,r2,128
 1001f84:	10bfe004 	addi	r2,r2,-128
 1001f88:	dcc00015 	stw	r19,0(sp)
 1001f8c:	d8800115 	stw	r2,4(sp)
 1001f90:	010040b4 	movhi	r4,258
 1001f94:	21314904 	addi	r4,r4,-15068
 1001f98:	e17ffe17 	ldw	r5,-8(fp)
 1001f9c:	880d883a 	mov	r6,r17
 1001fa0:	900f883a 	mov	r7,r18
 1001fa4:	1002de40 	call	1002de4 <printf>
		break;

	  case DEAL_HANDS:
		deal_hands();

		for (i=0; i<dealer->number_players; i++) {
 1001fa8:	e0bffe17 	ldw	r2,-8(fp)
 1001fac:	10800044 	addi	r2,r2,1
 1001fb0:	e0bffe15 	stw	r2,-8(fp)
 1001fb4:	d0a72517 	ldw	r2,-25452(gp)
 1001fb8:	10800203 	ldbu	r2,8(r2)
 1001fbc:	10c03fcc 	andi	r3,r2,255
 1001fc0:	18c0201c 	xori	r3,r3,128
 1001fc4:	18ffe004 	addi	r3,r3,-128
 1001fc8:	e0bffe17 	ldw	r2,-8(fp)
 1001fcc:	10ffc616 	blt	r2,r3,1001ee8 <main+0xd4>
		  printf("\n\nDealt cards for Player %d: Suite %d, Value %d & Suite %d, Value %d", i,
			dealer->players[i].hand[0].suite, dealer->players[i].hand[0].value,
			dealer->players[i].hand[1].suite, dealer->players[i].hand[1].value);
		}

		state = BET;
 1001fd0:	00800144 	movi	r2,5
 1001fd4:	e0bffd15 	stw	r2,-12(fp)
		break;
 1001fd8:	003f9c06 	br	1001e4c <main+0x38>

	  case FLOP:
		flop();
 1001fdc:	10015740 	call	1001574 <flop>
		printf("\n\n----------------------------------------");
 1001fe0:	010040b4 	movhi	r4,258
 1001fe4:	21311004 	addi	r4,r4,-15296
 1001fe8:	1002de40 	call	1002de4 <printf>
		printf("\nFLOP (%d, %d), (%d, %d), (%d, %d)",
 1001fec:	d0a72517 	ldw	r2,-25452(gp)
 1001ff0:	108002c3 	ldbu	r2,11(r2)
 1001ff4:	11403fcc 	andi	r5,r2,255
 1001ff8:	2940201c 	xori	r5,r5,128
 1001ffc:	297fe004 	addi	r5,r5,-128
 1002000:	d0a72517 	ldw	r2,-25452(gp)
 1002004:	10800283 	ldbu	r2,10(r2)
 1002008:	11803fcc 	andi	r6,r2,255
 100200c:	3180201c 	xori	r6,r6,128
 1002010:	31bfe004 	addi	r6,r6,-128
 1002014:	d0a72517 	ldw	r2,-25452(gp)
 1002018:	10800343 	ldbu	r2,13(r2)
 100201c:	11c03fcc 	andi	r7,r2,255
 1002020:	39c0201c 	xori	r7,r7,128
 1002024:	39ffe004 	addi	r7,r7,-128
 1002028:	d0a72517 	ldw	r2,-25452(gp)
 100202c:	10800303 	ldbu	r2,12(r2)
 1002030:	11003fcc 	andi	r4,r2,255
 1002034:	2100201c 	xori	r4,r4,128
 1002038:	213fe004 	addi	r4,r4,-128
 100203c:	d0a72517 	ldw	r2,-25452(gp)
 1002040:	108003c3 	ldbu	r2,15(r2)
 1002044:	10c03fcc 	andi	r3,r2,255
 1002048:	18c0201c 	xori	r3,r3,128
 100204c:	18ffe004 	addi	r3,r3,-128
 1002050:	d0a72517 	ldw	r2,-25452(gp)
 1002054:	10800383 	ldbu	r2,14(r2)
 1002058:	10803fcc 	andi	r2,r2,255
 100205c:	1080201c 	xori	r2,r2,128
 1002060:	10bfe004 	addi	r2,r2,-128
 1002064:	d9000015 	stw	r4,0(sp)
 1002068:	d8c00115 	stw	r3,4(sp)
 100206c:	d8800215 	stw	r2,8(sp)
 1002070:	010040b4 	movhi	r4,258
 1002074:	21315b04 	addi	r4,r4,-14996
 1002078:	1002de40 	call	1002de4 <printf>
		  dealer->cards_on_table[0].suite, dealer->cards_on_table[0].value,
		  dealer->cards_on_table[1].suite, dealer->cards_on_table[1].value,
		  dealer->cards_on_table[2].suite, dealer->cards_on_table[2].value);

		state = BET;
 100207c:	00800144 	movi	r2,5
 1002080:	e0bffd15 	stw	r2,-12(fp)
		break;
 1002084:	003f7106 	br	1001e4c <main+0x38>

	  case TURN:
		turn();
 1002088:	10016bc0 	call	10016bc <turn>
		printf("\n\n----------------------------------------");
 100208c:	010040b4 	movhi	r4,258
 1002090:	21311004 	addi	r4,r4,-15296
 1002094:	1002de40 	call	1002de4 <printf>
		printf("\nTURN (%d, %d)",
 1002098:	d0a72517 	ldw	r2,-25452(gp)
 100209c:	10800443 	ldbu	r2,17(r2)
 10020a0:	11403fcc 	andi	r5,r2,255
 10020a4:	2940201c 	xori	r5,r5,128
 10020a8:	297fe004 	addi	r5,r5,-128
 10020ac:	d0a72517 	ldw	r2,-25452(gp)
 10020b0:	10800483 	ldbu	r2,18(r2)
 10020b4:	11803fcc 	andi	r6,r2,255
 10020b8:	3180201c 	xori	r6,r6,128
 10020bc:	31bfe004 	addi	r6,r6,-128
 10020c0:	010040b4 	movhi	r4,258
 10020c4:	21316404 	addi	r4,r4,-14960
 10020c8:	1002de40 	call	1002de4 <printf>
		  dealer->cards_on_table[3].suite, dealer->cards_on_table[4].value);

		state = BET;
 10020cc:	00800144 	movi	r2,5
 10020d0:	e0bffd15 	stw	r2,-12(fp)
		break;
 10020d4:	003f5d06 	br	1001e4c <main+0x38>

	  case RIVER:
		river();
 10020d8:	100174c0 	call	100174c <river>

		printf("\n\n----------------------------------------");
 10020dc:	010040b4 	movhi	r4,258
 10020e0:	21311004 	addi	r4,r4,-15296
 10020e4:	1002de40 	call	1002de4 <printf>
		printf("\nRIVER (%d, %d)",
 10020e8:	d0a72517 	ldw	r2,-25452(gp)
 10020ec:	108004c3 	ldbu	r2,19(r2)
 10020f0:	11403fcc 	andi	r5,r2,255
 10020f4:	2940201c 	xori	r5,r5,128
 10020f8:	297fe004 	addi	r5,r5,-128
 10020fc:	d0a72517 	ldw	r2,-25452(gp)
 1002100:	10800483 	ldbu	r2,18(r2)
 1002104:	11803fcc 	andi	r6,r2,255
 1002108:	3180201c 	xori	r6,r6,128
 100210c:	31bfe004 	addi	r6,r6,-128
 1002110:	010040b4 	movhi	r4,258
 1002114:	21316804 	addi	r4,r4,-14944
 1002118:	1002de40 	call	1002de4 <printf>
		  dealer->cards_on_table[4].suite, dealer->cards_on_table[4].value);

		state = BET;
 100211c:	00800144 	movi	r2,5
 1002120:	e0bffd15 	stw	r2,-12(fp)
		break;
 1002124:	003f4906 	br	1001e4c <main+0x38>

	  case BET:
		/* Betting Round 1 */
		get_bet_for_player(dealer_chip);
 1002128:	d1272417 	ldw	r4,-25456(gp)
 100212c:	10017e00 	call	10017e0 <get_bet_for_player>
		if (dealer_chip == dealer->number_players-1) {
 1002130:	d0a72517 	ldw	r2,-25452(gp)
 1002134:	10800203 	ldbu	r2,8(r2)
 1002138:	10803fcc 	andi	r2,r2,255
 100213c:	1080201c 	xori	r2,r2,128
 1002140:	10bfe004 	addi	r2,r2,-128
 1002144:	10ffffc4 	addi	r3,r2,-1
 1002148:	d0a72417 	ldw	r2,-25456(gp)
 100214c:	18801f1e 	bne	r3,r2,10021cc <main+0x3b8>
		  for (i=0; i<dealer->number_players-1; i++) {
 1002150:	e03ffe15 	stw	zero,-8(fp)
 1002154:	00001406 	br	10021a8 <main+0x394>
			if (dealer->players[i].active) {
 1002158:	d0a72517 	ldw	r2,-25452(gp)
 100215c:	14000017 	ldw	r16,0(r2)
 1002160:	e13ffe17 	ldw	r4,-8(fp)
 1002164:	01400504 	movi	r5,20
 1002168:	10026440 	call	1002644 <__mulsi3>
 100216c:	8085883a 	add	r2,r16,r2
 1002170:	10800203 	ldbu	r2,8(r2)
 1002174:	10803fcc 	andi	r2,r2,255
 1002178:	1005003a 	cmpeq	r2,r2,zero
 100217c:	1000071e 	bne	r2,zero,100219c <main+0x388>
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
 1002180:	e13ffe17 	ldw	r4,-8(fp)
 1002184:	10017e00 	call	10017e0 <get_bet_for_player>
 1002188:	10bfffd8 	cmpnei	r2,r2,-1
 100218c:	1000031e 	bne	r2,zero,100219c <main+0x388>
 1002190:	00800184 	movi	r2,6
 1002194:	e0bffd15 	stw	r2,-12(fp)
 1002198:	003f2c06 	br	1001e4c <main+0x38>

	  case BET:
		/* Betting Round 1 */
		get_bet_for_player(dealer_chip);
		if (dealer_chip == dealer->number_players-1) {
		  for (i=0; i<dealer->number_players-1; i++) {
 100219c:	e0bffe17 	ldw	r2,-8(fp)
 10021a0:	10800044 	addi	r2,r2,1
 10021a4:	e0bffe15 	stw	r2,-8(fp)
 10021a8:	d0a72517 	ldw	r2,-25452(gp)
 10021ac:	10800203 	ldbu	r2,8(r2)
 10021b0:	10803fcc 	andi	r2,r2,255
 10021b4:	1080201c 	xori	r2,r2,128
 10021b8:	10bfe004 	addi	r2,r2,-128
 10021bc:	10ffffc4 	addi	r3,r2,-1
 10021c0:	e0bffe17 	ldw	r2,-8(fp)
 10021c4:	10ffe416 	blt	r2,r3,1002158 <main+0x344>
 10021c8:	00006606 	br	1002364 <main+0x550>
			if (dealer->players[i].active) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		} else {
		  for (i=dealer_chip+1; i<dealer->number_players; i++) {
 10021cc:	d0a72417 	ldw	r2,-25456(gp)
 10021d0:	10800044 	addi	r2,r2,1
 10021d4:	e0bffe15 	stw	r2,-8(fp)
 10021d8:	00001406 	br	100222c <main+0x418>
			if (dealer->players[i].active) {
 10021dc:	d0a72517 	ldw	r2,-25452(gp)
 10021e0:	14000017 	ldw	r16,0(r2)
 10021e4:	e13ffe17 	ldw	r4,-8(fp)
 10021e8:	01400504 	movi	r5,20
 10021ec:	10026440 	call	1002644 <__mulsi3>
 10021f0:	8085883a 	add	r2,r16,r2
 10021f4:	10800203 	ldbu	r2,8(r2)
 10021f8:	10803fcc 	andi	r2,r2,255
 10021fc:	1005003a 	cmpeq	r2,r2,zero
 1002200:	1000071e 	bne	r2,zero,1002220 <main+0x40c>
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
 1002204:	e13ffe17 	ldw	r4,-8(fp)
 1002208:	10017e00 	call	10017e0 <get_bet_for_player>
 100220c:	10bfffd8 	cmpnei	r2,r2,-1
 1002210:	1000031e 	bne	r2,zero,1002220 <main+0x40c>
 1002214:	00800184 	movi	r2,6
 1002218:	e0bffd15 	stw	r2,-12(fp)
 100221c:	003f0b06 	br	1001e4c <main+0x38>
			if (dealer->players[i].active) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		} else {
		  for (i=dealer_chip+1; i<dealer->number_players; i++) {
 1002220:	e0bffe17 	ldw	r2,-8(fp)
 1002224:	10800044 	addi	r2,r2,1
 1002228:	e0bffe15 	stw	r2,-8(fp)
 100222c:	d0a72517 	ldw	r2,-25452(gp)
 1002230:	10800203 	ldbu	r2,8(r2)
 1002234:	10c03fcc 	andi	r3,r2,255
 1002238:	18c0201c 	xori	r3,r3,128
 100223c:	18ffe004 	addi	r3,r3,-128
 1002240:	e0bffe17 	ldw	r2,-8(fp)
 1002244:	10ffe516 	blt	r2,r3,10021dc <main+0x3c8>
			if (dealer->players[i].active) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		  for (i=0; i<dealer_chip; i++) {
 1002248:	e03ffe15 	stw	zero,-8(fp)
 100224c:	00001406 	br	10022a0 <main+0x48c>
			if (dealer->players[i].active) {
 1002250:	d0a72517 	ldw	r2,-25452(gp)
 1002254:	14000017 	ldw	r16,0(r2)
 1002258:	e13ffe17 	ldw	r4,-8(fp)
 100225c:	01400504 	movi	r5,20
 1002260:	10026440 	call	1002644 <__mulsi3>
 1002264:	8085883a 	add	r2,r16,r2
 1002268:	10800203 	ldbu	r2,8(r2)
 100226c:	10803fcc 	andi	r2,r2,255
 1002270:	1005003a 	cmpeq	r2,r2,zero
 1002274:	1000071e 	bne	r2,zero,1002294 <main+0x480>
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
 1002278:	e13ffe17 	ldw	r4,-8(fp)
 100227c:	10017e00 	call	10017e0 <get_bet_for_player>
 1002280:	10bfffd8 	cmpnei	r2,r2,-1
 1002284:	1000031e 	bne	r2,zero,1002294 <main+0x480>
 1002288:	00800184 	movi	r2,6
 100228c:	e0bffd15 	stw	r2,-12(fp)
 1002290:	003eee06 	br	1001e4c <main+0x38>
		  for (i=dealer_chip+1; i<dealer->number_players; i++) {
			if (dealer->players[i].active) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		  for (i=0; i<dealer_chip; i++) {
 1002294:	e0bffe17 	ldw	r2,-8(fp)
 1002298:	10800044 	addi	r2,r2,1
 100229c:	e0bffe15 	stw	r2,-8(fp)
 10022a0:	d0e72417 	ldw	r3,-25456(gp)
 10022a4:	e0bffe17 	ldw	r2,-8(fp)
 10022a8:	10ffe916 	blt	r2,r3,1002250 <main+0x43c>
			}
		  }
		}

		/* If still betting, continue that */
		while (still_betting()) {
 10022ac:	00002d06 	br	1002364 <main+0x550>
		  for (i=dealer_chip; i<dealer->number_players; i++) {
 10022b0:	d0a72417 	ldw	r2,-25456(gp)
 10022b4:	e0bffe15 	stw	r2,-8(fp)
 10022b8:	00000f06 	br	10022f8 <main+0x4e4>
			if (player_still_playing(i)) {
 10022bc:	e13ffe17 	ldw	r4,-8(fp)
 10022c0:	1001d500 	call	1001d50 <player_still_playing>
 10022c4:	10803fcc 	andi	r2,r2,255
 10022c8:	1005003a 	cmpeq	r2,r2,zero
 10022cc:	1000071e 	bne	r2,zero,10022ec <main+0x4d8>
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
 10022d0:	e13ffe17 	ldw	r4,-8(fp)
 10022d4:	10017e00 	call	10017e0 <get_bet_for_player>
 10022d8:	10bfffd8 	cmpnei	r2,r2,-1
 10022dc:	1000031e 	bne	r2,zero,10022ec <main+0x4d8>
 10022e0:	00800184 	movi	r2,6
 10022e4:	e0bffd15 	stw	r2,-12(fp)
 10022e8:	003ed806 	br	1001e4c <main+0x38>
		  }
		}

		/* If still betting, continue that */
		while (still_betting()) {
		  for (i=dealer_chip; i<dealer->number_players; i++) {
 10022ec:	e0bffe17 	ldw	r2,-8(fp)
 10022f0:	10800044 	addi	r2,r2,1
 10022f4:	e0bffe15 	stw	r2,-8(fp)
 10022f8:	d0a72517 	ldw	r2,-25452(gp)
 10022fc:	10800203 	ldbu	r2,8(r2)
 1002300:	10c03fcc 	andi	r3,r2,255
 1002304:	18c0201c 	xori	r3,r3,128
 1002308:	18ffe004 	addi	r3,r3,-128
 100230c:	e0bffe17 	ldw	r2,-8(fp)
 1002310:	10ffea16 	blt	r2,r3,10022bc <main+0x4a8>
			if (player_still_playing(i)) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		  for (i=0; i<dealer_chip; i++) {
 1002314:	e03ffe15 	stw	zero,-8(fp)
 1002318:	00000f06 	br	1002358 <main+0x544>
			if (player_still_playing(i)) {
 100231c:	e13ffe17 	ldw	r4,-8(fp)
 1002320:	1001d500 	call	1001d50 <player_still_playing>
 1002324:	10803fcc 	andi	r2,r2,255
 1002328:	1005003a 	cmpeq	r2,r2,zero
 100232c:	1000071e 	bne	r2,zero,100234c <main+0x538>
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
 1002330:	e13ffe17 	ldw	r4,-8(fp)
 1002334:	10017e00 	call	10017e0 <get_bet_for_player>
 1002338:	10bfffd8 	cmpnei	r2,r2,-1
 100233c:	1000031e 	bne	r2,zero,100234c <main+0x538>
 1002340:	00800184 	movi	r2,6
 1002344:	e0bffd15 	stw	r2,-12(fp)
 1002348:	003ec006 	br	1001e4c <main+0x38>
		  for (i=dealer_chip; i<dealer->number_players; i++) {
			if (player_still_playing(i)) {
			  if (get_bet_for_player(i) == -1) {state = GAME_OVER; goto HOTSTUFF;}
			}
		  }
		  for (i=0; i<dealer_chip; i++) {
 100234c:	e0bffe17 	ldw	r2,-8(fp)
 1002350:	10800044 	addi	r2,r2,1
 1002354:	e0bffe15 	stw	r2,-8(fp)
 1002358:	d0e72417 	ldw	r3,-25456(gp)
 100235c:	e0bffe17 	ldw	r2,-8(fp)
 1002360:	10ffee16 	blt	r2,r3,100231c <main+0x508>
			}
		  }
		}

		/* If still betting, continue that */
		while (still_betting()) {
 1002364:	1001c940 	call	1001c94 <still_betting>
 1002368:	10803fcc 	andi	r2,r2,255
 100236c:	1004c03a 	cmpne	r2,r2,zero
 1002370:	103fcf1e 	bne	r2,zero,10022b0 <main+0x49c>
			}
		  }
	   }

		/* Put bet money into the pot */
		for (i=0; i<dealer->number_players; i++) {
 1002374:	e03ffe15 	stw	zero,-8(fp)
 1002378:	00001806 	br	10023dc <main+0x5c8>
		  dealer->pot += dealer->players[i].money;
 100237c:	d4672517 	ldw	r17,-25452(gp)
 1002380:	d0a72517 	ldw	r2,-25452(gp)
 1002384:	14800617 	ldw	r18,24(r2)
 1002388:	d0a72517 	ldw	r2,-25452(gp)
 100238c:	14000017 	ldw	r16,0(r2)
 1002390:	e13ffe17 	ldw	r4,-8(fp)
 1002394:	01400504 	movi	r5,20
 1002398:	10026440 	call	1002644 <__mulsi3>
 100239c:	8085883a 	add	r2,r16,r2
 10023a0:	10800417 	ldw	r2,16(r2)
 10023a4:	9085883a 	add	r2,r18,r2
 10023a8:	88800615 	stw	r2,24(r17)
		  dealer->players[i].money = 0;
 10023ac:	d0a72517 	ldw	r2,-25452(gp)
 10023b0:	14000017 	ldw	r16,0(r2)
 10023b4:	e13ffe17 	ldw	r4,-8(fp)
 10023b8:	01400504 	movi	r5,20
 10023bc:	10026440 	call	1002644 <__mulsi3>
 10023c0:	8085883a 	add	r2,r16,r2
 10023c4:	10000415 	stw	zero,16(r2)
		  dealer->current_bet = 0;
 10023c8:	d0a72517 	ldw	r2,-25452(gp)
 10023cc:	10000715 	stw	zero,28(r2)
			}
		  }
	   }

		/* Put bet money into the pot */
		for (i=0; i<dealer->number_players; i++) {
 10023d0:	e0bffe17 	ldw	r2,-8(fp)
 10023d4:	10800044 	addi	r2,r2,1
 10023d8:	e0bffe15 	stw	r2,-8(fp)
 10023dc:	d0a72517 	ldw	r2,-25452(gp)
 10023e0:	10800203 	ldbu	r2,8(r2)
 10023e4:	10c03fcc 	andi	r3,r2,255
 10023e8:	18c0201c 	xori	r3,r3,128
 10023ec:	18ffe004 	addi	r3,r3,-128
 10023f0:	e0bffe17 	ldw	r2,-8(fp)
 10023f4:	10ffe116 	blt	r2,r3,100237c <main+0x568>
		  dealer->pot += dealer->players[i].money;
		  dealer->players[i].money = 0;
		  dealer->current_bet = 0;
		}

		printf("\nPOT %d", dealer->pot);
 10023f8:	d0a72517 	ldw	r2,-25452(gp)
 10023fc:	11400617 	ldw	r5,24(r2)
 1002400:	010040b4 	movhi	r4,258
 1002404:	21316c04 	addi	r4,r4,-14928
 1002408:	1002de40 	call	1002de4 <printf>
		printf("\n----------------------------------------\n");
 100240c:	010040b4 	movhi	r4,258
 1002410:	21316e04 	addi	r4,r4,-14920
 1002414:	1002f200 	call	1002f20 <puts>
		switch (dealer->number_cards_on_table) {
 1002418:	d0a72517 	ldw	r2,-25452(gp)
 100241c:	10800503 	ldbu	r2,20(r2)
 1002420:	10803fcc 	andi	r2,r2,255
 1002424:	1080201c 	xori	r2,r2,128
 1002428:	10bfe004 	addi	r2,r2,-128
 100242c:	e0bfff15 	stw	r2,-4(fp)
 1002430:	e0ffff17 	ldw	r3,-4(fp)
 1002434:	188000e0 	cmpeqi	r2,r3,3
 1002438:	1000111e 	bne	r2,zero,1002480 <main+0x66c>
 100243c:	e0ffff17 	ldw	r3,-4(fp)
 1002440:	18800108 	cmpgei	r2,r3,4
 1002444:	1000041e 	bne	r2,zero,1002458 <main+0x644>
 1002448:	e0ffff17 	ldw	r3,-4(fp)
 100244c:	1805003a 	cmpeq	r2,r3,zero
 1002450:	1000081e 	bne	r2,zero,1002474 <main+0x660>
 1002454:	003e7d06 	br	1001e4c <main+0x38>
 1002458:	e0ffff17 	ldw	r3,-4(fp)
 100245c:	18800120 	cmpeqi	r2,r3,4
 1002460:	10000a1e 	bne	r2,zero,100248c <main+0x678>
 1002464:	e0ffff17 	ldw	r3,-4(fp)
 1002468:	18800160 	cmpeqi	r2,r3,5
 100246c:	10000a1e 	bne	r2,zero,1002498 <main+0x684>
 1002470:	003e7606 	br	1001e4c <main+0x38>
		  case 0: state = FLOP; break;
 1002474:	00800084 	movi	r2,2
 1002478:	e0bffd15 	stw	r2,-12(fp)
 100247c:	003e7306 	br	1001e4c <main+0x38>
		  case 3: state = TURN; break;
 1002480:	008000c4 	movi	r2,3
 1002484:	e0bffd15 	stw	r2,-12(fp)
 1002488:	003e7006 	br	1001e4c <main+0x38>
		  case 4: state = RIVER; break;
 100248c:	00800104 	movi	r2,4
 1002490:	e0bffd15 	stw	r2,-12(fp)
 1002494:	003e6d06 	br	1001e4c <main+0x38>
		  case 5: state = GAME_OVER; break;
 1002498:	00800184 	movi	r2,6
 100249c:	e0bffd15 	stw	r2,-12(fp)
		}
		HOTSTUFF: break;
 10024a0:	003e6a06 	br	1001e4c <main+0x38>

	  case GAME_OVER:
		printf("\n\nGAME OVER\n\n");
 10024a4:	010040b4 	movhi	r4,258
 10024a8:	21317904 	addi	r4,r4,-14876
 10024ac:	1002f200 	call	1002f20 <puts>

		free(dealer->deck);
 10024b0:	d0a72517 	ldw	r2,-25452(gp)
 10024b4:	11000117 	ldw	r4,4(r2)
 10024b8:	100267c0 	call	100267c <free>
		free(dealer->players);
 10024bc:	d0a72517 	ldw	r2,-25452(gp)
 10024c0:	11000017 	ldw	r4,0(r2)
 10024c4:	100267c0 	call	100267c <free>
		free(dealer);
 10024c8:	d1272517 	ldw	r4,-25452(gp)
 10024cc:	100267c0 	call	100267c <free>

		return 0;
 10024d0:	0005883a 	mov	r2,zero
	}
	}


	 return 0;
}
 10024d4:	e037883a 	mov	sp,fp
 10024d8:	dfc00517 	ldw	ra,20(sp)
 10024dc:	df000417 	ldw	fp,16(sp)
 10024e0:	dcc00317 	ldw	r19,12(sp)
 10024e4:	dc800217 	ldw	r18,8(sp)
 10024e8:	dc400117 	ldw	r17,4(sp)
 10024ec:	dc000017 	ldw	r16,0(sp)
 10024f0:	dec00604 	addi	sp,sp,24
 10024f4:	f800283a 	ret

010024f8 <udivmodsi4>:
 10024f8:	29001b2e 	bgeu	r5,r4,1002568 <udivmodsi4+0x70>
 10024fc:	28001a16 	blt	r5,zero,1002568 <udivmodsi4+0x70>
 1002500:	00800044 	movi	r2,1
 1002504:	0007883a 	mov	r3,zero
 1002508:	01c007c4 	movi	r7,31
 100250c:	00000306 	br	100251c <udivmodsi4+0x24>
 1002510:	19c01326 	beq	r3,r7,1002560 <udivmodsi4+0x68>
 1002514:	18c00044 	addi	r3,r3,1
 1002518:	28000416 	blt	r5,zero,100252c <udivmodsi4+0x34>
 100251c:	294b883a 	add	r5,r5,r5
 1002520:	1085883a 	add	r2,r2,r2
 1002524:	293ffa36 	bltu	r5,r4,1002510 <udivmodsi4+0x18>
 1002528:	10000d26 	beq	r2,zero,1002560 <udivmodsi4+0x68>
 100252c:	0007883a 	mov	r3,zero
 1002530:	21400236 	bltu	r4,r5,100253c <udivmodsi4+0x44>
 1002534:	2149c83a 	sub	r4,r4,r5
 1002538:	1886b03a 	or	r3,r3,r2
 100253c:	1004d07a 	srli	r2,r2,1
 1002540:	280ad07a 	srli	r5,r5,1
 1002544:	103ffa1e 	bne	r2,zero,1002530 <udivmodsi4+0x38>
 1002548:	30000226 	beq	r6,zero,1002554 <udivmodsi4+0x5c>
 100254c:	2005883a 	mov	r2,r4
 1002550:	f800283a 	ret
 1002554:	1809883a 	mov	r4,r3
 1002558:	2005883a 	mov	r2,r4
 100255c:	f800283a 	ret
 1002560:	0007883a 	mov	r3,zero
 1002564:	003ff806 	br	1002548 <udivmodsi4+0x50>
 1002568:	00800044 	movi	r2,1
 100256c:	0007883a 	mov	r3,zero
 1002570:	003fef06 	br	1002530 <udivmodsi4+0x38>

01002574 <__divsi3>:
 1002574:	defffe04 	addi	sp,sp,-8
 1002578:	dc000015 	stw	r16,0(sp)
 100257c:	dfc00115 	stw	ra,4(sp)
 1002580:	0021883a 	mov	r16,zero
 1002584:	20000c16 	blt	r4,zero,10025b8 <__divsi3+0x44>
 1002588:	000d883a 	mov	r6,zero
 100258c:	28000e16 	blt	r5,zero,10025c8 <__divsi3+0x54>
 1002590:	10024f80 	call	10024f8 <udivmodsi4>
 1002594:	1007883a 	mov	r3,r2
 1002598:	8005003a 	cmpeq	r2,r16,zero
 100259c:	1000011e 	bne	r2,zero,10025a4 <__divsi3+0x30>
 10025a0:	00c7c83a 	sub	r3,zero,r3
 10025a4:	1805883a 	mov	r2,r3
 10025a8:	dfc00117 	ldw	ra,4(sp)
 10025ac:	dc000017 	ldw	r16,0(sp)
 10025b0:	dec00204 	addi	sp,sp,8
 10025b4:	f800283a 	ret
 10025b8:	0109c83a 	sub	r4,zero,r4
 10025bc:	04000044 	movi	r16,1
 10025c0:	000d883a 	mov	r6,zero
 10025c4:	283ff20e 	bge	r5,zero,1002590 <__divsi3+0x1c>
 10025c8:	014bc83a 	sub	r5,zero,r5
 10025cc:	8021003a 	cmpeq	r16,r16,zero
 10025d0:	003fef06 	br	1002590 <__divsi3+0x1c>

010025d4 <__modsi3>:
 10025d4:	deffff04 	addi	sp,sp,-4
 10025d8:	dfc00015 	stw	ra,0(sp)
 10025dc:	01800044 	movi	r6,1
 10025e0:	2807883a 	mov	r3,r5
 10025e4:	20000416 	blt	r4,zero,10025f8 <__modsi3+0x24>
 10025e8:	28000c16 	blt	r5,zero,100261c <__modsi3+0x48>
 10025ec:	dfc00017 	ldw	ra,0(sp)
 10025f0:	dec00104 	addi	sp,sp,4
 10025f4:	10024f81 	jmpi	10024f8 <udivmodsi4>
 10025f8:	0109c83a 	sub	r4,zero,r4
 10025fc:	28000b16 	blt	r5,zero,100262c <__modsi3+0x58>
 1002600:	180b883a 	mov	r5,r3
 1002604:	01800044 	movi	r6,1
 1002608:	10024f80 	call	10024f8 <udivmodsi4>
 100260c:	0085c83a 	sub	r2,zero,r2
 1002610:	dfc00017 	ldw	ra,0(sp)
 1002614:	dec00104 	addi	sp,sp,4
 1002618:	f800283a 	ret
 100261c:	014bc83a 	sub	r5,zero,r5
 1002620:	dfc00017 	ldw	ra,0(sp)
 1002624:	dec00104 	addi	sp,sp,4
 1002628:	10024f81 	jmpi	10024f8 <udivmodsi4>
 100262c:	0147c83a 	sub	r3,zero,r5
 1002630:	003ff306 	br	1002600 <__modsi3+0x2c>

01002634 <__udivsi3>:
 1002634:	000d883a 	mov	r6,zero
 1002638:	10024f81 	jmpi	10024f8 <udivmodsi4>

0100263c <__umodsi3>:
 100263c:	01800044 	movi	r6,1
 1002640:	10024f81 	jmpi	10024f8 <udivmodsi4>

01002644 <__mulsi3>:
 1002644:	20000a26 	beq	r4,zero,1002670 <__mulsi3+0x2c>
 1002648:	0007883a 	mov	r3,zero
 100264c:	2080004c 	andi	r2,r4,1
 1002650:	1005003a 	cmpeq	r2,r2,zero
 1002654:	2008d07a 	srli	r4,r4,1
 1002658:	1000011e 	bne	r2,zero,1002660 <__mulsi3+0x1c>
 100265c:	1947883a 	add	r3,r3,r5
 1002660:	294b883a 	add	r5,r5,r5
 1002664:	203ff91e 	bne	r4,zero,100264c <__mulsi3+0x8>
 1002668:	1805883a 	mov	r2,r3
 100266c:	f800283a 	ret
 1002670:	0007883a 	mov	r3,zero
 1002674:	1805883a 	mov	r2,r3
 1002678:	f800283a 	ret

0100267c <free>:
 100267c:	008040b4 	movhi	r2,258
 1002680:	10ba3e04 	addi	r2,r2,-5896
 1002684:	200b883a 	mov	r5,r4
 1002688:	11000017 	ldw	r4,0(r2)
 100268c:	10089c01 	jmpi	10089c0 <_free_r>

01002690 <malloc>:
 1002690:	008040b4 	movhi	r2,258
 1002694:	10ba3e04 	addi	r2,r2,-5896
 1002698:	200b883a 	mov	r5,r4
 100269c:	11000017 	ldw	r4,0(r2)
 10026a0:	10026a41 	jmpi	10026a4 <_malloc_r>

010026a4 <_malloc_r>:
 10026a4:	defff604 	addi	sp,sp,-40
 10026a8:	28c002c4 	addi	r3,r5,11
 10026ac:	00800584 	movi	r2,22
 10026b0:	dc800215 	stw	r18,8(sp)
 10026b4:	dfc00915 	stw	ra,36(sp)
 10026b8:	df000815 	stw	fp,32(sp)
 10026bc:	ddc00715 	stw	r23,28(sp)
 10026c0:	dd800615 	stw	r22,24(sp)
 10026c4:	dd400515 	stw	r21,20(sp)
 10026c8:	dd000415 	stw	r20,16(sp)
 10026cc:	dcc00315 	stw	r19,12(sp)
 10026d0:	dc400115 	stw	r17,4(sp)
 10026d4:	dc000015 	stw	r16,0(sp)
 10026d8:	2025883a 	mov	r18,r4
 10026dc:	10c01236 	bltu	r2,r3,1002728 <_malloc_r+0x84>
 10026e0:	04400404 	movi	r17,16
 10026e4:	8940142e 	bgeu	r17,r5,1002738 <_malloc_r+0x94>
 10026e8:	00800304 	movi	r2,12
 10026ec:	0007883a 	mov	r3,zero
 10026f0:	90800015 	stw	r2,0(r18)
 10026f4:	1805883a 	mov	r2,r3
 10026f8:	dfc00917 	ldw	ra,36(sp)
 10026fc:	df000817 	ldw	fp,32(sp)
 1002700:	ddc00717 	ldw	r23,28(sp)
 1002704:	dd800617 	ldw	r22,24(sp)
 1002708:	dd400517 	ldw	r21,20(sp)
 100270c:	dd000417 	ldw	r20,16(sp)
 1002710:	dcc00317 	ldw	r19,12(sp)
 1002714:	dc800217 	ldw	r18,8(sp)
 1002718:	dc400117 	ldw	r17,4(sp)
 100271c:	dc000017 	ldw	r16,0(sp)
 1002720:	dec00a04 	addi	sp,sp,40
 1002724:	f800283a 	ret
 1002728:	00bffe04 	movi	r2,-8
 100272c:	18a2703a 	and	r17,r3,r2
 1002730:	883fed16 	blt	r17,zero,10026e8 <_malloc_r+0x44>
 1002734:	897fec36 	bltu	r17,r5,10026e8 <_malloc_r+0x44>
 1002738:	9009883a 	mov	r4,r18
 100273c:	10120f40 	call	10120f4 <__malloc_lock>
 1002740:	00807dc4 	movi	r2,503
 1002744:	14402b2e 	bgeu	r2,r17,10027f4 <_malloc_r+0x150>
 1002748:	8806d27a 	srli	r3,r17,9
 100274c:	18003f1e 	bne	r3,zero,100284c <_malloc_r+0x1a8>
 1002750:	880cd0fa 	srli	r6,r17,3
 1002754:	300490fa 	slli	r2,r6,3
 1002758:	02c040b4 	movhi	r11,258
 100275c:	5af33d04 	addi	r11,r11,-13068
 1002760:	12cb883a 	add	r5,r2,r11
 1002764:	2c000317 	ldw	r16,12(r5)
 1002768:	580f883a 	mov	r7,r11
 100276c:	2c00041e 	bne	r5,r16,1002780 <_malloc_r+0xdc>
 1002770:	00000a06 	br	100279c <_malloc_r+0xf8>
 1002774:	1800860e 	bge	r3,zero,1002990 <_malloc_r+0x2ec>
 1002778:	84000317 	ldw	r16,12(r16)
 100277c:	2c000726 	beq	r5,r16,100279c <_malloc_r+0xf8>
 1002780:	80800117 	ldw	r2,4(r16)
 1002784:	00ffff04 	movi	r3,-4
 1002788:	10c8703a 	and	r4,r2,r3
 100278c:	2447c83a 	sub	r3,r4,r17
 1002790:	008003c4 	movi	r2,15
 1002794:	10fff70e 	bge	r2,r3,1002774 <_malloc_r+0xd0>
 1002798:	31bfffc4 	addi	r6,r6,-1
 100279c:	32400044 	addi	r9,r6,1
 10027a0:	028040b4 	movhi	r10,258
 10027a4:	52b33f04 	addi	r10,r10,-13060
 10027a8:	54000217 	ldw	r16,8(r10)
 10027ac:	8280a026 	beq	r16,r10,1002a30 <_malloc_r+0x38c>
 10027b0:	80800117 	ldw	r2,4(r16)
 10027b4:	00ffff04 	movi	r3,-4
 10027b8:	10ca703a 	and	r5,r2,r3
 10027bc:	2c4dc83a 	sub	r6,r5,r17
 10027c0:	008003c4 	movi	r2,15
 10027c4:	11808316 	blt	r2,r6,10029d4 <_malloc_r+0x330>
 10027c8:	52800315 	stw	r10,12(r10)
 10027cc:	52800215 	stw	r10,8(r10)
 10027d0:	30002916 	blt	r6,zero,1002878 <_malloc_r+0x1d4>
 10027d4:	8147883a 	add	r3,r16,r5
 10027d8:	18800117 	ldw	r2,4(r3)
 10027dc:	9009883a 	mov	r4,r18
 10027e0:	10800054 	ori	r2,r2,1
 10027e4:	18800115 	stw	r2,4(r3)
 10027e8:	10121140 	call	1012114 <__malloc_unlock>
 10027ec:	80c00204 	addi	r3,r16,8
 10027f0:	003fc006 	br	10026f4 <_malloc_r+0x50>
 10027f4:	02c040b4 	movhi	r11,258
 10027f8:	5af33d04 	addi	r11,r11,-13068
 10027fc:	8ac5883a 	add	r2,r17,r11
 1002800:	14000317 	ldw	r16,12(r2)
 1002804:	580f883a 	mov	r7,r11
 1002808:	8806d0fa 	srli	r3,r17,3
 100280c:	14006c26 	beq	r2,r16,10029c0 <_malloc_r+0x31c>
 1002810:	80c00117 	ldw	r3,4(r16)
 1002814:	00bfff04 	movi	r2,-4
 1002818:	81800317 	ldw	r6,12(r16)
 100281c:	1886703a 	and	r3,r3,r2
 1002820:	80c7883a 	add	r3,r16,r3
 1002824:	18800117 	ldw	r2,4(r3)
 1002828:	81400217 	ldw	r5,8(r16)
 100282c:	9009883a 	mov	r4,r18
 1002830:	10800054 	ori	r2,r2,1
 1002834:	18800115 	stw	r2,4(r3)
 1002838:	31400215 	stw	r5,8(r6)
 100283c:	29800315 	stw	r6,12(r5)
 1002840:	10121140 	call	1012114 <__malloc_unlock>
 1002844:	80c00204 	addi	r3,r16,8
 1002848:	003faa06 	br	10026f4 <_malloc_r+0x50>
 100284c:	00800104 	movi	r2,4
 1002850:	10c0052e 	bgeu	r2,r3,1002868 <_malloc_r+0x1c4>
 1002854:	00800504 	movi	r2,20
 1002858:	10c07836 	bltu	r2,r3,1002a3c <_malloc_r+0x398>
 100285c:	198016c4 	addi	r6,r3,91
 1002860:	300490fa 	slli	r2,r6,3
 1002864:	003fbc06 	br	1002758 <_malloc_r+0xb4>
 1002868:	8804d1ba 	srli	r2,r17,6
 100286c:	11800e04 	addi	r6,r2,56
 1002870:	300490fa 	slli	r2,r6,3
 1002874:	003fb806 	br	1002758 <_malloc_r+0xb4>
 1002878:	00807fc4 	movi	r2,511
 100287c:	1140bb36 	bltu	r2,r5,1002b6c <_malloc_r+0x4c8>
 1002880:	2806d0fa 	srli	r3,r5,3
 1002884:	573ffe04 	addi	fp,r10,-8
 1002888:	00800044 	movi	r2,1
 100288c:	180890fa 	slli	r4,r3,3
 1002890:	1807d0ba 	srai	r3,r3,2
 1002894:	e1c00117 	ldw	r7,4(fp)
 1002898:	5909883a 	add	r4,r11,r4
 100289c:	21400217 	ldw	r5,8(r4)
 10028a0:	10c4983a 	sll	r2,r2,r3
 10028a4:	81000315 	stw	r4,12(r16)
 10028a8:	81400215 	stw	r5,8(r16)
 10028ac:	388eb03a 	or	r7,r7,r2
 10028b0:	2c000315 	stw	r16,12(r5)
 10028b4:	24000215 	stw	r16,8(r4)
 10028b8:	e1c00115 	stw	r7,4(fp)
 10028bc:	4807883a 	mov	r3,r9
 10028c0:	4800cd16 	blt	r9,zero,1002bf8 <_malloc_r+0x554>
 10028c4:	1807d0ba 	srai	r3,r3,2
 10028c8:	00800044 	movi	r2,1
 10028cc:	10c8983a 	sll	r4,r2,r3
 10028d0:	39004436 	bltu	r7,r4,10029e4 <_malloc_r+0x340>
 10028d4:	21c4703a 	and	r2,r4,r7
 10028d8:	10000a1e 	bne	r2,zero,1002904 <_malloc_r+0x260>
 10028dc:	2109883a 	add	r4,r4,r4
 10028e0:	00bfff04 	movi	r2,-4
 10028e4:	4884703a 	and	r2,r9,r2
 10028e8:	3906703a 	and	r3,r7,r4
 10028ec:	12400104 	addi	r9,r2,4
 10028f0:	1800041e 	bne	r3,zero,1002904 <_malloc_r+0x260>
 10028f4:	2109883a 	add	r4,r4,r4
 10028f8:	3904703a 	and	r2,r7,r4
 10028fc:	4a400104 	addi	r9,r9,4
 1002900:	103ffc26 	beq	r2,zero,10028f4 <_malloc_r+0x250>
 1002904:	480490fa 	slli	r2,r9,3
 1002908:	4819883a 	mov	r12,r9
 100290c:	023fff04 	movi	r8,-4
 1002910:	589b883a 	add	r13,r11,r2
 1002914:	6807883a 	mov	r3,r13
 1002918:	014003c4 	movi	r5,15
 100291c:	1c000317 	ldw	r16,12(r3)
 1002920:	1c00041e 	bne	r3,r16,1002934 <_malloc_r+0x290>
 1002924:	0000a706 	br	1002bc4 <_malloc_r+0x520>
 1002928:	3000ab0e 	bge	r6,zero,1002bd8 <_malloc_r+0x534>
 100292c:	84000317 	ldw	r16,12(r16)
 1002930:	1c00a426 	beq	r3,r16,1002bc4 <_malloc_r+0x520>
 1002934:	80800117 	ldw	r2,4(r16)
 1002938:	1204703a 	and	r2,r2,r8
 100293c:	144dc83a 	sub	r6,r2,r17
 1002940:	29bff90e 	bge	r5,r6,1002928 <_malloc_r+0x284>
 1002944:	81000317 	ldw	r4,12(r16)
 1002948:	80c00217 	ldw	r3,8(r16)
 100294c:	89400054 	ori	r5,r17,1
 1002950:	8445883a 	add	r2,r16,r17
 1002954:	20c00215 	stw	r3,8(r4)
 1002958:	19000315 	stw	r4,12(r3)
 100295c:	81400115 	stw	r5,4(r16)
 1002960:	1187883a 	add	r3,r2,r6
 1002964:	31000054 	ori	r4,r6,1
 1002968:	50800315 	stw	r2,12(r10)
 100296c:	50800215 	stw	r2,8(r10)
 1002970:	19800015 	stw	r6,0(r3)
 1002974:	11000115 	stw	r4,4(r2)
 1002978:	12800215 	stw	r10,8(r2)
 100297c:	12800315 	stw	r10,12(r2)
 1002980:	9009883a 	mov	r4,r18
 1002984:	10121140 	call	1012114 <__malloc_unlock>
 1002988:	80c00204 	addi	r3,r16,8
 100298c:	003f5906 	br	10026f4 <_malloc_r+0x50>
 1002990:	8109883a 	add	r4,r16,r4
 1002994:	20800117 	ldw	r2,4(r4)
 1002998:	80c00217 	ldw	r3,8(r16)
 100299c:	81400317 	ldw	r5,12(r16)
 10029a0:	10800054 	ori	r2,r2,1
 10029a4:	20800115 	stw	r2,4(r4)
 10029a8:	28c00215 	stw	r3,8(r5)
 10029ac:	19400315 	stw	r5,12(r3)
 10029b0:	9009883a 	mov	r4,r18
 10029b4:	10121140 	call	1012114 <__malloc_unlock>
 10029b8:	80c00204 	addi	r3,r16,8
 10029bc:	003f4d06 	br	10026f4 <_malloc_r+0x50>
 10029c0:	80800204 	addi	r2,r16,8
 10029c4:	14000317 	ldw	r16,12(r2)
 10029c8:	143f911e 	bne	r2,r16,1002810 <_malloc_r+0x16c>
 10029cc:	1a400084 	addi	r9,r3,2
 10029d0:	003f7306 	br	10027a0 <_malloc_r+0xfc>
 10029d4:	88c00054 	ori	r3,r17,1
 10029d8:	8445883a 	add	r2,r16,r17
 10029dc:	80c00115 	stw	r3,4(r16)
 10029e0:	003fdf06 	br	1002960 <_malloc_r+0x2bc>
 10029e4:	e4000217 	ldw	r16,8(fp)
 10029e8:	00bfff04 	movi	r2,-4
 10029ec:	80c00117 	ldw	r3,4(r16)
 10029f0:	802d883a 	mov	r22,r16
 10029f4:	18aa703a 	and	r21,r3,r2
 10029f8:	ac401636 	bltu	r21,r17,1002a54 <_malloc_r+0x3b0>
 10029fc:	ac49c83a 	sub	r4,r21,r17
 1002a00:	008003c4 	movi	r2,15
 1002a04:	1100130e 	bge	r2,r4,1002a54 <_malloc_r+0x3b0>
 1002a08:	88800054 	ori	r2,r17,1
 1002a0c:	8447883a 	add	r3,r16,r17
 1002a10:	80800115 	stw	r2,4(r16)
 1002a14:	20800054 	ori	r2,r4,1
 1002a18:	18800115 	stw	r2,4(r3)
 1002a1c:	e0c00215 	stw	r3,8(fp)
 1002a20:	9009883a 	mov	r4,r18
 1002a24:	10121140 	call	1012114 <__malloc_unlock>
 1002a28:	80c00204 	addi	r3,r16,8
 1002a2c:	003f3106 	br	10026f4 <_malloc_r+0x50>
 1002a30:	39c00117 	ldw	r7,4(r7)
 1002a34:	573ffe04 	addi	fp,r10,-8
 1002a38:	003fa006 	br	10028bc <_malloc_r+0x218>
 1002a3c:	00801504 	movi	r2,84
 1002a40:	10c06736 	bltu	r2,r3,1002be0 <_malloc_r+0x53c>
 1002a44:	8804d33a 	srli	r2,r17,12
 1002a48:	11801b84 	addi	r6,r2,110
 1002a4c:	300490fa 	slli	r2,r6,3
 1002a50:	003f4106 	br	1002758 <_malloc_r+0xb4>
 1002a54:	d0a72b17 	ldw	r2,-25428(gp)
 1002a58:	d0e00317 	ldw	r3,-32756(gp)
 1002a5c:	053fffc4 	movi	r20,-1
 1002a60:	10800404 	addi	r2,r2,16
 1002a64:	88a7883a 	add	r19,r17,r2
 1002a68:	1d000326 	beq	r3,r20,1002a78 <_malloc_r+0x3d4>
 1002a6c:	98c3ffc4 	addi	r3,r19,4095
 1002a70:	00bc0004 	movi	r2,-4096
 1002a74:	18a6703a 	and	r19,r3,r2
 1002a78:	9009883a 	mov	r4,r18
 1002a7c:	980b883a 	mov	r5,r19
 1002a80:	1002fc80 	call	1002fc8 <_sbrk_r>
 1002a84:	1009883a 	mov	r4,r2
 1002a88:	15000426 	beq	r2,r20,1002a9c <_malloc_r+0x3f8>
 1002a8c:	854b883a 	add	r5,r16,r21
 1002a90:	1029883a 	mov	r20,r2
 1002a94:	11405a2e 	bgeu	r2,r5,1002c00 <_malloc_r+0x55c>
 1002a98:	87000c26 	beq	r16,fp,1002acc <_malloc_r+0x428>
 1002a9c:	e4000217 	ldw	r16,8(fp)
 1002aa0:	80c00117 	ldw	r3,4(r16)
 1002aa4:	00bfff04 	movi	r2,-4
 1002aa8:	1884703a 	and	r2,r3,r2
 1002aac:	14400336 	bltu	r2,r17,1002abc <_malloc_r+0x418>
 1002ab0:	1449c83a 	sub	r4,r2,r17
 1002ab4:	008003c4 	movi	r2,15
 1002ab8:	113fd316 	blt	r2,r4,1002a08 <_malloc_r+0x364>
 1002abc:	9009883a 	mov	r4,r18
 1002ac0:	10121140 	call	1012114 <__malloc_unlock>
 1002ac4:	0007883a 	mov	r3,zero
 1002ac8:	003f0a06 	br	10026f4 <_malloc_r+0x50>
 1002acc:	05c040b4 	movhi	r23,258
 1002ad0:	bdc18604 	addi	r23,r23,1560
 1002ad4:	b8800017 	ldw	r2,0(r23)
 1002ad8:	988d883a 	add	r6,r19,r2
 1002adc:	b9800015 	stw	r6,0(r23)
 1002ae0:	d0e00317 	ldw	r3,-32756(gp)
 1002ae4:	00bfffc4 	movi	r2,-1
 1002ae8:	18808e26 	beq	r3,r2,1002d24 <_malloc_r+0x680>
 1002aec:	2145c83a 	sub	r2,r4,r5
 1002af0:	3085883a 	add	r2,r6,r2
 1002af4:	b8800015 	stw	r2,0(r23)
 1002af8:	20c001cc 	andi	r3,r4,7
 1002afc:	18005f1e 	bne	r3,zero,1002c7c <_malloc_r+0x5d8>
 1002b00:	000b883a 	mov	r5,zero
 1002b04:	a4c5883a 	add	r2,r20,r19
 1002b08:	1083ffcc 	andi	r2,r2,4095
 1002b0c:	00c40004 	movi	r3,4096
 1002b10:	1887c83a 	sub	r3,r3,r2
 1002b14:	28e7883a 	add	r19,r5,r3
 1002b18:	9009883a 	mov	r4,r18
 1002b1c:	980b883a 	mov	r5,r19
 1002b20:	1002fc80 	call	1002fc8 <_sbrk_r>
 1002b24:	1007883a 	mov	r3,r2
 1002b28:	00bfffc4 	movi	r2,-1
 1002b2c:	18807a26 	beq	r3,r2,1002d18 <_malloc_r+0x674>
 1002b30:	1d05c83a 	sub	r2,r3,r20
 1002b34:	9885883a 	add	r2,r19,r2
 1002b38:	10c00054 	ori	r3,r2,1
 1002b3c:	b8800017 	ldw	r2,0(r23)
 1002b40:	a021883a 	mov	r16,r20
 1002b44:	a0c00115 	stw	r3,4(r20)
 1002b48:	9885883a 	add	r2,r19,r2
 1002b4c:	b8800015 	stw	r2,0(r23)
 1002b50:	e5000215 	stw	r20,8(fp)
 1002b54:	b7003626 	beq	r22,fp,1002c30 <_malloc_r+0x58c>
 1002b58:	018003c4 	movi	r6,15
 1002b5c:	35404b36 	bltu	r6,r21,1002c8c <_malloc_r+0x5e8>
 1002b60:	00800044 	movi	r2,1
 1002b64:	a0800115 	stw	r2,4(r20)
 1002b68:	003fcd06 	br	1002aa0 <_malloc_r+0x3fc>
 1002b6c:	2808d27a 	srli	r4,r5,9
 1002b70:	2000371e 	bne	r4,zero,1002c50 <_malloc_r+0x5ac>
 1002b74:	2808d0fa 	srli	r4,r5,3
 1002b78:	200690fa 	slli	r3,r4,3
 1002b7c:	1ad1883a 	add	r8,r3,r11
 1002b80:	41800217 	ldw	r6,8(r8)
 1002b84:	41805b26 	beq	r8,r6,1002cf4 <_malloc_r+0x650>
 1002b88:	30800117 	ldw	r2,4(r6)
 1002b8c:	00ffff04 	movi	r3,-4
 1002b90:	10c4703a 	and	r2,r2,r3
 1002b94:	2880022e 	bgeu	r5,r2,1002ba0 <_malloc_r+0x4fc>
 1002b98:	31800217 	ldw	r6,8(r6)
 1002b9c:	41bffa1e 	bne	r8,r6,1002b88 <_malloc_r+0x4e4>
 1002ba0:	32000317 	ldw	r8,12(r6)
 1002ba4:	39c00117 	ldw	r7,4(r7)
 1002ba8:	82000315 	stw	r8,12(r16)
 1002bac:	81800215 	stw	r6,8(r16)
 1002bb0:	070040b4 	movhi	fp,258
 1002bb4:	e7333d04 	addi	fp,fp,-13068
 1002bb8:	34000315 	stw	r16,12(r6)
 1002bbc:	44000215 	stw	r16,8(r8)
 1002bc0:	003f3e06 	br	10028bc <_malloc_r+0x218>
 1002bc4:	63000044 	addi	r12,r12,1
 1002bc8:	608000cc 	andi	r2,r12,3
 1002bcc:	10005d26 	beq	r2,zero,1002d44 <_malloc_r+0x6a0>
 1002bd0:	18c00204 	addi	r3,r3,8
 1002bd4:	003f5106 	br	100291c <_malloc_r+0x278>
 1002bd8:	8089883a 	add	r4,r16,r2
 1002bdc:	003f6d06 	br	1002994 <_malloc_r+0x2f0>
 1002be0:	00805504 	movi	r2,340
 1002be4:	10c02036 	bltu	r2,r3,1002c68 <_malloc_r+0x5c4>
 1002be8:	8804d3fa 	srli	r2,r17,15
 1002bec:	11801dc4 	addi	r6,r2,119
 1002bf0:	300490fa 	slli	r2,r6,3
 1002bf4:	003ed806 	br	1002758 <_malloc_r+0xb4>
 1002bf8:	48c000c4 	addi	r3,r9,3
 1002bfc:	003f3106 	br	10028c4 <_malloc_r+0x220>
 1002c00:	05c040b4 	movhi	r23,258
 1002c04:	bdc18604 	addi	r23,r23,1560
 1002c08:	b8800017 	ldw	r2,0(r23)
 1002c0c:	988d883a 	add	r6,r19,r2
 1002c10:	b9800015 	stw	r6,0(r23)
 1002c14:	293fb21e 	bne	r5,r4,1002ae0 <_malloc_r+0x43c>
 1002c18:	2083ffcc 	andi	r2,r4,4095
 1002c1c:	103fb01e 	bne	r2,zero,1002ae0 <_malloc_r+0x43c>
 1002c20:	e4000217 	ldw	r16,8(fp)
 1002c24:	9d45883a 	add	r2,r19,r21
 1002c28:	10800054 	ori	r2,r2,1
 1002c2c:	80800115 	stw	r2,4(r16)
 1002c30:	b8c00017 	ldw	r3,0(r23)
 1002c34:	d0a72c17 	ldw	r2,-25424(gp)
 1002c38:	10c0012e 	bgeu	r2,r3,1002c40 <_malloc_r+0x59c>
 1002c3c:	d0e72c15 	stw	r3,-25424(gp)
 1002c40:	d0a72d17 	ldw	r2,-25420(gp)
 1002c44:	10ff962e 	bgeu	r2,r3,1002aa0 <_malloc_r+0x3fc>
 1002c48:	d0e72d15 	stw	r3,-25420(gp)
 1002c4c:	003f9406 	br	1002aa0 <_malloc_r+0x3fc>
 1002c50:	00800104 	movi	r2,4
 1002c54:	11001e36 	bltu	r2,r4,1002cd0 <_malloc_r+0x62c>
 1002c58:	2804d1ba 	srli	r2,r5,6
 1002c5c:	11000e04 	addi	r4,r2,56
 1002c60:	200690fa 	slli	r3,r4,3
 1002c64:	003fc506 	br	1002b7c <_malloc_r+0x4d8>
 1002c68:	00815504 	movi	r2,1364
 1002c6c:	10c01d2e 	bgeu	r2,r3,1002ce4 <_malloc_r+0x640>
 1002c70:	01801f84 	movi	r6,126
 1002c74:	0080fc04 	movi	r2,1008
 1002c78:	003eb706 	br	1002758 <_malloc_r+0xb4>
 1002c7c:	00800204 	movi	r2,8
 1002c80:	10cbc83a 	sub	r5,r2,r3
 1002c84:	2169883a 	add	r20,r4,r5
 1002c88:	003f9e06 	br	1002b04 <_malloc_r+0x460>
 1002c8c:	00bffe04 	movi	r2,-8
 1002c90:	a93ffd04 	addi	r4,r21,-12
 1002c94:	2088703a 	and	r4,r4,r2
 1002c98:	b10b883a 	add	r5,r22,r4
 1002c9c:	00c00144 	movi	r3,5
 1002ca0:	28c00215 	stw	r3,8(r5)
 1002ca4:	28c00115 	stw	r3,4(r5)
 1002ca8:	b0800117 	ldw	r2,4(r22)
 1002cac:	1080004c 	andi	r2,r2,1
 1002cb0:	2084b03a 	or	r2,r4,r2
 1002cb4:	b0800115 	stw	r2,4(r22)
 1002cb8:	313fdd2e 	bgeu	r6,r4,1002c30 <_malloc_r+0x58c>
 1002cbc:	b1400204 	addi	r5,r22,8
 1002cc0:	9009883a 	mov	r4,r18
 1002cc4:	10089c00 	call	10089c0 <_free_r>
 1002cc8:	e4000217 	ldw	r16,8(fp)
 1002ccc:	003fd806 	br	1002c30 <_malloc_r+0x58c>
 1002cd0:	00800504 	movi	r2,20
 1002cd4:	11001536 	bltu	r2,r4,1002d2c <_malloc_r+0x688>
 1002cd8:	210016c4 	addi	r4,r4,91
 1002cdc:	200690fa 	slli	r3,r4,3
 1002ce0:	003fa606 	br	1002b7c <_malloc_r+0x4d8>
 1002ce4:	8804d4ba 	srli	r2,r17,18
 1002ce8:	11801f04 	addi	r6,r2,124
 1002cec:	300490fa 	slli	r2,r6,3
 1002cf0:	003e9906 	br	1002758 <_malloc_r+0xb4>
 1002cf4:	2009d0ba 	srai	r4,r4,2
 1002cf8:	014040b4 	movhi	r5,258
 1002cfc:	29733d04 	addi	r5,r5,-13068
 1002d00:	00c00044 	movi	r3,1
 1002d04:	28800117 	ldw	r2,4(r5)
 1002d08:	1906983a 	sll	r3,r3,r4
 1002d0c:	10c4b03a 	or	r2,r2,r3
 1002d10:	28800115 	stw	r2,4(r5)
 1002d14:	003fa306 	br	1002ba4 <_malloc_r+0x500>
 1002d18:	0027883a 	mov	r19,zero
 1002d1c:	00c00044 	movi	r3,1
 1002d20:	003f8606 	br	1002b3c <_malloc_r+0x498>
 1002d24:	d1200315 	stw	r4,-32756(gp)
 1002d28:	003f7306 	br	1002af8 <_malloc_r+0x454>
 1002d2c:	00801504 	movi	r2,84
 1002d30:	11001936 	bltu	r2,r4,1002d98 <_malloc_r+0x6f4>
 1002d34:	2804d33a 	srli	r2,r5,12
 1002d38:	11001b84 	addi	r4,r2,110
 1002d3c:	200690fa 	slli	r3,r4,3
 1002d40:	003f8e06 	br	1002b7c <_malloc_r+0x4d8>
 1002d44:	480b883a 	mov	r5,r9
 1002d48:	6807883a 	mov	r3,r13
 1002d4c:	288000cc 	andi	r2,r5,3
 1002d50:	18fffe04 	addi	r3,r3,-8
 1002d54:	297fffc4 	addi	r5,r5,-1
 1002d58:	10001526 	beq	r2,zero,1002db0 <_malloc_r+0x70c>
 1002d5c:	18800217 	ldw	r2,8(r3)
 1002d60:	10fffa26 	beq	r2,r3,1002d4c <_malloc_r+0x6a8>
 1002d64:	2109883a 	add	r4,r4,r4
 1002d68:	393f1e36 	bltu	r7,r4,10029e4 <_malloc_r+0x340>
 1002d6c:	203f1d26 	beq	r4,zero,10029e4 <_malloc_r+0x340>
 1002d70:	21c4703a 	and	r2,r4,r7
 1002d74:	10000226 	beq	r2,zero,1002d80 <_malloc_r+0x6dc>
 1002d78:	6013883a 	mov	r9,r12
 1002d7c:	003ee106 	br	1002904 <_malloc_r+0x260>
 1002d80:	2109883a 	add	r4,r4,r4
 1002d84:	3904703a 	and	r2,r7,r4
 1002d88:	63000104 	addi	r12,r12,4
 1002d8c:	103ffc26 	beq	r2,zero,1002d80 <_malloc_r+0x6dc>
 1002d90:	6013883a 	mov	r9,r12
 1002d94:	003edb06 	br	1002904 <_malloc_r+0x260>
 1002d98:	00805504 	movi	r2,340
 1002d9c:	11000836 	bltu	r2,r4,1002dc0 <_malloc_r+0x71c>
 1002da0:	2804d3fa 	srli	r2,r5,15
 1002da4:	11001dc4 	addi	r4,r2,119
 1002da8:	200690fa 	slli	r3,r4,3
 1002dac:	003f7306 	br	1002b7c <_malloc_r+0x4d8>
 1002db0:	0104303a 	nor	r2,zero,r4
 1002db4:	388e703a 	and	r7,r7,r2
 1002db8:	e1c00115 	stw	r7,4(fp)
 1002dbc:	003fe906 	br	1002d64 <_malloc_r+0x6c0>
 1002dc0:	00815504 	movi	r2,1364
 1002dc4:	1100032e 	bgeu	r2,r4,1002dd4 <_malloc_r+0x730>
 1002dc8:	01001f84 	movi	r4,126
 1002dcc:	00c0fc04 	movi	r3,1008
 1002dd0:	003f6a06 	br	1002b7c <_malloc_r+0x4d8>
 1002dd4:	2804d4ba 	srli	r2,r5,18
 1002dd8:	11001f04 	addi	r4,r2,124
 1002ddc:	200690fa 	slli	r3,r4,3
 1002de0:	003f6606 	br	1002b7c <_malloc_r+0x4d8>

01002de4 <printf>:
 1002de4:	defffb04 	addi	sp,sp,-20
 1002de8:	dfc00115 	stw	ra,4(sp)
 1002dec:	d9400215 	stw	r5,8(sp)
 1002df0:	d9800315 	stw	r6,12(sp)
 1002df4:	d9c00415 	stw	r7,16(sp)
 1002df8:	008040b4 	movhi	r2,258
 1002dfc:	10ba3e04 	addi	r2,r2,-5896
 1002e00:	10c00017 	ldw	r3,0(r2)
 1002e04:	200b883a 	mov	r5,r4
 1002e08:	d8800204 	addi	r2,sp,8
 1002e0c:	19000217 	ldw	r4,8(r3)
 1002e10:	100d883a 	mov	r6,r2
 1002e14:	d8800015 	stw	r2,0(sp)
 1002e18:	10050440 	call	1005044 <__vfprintf_internal>
 1002e1c:	dfc00117 	ldw	ra,4(sp)
 1002e20:	dec00504 	addi	sp,sp,20
 1002e24:	f800283a 	ret

01002e28 <_printf_r>:
 1002e28:	defffc04 	addi	sp,sp,-16
 1002e2c:	dfc00115 	stw	ra,4(sp)
 1002e30:	d9800215 	stw	r6,8(sp)
 1002e34:	d9c00315 	stw	r7,12(sp)
 1002e38:	280d883a 	mov	r6,r5
 1002e3c:	21400217 	ldw	r5,8(r4)
 1002e40:	d8c00204 	addi	r3,sp,8
 1002e44:	180f883a 	mov	r7,r3
 1002e48:	d8c00015 	stw	r3,0(sp)
 1002e4c:	10031800 	call	1003180 <___vfprintf_internal_r>
 1002e50:	dfc00117 	ldw	ra,4(sp)
 1002e54:	dec00404 	addi	sp,sp,16
 1002e58:	f800283a 	ret

01002e5c <putchar>:
 1002e5c:	008040b4 	movhi	r2,258
 1002e60:	10ba3e04 	addi	r2,r2,-5896
 1002e64:	11800017 	ldw	r6,0(r2)
 1002e68:	200b883a 	mov	r5,r4
 1002e6c:	3009883a 	mov	r4,r6
 1002e70:	31800217 	ldw	r6,8(r6)
 1002e74:	100ab001 	jmpi	100ab00 <_putc_r>

01002e78 <_putchar_r>:
 1002e78:	21800217 	ldw	r6,8(r4)
 1002e7c:	100ab001 	jmpi	100ab00 <_putc_r>

01002e80 <_puts_r>:
 1002e80:	defff604 	addi	sp,sp,-40
 1002e84:	dc400715 	stw	r17,28(sp)
 1002e88:	2023883a 	mov	r17,r4
 1002e8c:	2809883a 	mov	r4,r5
 1002e90:	dfc00915 	stw	ra,36(sp)
 1002e94:	dcc00815 	stw	r19,32(sp)
 1002e98:	2827883a 	mov	r19,r5
 1002e9c:	10030b40 	call	10030b4 <strlen>
 1002ea0:	89400217 	ldw	r5,8(r17)
 1002ea4:	00c040b4 	movhi	r3,258
 1002ea8:	18f17d04 	addi	r3,r3,-14860
 1002eac:	01c00044 	movi	r7,1
 1002eb0:	12000044 	addi	r8,r2,1
 1002eb4:	d8c00515 	stw	r3,20(sp)
 1002eb8:	d9c00615 	stw	r7,24(sp)
 1002ebc:	d8c00304 	addi	r3,sp,12
 1002ec0:	01c00084 	movi	r7,2
 1002ec4:	8809883a 	mov	r4,r17
 1002ec8:	d80d883a 	mov	r6,sp
 1002ecc:	d8c00015 	stw	r3,0(sp)
 1002ed0:	dcc00315 	stw	r19,12(sp)
 1002ed4:	da000215 	stw	r8,8(sp)
 1002ed8:	d9c00115 	stw	r7,4(sp)
 1002edc:	d8800415 	stw	r2,16(sp)
 1002ee0:	1008cd40 	call	1008cd4 <__sfvwrite_r>
 1002ee4:	00ffffc4 	movi	r3,-1
 1002ee8:	10000626 	beq	r2,zero,1002f04 <_puts_r+0x84>
 1002eec:	1805883a 	mov	r2,r3
 1002ef0:	dfc00917 	ldw	ra,36(sp)
 1002ef4:	dcc00817 	ldw	r19,32(sp)
 1002ef8:	dc400717 	ldw	r17,28(sp)
 1002efc:	dec00a04 	addi	sp,sp,40
 1002f00:	f800283a 	ret
 1002f04:	00c00284 	movi	r3,10
 1002f08:	1805883a 	mov	r2,r3
 1002f0c:	dfc00917 	ldw	ra,36(sp)
 1002f10:	dcc00817 	ldw	r19,32(sp)
 1002f14:	dc400717 	ldw	r17,28(sp)
 1002f18:	dec00a04 	addi	sp,sp,40
 1002f1c:	f800283a 	ret

01002f20 <puts>:
 1002f20:	008040b4 	movhi	r2,258
 1002f24:	10ba3e04 	addi	r2,r2,-5896
 1002f28:	200b883a 	mov	r5,r4
 1002f2c:	11000017 	ldw	r4,0(r2)
 1002f30:	1002e801 	jmpi	1002e80 <_puts_r>

01002f34 <srand>:
 1002f34:	008040b4 	movhi	r2,258
 1002f38:	10ba3e04 	addi	r2,r2,-5896
 1002f3c:	11400017 	ldw	r5,0(r2)
 1002f40:	0007883a 	mov	r3,zero
 1002f44:	28c02a15 	stw	r3,168(r5)
 1002f48:	29002915 	stw	r4,164(r5)
 1002f4c:	f800283a 	ret

01002f50 <rand>:
 1002f50:	defffe04 	addi	sp,sp,-8
 1002f54:	008040b4 	movhi	r2,258
 1002f58:	10ba3e04 	addi	r2,r2,-5896
 1002f5c:	dc000015 	stw	r16,0(sp)
 1002f60:	14000017 	ldw	r16,0(r2)
 1002f64:	dfc00115 	stw	ra,4(sp)
 1002f68:	00932574 	movhi	r2,19605
 1002f6c:	109fcb44 	addi	r2,r2,32557
 1002f70:	82002917 	ldw	r8,164(r16)
 1002f74:	82402a17 	ldw	r9,168(r16)
 1002f78:	00d614b4 	movhi	r3,22610
 1002f7c:	18fd0b44 	addi	r3,r3,-3027
 1002f80:	4009883a 	mov	r4,r8
 1002f84:	180f883a 	mov	r7,r3
 1002f88:	100d883a 	mov	r6,r2
 1002f8c:	480b883a 	mov	r5,r9
 1002f90:	100ee580 	call	100ee58 <__muldi3>
 1002f94:	02000044 	movi	r8,1
 1002f98:	1209883a 	add	r4,r2,r8
 1002f9c:	2095803a 	cmpltu	r10,r4,r2
 1002fa0:	50d5883a 	add	r10,r10,r3
 1002fa4:	81002915 	stw	r4,164(r16)
 1002fa8:	01200034 	movhi	r4,32768
 1002fac:	213fffc4 	addi	r4,r4,-1
 1002fb0:	2284703a 	and	r2,r4,r10
 1002fb4:	82802a15 	stw	r10,168(r16)
 1002fb8:	dfc00117 	ldw	ra,4(sp)
 1002fbc:	dc000017 	ldw	r16,0(sp)
 1002fc0:	dec00204 	addi	sp,sp,8
 1002fc4:	f800283a 	ret

01002fc8 <_sbrk_r>:
 1002fc8:	defffd04 	addi	sp,sp,-12
 1002fcc:	dc000015 	stw	r16,0(sp)
 1002fd0:	040040b4 	movhi	r16,258
 1002fd4:	84016704 	addi	r16,r16,1436
 1002fd8:	dc400115 	stw	r17,4(sp)
 1002fdc:	80000015 	stw	zero,0(r16)
 1002fe0:	2023883a 	mov	r17,r4
 1002fe4:	2809883a 	mov	r4,r5
 1002fe8:	dfc00215 	stw	ra,8(sp)
 1002fec:	10125c80 	call	10125c8 <sbrk>
 1002ff0:	1007883a 	mov	r3,r2
 1002ff4:	00bfffc4 	movi	r2,-1
 1002ff8:	18800626 	beq	r3,r2,1003014 <_sbrk_r+0x4c>
 1002ffc:	1805883a 	mov	r2,r3
 1003000:	dfc00217 	ldw	ra,8(sp)
 1003004:	dc400117 	ldw	r17,4(sp)
 1003008:	dc000017 	ldw	r16,0(sp)
 100300c:	dec00304 	addi	sp,sp,12
 1003010:	f800283a 	ret
 1003014:	80800017 	ldw	r2,0(r16)
 1003018:	103ff826 	beq	r2,zero,1002ffc <_sbrk_r+0x34>
 100301c:	88800015 	stw	r2,0(r17)
 1003020:	1805883a 	mov	r2,r3
 1003024:	dfc00217 	ldw	ra,8(sp)
 1003028:	dc400117 	ldw	r17,4(sp)
 100302c:	dc000017 	ldw	r16,0(sp)
 1003030:	dec00304 	addi	sp,sp,12
 1003034:	f800283a 	ret

01003038 <_scanf_r>:
 1003038:	defffc04 	addi	sp,sp,-16
 100303c:	dfc00115 	stw	ra,4(sp)
 1003040:	d9800215 	stw	r6,8(sp)
 1003044:	d9c00315 	stw	r7,12(sp)
 1003048:	280d883a 	mov	r6,r5
 100304c:	21400117 	ldw	r5,4(r4)
 1003050:	d8c00204 	addi	r3,sp,8
 1003054:	180f883a 	mov	r7,r3
 1003058:	d8c00015 	stw	r3,0(sp)
 100305c:	10050680 	call	1005068 <__svfscanf_r>
 1003060:	dfc00117 	ldw	ra,4(sp)
 1003064:	dec00404 	addi	sp,sp,16
 1003068:	f800283a 	ret

0100306c <scanf>:
 100306c:	defffb04 	addi	sp,sp,-20
 1003070:	dfc00115 	stw	ra,4(sp)
 1003074:	d9400215 	stw	r5,8(sp)
 1003078:	d9800315 	stw	r6,12(sp)
 100307c:	d9c00415 	stw	r7,16(sp)
 1003080:	008040b4 	movhi	r2,258
 1003084:	10ba3e04 	addi	r2,r2,-5896
 1003088:	11400017 	ldw	r5,0(r2)
 100308c:	200d883a 	mov	r6,r4
 1003090:	d8800204 	addi	r2,sp,8
 1003094:	2809883a 	mov	r4,r5
 1003098:	29400117 	ldw	r5,4(r5)
 100309c:	100f883a 	mov	r7,r2
 10030a0:	d8800015 	stw	r2,0(sp)
 10030a4:	10050680 	call	1005068 <__svfscanf_r>
 10030a8:	dfc00117 	ldw	ra,4(sp)
 10030ac:	dec00504 	addi	sp,sp,20
 10030b0:	f800283a 	ret

010030b4 <strlen>:
 10030b4:	208000cc 	andi	r2,r4,3
 10030b8:	2011883a 	mov	r8,r4
 10030bc:	1000161e 	bne	r2,zero,1003118 <strlen+0x64>
 10030c0:	20c00017 	ldw	r3,0(r4)
 10030c4:	017fbff4 	movhi	r5,65279
 10030c8:	297fbfc4 	addi	r5,r5,-257
 10030cc:	01e02074 	movhi	r7,32897
 10030d0:	39e02004 	addi	r7,r7,-32640
 10030d4:	1945883a 	add	r2,r3,r5
 10030d8:	11c4703a 	and	r2,r2,r7
 10030dc:	00c6303a 	nor	r3,zero,r3
 10030e0:	1886703a 	and	r3,r3,r2
 10030e4:	18000c1e 	bne	r3,zero,1003118 <strlen+0x64>
 10030e8:	280d883a 	mov	r6,r5
 10030ec:	380b883a 	mov	r5,r7
 10030f0:	21000104 	addi	r4,r4,4
 10030f4:	20800017 	ldw	r2,0(r4)
 10030f8:	1187883a 	add	r3,r2,r6
 10030fc:	1946703a 	and	r3,r3,r5
 1003100:	0084303a 	nor	r2,zero,r2
 1003104:	10c4703a 	and	r2,r2,r3
 1003108:	103ff926 	beq	r2,zero,10030f0 <strlen+0x3c>
 100310c:	20800007 	ldb	r2,0(r4)
 1003110:	10000326 	beq	r2,zero,1003120 <strlen+0x6c>
 1003114:	21000044 	addi	r4,r4,1
 1003118:	20800007 	ldb	r2,0(r4)
 100311c:	103ffd1e 	bne	r2,zero,1003114 <strlen+0x60>
 1003120:	2205c83a 	sub	r2,r4,r8
 1003124:	f800283a 	ret

01003128 <__sprint_r>:
 1003128:	30800217 	ldw	r2,8(r6)
 100312c:	defffe04 	addi	sp,sp,-8
 1003130:	dc000015 	stw	r16,0(sp)
 1003134:	dfc00115 	stw	ra,4(sp)
 1003138:	3021883a 	mov	r16,r6
 100313c:	0007883a 	mov	r3,zero
 1003140:	1000061e 	bne	r2,zero,100315c <__sprint_r+0x34>
 1003144:	1805883a 	mov	r2,r3
 1003148:	30000115 	stw	zero,4(r6)
 100314c:	dfc00117 	ldw	ra,4(sp)
 1003150:	dc000017 	ldw	r16,0(sp)
 1003154:	dec00204 	addi	sp,sp,8
 1003158:	f800283a 	ret
 100315c:	1008cd40 	call	1008cd4 <__sfvwrite_r>
 1003160:	1007883a 	mov	r3,r2
 1003164:	1805883a 	mov	r2,r3
 1003168:	80000115 	stw	zero,4(r16)
 100316c:	80000215 	stw	zero,8(r16)
 1003170:	dfc00117 	ldw	ra,4(sp)
 1003174:	dc000017 	ldw	r16,0(sp)
 1003178:	dec00204 	addi	sp,sp,8
 100317c:	f800283a 	ret

01003180 <___vfprintf_internal_r>:
 1003180:	defea404 	addi	sp,sp,-1392
 1003184:	dd815815 	stw	r22,1376(sp)
 1003188:	dc015215 	stw	r16,1352(sp)
 100318c:	d9c15115 	stw	r7,1348(sp)
 1003190:	dfc15b15 	stw	ra,1388(sp)
 1003194:	df015a15 	stw	fp,1384(sp)
 1003198:	ddc15915 	stw	r23,1380(sp)
 100319c:	dd415715 	stw	r21,1372(sp)
 10031a0:	dd015615 	stw	r20,1368(sp)
 10031a4:	dcc15515 	stw	r19,1364(sp)
 10031a8:	dc815415 	stw	r18,1360(sp)
 10031ac:	dc415315 	stw	r17,1356(sp)
 10031b0:	282d883a 	mov	r22,r5
 10031b4:	3021883a 	mov	r16,r6
 10031b8:	d9014f15 	stw	r4,1340(sp)
 10031bc:	10093240 	call	1009324 <_localeconv_r>
 10031c0:	10800017 	ldw	r2,0(r2)
 10031c4:	d9c15117 	ldw	r7,1348(sp)
 10031c8:	d8814915 	stw	r2,1316(sp)
 10031cc:	d8814f17 	ldw	r2,1340(sp)
 10031d0:	10000226 	beq	r2,zero,10031dc <___vfprintf_internal_r+0x5c>
 10031d4:	10800e17 	ldw	r2,56(r2)
 10031d8:	10020d26 	beq	r2,zero,1003a10 <___vfprintf_internal_r+0x890>
 10031dc:	b080030b 	ldhu	r2,12(r22)
 10031e0:	1080020c 	andi	r2,r2,8
 10031e4:	10020e26 	beq	r2,zero,1003a20 <___vfprintf_internal_r+0x8a0>
 10031e8:	b0800417 	ldw	r2,16(r22)
 10031ec:	10020c26 	beq	r2,zero,1003a20 <___vfprintf_internal_r+0x8a0>
 10031f0:	b200030b 	ldhu	r8,12(r22)
 10031f4:	00800284 	movi	r2,10
 10031f8:	40c0068c 	andi	r3,r8,26
 10031fc:	18802f1e 	bne	r3,r2,10032bc <___vfprintf_internal_r+0x13c>
 1003200:	b080038f 	ldh	r2,14(r22)
 1003204:	10002d16 	blt	r2,zero,10032bc <___vfprintf_internal_r+0x13c>
 1003208:	b240038b 	ldhu	r9,14(r22)
 100320c:	b2800717 	ldw	r10,28(r22)
 1003210:	b2c00917 	ldw	r11,36(r22)
 1003214:	d9014f17 	ldw	r4,1340(sp)
 1003218:	dc402904 	addi	r17,sp,164
 100321c:	d8804004 	addi	r2,sp,256
 1003220:	00c10004 	movi	r3,1024
 1003224:	423fff4c 	andi	r8,r8,65533
 1003228:	800d883a 	mov	r6,r16
 100322c:	880b883a 	mov	r5,r17
 1003230:	da002c0d 	sth	r8,176(sp)
 1003234:	da402c8d 	sth	r9,178(sp)
 1003238:	da803015 	stw	r10,192(sp)
 100323c:	dac03215 	stw	r11,200(sp)
 1003240:	d8802d15 	stw	r2,180(sp)
 1003244:	d8c02e15 	stw	r3,184(sp)
 1003248:	d8802915 	stw	r2,164(sp)
 100324c:	d8c02b15 	stw	r3,172(sp)
 1003250:	d8002f15 	stw	zero,188(sp)
 1003254:	10031800 	call	1003180 <___vfprintf_internal_r>
 1003258:	d8814b15 	stw	r2,1324(sp)
 100325c:	10000416 	blt	r2,zero,1003270 <___vfprintf_internal_r+0xf0>
 1003260:	d9014f17 	ldw	r4,1340(sp)
 1003264:	880b883a 	mov	r5,r17
 1003268:	10081240 	call	1008124 <_fflush_r>
 100326c:	1002321e 	bne	r2,zero,1003b38 <___vfprintf_internal_r+0x9b8>
 1003270:	d8802c0b 	ldhu	r2,176(sp)
 1003274:	1080100c 	andi	r2,r2,64
 1003278:	10000326 	beq	r2,zero,1003288 <___vfprintf_internal_r+0x108>
 100327c:	b080030b 	ldhu	r2,12(r22)
 1003280:	10801014 	ori	r2,r2,64
 1003284:	b080030d 	sth	r2,12(r22)
 1003288:	d8814b17 	ldw	r2,1324(sp)
 100328c:	dfc15b17 	ldw	ra,1388(sp)
 1003290:	df015a17 	ldw	fp,1384(sp)
 1003294:	ddc15917 	ldw	r23,1380(sp)
 1003298:	dd815817 	ldw	r22,1376(sp)
 100329c:	dd415717 	ldw	r21,1372(sp)
 10032a0:	dd015617 	ldw	r20,1368(sp)
 10032a4:	dcc15517 	ldw	r19,1364(sp)
 10032a8:	dc815417 	ldw	r18,1360(sp)
 10032ac:	dc415317 	ldw	r17,1356(sp)
 10032b0:	dc015217 	ldw	r16,1352(sp)
 10032b4:	dec15c04 	addi	sp,sp,1392
 10032b8:	f800283a 	ret
 10032bc:	0005883a 	mov	r2,zero
 10032c0:	0007883a 	mov	r3,zero
 10032c4:	dd401904 	addi	r21,sp,100
 10032c8:	d8814215 	stw	r2,1288(sp)
 10032cc:	802f883a 	mov	r23,r16
 10032d0:	d8c14315 	stw	r3,1292(sp)
 10032d4:	d8014b15 	stw	zero,1324(sp)
 10032d8:	d8014815 	stw	zero,1312(sp)
 10032dc:	d8014415 	stw	zero,1296(sp)
 10032e0:	d8014715 	stw	zero,1308(sp)
 10032e4:	dd400c15 	stw	r21,48(sp)
 10032e8:	d8000e15 	stw	zero,56(sp)
 10032ec:	d8000d15 	stw	zero,52(sp)
 10032f0:	b8800007 	ldb	r2,0(r23)
 10032f4:	10001926 	beq	r2,zero,100335c <___vfprintf_internal_r+0x1dc>
 10032f8:	00c00944 	movi	r3,37
 10032fc:	10c01726 	beq	r2,r3,100335c <___vfprintf_internal_r+0x1dc>
 1003300:	b821883a 	mov	r16,r23
 1003304:	00000106 	br	100330c <___vfprintf_internal_r+0x18c>
 1003308:	10c00326 	beq	r2,r3,1003318 <___vfprintf_internal_r+0x198>
 100330c:	84000044 	addi	r16,r16,1
 1003310:	80800007 	ldb	r2,0(r16)
 1003314:	103ffc1e 	bne	r2,zero,1003308 <___vfprintf_internal_r+0x188>
 1003318:	85e7c83a 	sub	r19,r16,r23
 100331c:	98000e26 	beq	r19,zero,1003358 <___vfprintf_internal_r+0x1d8>
 1003320:	dc800e17 	ldw	r18,56(sp)
 1003324:	dc400d17 	ldw	r17,52(sp)
 1003328:	008001c4 	movi	r2,7
 100332c:	94e5883a 	add	r18,r18,r19
 1003330:	8c400044 	addi	r17,r17,1
 1003334:	adc00015 	stw	r23,0(r21)
 1003338:	dc800e15 	stw	r18,56(sp)
 100333c:	acc00115 	stw	r19,4(r21)
 1003340:	dc400d15 	stw	r17,52(sp)
 1003344:	14428b16 	blt	r2,r17,1003d74 <___vfprintf_internal_r+0xbf4>
 1003348:	ad400204 	addi	r21,r21,8
 100334c:	d9014b17 	ldw	r4,1324(sp)
 1003350:	24c9883a 	add	r4,r4,r19
 1003354:	d9014b15 	stw	r4,1324(sp)
 1003358:	802f883a 	mov	r23,r16
 100335c:	b8800007 	ldb	r2,0(r23)
 1003360:	10013c26 	beq	r2,zero,1003854 <___vfprintf_internal_r+0x6d4>
 1003364:	bdc00044 	addi	r23,r23,1
 1003368:	d8000405 	stb	zero,16(sp)
 100336c:	b8c00007 	ldb	r3,0(r23)
 1003370:	04ffffc4 	movi	r19,-1
 1003374:	d8014c15 	stw	zero,1328(sp)
 1003378:	d8014a15 	stw	zero,1320(sp)
 100337c:	d8c14d15 	stw	r3,1332(sp)
 1003380:	bdc00044 	addi	r23,r23,1
 1003384:	d9414d17 	ldw	r5,1332(sp)
 1003388:	00801604 	movi	r2,88
 100338c:	28fff804 	addi	r3,r5,-32
 1003390:	10c06036 	bltu	r2,r3,1003514 <___vfprintf_internal_r+0x394>
 1003394:	18c5883a 	add	r2,r3,r3
 1003398:	1085883a 	add	r2,r2,r2
 100339c:	00c04034 	movhi	r3,256
 10033a0:	18ccec04 	addi	r3,r3,13232
 10033a4:	10c5883a 	add	r2,r2,r3
 10033a8:	11000017 	ldw	r4,0(r2)
 10033ac:	2000683a 	jmp	r4
 10033b0:	01004324 	muli	r4,zero,268
 10033b4:	01003514 	movui	r4,212
 10033b8:	01003514 	movui	r4,212
 10033bc:	01004310 	cmplti	r4,zero,268
 10033c0:	01003514 	movui	r4,212
 10033c4:	01003514 	movui	r4,212
 10033c8:	01003514 	movui	r4,212
 10033cc:	01003514 	movui	r4,212
 10033d0:	01003514 	movui	r4,212
 10033d4:	01003514 	movui	r4,212
 10033d8:	010040f0 	cmpltui	r4,zero,259
 10033dc:	01004300 	call	100430 <__alt_mem_onchip_memory+0x100430>
 10033e0:	01003514 	movui	r4,212
 10033e4:	01004108 	cmpgei	r4,zero,260
 10033e8:	010043a8 	cmpgeui	r4,zero,270
 10033ec:	01003514 	movui	r4,212
 10033f0:	01004394 	movui	r4,270
 10033f4:	01004350 	cmplti	r4,zero,269
 10033f8:	01004350 	cmplti	r4,zero,269
 10033fc:	01004350 	cmplti	r4,zero,269
 1003400:	01004350 	cmplti	r4,zero,269
 1003404:	01004350 	cmplti	r4,zero,269
 1003408:	01004350 	cmplti	r4,zero,269
 100340c:	01004350 	cmplti	r4,zero,269
 1003410:	01004350 	cmplti	r4,zero,269
 1003414:	01004350 	cmplti	r4,zero,269
 1003418:	01003514 	movui	r4,212
 100341c:	01003514 	movui	r4,212
 1003420:	01003514 	movui	r4,212
 1003424:	01003514 	movui	r4,212
 1003428:	01003514 	movui	r4,212
 100342c:	01003514 	movui	r4,212
 1003430:	01003514 	movui	r4,212
 1003434:	01003514 	movui	r4,212
 1003438:	01003514 	movui	r4,212
 100343c:	01003514 	movui	r4,212
 1003440:	01003b6c 	andhi	r4,zero,237
 1003444:	010041d8 	cmpnei	r4,zero,263
 1003448:	01003514 	movui	r4,212
 100344c:	010041d8 	cmpnei	r4,zero,263
 1003450:	01003514 	movui	r4,212
 1003454:	01003514 	movui	r4,212
 1003458:	01003514 	movui	r4,212
 100345c:	01003514 	movui	r4,212
 1003460:	0100433c 	xorhi	r4,zero,268
 1003464:	01003514 	movui	r4,212
 1003468:	01003514 	movui	r4,212
 100346c:	01003c20 	cmpeqi	r4,zero,240
 1003470:	01003514 	movui	r4,212
 1003474:	01003514 	movui	r4,212
 1003478:	01003514 	movui	r4,212
 100347c:	01003514 	movui	r4,212
 1003480:	01003514 	movui	r4,212
 1003484:	01003c6c 	andhi	r4,zero,241
 1003488:	01003514 	movui	r4,212
 100348c:	01003514 	movui	r4,212
 1003490:	0100428c 	andi	r4,zero,266
 1003494:	01003514 	movui	r4,212
 1003498:	01003514 	movui	r4,212
 100349c:	01003514 	movui	r4,212
 10034a0:	01003514 	movui	r4,212
 10034a4:	01003514 	movui	r4,212
 10034a8:	01003514 	movui	r4,212
 10034ac:	01003514 	movui	r4,212
 10034b0:	01003514 	movui	r4,212
 10034b4:	01003514 	movui	r4,212
 10034b8:	01003514 	movui	r4,212
 10034bc:	01004260 	cmpeqi	r4,zero,265
 10034c0:	01003b78 	rdprs	r4,zero,237
 10034c4:	010041d8 	cmpnei	r4,zero,263
 10034c8:	010041d8 	cmpnei	r4,zero,263
 10034cc:	010041d8 	cmpnei	r4,zero,263
 10034d0:	010041c4 	movi	r4,263
 10034d4:	01003b78 	rdprs	r4,zero,237
 10034d8:	01003514 	movui	r4,212
 10034dc:	01003514 	movui	r4,212
 10034e0:	0100414c 	andi	r4,zero,261
 10034e4:	01003514 	movui	r4,212
 10034e8:	0100411c 	xori	r4,zero,260
 10034ec:	01003c2c 	andhi	r4,zero,240
 10034f0:	0100417c 	xorhi	r4,zero,261
 10034f4:	01004168 	cmpgeui	r4,zero,261
 10034f8:	01003514 	movui	r4,212
 10034fc:	01004410 	cmplti	r4,zero,272
 1003500:	01003514 	movui	r4,212
 1003504:	01003c78 	rdprs	r4,zero,241
 1003508:	01003514 	movui	r4,212
 100350c:	01003514 	movui	r4,212
 1003510:	010042f0 	cmpltui	r4,zero,267
 1003514:	d9014d17 	ldw	r4,1332(sp)
 1003518:	2000ce26 	beq	r4,zero,1003854 <___vfprintf_internal_r+0x6d4>
 100351c:	01400044 	movi	r5,1
 1003520:	d9800f04 	addi	r6,sp,60
 1003524:	d9c14015 	stw	r7,1280(sp)
 1003528:	d9414515 	stw	r5,1300(sp)
 100352c:	d9814115 	stw	r6,1284(sp)
 1003530:	280f883a 	mov	r7,r5
 1003534:	d9000f05 	stb	r4,60(sp)
 1003538:	d8000405 	stb	zero,16(sp)
 100353c:	d8014615 	stw	zero,1304(sp)
 1003540:	d8c14c17 	ldw	r3,1328(sp)
 1003544:	1880008c 	andi	r2,r3,2
 1003548:	1005003a 	cmpeq	r2,r2,zero
 100354c:	d8815015 	stw	r2,1344(sp)
 1003550:	1000031e 	bne	r2,zero,1003560 <___vfprintf_internal_r+0x3e0>
 1003554:	d9014517 	ldw	r4,1300(sp)
 1003558:	21000084 	addi	r4,r4,2
 100355c:	d9014515 	stw	r4,1300(sp)
 1003560:	d9414c17 	ldw	r5,1328(sp)
 1003564:	2940210c 	andi	r5,r5,132
 1003568:	d9414e15 	stw	r5,1336(sp)
 100356c:	28002d1e 	bne	r5,zero,1003624 <___vfprintf_internal_r+0x4a4>
 1003570:	d9814a17 	ldw	r6,1320(sp)
 1003574:	d8814517 	ldw	r2,1300(sp)
 1003578:	30a1c83a 	sub	r16,r6,r2
 100357c:	0400290e 	bge	zero,r16,1003624 <___vfprintf_internal_r+0x4a4>
 1003580:	00800404 	movi	r2,16
 1003584:	14045e0e 	bge	r2,r16,1004700 <___vfprintf_internal_r+0x1580>
 1003588:	dc800e17 	ldw	r18,56(sp)
 100358c:	dc400d17 	ldw	r17,52(sp)
 1003590:	1027883a 	mov	r19,r2
 1003594:	070040b4 	movhi	fp,258
 1003598:	e7319984 	addi	fp,fp,-14746
 100359c:	050001c4 	movi	r20,7
 10035a0:	00000306 	br	10035b0 <___vfprintf_internal_r+0x430>
 10035a4:	843ffc04 	addi	r16,r16,-16
 10035a8:	ad400204 	addi	r21,r21,8
 10035ac:	9c00130e 	bge	r19,r16,10035fc <___vfprintf_internal_r+0x47c>
 10035b0:	94800404 	addi	r18,r18,16
 10035b4:	8c400044 	addi	r17,r17,1
 10035b8:	af000015 	stw	fp,0(r21)
 10035bc:	acc00115 	stw	r19,4(r21)
 10035c0:	dc800e15 	stw	r18,56(sp)
 10035c4:	dc400d15 	stw	r17,52(sp)
 10035c8:	a47ff60e 	bge	r20,r17,10035a4 <___vfprintf_internal_r+0x424>
 10035cc:	d9014f17 	ldw	r4,1340(sp)
 10035d0:	b00b883a 	mov	r5,r22
 10035d4:	d9800c04 	addi	r6,sp,48
 10035d8:	d9c15115 	stw	r7,1348(sp)
 10035dc:	10031280 	call	1003128 <__sprint_r>
 10035e0:	d9c15117 	ldw	r7,1348(sp)
 10035e4:	10009e1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 10035e8:	843ffc04 	addi	r16,r16,-16
 10035ec:	dc800e17 	ldw	r18,56(sp)
 10035f0:	dc400d17 	ldw	r17,52(sp)
 10035f4:	dd401904 	addi	r21,sp,100
 10035f8:	9c3fed16 	blt	r19,r16,10035b0 <___vfprintf_internal_r+0x430>
 10035fc:	9425883a 	add	r18,r18,r16
 1003600:	8c400044 	addi	r17,r17,1
 1003604:	008001c4 	movi	r2,7
 1003608:	af000015 	stw	fp,0(r21)
 100360c:	ac000115 	stw	r16,4(r21)
 1003610:	dc800e15 	stw	r18,56(sp)
 1003614:	dc400d15 	stw	r17,52(sp)
 1003618:	1441f516 	blt	r2,r17,1003df0 <___vfprintf_internal_r+0xc70>
 100361c:	ad400204 	addi	r21,r21,8
 1003620:	00000206 	br	100362c <___vfprintf_internal_r+0x4ac>
 1003624:	dc800e17 	ldw	r18,56(sp)
 1003628:	dc400d17 	ldw	r17,52(sp)
 100362c:	d8800407 	ldb	r2,16(sp)
 1003630:	10000b26 	beq	r2,zero,1003660 <___vfprintf_internal_r+0x4e0>
 1003634:	00800044 	movi	r2,1
 1003638:	94800044 	addi	r18,r18,1
 100363c:	8c400044 	addi	r17,r17,1
 1003640:	a8800115 	stw	r2,4(r21)
 1003644:	d8c00404 	addi	r3,sp,16
 1003648:	008001c4 	movi	r2,7
 100364c:	a8c00015 	stw	r3,0(r21)
 1003650:	dc800e15 	stw	r18,56(sp)
 1003654:	dc400d15 	stw	r17,52(sp)
 1003658:	1441da16 	blt	r2,r17,1003dc4 <___vfprintf_internal_r+0xc44>
 100365c:	ad400204 	addi	r21,r21,8
 1003660:	d9015017 	ldw	r4,1344(sp)
 1003664:	20000b1e 	bne	r4,zero,1003694 <___vfprintf_internal_r+0x514>
 1003668:	d8800444 	addi	r2,sp,17
 100366c:	94800084 	addi	r18,r18,2
 1003670:	8c400044 	addi	r17,r17,1
 1003674:	a8800015 	stw	r2,0(r21)
 1003678:	00c00084 	movi	r3,2
 100367c:	008001c4 	movi	r2,7
 1003680:	a8c00115 	stw	r3,4(r21)
 1003684:	dc800e15 	stw	r18,56(sp)
 1003688:	dc400d15 	stw	r17,52(sp)
 100368c:	1441c216 	blt	r2,r17,1003d98 <___vfprintf_internal_r+0xc18>
 1003690:	ad400204 	addi	r21,r21,8
 1003694:	d9414e17 	ldw	r5,1336(sp)
 1003698:	00802004 	movi	r2,128
 100369c:	2880b126 	beq	r5,r2,1003964 <___vfprintf_internal_r+0x7e4>
 10036a0:	d8c14617 	ldw	r3,1304(sp)
 10036a4:	19e1c83a 	sub	r16,r3,r7
 10036a8:	0400260e 	bge	zero,r16,1003744 <___vfprintf_internal_r+0x5c4>
 10036ac:	00800404 	movi	r2,16
 10036b0:	1403cf0e 	bge	r2,r16,10045f0 <___vfprintf_internal_r+0x1470>
 10036b4:	1027883a 	mov	r19,r2
 10036b8:	070040b4 	movhi	fp,258
 10036bc:	e7319584 	addi	fp,fp,-14762
 10036c0:	050001c4 	movi	r20,7
 10036c4:	00000306 	br	10036d4 <___vfprintf_internal_r+0x554>
 10036c8:	843ffc04 	addi	r16,r16,-16
 10036cc:	ad400204 	addi	r21,r21,8
 10036d0:	9c00130e 	bge	r19,r16,1003720 <___vfprintf_internal_r+0x5a0>
 10036d4:	94800404 	addi	r18,r18,16
 10036d8:	8c400044 	addi	r17,r17,1
 10036dc:	af000015 	stw	fp,0(r21)
 10036e0:	acc00115 	stw	r19,4(r21)
 10036e4:	dc800e15 	stw	r18,56(sp)
 10036e8:	dc400d15 	stw	r17,52(sp)
 10036ec:	a47ff60e 	bge	r20,r17,10036c8 <___vfprintf_internal_r+0x548>
 10036f0:	d9014f17 	ldw	r4,1340(sp)
 10036f4:	b00b883a 	mov	r5,r22
 10036f8:	d9800c04 	addi	r6,sp,48
 10036fc:	d9c15115 	stw	r7,1348(sp)
 1003700:	10031280 	call	1003128 <__sprint_r>
 1003704:	d9c15117 	ldw	r7,1348(sp)
 1003708:	1000551e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 100370c:	843ffc04 	addi	r16,r16,-16
 1003710:	dc800e17 	ldw	r18,56(sp)
 1003714:	dc400d17 	ldw	r17,52(sp)
 1003718:	dd401904 	addi	r21,sp,100
 100371c:	9c3fed16 	blt	r19,r16,10036d4 <___vfprintf_internal_r+0x554>
 1003720:	9425883a 	add	r18,r18,r16
 1003724:	8c400044 	addi	r17,r17,1
 1003728:	008001c4 	movi	r2,7
 100372c:	af000015 	stw	fp,0(r21)
 1003730:	ac000115 	stw	r16,4(r21)
 1003734:	dc800e15 	stw	r18,56(sp)
 1003738:	dc400d15 	stw	r17,52(sp)
 100373c:	14418216 	blt	r2,r17,1003d48 <___vfprintf_internal_r+0xbc8>
 1003740:	ad400204 	addi	r21,r21,8
 1003744:	d9014c17 	ldw	r4,1328(sp)
 1003748:	2080400c 	andi	r2,r4,256
 100374c:	10004a1e 	bne	r2,zero,1003878 <___vfprintf_internal_r+0x6f8>
 1003750:	d9414117 	ldw	r5,1284(sp)
 1003754:	91e5883a 	add	r18,r18,r7
 1003758:	8c400044 	addi	r17,r17,1
 100375c:	008001c4 	movi	r2,7
 1003760:	a9400015 	stw	r5,0(r21)
 1003764:	a9c00115 	stw	r7,4(r21)
 1003768:	dc800e15 	stw	r18,56(sp)
 100376c:	dc400d15 	stw	r17,52(sp)
 1003770:	14416716 	blt	r2,r17,1003d10 <___vfprintf_internal_r+0xb90>
 1003774:	a8c00204 	addi	r3,r21,8
 1003778:	d9814c17 	ldw	r6,1328(sp)
 100377c:	3080010c 	andi	r2,r6,4
 1003780:	10002826 	beq	r2,zero,1003824 <___vfprintf_internal_r+0x6a4>
 1003784:	d8814a17 	ldw	r2,1320(sp)
 1003788:	d9014517 	ldw	r4,1300(sp)
 100378c:	1121c83a 	sub	r16,r2,r4
 1003790:	0400240e 	bge	zero,r16,1003824 <___vfprintf_internal_r+0x6a4>
 1003794:	00800404 	movi	r2,16
 1003798:	1404550e 	bge	r2,r16,10048f0 <___vfprintf_internal_r+0x1770>
 100379c:	dc400d17 	ldw	r17,52(sp)
 10037a0:	1027883a 	mov	r19,r2
 10037a4:	070040b4 	movhi	fp,258
 10037a8:	e7319984 	addi	fp,fp,-14746
 10037ac:	050001c4 	movi	r20,7
 10037b0:	00000306 	br	10037c0 <___vfprintf_internal_r+0x640>
 10037b4:	843ffc04 	addi	r16,r16,-16
 10037b8:	18c00204 	addi	r3,r3,8
 10037bc:	9c00110e 	bge	r19,r16,1003804 <___vfprintf_internal_r+0x684>
 10037c0:	94800404 	addi	r18,r18,16
 10037c4:	8c400044 	addi	r17,r17,1
 10037c8:	1f000015 	stw	fp,0(r3)
 10037cc:	1cc00115 	stw	r19,4(r3)
 10037d0:	dc800e15 	stw	r18,56(sp)
 10037d4:	dc400d15 	stw	r17,52(sp)
 10037d8:	a47ff60e 	bge	r20,r17,10037b4 <___vfprintf_internal_r+0x634>
 10037dc:	d9014f17 	ldw	r4,1340(sp)
 10037e0:	b00b883a 	mov	r5,r22
 10037e4:	d9800c04 	addi	r6,sp,48
 10037e8:	10031280 	call	1003128 <__sprint_r>
 10037ec:	10001c1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 10037f0:	843ffc04 	addi	r16,r16,-16
 10037f4:	dc800e17 	ldw	r18,56(sp)
 10037f8:	dc400d17 	ldw	r17,52(sp)
 10037fc:	d8c01904 	addi	r3,sp,100
 1003800:	9c3fef16 	blt	r19,r16,10037c0 <___vfprintf_internal_r+0x640>
 1003804:	9425883a 	add	r18,r18,r16
 1003808:	8c400044 	addi	r17,r17,1
 100380c:	008001c4 	movi	r2,7
 1003810:	1f000015 	stw	fp,0(r3)
 1003814:	1c000115 	stw	r16,4(r3)
 1003818:	dc800e15 	stw	r18,56(sp)
 100381c:	dc400d15 	stw	r17,52(sp)
 1003820:	1440cb16 	blt	r2,r17,1003b50 <___vfprintf_internal_r+0x9d0>
 1003824:	d8814a17 	ldw	r2,1320(sp)
 1003828:	d9414517 	ldw	r5,1300(sp)
 100382c:	1140010e 	bge	r2,r5,1003834 <___vfprintf_internal_r+0x6b4>
 1003830:	2805883a 	mov	r2,r5
 1003834:	d9814b17 	ldw	r6,1324(sp)
 1003838:	308d883a 	add	r6,r6,r2
 100383c:	d9814b15 	stw	r6,1324(sp)
 1003840:	90013b1e 	bne	r18,zero,1003d30 <___vfprintf_internal_r+0xbb0>
 1003844:	d9c14017 	ldw	r7,1280(sp)
 1003848:	dd401904 	addi	r21,sp,100
 100384c:	d8000d15 	stw	zero,52(sp)
 1003850:	003ea706 	br	10032f0 <___vfprintf_internal_r+0x170>
 1003854:	d8800e17 	ldw	r2,56(sp)
 1003858:	1005451e 	bne	r2,zero,1004d70 <___vfprintf_internal_r+0x1bf0>
 100385c:	d8000d15 	stw	zero,52(sp)
 1003860:	b080030b 	ldhu	r2,12(r22)
 1003864:	1080100c 	andi	r2,r2,64
 1003868:	103e8726 	beq	r2,zero,1003288 <___vfprintf_internal_r+0x108>
 100386c:	00bfffc4 	movi	r2,-1
 1003870:	d8814b15 	stw	r2,1324(sp)
 1003874:	003e8406 	br	1003288 <___vfprintf_internal_r+0x108>
 1003878:	d9814d17 	ldw	r6,1332(sp)
 100387c:	00801944 	movi	r2,101
 1003880:	11806e16 	blt	r2,r6,1003a3c <___vfprintf_internal_r+0x8bc>
 1003884:	d9414717 	ldw	r5,1308(sp)
 1003888:	00c00044 	movi	r3,1
 100388c:	1943490e 	bge	r3,r5,10045b4 <___vfprintf_internal_r+0x1434>
 1003890:	d8814117 	ldw	r2,1284(sp)
 1003894:	94800044 	addi	r18,r18,1
 1003898:	8c400044 	addi	r17,r17,1
 100389c:	a8800015 	stw	r2,0(r21)
 10038a0:	008001c4 	movi	r2,7
 10038a4:	a8c00115 	stw	r3,4(r21)
 10038a8:	dc800e15 	stw	r18,56(sp)
 10038ac:	dc400d15 	stw	r17,52(sp)
 10038b0:	1441ca16 	blt	r2,r17,1003fdc <___vfprintf_internal_r+0xe5c>
 10038b4:	a8c00204 	addi	r3,r21,8
 10038b8:	d9014917 	ldw	r4,1316(sp)
 10038bc:	00800044 	movi	r2,1
 10038c0:	94800044 	addi	r18,r18,1
 10038c4:	8c400044 	addi	r17,r17,1
 10038c8:	18800115 	stw	r2,4(r3)
 10038cc:	008001c4 	movi	r2,7
 10038d0:	19000015 	stw	r4,0(r3)
 10038d4:	dc800e15 	stw	r18,56(sp)
 10038d8:	dc400d15 	stw	r17,52(sp)
 10038dc:	1441b616 	blt	r2,r17,1003fb8 <___vfprintf_internal_r+0xe38>
 10038e0:	1cc00204 	addi	r19,r3,8
 10038e4:	d9014217 	ldw	r4,1288(sp)
 10038e8:	d9414317 	ldw	r5,1292(sp)
 10038ec:	000d883a 	mov	r6,zero
 10038f0:	000f883a 	mov	r7,zero
 10038f4:	10109fc0 	call	10109fc <__nedf2>
 10038f8:	10017426 	beq	r2,zero,1003ecc <___vfprintf_internal_r+0xd4c>
 10038fc:	d9414717 	ldw	r5,1308(sp)
 1003900:	d9814117 	ldw	r6,1284(sp)
 1003904:	8c400044 	addi	r17,r17,1
 1003908:	2c85883a 	add	r2,r5,r18
 100390c:	14bfffc4 	addi	r18,r2,-1
 1003910:	28bfffc4 	addi	r2,r5,-1
 1003914:	30c00044 	addi	r3,r6,1
 1003918:	98800115 	stw	r2,4(r19)
 100391c:	008001c4 	movi	r2,7
 1003920:	98c00015 	stw	r3,0(r19)
 1003924:	dc800e15 	stw	r18,56(sp)
 1003928:	dc400d15 	stw	r17,52(sp)
 100392c:	14418e16 	blt	r2,r17,1003f68 <___vfprintf_internal_r+0xde8>
 1003930:	9cc00204 	addi	r19,r19,8
 1003934:	d9414817 	ldw	r5,1312(sp)
 1003938:	d8800804 	addi	r2,sp,32
 100393c:	8c400044 	addi	r17,r17,1
 1003940:	9165883a 	add	r18,r18,r5
 1003944:	98800015 	stw	r2,0(r19)
 1003948:	008001c4 	movi	r2,7
 100394c:	99400115 	stw	r5,4(r19)
 1003950:	dc800e15 	stw	r18,56(sp)
 1003954:	dc400d15 	stw	r17,52(sp)
 1003958:	1440ed16 	blt	r2,r17,1003d10 <___vfprintf_internal_r+0xb90>
 100395c:	98c00204 	addi	r3,r19,8
 1003960:	003f8506 	br	1003778 <___vfprintf_internal_r+0x5f8>
 1003964:	d9814a17 	ldw	r6,1320(sp)
 1003968:	d8814517 	ldw	r2,1300(sp)
 100396c:	30a1c83a 	sub	r16,r6,r2
 1003970:	043f4b0e 	bge	zero,r16,10036a0 <___vfprintf_internal_r+0x520>
 1003974:	00800404 	movi	r2,16
 1003978:	14043a0e 	bge	r2,r16,1004a64 <___vfprintf_internal_r+0x18e4>
 100397c:	1027883a 	mov	r19,r2
 1003980:	070040b4 	movhi	fp,258
 1003984:	e7319584 	addi	fp,fp,-14762
 1003988:	050001c4 	movi	r20,7
 100398c:	00000306 	br	100399c <___vfprintf_internal_r+0x81c>
 1003990:	843ffc04 	addi	r16,r16,-16
 1003994:	ad400204 	addi	r21,r21,8
 1003998:	9c00130e 	bge	r19,r16,10039e8 <___vfprintf_internal_r+0x868>
 100399c:	94800404 	addi	r18,r18,16
 10039a0:	8c400044 	addi	r17,r17,1
 10039a4:	af000015 	stw	fp,0(r21)
 10039a8:	acc00115 	stw	r19,4(r21)
 10039ac:	dc800e15 	stw	r18,56(sp)
 10039b0:	dc400d15 	stw	r17,52(sp)
 10039b4:	a47ff60e 	bge	r20,r17,1003990 <___vfprintf_internal_r+0x810>
 10039b8:	d9014f17 	ldw	r4,1340(sp)
 10039bc:	b00b883a 	mov	r5,r22
 10039c0:	d9800c04 	addi	r6,sp,48
 10039c4:	d9c15115 	stw	r7,1348(sp)
 10039c8:	10031280 	call	1003128 <__sprint_r>
 10039cc:	d9c15117 	ldw	r7,1348(sp)
 10039d0:	103fa31e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 10039d4:	843ffc04 	addi	r16,r16,-16
 10039d8:	dc800e17 	ldw	r18,56(sp)
 10039dc:	dc400d17 	ldw	r17,52(sp)
 10039e0:	dd401904 	addi	r21,sp,100
 10039e4:	9c3fed16 	blt	r19,r16,100399c <___vfprintf_internal_r+0x81c>
 10039e8:	9425883a 	add	r18,r18,r16
 10039ec:	8c400044 	addi	r17,r17,1
 10039f0:	008001c4 	movi	r2,7
 10039f4:	af000015 	stw	fp,0(r21)
 10039f8:	ac000115 	stw	r16,4(r21)
 10039fc:	dc800e15 	stw	r18,56(sp)
 1003a00:	dc400d15 	stw	r17,52(sp)
 1003a04:	14416116 	blt	r2,r17,1003f8c <___vfprintf_internal_r+0xe0c>
 1003a08:	ad400204 	addi	r21,r21,8
 1003a0c:	003f2406 	br	10036a0 <___vfprintf_internal_r+0x520>
 1003a10:	d9014f17 	ldw	r4,1340(sp)
 1003a14:	10083bc0 	call	10083bc <__sinit>
 1003a18:	d9c15117 	ldw	r7,1348(sp)
 1003a1c:	003def06 	br	10031dc <___vfprintf_internal_r+0x5c>
 1003a20:	d9014f17 	ldw	r4,1340(sp)
 1003a24:	b00b883a 	mov	r5,r22
 1003a28:	d9c15115 	stw	r7,1348(sp)
 1003a2c:	10067f00 	call	10067f0 <__swsetup_r>
 1003a30:	d9c15117 	ldw	r7,1348(sp)
 1003a34:	103dee26 	beq	r2,zero,10031f0 <___vfprintf_internal_r+0x70>
 1003a38:	003f8c06 	br	100386c <___vfprintf_internal_r+0x6ec>
 1003a3c:	d9014217 	ldw	r4,1288(sp)
 1003a40:	d9414317 	ldw	r5,1292(sp)
 1003a44:	000d883a 	mov	r6,zero
 1003a48:	000f883a 	mov	r7,zero
 1003a4c:	10109740 	call	1010974 <__eqdf2>
 1003a50:	1000f21e 	bne	r2,zero,1003e1c <___vfprintf_internal_r+0xc9c>
 1003a54:	008040b4 	movhi	r2,258
 1003a58:	10b19504 	addi	r2,r2,-14764
 1003a5c:	94800044 	addi	r18,r18,1
 1003a60:	8c400044 	addi	r17,r17,1
 1003a64:	a8800015 	stw	r2,0(r21)
 1003a68:	00c00044 	movi	r3,1
 1003a6c:	008001c4 	movi	r2,7
 1003a70:	a8c00115 	stw	r3,4(r21)
 1003a74:	dc800e15 	stw	r18,56(sp)
 1003a78:	dc400d15 	stw	r17,52(sp)
 1003a7c:	14430016 	blt	r2,r17,1004680 <___vfprintf_internal_r+0x1500>
 1003a80:	a8c00204 	addi	r3,r21,8
 1003a84:	d8800517 	ldw	r2,20(sp)
 1003a88:	d9014717 	ldw	r4,1308(sp)
 1003a8c:	11015c0e 	bge	r2,r4,1004000 <___vfprintf_internal_r+0xe80>
 1003a90:	dc400d17 	ldw	r17,52(sp)
 1003a94:	d9814917 	ldw	r6,1316(sp)
 1003a98:	00800044 	movi	r2,1
 1003a9c:	94800044 	addi	r18,r18,1
 1003aa0:	8c400044 	addi	r17,r17,1
 1003aa4:	18800115 	stw	r2,4(r3)
 1003aa8:	008001c4 	movi	r2,7
 1003aac:	19800015 	stw	r6,0(r3)
 1003ab0:	dc800e15 	stw	r18,56(sp)
 1003ab4:	dc400d15 	stw	r17,52(sp)
 1003ab8:	14431616 	blt	r2,r17,1004714 <___vfprintf_internal_r+0x1594>
 1003abc:	18c00204 	addi	r3,r3,8
 1003ac0:	d8814717 	ldw	r2,1308(sp)
 1003ac4:	143fffc4 	addi	r16,r2,-1
 1003ac8:	043f2b0e 	bge	zero,r16,1003778 <___vfprintf_internal_r+0x5f8>
 1003acc:	00800404 	movi	r2,16
 1003ad0:	1402a80e 	bge	r2,r16,1004574 <___vfprintf_internal_r+0x13f4>
 1003ad4:	dc400d17 	ldw	r17,52(sp)
 1003ad8:	1027883a 	mov	r19,r2
 1003adc:	070040b4 	movhi	fp,258
 1003ae0:	e7319584 	addi	fp,fp,-14762
 1003ae4:	050001c4 	movi	r20,7
 1003ae8:	00000306 	br	1003af8 <___vfprintf_internal_r+0x978>
 1003aec:	18c00204 	addi	r3,r3,8
 1003af0:	843ffc04 	addi	r16,r16,-16
 1003af4:	9c02a20e 	bge	r19,r16,1004580 <___vfprintf_internal_r+0x1400>
 1003af8:	94800404 	addi	r18,r18,16
 1003afc:	8c400044 	addi	r17,r17,1
 1003b00:	1f000015 	stw	fp,0(r3)
 1003b04:	1cc00115 	stw	r19,4(r3)
 1003b08:	dc800e15 	stw	r18,56(sp)
 1003b0c:	dc400d15 	stw	r17,52(sp)
 1003b10:	a47ff60e 	bge	r20,r17,1003aec <___vfprintf_internal_r+0x96c>
 1003b14:	d9014f17 	ldw	r4,1340(sp)
 1003b18:	b00b883a 	mov	r5,r22
 1003b1c:	d9800c04 	addi	r6,sp,48
 1003b20:	10031280 	call	1003128 <__sprint_r>
 1003b24:	103f4e1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003b28:	dc800e17 	ldw	r18,56(sp)
 1003b2c:	dc400d17 	ldw	r17,52(sp)
 1003b30:	d8c01904 	addi	r3,sp,100
 1003b34:	003fee06 	br	1003af0 <___vfprintf_internal_r+0x970>
 1003b38:	d8802c0b 	ldhu	r2,176(sp)
 1003b3c:	00ffffc4 	movi	r3,-1
 1003b40:	d8c14b15 	stw	r3,1324(sp)
 1003b44:	1080100c 	andi	r2,r2,64
 1003b48:	103dcc1e 	bne	r2,zero,100327c <___vfprintf_internal_r+0xfc>
 1003b4c:	003dce06 	br	1003288 <___vfprintf_internal_r+0x108>
 1003b50:	d9014f17 	ldw	r4,1340(sp)
 1003b54:	b00b883a 	mov	r5,r22
 1003b58:	d9800c04 	addi	r6,sp,48
 1003b5c:	10031280 	call	1003128 <__sprint_r>
 1003b60:	103f3f1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003b64:	dc800e17 	ldw	r18,56(sp)
 1003b68:	003f2e06 	br	1003824 <___vfprintf_internal_r+0x6a4>
 1003b6c:	d9414c17 	ldw	r5,1328(sp)
 1003b70:	29400414 	ori	r5,r5,16
 1003b74:	d9414c15 	stw	r5,1328(sp)
 1003b78:	d9814c17 	ldw	r6,1328(sp)
 1003b7c:	3080080c 	andi	r2,r6,32
 1003b80:	10014f1e 	bne	r2,zero,10040c0 <___vfprintf_internal_r+0xf40>
 1003b84:	d8c14c17 	ldw	r3,1328(sp)
 1003b88:	1880040c 	andi	r2,r3,16
 1003b8c:	1002f01e 	bne	r2,zero,1004750 <___vfprintf_internal_r+0x15d0>
 1003b90:	d9014c17 	ldw	r4,1328(sp)
 1003b94:	2080100c 	andi	r2,r4,64
 1003b98:	1002ed26 	beq	r2,zero,1004750 <___vfprintf_internal_r+0x15d0>
 1003b9c:	3880000f 	ldh	r2,0(r7)
 1003ba0:	39c00104 	addi	r7,r7,4
 1003ba4:	d9c14015 	stw	r7,1280(sp)
 1003ba8:	1023d7fa 	srai	r17,r2,31
 1003bac:	1021883a 	mov	r16,r2
 1003bb0:	88037816 	blt	r17,zero,1004994 <___vfprintf_internal_r+0x1814>
 1003bb4:	01000044 	movi	r4,1
 1003bb8:	98000416 	blt	r19,zero,1003bcc <___vfprintf_internal_r+0xa4c>
 1003bbc:	d8c14c17 	ldw	r3,1328(sp)
 1003bc0:	00bfdfc4 	movi	r2,-129
 1003bc4:	1886703a 	and	r3,r3,r2
 1003bc8:	d8c14c15 	stw	r3,1328(sp)
 1003bcc:	8444b03a 	or	r2,r16,r17
 1003bd0:	10022c1e 	bne	r2,zero,1004484 <___vfprintf_internal_r+0x1304>
 1003bd4:	98022b1e 	bne	r19,zero,1004484 <___vfprintf_internal_r+0x1304>
 1003bd8:	20803fcc 	andi	r2,r4,255
 1003bdc:	1002a126 	beq	r2,zero,1004664 <___vfprintf_internal_r+0x14e4>
 1003be0:	d8c01904 	addi	r3,sp,100
 1003be4:	dd000f04 	addi	r20,sp,60
 1003be8:	d8c14115 	stw	r3,1284(sp)
 1003bec:	d8c14117 	ldw	r3,1284(sp)
 1003bf0:	dcc14515 	stw	r19,1300(sp)
 1003bf4:	a0c5c83a 	sub	r2,r20,r3
 1003bf8:	11c00a04 	addi	r7,r2,40
 1003bfc:	99c0010e 	bge	r19,r7,1003c04 <___vfprintf_internal_r+0xa84>
 1003c00:	d9c14515 	stw	r7,1300(sp)
 1003c04:	dcc14615 	stw	r19,1304(sp)
 1003c08:	d8800407 	ldb	r2,16(sp)
 1003c0c:	103e4c26 	beq	r2,zero,1003540 <___vfprintf_internal_r+0x3c0>
 1003c10:	d8814517 	ldw	r2,1300(sp)
 1003c14:	10800044 	addi	r2,r2,1
 1003c18:	d8814515 	stw	r2,1300(sp)
 1003c1c:	003e4806 	br	1003540 <___vfprintf_internal_r+0x3c0>
 1003c20:	d9814c17 	ldw	r6,1328(sp)
 1003c24:	31800414 	ori	r6,r6,16
 1003c28:	d9814c15 	stw	r6,1328(sp)
 1003c2c:	d8c14c17 	ldw	r3,1328(sp)
 1003c30:	1880080c 	andi	r2,r3,32
 1003c34:	1001271e 	bne	r2,zero,10040d4 <___vfprintf_internal_r+0xf54>
 1003c38:	d9414c17 	ldw	r5,1328(sp)
 1003c3c:	2880040c 	andi	r2,r5,16
 1003c40:	1002bc1e 	bne	r2,zero,1004734 <___vfprintf_internal_r+0x15b4>
 1003c44:	d9814c17 	ldw	r6,1328(sp)
 1003c48:	3080100c 	andi	r2,r6,64
 1003c4c:	1002b926 	beq	r2,zero,1004734 <___vfprintf_internal_r+0x15b4>
 1003c50:	3c00000b 	ldhu	r16,0(r7)
 1003c54:	0009883a 	mov	r4,zero
 1003c58:	39c00104 	addi	r7,r7,4
 1003c5c:	0023883a 	mov	r17,zero
 1003c60:	d9c14015 	stw	r7,1280(sp)
 1003c64:	d8000405 	stb	zero,16(sp)
 1003c68:	003fd306 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 1003c6c:	d9014c17 	ldw	r4,1328(sp)
 1003c70:	21000414 	ori	r4,r4,16
 1003c74:	d9014c15 	stw	r4,1328(sp)
 1003c78:	d9414c17 	ldw	r5,1328(sp)
 1003c7c:	2880080c 	andi	r2,r5,32
 1003c80:	1001081e 	bne	r2,zero,10040a4 <___vfprintf_internal_r+0xf24>
 1003c84:	d8c14c17 	ldw	r3,1328(sp)
 1003c88:	1880040c 	andi	r2,r3,16
 1003c8c:	1002b61e 	bne	r2,zero,1004768 <___vfprintf_internal_r+0x15e8>
 1003c90:	d9014c17 	ldw	r4,1328(sp)
 1003c94:	2080100c 	andi	r2,r4,64
 1003c98:	1002b326 	beq	r2,zero,1004768 <___vfprintf_internal_r+0x15e8>
 1003c9c:	3c00000b 	ldhu	r16,0(r7)
 1003ca0:	01000044 	movi	r4,1
 1003ca4:	39c00104 	addi	r7,r7,4
 1003ca8:	0023883a 	mov	r17,zero
 1003cac:	d9c14015 	stw	r7,1280(sp)
 1003cb0:	d8000405 	stb	zero,16(sp)
 1003cb4:	003fc006 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 1003cb8:	d9014f17 	ldw	r4,1340(sp)
 1003cbc:	b00b883a 	mov	r5,r22
 1003cc0:	d9800c04 	addi	r6,sp,48
 1003cc4:	10031280 	call	1003128 <__sprint_r>
 1003cc8:	103ee51e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003ccc:	dc800e17 	ldw	r18,56(sp)
 1003cd0:	d8c01904 	addi	r3,sp,100
 1003cd4:	d9814c17 	ldw	r6,1328(sp)
 1003cd8:	3080004c 	andi	r2,r6,1
 1003cdc:	1005003a 	cmpeq	r2,r2,zero
 1003ce0:	103ea51e 	bne	r2,zero,1003778 <___vfprintf_internal_r+0x5f8>
 1003ce4:	00800044 	movi	r2,1
 1003ce8:	dc400d17 	ldw	r17,52(sp)
 1003cec:	18800115 	stw	r2,4(r3)
 1003cf0:	d8814917 	ldw	r2,1316(sp)
 1003cf4:	94800044 	addi	r18,r18,1
 1003cf8:	8c400044 	addi	r17,r17,1
 1003cfc:	18800015 	stw	r2,0(r3)
 1003d00:	008001c4 	movi	r2,7
 1003d04:	dc800e15 	stw	r18,56(sp)
 1003d08:	dc400d15 	stw	r17,52(sp)
 1003d0c:	1442240e 	bge	r2,r17,10045a0 <___vfprintf_internal_r+0x1420>
 1003d10:	d9014f17 	ldw	r4,1340(sp)
 1003d14:	b00b883a 	mov	r5,r22
 1003d18:	d9800c04 	addi	r6,sp,48
 1003d1c:	10031280 	call	1003128 <__sprint_r>
 1003d20:	103ecf1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003d24:	dc800e17 	ldw	r18,56(sp)
 1003d28:	d8c01904 	addi	r3,sp,100
 1003d2c:	003e9206 	br	1003778 <___vfprintf_internal_r+0x5f8>
 1003d30:	d9014f17 	ldw	r4,1340(sp)
 1003d34:	b00b883a 	mov	r5,r22
 1003d38:	d9800c04 	addi	r6,sp,48
 1003d3c:	10031280 	call	1003128 <__sprint_r>
 1003d40:	103ec026 	beq	r2,zero,1003844 <___vfprintf_internal_r+0x6c4>
 1003d44:	003ec606 	br	1003860 <___vfprintf_internal_r+0x6e0>
 1003d48:	d9014f17 	ldw	r4,1340(sp)
 1003d4c:	b00b883a 	mov	r5,r22
 1003d50:	d9800c04 	addi	r6,sp,48
 1003d54:	d9c15115 	stw	r7,1348(sp)
 1003d58:	10031280 	call	1003128 <__sprint_r>
 1003d5c:	d9c15117 	ldw	r7,1348(sp)
 1003d60:	103ebf1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003d64:	dc800e17 	ldw	r18,56(sp)
 1003d68:	dc400d17 	ldw	r17,52(sp)
 1003d6c:	dd401904 	addi	r21,sp,100
 1003d70:	003e7406 	br	1003744 <___vfprintf_internal_r+0x5c4>
 1003d74:	d9014f17 	ldw	r4,1340(sp)
 1003d78:	b00b883a 	mov	r5,r22
 1003d7c:	d9800c04 	addi	r6,sp,48
 1003d80:	d9c15115 	stw	r7,1348(sp)
 1003d84:	10031280 	call	1003128 <__sprint_r>
 1003d88:	d9c15117 	ldw	r7,1348(sp)
 1003d8c:	103eb41e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003d90:	dd401904 	addi	r21,sp,100
 1003d94:	003d6d06 	br	100334c <___vfprintf_internal_r+0x1cc>
 1003d98:	d9014f17 	ldw	r4,1340(sp)
 1003d9c:	b00b883a 	mov	r5,r22
 1003da0:	d9800c04 	addi	r6,sp,48
 1003da4:	d9c15115 	stw	r7,1348(sp)
 1003da8:	10031280 	call	1003128 <__sprint_r>
 1003dac:	d9c15117 	ldw	r7,1348(sp)
 1003db0:	103eab1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003db4:	dc800e17 	ldw	r18,56(sp)
 1003db8:	dc400d17 	ldw	r17,52(sp)
 1003dbc:	dd401904 	addi	r21,sp,100
 1003dc0:	003e3406 	br	1003694 <___vfprintf_internal_r+0x514>
 1003dc4:	d9014f17 	ldw	r4,1340(sp)
 1003dc8:	b00b883a 	mov	r5,r22
 1003dcc:	d9800c04 	addi	r6,sp,48
 1003dd0:	d9c15115 	stw	r7,1348(sp)
 1003dd4:	10031280 	call	1003128 <__sprint_r>
 1003dd8:	d9c15117 	ldw	r7,1348(sp)
 1003ddc:	103ea01e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003de0:	dc800e17 	ldw	r18,56(sp)
 1003de4:	dc400d17 	ldw	r17,52(sp)
 1003de8:	dd401904 	addi	r21,sp,100
 1003dec:	003e1c06 	br	1003660 <___vfprintf_internal_r+0x4e0>
 1003df0:	d9014f17 	ldw	r4,1340(sp)
 1003df4:	b00b883a 	mov	r5,r22
 1003df8:	d9800c04 	addi	r6,sp,48
 1003dfc:	d9c15115 	stw	r7,1348(sp)
 1003e00:	10031280 	call	1003128 <__sprint_r>
 1003e04:	d9c15117 	ldw	r7,1348(sp)
 1003e08:	103e951e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003e0c:	dc800e17 	ldw	r18,56(sp)
 1003e10:	dc400d17 	ldw	r17,52(sp)
 1003e14:	dd401904 	addi	r21,sp,100
 1003e18:	003e0406 	br	100362c <___vfprintf_internal_r+0x4ac>
 1003e1c:	d9000517 	ldw	r4,20(sp)
 1003e20:	0102580e 	bge	zero,r4,1004784 <___vfprintf_internal_r+0x1604>
 1003e24:	d9814717 	ldw	r6,1308(sp)
 1003e28:	21807a16 	blt	r4,r6,1004014 <___vfprintf_internal_r+0xe94>
 1003e2c:	d8814117 	ldw	r2,1284(sp)
 1003e30:	91a5883a 	add	r18,r18,r6
 1003e34:	8c400044 	addi	r17,r17,1
 1003e38:	a8800015 	stw	r2,0(r21)
 1003e3c:	008001c4 	movi	r2,7
 1003e40:	a9800115 	stw	r6,4(r21)
 1003e44:	dc800e15 	stw	r18,56(sp)
 1003e48:	dc400d15 	stw	r17,52(sp)
 1003e4c:	1442fc16 	blt	r2,r17,1004a40 <___vfprintf_internal_r+0x18c0>
 1003e50:	a8c00204 	addi	r3,r21,8
 1003e54:	d9414717 	ldw	r5,1308(sp)
 1003e58:	2161c83a 	sub	r16,r4,r5
 1003e5c:	043f9d0e 	bge	zero,r16,1003cd4 <___vfprintf_internal_r+0xb54>
 1003e60:	00800404 	movi	r2,16
 1003e64:	1402190e 	bge	r2,r16,10046cc <___vfprintf_internal_r+0x154c>
 1003e68:	dc400d17 	ldw	r17,52(sp)
 1003e6c:	1027883a 	mov	r19,r2
 1003e70:	070040b4 	movhi	fp,258
 1003e74:	e7319584 	addi	fp,fp,-14762
 1003e78:	050001c4 	movi	r20,7
 1003e7c:	00000306 	br	1003e8c <___vfprintf_internal_r+0xd0c>
 1003e80:	18c00204 	addi	r3,r3,8
 1003e84:	843ffc04 	addi	r16,r16,-16
 1003e88:	9c02130e 	bge	r19,r16,10046d8 <___vfprintf_internal_r+0x1558>
 1003e8c:	94800404 	addi	r18,r18,16
 1003e90:	8c400044 	addi	r17,r17,1
 1003e94:	1f000015 	stw	fp,0(r3)
 1003e98:	1cc00115 	stw	r19,4(r3)
 1003e9c:	dc800e15 	stw	r18,56(sp)
 1003ea0:	dc400d15 	stw	r17,52(sp)
 1003ea4:	a47ff60e 	bge	r20,r17,1003e80 <___vfprintf_internal_r+0xd00>
 1003ea8:	d9014f17 	ldw	r4,1340(sp)
 1003eac:	b00b883a 	mov	r5,r22
 1003eb0:	d9800c04 	addi	r6,sp,48
 1003eb4:	10031280 	call	1003128 <__sprint_r>
 1003eb8:	103e691e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003ebc:	dc800e17 	ldw	r18,56(sp)
 1003ec0:	dc400d17 	ldw	r17,52(sp)
 1003ec4:	d8c01904 	addi	r3,sp,100
 1003ec8:	003fee06 	br	1003e84 <___vfprintf_internal_r+0xd04>
 1003ecc:	d8814717 	ldw	r2,1308(sp)
 1003ed0:	143fffc4 	addi	r16,r2,-1
 1003ed4:	043e970e 	bge	zero,r16,1003934 <___vfprintf_internal_r+0x7b4>
 1003ed8:	00800404 	movi	r2,16
 1003edc:	1400180e 	bge	r2,r16,1003f40 <___vfprintf_internal_r+0xdc0>
 1003ee0:	1029883a 	mov	r20,r2
 1003ee4:	070040b4 	movhi	fp,258
 1003ee8:	e7319584 	addi	fp,fp,-14762
 1003eec:	054001c4 	movi	r21,7
 1003ef0:	00000306 	br	1003f00 <___vfprintf_internal_r+0xd80>
 1003ef4:	9cc00204 	addi	r19,r19,8
 1003ef8:	843ffc04 	addi	r16,r16,-16
 1003efc:	a400120e 	bge	r20,r16,1003f48 <___vfprintf_internal_r+0xdc8>
 1003f00:	94800404 	addi	r18,r18,16
 1003f04:	8c400044 	addi	r17,r17,1
 1003f08:	9f000015 	stw	fp,0(r19)
 1003f0c:	9d000115 	stw	r20,4(r19)
 1003f10:	dc800e15 	stw	r18,56(sp)
 1003f14:	dc400d15 	stw	r17,52(sp)
 1003f18:	ac7ff60e 	bge	r21,r17,1003ef4 <___vfprintf_internal_r+0xd74>
 1003f1c:	d9014f17 	ldw	r4,1340(sp)
 1003f20:	b00b883a 	mov	r5,r22
 1003f24:	d9800c04 	addi	r6,sp,48
 1003f28:	10031280 	call	1003128 <__sprint_r>
 1003f2c:	103e4c1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003f30:	dc800e17 	ldw	r18,56(sp)
 1003f34:	dc400d17 	ldw	r17,52(sp)
 1003f38:	dcc01904 	addi	r19,sp,100
 1003f3c:	003fee06 	br	1003ef8 <___vfprintf_internal_r+0xd78>
 1003f40:	070040b4 	movhi	fp,258
 1003f44:	e7319584 	addi	fp,fp,-14762
 1003f48:	9425883a 	add	r18,r18,r16
 1003f4c:	8c400044 	addi	r17,r17,1
 1003f50:	008001c4 	movi	r2,7
 1003f54:	9f000015 	stw	fp,0(r19)
 1003f58:	9c000115 	stw	r16,4(r19)
 1003f5c:	dc800e15 	stw	r18,56(sp)
 1003f60:	dc400d15 	stw	r17,52(sp)
 1003f64:	147e720e 	bge	r2,r17,1003930 <___vfprintf_internal_r+0x7b0>
 1003f68:	d9014f17 	ldw	r4,1340(sp)
 1003f6c:	b00b883a 	mov	r5,r22
 1003f70:	d9800c04 	addi	r6,sp,48
 1003f74:	10031280 	call	1003128 <__sprint_r>
 1003f78:	103e391e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003f7c:	dc800e17 	ldw	r18,56(sp)
 1003f80:	dc400d17 	ldw	r17,52(sp)
 1003f84:	dcc01904 	addi	r19,sp,100
 1003f88:	003e6a06 	br	1003934 <___vfprintf_internal_r+0x7b4>
 1003f8c:	d9014f17 	ldw	r4,1340(sp)
 1003f90:	b00b883a 	mov	r5,r22
 1003f94:	d9800c04 	addi	r6,sp,48
 1003f98:	d9c15115 	stw	r7,1348(sp)
 1003f9c:	10031280 	call	1003128 <__sprint_r>
 1003fa0:	d9c15117 	ldw	r7,1348(sp)
 1003fa4:	103e2e1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003fa8:	dc800e17 	ldw	r18,56(sp)
 1003fac:	dc400d17 	ldw	r17,52(sp)
 1003fb0:	dd401904 	addi	r21,sp,100
 1003fb4:	003dba06 	br	10036a0 <___vfprintf_internal_r+0x520>
 1003fb8:	d9014f17 	ldw	r4,1340(sp)
 1003fbc:	b00b883a 	mov	r5,r22
 1003fc0:	d9800c04 	addi	r6,sp,48
 1003fc4:	10031280 	call	1003128 <__sprint_r>
 1003fc8:	103e251e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003fcc:	dc800e17 	ldw	r18,56(sp)
 1003fd0:	dc400d17 	ldw	r17,52(sp)
 1003fd4:	dcc01904 	addi	r19,sp,100
 1003fd8:	003e4206 	br	10038e4 <___vfprintf_internal_r+0x764>
 1003fdc:	d9014f17 	ldw	r4,1340(sp)
 1003fe0:	b00b883a 	mov	r5,r22
 1003fe4:	d9800c04 	addi	r6,sp,48
 1003fe8:	10031280 	call	1003128 <__sprint_r>
 1003fec:	103e1c1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1003ff0:	dc800e17 	ldw	r18,56(sp)
 1003ff4:	dc400d17 	ldw	r17,52(sp)
 1003ff8:	d8c01904 	addi	r3,sp,100
 1003ffc:	003e2e06 	br	10038b8 <___vfprintf_internal_r+0x738>
 1004000:	d9414c17 	ldw	r5,1328(sp)
 1004004:	2880004c 	andi	r2,r5,1
 1004008:	1005003a 	cmpeq	r2,r2,zero
 100400c:	103dda1e 	bne	r2,zero,1003778 <___vfprintf_internal_r+0x5f8>
 1004010:	003e9f06 	br	1003a90 <___vfprintf_internal_r+0x910>
 1004014:	d8c14117 	ldw	r3,1284(sp)
 1004018:	9125883a 	add	r18,r18,r4
 100401c:	8c400044 	addi	r17,r17,1
 1004020:	008001c4 	movi	r2,7
 1004024:	a8c00015 	stw	r3,0(r21)
 1004028:	a9000115 	stw	r4,4(r21)
 100402c:	dc800e15 	stw	r18,56(sp)
 1004030:	dc400d15 	stw	r17,52(sp)
 1004034:	14426c16 	blt	r2,r17,10049e8 <___vfprintf_internal_r+0x1868>
 1004038:	a8c00204 	addi	r3,r21,8
 100403c:	d9414917 	ldw	r5,1316(sp)
 1004040:	00800044 	movi	r2,1
 1004044:	94800044 	addi	r18,r18,1
 1004048:	8c400044 	addi	r17,r17,1
 100404c:	18800115 	stw	r2,4(r3)
 1004050:	008001c4 	movi	r2,7
 1004054:	19400015 	stw	r5,0(r3)
 1004058:	dc800e15 	stw	r18,56(sp)
 100405c:	dc400d15 	stw	r17,52(sp)
 1004060:	2021883a 	mov	r16,r4
 1004064:	14425616 	blt	r2,r17,10049c0 <___vfprintf_internal_r+0x1840>
 1004068:	19400204 	addi	r5,r3,8
 100406c:	d9814717 	ldw	r6,1308(sp)
 1004070:	8c400044 	addi	r17,r17,1
 1004074:	dc400d15 	stw	r17,52(sp)
 1004078:	3107c83a 	sub	r3,r6,r4
 100407c:	d9014117 	ldw	r4,1284(sp)
 1004080:	90e5883a 	add	r18,r18,r3
 1004084:	28c00115 	stw	r3,4(r5)
 1004088:	8105883a 	add	r2,r16,r4
 100408c:	28800015 	stw	r2,0(r5)
 1004090:	008001c4 	movi	r2,7
 1004094:	dc800e15 	stw	r18,56(sp)
 1004098:	147f1d16 	blt	r2,r17,1003d10 <___vfprintf_internal_r+0xb90>
 100409c:	28c00204 	addi	r3,r5,8
 10040a0:	003db506 	br	1003778 <___vfprintf_internal_r+0x5f8>
 10040a4:	3c000017 	ldw	r16,0(r7)
 10040a8:	3c400117 	ldw	r17,4(r7)
 10040ac:	39800204 	addi	r6,r7,8
 10040b0:	01000044 	movi	r4,1
 10040b4:	d9814015 	stw	r6,1280(sp)
 10040b8:	d8000405 	stb	zero,16(sp)
 10040bc:	003ebe06 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10040c0:	3c000017 	ldw	r16,0(r7)
 10040c4:	3c400117 	ldw	r17,4(r7)
 10040c8:	38800204 	addi	r2,r7,8
 10040cc:	d8814015 	stw	r2,1280(sp)
 10040d0:	003eb706 	br	1003bb0 <___vfprintf_internal_r+0xa30>
 10040d4:	3c000017 	ldw	r16,0(r7)
 10040d8:	3c400117 	ldw	r17,4(r7)
 10040dc:	39000204 	addi	r4,r7,8
 10040e0:	d9014015 	stw	r4,1280(sp)
 10040e4:	0009883a 	mov	r4,zero
 10040e8:	d8000405 	stb	zero,16(sp)
 10040ec:	003eb206 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10040f0:	38c00017 	ldw	r3,0(r7)
 10040f4:	39c00104 	addi	r7,r7,4
 10040f8:	d8c14a15 	stw	r3,1320(sp)
 10040fc:	1800d70e 	bge	r3,zero,100445c <___vfprintf_internal_r+0x12dc>
 1004100:	00c7c83a 	sub	r3,zero,r3
 1004104:	d8c14a15 	stw	r3,1320(sp)
 1004108:	d9014c17 	ldw	r4,1328(sp)
 100410c:	b8c00007 	ldb	r3,0(r23)
 1004110:	21000114 	ori	r4,r4,4
 1004114:	d9014c15 	stw	r4,1328(sp)
 1004118:	003c9806 	br	100337c <___vfprintf_internal_r+0x1fc>
 100411c:	d9814c17 	ldw	r6,1328(sp)
 1004120:	3080080c 	andi	r2,r6,32
 1004124:	1001f626 	beq	r2,zero,1004900 <___vfprintf_internal_r+0x1780>
 1004128:	d9014b17 	ldw	r4,1324(sp)
 100412c:	38800017 	ldw	r2,0(r7)
 1004130:	39c00104 	addi	r7,r7,4
 1004134:	d9c14015 	stw	r7,1280(sp)
 1004138:	2007d7fa 	srai	r3,r4,31
 100413c:	d9c14017 	ldw	r7,1280(sp)
 1004140:	11000015 	stw	r4,0(r2)
 1004144:	10c00115 	stw	r3,4(r2)
 1004148:	003c6906 	br	10032f0 <___vfprintf_internal_r+0x170>
 100414c:	b8c00007 	ldb	r3,0(r23)
 1004150:	00801b04 	movi	r2,108
 1004154:	18825526 	beq	r3,r2,1004aac <___vfprintf_internal_r+0x192c>
 1004158:	d9414c17 	ldw	r5,1328(sp)
 100415c:	29400414 	ori	r5,r5,16
 1004160:	d9414c15 	stw	r5,1328(sp)
 1004164:	003c8506 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004168:	d9814c17 	ldw	r6,1328(sp)
 100416c:	b8c00007 	ldb	r3,0(r23)
 1004170:	31800814 	ori	r6,r6,32
 1004174:	d9814c15 	stw	r6,1328(sp)
 1004178:	003c8006 	br	100337c <___vfprintf_internal_r+0x1fc>
 100417c:	d8814c17 	ldw	r2,1328(sp)
 1004180:	3c000017 	ldw	r16,0(r7)
 1004184:	00c01e04 	movi	r3,120
 1004188:	10800094 	ori	r2,r2,2
 100418c:	d8814c15 	stw	r2,1328(sp)
 1004190:	39c00104 	addi	r7,r7,4
 1004194:	014040b4 	movhi	r5,258
 1004198:	29717e04 	addi	r5,r5,-14856
 100419c:	00800c04 	movi	r2,48
 10041a0:	0023883a 	mov	r17,zero
 10041a4:	01000084 	movi	r4,2
 10041a8:	d9c14015 	stw	r7,1280(sp)
 10041ac:	d8c14d15 	stw	r3,1332(sp)
 10041b0:	d9414415 	stw	r5,1296(sp)
 10041b4:	d8800445 	stb	r2,17(sp)
 10041b8:	d8c00485 	stb	r3,18(sp)
 10041bc:	d8000405 	stb	zero,16(sp)
 10041c0:	003e7d06 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10041c4:	d8814c17 	ldw	r2,1328(sp)
 10041c8:	b8c00007 	ldb	r3,0(r23)
 10041cc:	10801014 	ori	r2,r2,64
 10041d0:	d8814c15 	stw	r2,1328(sp)
 10041d4:	003c6906 	br	100337c <___vfprintf_internal_r+0x1fc>
 10041d8:	d9414c17 	ldw	r5,1328(sp)
 10041dc:	2880020c 	andi	r2,r5,8
 10041e0:	1001e526 	beq	r2,zero,1004978 <___vfprintf_internal_r+0x17f8>
 10041e4:	39800017 	ldw	r6,0(r7)
 10041e8:	38800204 	addi	r2,r7,8
 10041ec:	d8814015 	stw	r2,1280(sp)
 10041f0:	d9814215 	stw	r6,1288(sp)
 10041f4:	39c00117 	ldw	r7,4(r7)
 10041f8:	d9c14315 	stw	r7,1292(sp)
 10041fc:	d9014217 	ldw	r4,1288(sp)
 1004200:	d9414317 	ldw	r5,1292(sp)
 1004204:	100b3bc0 	call	100b3bc <__isinfd>
 1004208:	10021d26 	beq	r2,zero,1004a80 <___vfprintf_internal_r+0x1900>
 100420c:	d9014217 	ldw	r4,1288(sp)
 1004210:	d9414317 	ldw	r5,1292(sp)
 1004214:	000d883a 	mov	r6,zero
 1004218:	000f883a 	mov	r7,zero
 100421c:	1010b940 	call	1010b94 <__ltdf2>
 1004220:	1002d016 	blt	r2,zero,1004d64 <___vfprintf_internal_r+0x1be4>
 1004224:	d9414d17 	ldw	r5,1332(sp)
 1004228:	008011c4 	movi	r2,71
 100422c:	11421016 	blt	r2,r5,1004a70 <___vfprintf_internal_r+0x18f0>
 1004230:	018040b4 	movhi	r6,258
 1004234:	31b18304 	addi	r6,r6,-14836
 1004238:	d9814115 	stw	r6,1284(sp)
 100423c:	d9014c17 	ldw	r4,1328(sp)
 1004240:	00c000c4 	movi	r3,3
 1004244:	00bfdfc4 	movi	r2,-129
 1004248:	2088703a 	and	r4,r4,r2
 100424c:	180f883a 	mov	r7,r3
 1004250:	d8c14515 	stw	r3,1300(sp)
 1004254:	d9014c15 	stw	r4,1328(sp)
 1004258:	d8014615 	stw	zero,1304(sp)
 100425c:	003e6a06 	br	1003c08 <___vfprintf_internal_r+0xa88>
 1004260:	38800017 	ldw	r2,0(r7)
 1004264:	00c00044 	movi	r3,1
 1004268:	39c00104 	addi	r7,r7,4
 100426c:	d9c14015 	stw	r7,1280(sp)
 1004270:	d9000f04 	addi	r4,sp,60
 1004274:	180f883a 	mov	r7,r3
 1004278:	d8c14515 	stw	r3,1300(sp)
 100427c:	d9014115 	stw	r4,1284(sp)
 1004280:	d8800f05 	stb	r2,60(sp)
 1004284:	d8000405 	stb	zero,16(sp)
 1004288:	003cac06 	br	100353c <___vfprintf_internal_r+0x3bc>
 100428c:	014040b4 	movhi	r5,258
 1004290:	29718904 	addi	r5,r5,-14812
 1004294:	d9414415 	stw	r5,1296(sp)
 1004298:	d9814c17 	ldw	r6,1328(sp)
 100429c:	3080080c 	andi	r2,r6,32
 10042a0:	1000ff26 	beq	r2,zero,10046a0 <___vfprintf_internal_r+0x1520>
 10042a4:	3c000017 	ldw	r16,0(r7)
 10042a8:	3c400117 	ldw	r17,4(r7)
 10042ac:	38800204 	addi	r2,r7,8
 10042b0:	d8814015 	stw	r2,1280(sp)
 10042b4:	d9414c17 	ldw	r5,1328(sp)
 10042b8:	2880004c 	andi	r2,r5,1
 10042bc:	1005003a 	cmpeq	r2,r2,zero
 10042c0:	1000b91e 	bne	r2,zero,10045a8 <___vfprintf_internal_r+0x1428>
 10042c4:	8444b03a 	or	r2,r16,r17
 10042c8:	1000b726 	beq	r2,zero,10045a8 <___vfprintf_internal_r+0x1428>
 10042cc:	d9814d17 	ldw	r6,1332(sp)
 10042d0:	29400094 	ori	r5,r5,2
 10042d4:	00800c04 	movi	r2,48
 10042d8:	01000084 	movi	r4,2
 10042dc:	d9414c15 	stw	r5,1328(sp)
 10042e0:	d8800445 	stb	r2,17(sp)
 10042e4:	d9800485 	stb	r6,18(sp)
 10042e8:	d8000405 	stb	zero,16(sp)
 10042ec:	003e3206 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10042f0:	018040b4 	movhi	r6,258
 10042f4:	31b17e04 	addi	r6,r6,-14856
 10042f8:	d9814415 	stw	r6,1296(sp)
 10042fc:	003fe606 	br	1004298 <___vfprintf_internal_r+0x1118>
 1004300:	00800ac4 	movi	r2,43
 1004304:	d8800405 	stb	r2,16(sp)
 1004308:	b8c00007 	ldb	r3,0(r23)
 100430c:	003c1b06 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004310:	d8814c17 	ldw	r2,1328(sp)
 1004314:	b8c00007 	ldb	r3,0(r23)
 1004318:	10800054 	ori	r2,r2,1
 100431c:	d8814c15 	stw	r2,1328(sp)
 1004320:	003c1606 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004324:	d8800407 	ldb	r2,16(sp)
 1004328:	10004c1e 	bne	r2,zero,100445c <___vfprintf_internal_r+0x12dc>
 100432c:	00800804 	movi	r2,32
 1004330:	d8800405 	stb	r2,16(sp)
 1004334:	b8c00007 	ldb	r3,0(r23)
 1004338:	003c1006 	br	100337c <___vfprintf_internal_r+0x1fc>
 100433c:	d9814c17 	ldw	r6,1328(sp)
 1004340:	b8c00007 	ldb	r3,0(r23)
 1004344:	31800214 	ori	r6,r6,8
 1004348:	d9814c15 	stw	r6,1328(sp)
 100434c:	003c0b06 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004350:	0009883a 	mov	r4,zero
 1004354:	04000244 	movi	r16,9
 1004358:	01400284 	movi	r5,10
 100435c:	d9c15115 	stw	r7,1348(sp)
 1004360:	10026440 	call	1002644 <__mulsi3>
 1004364:	b9000007 	ldb	r4,0(r23)
 1004368:	d8c14d17 	ldw	r3,1332(sp)
 100436c:	bdc00044 	addi	r23,r23,1
 1004370:	d9014d15 	stw	r4,1332(sp)
 1004374:	d9414d17 	ldw	r5,1332(sp)
 1004378:	1885883a 	add	r2,r3,r2
 100437c:	113ff404 	addi	r4,r2,-48
 1004380:	28bff404 	addi	r2,r5,-48
 1004384:	d9c15117 	ldw	r7,1348(sp)
 1004388:	80bff32e 	bgeu	r16,r2,1004358 <___vfprintf_internal_r+0x11d8>
 100438c:	d9014a15 	stw	r4,1320(sp)
 1004390:	003bfc06 	br	1003384 <___vfprintf_internal_r+0x204>
 1004394:	d8814c17 	ldw	r2,1328(sp)
 1004398:	b8c00007 	ldb	r3,0(r23)
 100439c:	10802014 	ori	r2,r2,128
 10043a0:	d8814c15 	stw	r2,1328(sp)
 10043a4:	003bf506 	br	100337c <___vfprintf_internal_r+0x1fc>
 10043a8:	b8c00007 	ldb	r3,0(r23)
 10043ac:	00800a84 	movi	r2,42
 10043b0:	bdc00044 	addi	r23,r23,1
 10043b4:	18831826 	beq	r3,r2,1005018 <___vfprintf_internal_r+0x1e98>
 10043b8:	d8c14d15 	stw	r3,1332(sp)
 10043bc:	18bff404 	addi	r2,r3,-48
 10043c0:	00c00244 	movi	r3,9
 10043c4:	18827b36 	bltu	r3,r2,1004db4 <___vfprintf_internal_r+0x1c34>
 10043c8:	1821883a 	mov	r16,r3
 10043cc:	0009883a 	mov	r4,zero
 10043d0:	01400284 	movi	r5,10
 10043d4:	d9c15115 	stw	r7,1348(sp)
 10043d8:	10026440 	call	1002644 <__mulsi3>
 10043dc:	d9414d17 	ldw	r5,1332(sp)
 10043e0:	b9800007 	ldb	r6,0(r23)
 10043e4:	d9c15117 	ldw	r7,1348(sp)
 10043e8:	1145883a 	add	r2,r2,r5
 10043ec:	113ff404 	addi	r4,r2,-48
 10043f0:	30bff404 	addi	r2,r6,-48
 10043f4:	d9814d15 	stw	r6,1332(sp)
 10043f8:	bdc00044 	addi	r23,r23,1
 10043fc:	80bff42e 	bgeu	r16,r2,10043d0 <___vfprintf_internal_r+0x1250>
 1004400:	2027883a 	mov	r19,r4
 1004404:	203bdf0e 	bge	r4,zero,1003384 <___vfprintf_internal_r+0x204>
 1004408:	04ffffc4 	movi	r19,-1
 100440c:	003bdd06 	br	1003384 <___vfprintf_internal_r+0x204>
 1004410:	d8000405 	stb	zero,16(sp)
 1004414:	39800017 	ldw	r6,0(r7)
 1004418:	39c00104 	addi	r7,r7,4
 100441c:	d9c14015 	stw	r7,1280(sp)
 1004420:	d9814115 	stw	r6,1284(sp)
 1004424:	3001c926 	beq	r6,zero,1004b4c <___vfprintf_internal_r+0x19cc>
 1004428:	98000e16 	blt	r19,zero,1004464 <___vfprintf_internal_r+0x12e4>
 100442c:	d9014117 	ldw	r4,1284(sp)
 1004430:	000b883a 	mov	r5,zero
 1004434:	980d883a 	mov	r6,r19
 1004438:	10096740 	call	1009674 <memchr>
 100443c:	10025926 	beq	r2,zero,1004da4 <___vfprintf_internal_r+0x1c24>
 1004440:	d8c14117 	ldw	r3,1284(sp)
 1004444:	10cfc83a 	sub	r7,r2,r3
 1004448:	99c19e16 	blt	r19,r7,1004ac4 <___vfprintf_internal_r+0x1944>
 100444c:	d9c14515 	stw	r7,1300(sp)
 1004450:	38000916 	blt	r7,zero,1004478 <___vfprintf_internal_r+0x12f8>
 1004454:	d8014615 	stw	zero,1304(sp)
 1004458:	003deb06 	br	1003c08 <___vfprintf_internal_r+0xa88>
 100445c:	b8c00007 	ldb	r3,0(r23)
 1004460:	003bc606 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004464:	d9014117 	ldw	r4,1284(sp)
 1004468:	10030b40 	call	10030b4 <strlen>
 100446c:	d8814515 	stw	r2,1300(sp)
 1004470:	100f883a 	mov	r7,r2
 1004474:	103ff70e 	bge	r2,zero,1004454 <___vfprintf_internal_r+0x12d4>
 1004478:	d8014515 	stw	zero,1300(sp)
 100447c:	d8014615 	stw	zero,1304(sp)
 1004480:	003de106 	br	1003c08 <___vfprintf_internal_r+0xa88>
 1004484:	20c03fcc 	andi	r3,r4,255
 1004488:	00800044 	movi	r2,1
 100448c:	18802d26 	beq	r3,r2,1004544 <___vfprintf_internal_r+0x13c4>
 1004490:	18800e36 	bltu	r3,r2,10044cc <___vfprintf_internal_r+0x134c>
 1004494:	00800084 	movi	r2,2
 1004498:	1880fa26 	beq	r3,r2,1004884 <___vfprintf_internal_r+0x1704>
 100449c:	010040b4 	movhi	r4,258
 10044a0:	21318e04 	addi	r4,r4,-14792
 10044a4:	10030b40 	call	10030b4 <strlen>
 10044a8:	100f883a 	mov	r7,r2
 10044ac:	dcc14515 	stw	r19,1300(sp)
 10044b0:	9880010e 	bge	r19,r2,10044b8 <___vfprintf_internal_r+0x1338>
 10044b4:	d8814515 	stw	r2,1300(sp)
 10044b8:	008040b4 	movhi	r2,258
 10044bc:	10b18e04 	addi	r2,r2,-14792
 10044c0:	dcc14615 	stw	r19,1304(sp)
 10044c4:	d8814115 	stw	r2,1284(sp)
 10044c8:	003dcf06 	br	1003c08 <___vfprintf_internal_r+0xa88>
 10044cc:	d9401904 	addi	r5,sp,100
 10044d0:	dd000f04 	addi	r20,sp,60
 10044d4:	d9414115 	stw	r5,1284(sp)
 10044d8:	880a977a 	slli	r5,r17,29
 10044dc:	d9814117 	ldw	r6,1284(sp)
 10044e0:	8004d0fa 	srli	r2,r16,3
 10044e4:	8806d0fa 	srli	r3,r17,3
 10044e8:	810001cc 	andi	r4,r16,7
 10044ec:	2884b03a 	or	r2,r5,r2
 10044f0:	31bfffc4 	addi	r6,r6,-1
 10044f4:	21000c04 	addi	r4,r4,48
 10044f8:	d9814115 	stw	r6,1284(sp)
 10044fc:	10cab03a 	or	r5,r2,r3
 1004500:	31000005 	stb	r4,0(r6)
 1004504:	1021883a 	mov	r16,r2
 1004508:	1823883a 	mov	r17,r3
 100450c:	283ff21e 	bne	r5,zero,10044d8 <___vfprintf_internal_r+0x1358>
 1004510:	d8c14c17 	ldw	r3,1328(sp)
 1004514:	1880004c 	andi	r2,r3,1
 1004518:	1005003a 	cmpeq	r2,r2,zero
 100451c:	103db31e 	bne	r2,zero,1003bec <___vfprintf_internal_r+0xa6c>
 1004520:	20803fcc 	andi	r2,r4,255
 1004524:	1080201c 	xori	r2,r2,128
 1004528:	10bfe004 	addi	r2,r2,-128
 100452c:	00c00c04 	movi	r3,48
 1004530:	10fdae26 	beq	r2,r3,1003bec <___vfprintf_internal_r+0xa6c>
 1004534:	31bfffc4 	addi	r6,r6,-1
 1004538:	d9814115 	stw	r6,1284(sp)
 100453c:	30c00005 	stb	r3,0(r6)
 1004540:	003daa06 	br	1003bec <___vfprintf_internal_r+0xa6c>
 1004544:	88800068 	cmpgeui	r2,r17,1
 1004548:	10002c1e 	bne	r2,zero,10045fc <___vfprintf_internal_r+0x147c>
 100454c:	8800021e 	bne	r17,zero,1004558 <___vfprintf_internal_r+0x13d8>
 1004550:	00800244 	movi	r2,9
 1004554:	14002936 	bltu	r2,r16,10045fc <___vfprintf_internal_r+0x147c>
 1004558:	d90018c4 	addi	r4,sp,99
 100455c:	dd000f04 	addi	r20,sp,60
 1004560:	d9014115 	stw	r4,1284(sp)
 1004564:	d9014117 	ldw	r4,1284(sp)
 1004568:	80800c04 	addi	r2,r16,48
 100456c:	20800005 	stb	r2,0(r4)
 1004570:	003d9e06 	br	1003bec <___vfprintf_internal_r+0xa6c>
 1004574:	dc400d17 	ldw	r17,52(sp)
 1004578:	070040b4 	movhi	fp,258
 100457c:	e7319584 	addi	fp,fp,-14762
 1004580:	9425883a 	add	r18,r18,r16
 1004584:	8c400044 	addi	r17,r17,1
 1004588:	008001c4 	movi	r2,7
 100458c:	1f000015 	stw	fp,0(r3)
 1004590:	1c000115 	stw	r16,4(r3)
 1004594:	dc800e15 	stw	r18,56(sp)
 1004598:	dc400d15 	stw	r17,52(sp)
 100459c:	147ddc16 	blt	r2,r17,1003d10 <___vfprintf_internal_r+0xb90>
 10045a0:	18c00204 	addi	r3,r3,8
 10045a4:	003c7406 	br	1003778 <___vfprintf_internal_r+0x5f8>
 10045a8:	01000084 	movi	r4,2
 10045ac:	d8000405 	stb	zero,16(sp)
 10045b0:	003d8106 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10045b4:	d9814c17 	ldw	r6,1328(sp)
 10045b8:	30c4703a 	and	r2,r6,r3
 10045bc:	1005003a 	cmpeq	r2,r2,zero
 10045c0:	103cb326 	beq	r2,zero,1003890 <___vfprintf_internal_r+0x710>
 10045c4:	d9014117 	ldw	r4,1284(sp)
 10045c8:	94800044 	addi	r18,r18,1
 10045cc:	8c400044 	addi	r17,r17,1
 10045d0:	008001c4 	movi	r2,7
 10045d4:	a9000015 	stw	r4,0(r21)
 10045d8:	a8c00115 	stw	r3,4(r21)
 10045dc:	dc800e15 	stw	r18,56(sp)
 10045e0:	dc400d15 	stw	r17,52(sp)
 10045e4:	147e6016 	blt	r2,r17,1003f68 <___vfprintf_internal_r+0xde8>
 10045e8:	acc00204 	addi	r19,r21,8
 10045ec:	003cd106 	br	1003934 <___vfprintf_internal_r+0x7b4>
 10045f0:	070040b4 	movhi	fp,258
 10045f4:	e7319584 	addi	fp,fp,-14762
 10045f8:	003c4906 	br	1003720 <___vfprintf_internal_r+0x5a0>
 10045fc:	dd000f04 	addi	r20,sp,60
 1004600:	dc801904 	addi	r18,sp,100
 1004604:	8009883a 	mov	r4,r16
 1004608:	880b883a 	mov	r5,r17
 100460c:	01800284 	movi	r6,10
 1004610:	000f883a 	mov	r7,zero
 1004614:	100f68c0 	call	100f68c <__umoddi3>
 1004618:	12000c04 	addi	r8,r2,48
 100461c:	94bfffc4 	addi	r18,r18,-1
 1004620:	8009883a 	mov	r4,r16
 1004624:	880b883a 	mov	r5,r17
 1004628:	01800284 	movi	r6,10
 100462c:	000f883a 	mov	r7,zero
 1004630:	92000005 	stb	r8,0(r18)
 1004634:	100f0200 	call	100f020 <__udivdi3>
 1004638:	1009883a 	mov	r4,r2
 100463c:	1021883a 	mov	r16,r2
 1004640:	18800068 	cmpgeui	r2,r3,1
 1004644:	1823883a 	mov	r17,r3
 1004648:	103fee1e 	bne	r2,zero,1004604 <___vfprintf_internal_r+0x1484>
 100464c:	1800021e 	bne	r3,zero,1004658 <___vfprintf_internal_r+0x14d8>
 1004650:	00800244 	movi	r2,9
 1004654:	113feb36 	bltu	r2,r4,1004604 <___vfprintf_internal_r+0x1484>
 1004658:	94bfffc4 	addi	r18,r18,-1
 100465c:	dc814115 	stw	r18,1284(sp)
 1004660:	003fc006 	br	1004564 <___vfprintf_internal_r+0x13e4>
 1004664:	d9014c17 	ldw	r4,1328(sp)
 1004668:	2080004c 	andi	r2,r4,1
 100466c:	10009a1e 	bne	r2,zero,10048d8 <___vfprintf_internal_r+0x1758>
 1004670:	d9401904 	addi	r5,sp,100
 1004674:	dd000f04 	addi	r20,sp,60
 1004678:	d9414115 	stw	r5,1284(sp)
 100467c:	003d5b06 	br	1003bec <___vfprintf_internal_r+0xa6c>
 1004680:	d9014f17 	ldw	r4,1340(sp)
 1004684:	b00b883a 	mov	r5,r22
 1004688:	d9800c04 	addi	r6,sp,48
 100468c:	10031280 	call	1003128 <__sprint_r>
 1004690:	103c731e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004694:	dc800e17 	ldw	r18,56(sp)
 1004698:	d8c01904 	addi	r3,sp,100
 100469c:	003cf906 	br	1003a84 <___vfprintf_internal_r+0x904>
 10046a0:	d8c14c17 	ldw	r3,1328(sp)
 10046a4:	1880040c 	andi	r2,r3,16
 10046a8:	1000711e 	bne	r2,zero,1004870 <___vfprintf_internal_r+0x16f0>
 10046ac:	d9014c17 	ldw	r4,1328(sp)
 10046b0:	2080100c 	andi	r2,r4,64
 10046b4:	10006e26 	beq	r2,zero,1004870 <___vfprintf_internal_r+0x16f0>
 10046b8:	3c00000b 	ldhu	r16,0(r7)
 10046bc:	0023883a 	mov	r17,zero
 10046c0:	39c00104 	addi	r7,r7,4
 10046c4:	d9c14015 	stw	r7,1280(sp)
 10046c8:	003efa06 	br	10042b4 <___vfprintf_internal_r+0x1134>
 10046cc:	dc400d17 	ldw	r17,52(sp)
 10046d0:	070040b4 	movhi	fp,258
 10046d4:	e7319584 	addi	fp,fp,-14762
 10046d8:	9425883a 	add	r18,r18,r16
 10046dc:	8c400044 	addi	r17,r17,1
 10046e0:	008001c4 	movi	r2,7
 10046e4:	1f000015 	stw	fp,0(r3)
 10046e8:	1c000115 	stw	r16,4(r3)
 10046ec:	dc800e15 	stw	r18,56(sp)
 10046f0:	dc400d15 	stw	r17,52(sp)
 10046f4:	147d7016 	blt	r2,r17,1003cb8 <___vfprintf_internal_r+0xb38>
 10046f8:	18c00204 	addi	r3,r3,8
 10046fc:	003d7506 	br	1003cd4 <___vfprintf_internal_r+0xb54>
 1004700:	dc800e17 	ldw	r18,56(sp)
 1004704:	dc400d17 	ldw	r17,52(sp)
 1004708:	070040b4 	movhi	fp,258
 100470c:	e7319984 	addi	fp,fp,-14746
 1004710:	003bba06 	br	10035fc <___vfprintf_internal_r+0x47c>
 1004714:	d9014f17 	ldw	r4,1340(sp)
 1004718:	b00b883a 	mov	r5,r22
 100471c:	d9800c04 	addi	r6,sp,48
 1004720:	10031280 	call	1003128 <__sprint_r>
 1004724:	103c4e1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004728:	dc800e17 	ldw	r18,56(sp)
 100472c:	d8c01904 	addi	r3,sp,100
 1004730:	003ce306 	br	1003ac0 <___vfprintf_internal_r+0x940>
 1004734:	3c000017 	ldw	r16,0(r7)
 1004738:	0009883a 	mov	r4,zero
 100473c:	39c00104 	addi	r7,r7,4
 1004740:	0023883a 	mov	r17,zero
 1004744:	d9c14015 	stw	r7,1280(sp)
 1004748:	d8000405 	stb	zero,16(sp)
 100474c:	003d1a06 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 1004750:	38800017 	ldw	r2,0(r7)
 1004754:	39c00104 	addi	r7,r7,4
 1004758:	d9c14015 	stw	r7,1280(sp)
 100475c:	1023d7fa 	srai	r17,r2,31
 1004760:	1021883a 	mov	r16,r2
 1004764:	003d1206 	br	1003bb0 <___vfprintf_internal_r+0xa30>
 1004768:	3c000017 	ldw	r16,0(r7)
 100476c:	01000044 	movi	r4,1
 1004770:	39c00104 	addi	r7,r7,4
 1004774:	0023883a 	mov	r17,zero
 1004778:	d9c14015 	stw	r7,1280(sp)
 100477c:	d8000405 	stb	zero,16(sp)
 1004780:	003d0d06 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 1004784:	008040b4 	movhi	r2,258
 1004788:	10b19504 	addi	r2,r2,-14764
 100478c:	94800044 	addi	r18,r18,1
 1004790:	8c400044 	addi	r17,r17,1
 1004794:	a8800015 	stw	r2,0(r21)
 1004798:	00c00044 	movi	r3,1
 100479c:	008001c4 	movi	r2,7
 10047a0:	a8c00115 	stw	r3,4(r21)
 10047a4:	dc800e15 	stw	r18,56(sp)
 10047a8:	dc400d15 	stw	r17,52(sp)
 10047ac:	1440ca16 	blt	r2,r17,1004ad8 <___vfprintf_internal_r+0x1958>
 10047b0:	a8c00204 	addi	r3,r21,8
 10047b4:	2000061e 	bne	r4,zero,10047d0 <___vfprintf_internal_r+0x1650>
 10047b8:	d9414717 	ldw	r5,1308(sp)
 10047bc:	2800041e 	bne	r5,zero,10047d0 <___vfprintf_internal_r+0x1650>
 10047c0:	d9814c17 	ldw	r6,1328(sp)
 10047c4:	3080004c 	andi	r2,r6,1
 10047c8:	1005003a 	cmpeq	r2,r2,zero
 10047cc:	103bea1e 	bne	r2,zero,1003778 <___vfprintf_internal_r+0x5f8>
 10047d0:	00800044 	movi	r2,1
 10047d4:	dc400d17 	ldw	r17,52(sp)
 10047d8:	18800115 	stw	r2,4(r3)
 10047dc:	d8814917 	ldw	r2,1316(sp)
 10047e0:	94800044 	addi	r18,r18,1
 10047e4:	8c400044 	addi	r17,r17,1
 10047e8:	18800015 	stw	r2,0(r3)
 10047ec:	008001c4 	movi	r2,7
 10047f0:	dc800e15 	stw	r18,56(sp)
 10047f4:	dc400d15 	stw	r17,52(sp)
 10047f8:	1440ca16 	blt	r2,r17,1004b24 <___vfprintf_internal_r+0x19a4>
 10047fc:	18c00204 	addi	r3,r3,8
 1004800:	0121c83a 	sub	r16,zero,r4
 1004804:	0400500e 	bge	zero,r16,1004948 <___vfprintf_internal_r+0x17c8>
 1004808:	00800404 	movi	r2,16
 100480c:	1400800e 	bge	r2,r16,1004a10 <___vfprintf_internal_r+0x1890>
 1004810:	1027883a 	mov	r19,r2
 1004814:	070040b4 	movhi	fp,258
 1004818:	e7319584 	addi	fp,fp,-14762
 100481c:	050001c4 	movi	r20,7
 1004820:	00000306 	br	1004830 <___vfprintf_internal_r+0x16b0>
 1004824:	18c00204 	addi	r3,r3,8
 1004828:	843ffc04 	addi	r16,r16,-16
 100482c:	9c007a0e 	bge	r19,r16,1004a18 <___vfprintf_internal_r+0x1898>
 1004830:	94800404 	addi	r18,r18,16
 1004834:	8c400044 	addi	r17,r17,1
 1004838:	1f000015 	stw	fp,0(r3)
 100483c:	1cc00115 	stw	r19,4(r3)
 1004840:	dc800e15 	stw	r18,56(sp)
 1004844:	dc400d15 	stw	r17,52(sp)
 1004848:	a47ff60e 	bge	r20,r17,1004824 <___vfprintf_internal_r+0x16a4>
 100484c:	d9014f17 	ldw	r4,1340(sp)
 1004850:	b00b883a 	mov	r5,r22
 1004854:	d9800c04 	addi	r6,sp,48
 1004858:	10031280 	call	1003128 <__sprint_r>
 100485c:	103c001e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004860:	dc800e17 	ldw	r18,56(sp)
 1004864:	dc400d17 	ldw	r17,52(sp)
 1004868:	d8c01904 	addi	r3,sp,100
 100486c:	003fee06 	br	1004828 <___vfprintf_internal_r+0x16a8>
 1004870:	3c000017 	ldw	r16,0(r7)
 1004874:	0023883a 	mov	r17,zero
 1004878:	39c00104 	addi	r7,r7,4
 100487c:	d9c14015 	stw	r7,1280(sp)
 1004880:	003e8c06 	br	10042b4 <___vfprintf_internal_r+0x1134>
 1004884:	d9401904 	addi	r5,sp,100
 1004888:	dd000f04 	addi	r20,sp,60
 100488c:	d9414115 	stw	r5,1284(sp)
 1004890:	d9814417 	ldw	r6,1296(sp)
 1004894:	880a973a 	slli	r5,r17,28
 1004898:	8004d13a 	srli	r2,r16,4
 100489c:	810003cc 	andi	r4,r16,15
 10048a0:	3109883a 	add	r4,r6,r4
 10048a4:	2884b03a 	or	r2,r5,r2
 10048a8:	21400003 	ldbu	r5,0(r4)
 10048ac:	d9014117 	ldw	r4,1284(sp)
 10048b0:	8806d13a 	srli	r3,r17,4
 10048b4:	1021883a 	mov	r16,r2
 10048b8:	213fffc4 	addi	r4,r4,-1
 10048bc:	d9014115 	stw	r4,1284(sp)
 10048c0:	d9814117 	ldw	r6,1284(sp)
 10048c4:	10c8b03a 	or	r4,r2,r3
 10048c8:	1823883a 	mov	r17,r3
 10048cc:	31400005 	stb	r5,0(r6)
 10048d0:	203fef1e 	bne	r4,zero,1004890 <___vfprintf_internal_r+0x1710>
 10048d4:	003cc506 	br	1003bec <___vfprintf_internal_r+0xa6c>
 10048d8:	00800c04 	movi	r2,48
 10048dc:	d98018c4 	addi	r6,sp,99
 10048e0:	dd000f04 	addi	r20,sp,60
 10048e4:	d88018c5 	stb	r2,99(sp)
 10048e8:	d9814115 	stw	r6,1284(sp)
 10048ec:	003cbf06 	br	1003bec <___vfprintf_internal_r+0xa6c>
 10048f0:	dc400d17 	ldw	r17,52(sp)
 10048f4:	070040b4 	movhi	fp,258
 10048f8:	e7319984 	addi	fp,fp,-14746
 10048fc:	003bc106 	br	1003804 <___vfprintf_internal_r+0x684>
 1004900:	d9414c17 	ldw	r5,1328(sp)
 1004904:	2880040c 	andi	r2,r5,16
 1004908:	10007c26 	beq	r2,zero,1004afc <___vfprintf_internal_r+0x197c>
 100490c:	38800017 	ldw	r2,0(r7)
 1004910:	39c00104 	addi	r7,r7,4
 1004914:	d9c14015 	stw	r7,1280(sp)
 1004918:	d9814b17 	ldw	r6,1324(sp)
 100491c:	d9c14017 	ldw	r7,1280(sp)
 1004920:	11800015 	stw	r6,0(r2)
 1004924:	003a7206 	br	10032f0 <___vfprintf_internal_r+0x170>
 1004928:	d9014f17 	ldw	r4,1340(sp)
 100492c:	b00b883a 	mov	r5,r22
 1004930:	d9800c04 	addi	r6,sp,48
 1004934:	10031280 	call	1003128 <__sprint_r>
 1004938:	103bc91e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 100493c:	dc800e17 	ldw	r18,56(sp)
 1004940:	dc400d17 	ldw	r17,52(sp)
 1004944:	d8c01904 	addi	r3,sp,100
 1004948:	d9014717 	ldw	r4,1308(sp)
 100494c:	d9414117 	ldw	r5,1284(sp)
 1004950:	8c400044 	addi	r17,r17,1
 1004954:	9125883a 	add	r18,r18,r4
 1004958:	008001c4 	movi	r2,7
 100495c:	19400015 	stw	r5,0(r3)
 1004960:	19000115 	stw	r4,4(r3)
 1004964:	dc800e15 	stw	r18,56(sp)
 1004968:	dc400d15 	stw	r17,52(sp)
 100496c:	147ce816 	blt	r2,r17,1003d10 <___vfprintf_internal_r+0xb90>
 1004970:	18c00204 	addi	r3,r3,8
 1004974:	003b8006 	br	1003778 <___vfprintf_internal_r+0x5f8>
 1004978:	38c00017 	ldw	r3,0(r7)
 100497c:	39000204 	addi	r4,r7,8
 1004980:	d9014015 	stw	r4,1280(sp)
 1004984:	d8c14215 	stw	r3,1288(sp)
 1004988:	39c00117 	ldw	r7,4(r7)
 100498c:	d9c14315 	stw	r7,1292(sp)
 1004990:	003e1a06 	br	10041fc <___vfprintf_internal_r+0x107c>
 1004994:	0005883a 	mov	r2,zero
 1004998:	1409c83a 	sub	r4,r2,r16
 100499c:	1105803a 	cmpltu	r2,r2,r4
 10049a0:	044bc83a 	sub	r5,zero,r17
 10049a4:	2885c83a 	sub	r2,r5,r2
 10049a8:	2021883a 	mov	r16,r4
 10049ac:	1023883a 	mov	r17,r2
 10049b0:	01000044 	movi	r4,1
 10049b4:	00800b44 	movi	r2,45
 10049b8:	d8800405 	stb	r2,16(sp)
 10049bc:	003c7e06 	br	1003bb8 <___vfprintf_internal_r+0xa38>
 10049c0:	d9014f17 	ldw	r4,1340(sp)
 10049c4:	b00b883a 	mov	r5,r22
 10049c8:	d9800c04 	addi	r6,sp,48
 10049cc:	10031280 	call	1003128 <__sprint_r>
 10049d0:	103ba31e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 10049d4:	dc800e17 	ldw	r18,56(sp)
 10049d8:	dc400d17 	ldw	r17,52(sp)
 10049dc:	d9000517 	ldw	r4,20(sp)
 10049e0:	d9401904 	addi	r5,sp,100
 10049e4:	003da106 	br	100406c <___vfprintf_internal_r+0xeec>
 10049e8:	d9014f17 	ldw	r4,1340(sp)
 10049ec:	b00b883a 	mov	r5,r22
 10049f0:	d9800c04 	addi	r6,sp,48
 10049f4:	10031280 	call	1003128 <__sprint_r>
 10049f8:	103b991e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 10049fc:	dc800e17 	ldw	r18,56(sp)
 1004a00:	dc400d17 	ldw	r17,52(sp)
 1004a04:	d9000517 	ldw	r4,20(sp)
 1004a08:	d8c01904 	addi	r3,sp,100
 1004a0c:	003d8b06 	br	100403c <___vfprintf_internal_r+0xebc>
 1004a10:	070040b4 	movhi	fp,258
 1004a14:	e7319584 	addi	fp,fp,-14762
 1004a18:	9425883a 	add	r18,r18,r16
 1004a1c:	8c400044 	addi	r17,r17,1
 1004a20:	008001c4 	movi	r2,7
 1004a24:	1f000015 	stw	fp,0(r3)
 1004a28:	1c000115 	stw	r16,4(r3)
 1004a2c:	dc800e15 	stw	r18,56(sp)
 1004a30:	dc400d15 	stw	r17,52(sp)
 1004a34:	147fbc16 	blt	r2,r17,1004928 <___vfprintf_internal_r+0x17a8>
 1004a38:	18c00204 	addi	r3,r3,8
 1004a3c:	003fc206 	br	1004948 <___vfprintf_internal_r+0x17c8>
 1004a40:	d9014f17 	ldw	r4,1340(sp)
 1004a44:	b00b883a 	mov	r5,r22
 1004a48:	d9800c04 	addi	r6,sp,48
 1004a4c:	10031280 	call	1003128 <__sprint_r>
 1004a50:	103b831e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004a54:	dc800e17 	ldw	r18,56(sp)
 1004a58:	d9000517 	ldw	r4,20(sp)
 1004a5c:	d8c01904 	addi	r3,sp,100
 1004a60:	003cfc06 	br	1003e54 <___vfprintf_internal_r+0xcd4>
 1004a64:	070040b4 	movhi	fp,258
 1004a68:	e7319584 	addi	fp,fp,-14762
 1004a6c:	003bde06 	br	10039e8 <___vfprintf_internal_r+0x868>
 1004a70:	008040b4 	movhi	r2,258
 1004a74:	10b18404 	addi	r2,r2,-14832
 1004a78:	d8814115 	stw	r2,1284(sp)
 1004a7c:	003def06 	br	100423c <___vfprintf_internal_r+0x10bc>
 1004a80:	d9014217 	ldw	r4,1288(sp)
 1004a84:	d9414317 	ldw	r5,1292(sp)
 1004a88:	100b3fc0 	call	100b3fc <__isnand>
 1004a8c:	10003926 	beq	r2,zero,1004b74 <___vfprintf_internal_r+0x19f4>
 1004a90:	d9414d17 	ldw	r5,1332(sp)
 1004a94:	008011c4 	movi	r2,71
 1004a98:	1140ce16 	blt	r2,r5,1004dd4 <___vfprintf_internal_r+0x1c54>
 1004a9c:	018040b4 	movhi	r6,258
 1004aa0:	31b18504 	addi	r6,r6,-14828
 1004aa4:	d9814115 	stw	r6,1284(sp)
 1004aa8:	003de406 	br	100423c <___vfprintf_internal_r+0x10bc>
 1004aac:	d9014c17 	ldw	r4,1328(sp)
 1004ab0:	bdc00044 	addi	r23,r23,1
 1004ab4:	b8c00007 	ldb	r3,0(r23)
 1004ab8:	21000814 	ori	r4,r4,32
 1004abc:	d9014c15 	stw	r4,1328(sp)
 1004ac0:	003a2e06 	br	100337c <___vfprintf_internal_r+0x1fc>
 1004ac4:	dcc14515 	stw	r19,1300(sp)
 1004ac8:	98011016 	blt	r19,zero,1004f0c <___vfprintf_internal_r+0x1d8c>
 1004acc:	980f883a 	mov	r7,r19
 1004ad0:	d8014615 	stw	zero,1304(sp)
 1004ad4:	003c4c06 	br	1003c08 <___vfprintf_internal_r+0xa88>
 1004ad8:	d9014f17 	ldw	r4,1340(sp)
 1004adc:	b00b883a 	mov	r5,r22
 1004ae0:	d9800c04 	addi	r6,sp,48
 1004ae4:	10031280 	call	1003128 <__sprint_r>
 1004ae8:	103b5d1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004aec:	dc800e17 	ldw	r18,56(sp)
 1004af0:	d9000517 	ldw	r4,20(sp)
 1004af4:	d8c01904 	addi	r3,sp,100
 1004af8:	003f2e06 	br	10047b4 <___vfprintf_internal_r+0x1634>
 1004afc:	d8c14c17 	ldw	r3,1328(sp)
 1004b00:	1880100c 	andi	r2,r3,64
 1004b04:	1000a026 	beq	r2,zero,1004d88 <___vfprintf_internal_r+0x1c08>
 1004b08:	38800017 	ldw	r2,0(r7)
 1004b0c:	39c00104 	addi	r7,r7,4
 1004b10:	d9c14015 	stw	r7,1280(sp)
 1004b14:	d9014b17 	ldw	r4,1324(sp)
 1004b18:	d9c14017 	ldw	r7,1280(sp)
 1004b1c:	1100000d 	sth	r4,0(r2)
 1004b20:	0039f306 	br	10032f0 <___vfprintf_internal_r+0x170>
 1004b24:	d9014f17 	ldw	r4,1340(sp)
 1004b28:	b00b883a 	mov	r5,r22
 1004b2c:	d9800c04 	addi	r6,sp,48
 1004b30:	10031280 	call	1003128 <__sprint_r>
 1004b34:	103b4a1e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004b38:	dc800e17 	ldw	r18,56(sp)
 1004b3c:	dc400d17 	ldw	r17,52(sp)
 1004b40:	d9000517 	ldw	r4,20(sp)
 1004b44:	d8c01904 	addi	r3,sp,100
 1004b48:	003f2d06 	br	1004800 <___vfprintf_internal_r+0x1680>
 1004b4c:	00800184 	movi	r2,6
 1004b50:	14c09a36 	bltu	r2,r19,1004dbc <___vfprintf_internal_r+0x1c3c>
 1004b54:	dcc14515 	stw	r19,1300(sp)
 1004b58:	9800010e 	bge	r19,zero,1004b60 <___vfprintf_internal_r+0x19e0>
 1004b5c:	d8014515 	stw	zero,1300(sp)
 1004b60:	008040b4 	movhi	r2,258
 1004b64:	10b18704 	addi	r2,r2,-14820
 1004b68:	980f883a 	mov	r7,r19
 1004b6c:	d8814115 	stw	r2,1284(sp)
 1004b70:	003a7206 	br	100353c <___vfprintf_internal_r+0x3bc>
 1004b74:	00bfffc4 	movi	r2,-1
 1004b78:	9880e226 	beq	r19,r2,1004f04 <___vfprintf_internal_r+0x1d84>
 1004b7c:	d9414d17 	ldw	r5,1332(sp)
 1004b80:	008019c4 	movi	r2,103
 1004b84:	2880dc26 	beq	r5,r2,1004ef8 <___vfprintf_internal_r+0x1d78>
 1004b88:	008011c4 	movi	r2,71
 1004b8c:	2880da26 	beq	r5,r2,1004ef8 <___vfprintf_internal_r+0x1d78>
 1004b90:	d9414c17 	ldw	r5,1328(sp)
 1004b94:	d9014317 	ldw	r4,1292(sp)
 1004b98:	d9814217 	ldw	r6,1288(sp)
 1004b9c:	29404014 	ori	r5,r5,256
 1004ba0:	d9414c15 	stw	r5,1328(sp)
 1004ba4:	2000cc16 	blt	r4,zero,1004ed8 <___vfprintf_internal_r+0x1d58>
 1004ba8:	3021883a 	mov	r16,r6
 1004bac:	2023883a 	mov	r17,r4
 1004bb0:	0039883a 	mov	fp,zero
 1004bb4:	d9414d17 	ldw	r5,1332(sp)
 1004bb8:	00801984 	movi	r2,102
 1004bbc:	2880b726 	beq	r5,r2,1004e9c <___vfprintf_internal_r+0x1d1c>
 1004bc0:	00801184 	movi	r2,70
 1004bc4:	2880b526 	beq	r5,r2,1004e9c <___vfprintf_internal_r+0x1d1c>
 1004bc8:	00801944 	movi	r2,101
 1004bcc:	2880c826 	beq	r5,r2,1004ef0 <___vfprintf_internal_r+0x1d70>
 1004bd0:	00801144 	movi	r2,69
 1004bd4:	2880c626 	beq	r5,r2,1004ef0 <___vfprintf_internal_r+0x1d70>
 1004bd8:	9829883a 	mov	r20,r19
 1004bdc:	d9014f17 	ldw	r4,1340(sp)
 1004be0:	d8800504 	addi	r2,sp,20
 1004be4:	880d883a 	mov	r6,r17
 1004be8:	d8800115 	stw	r2,4(sp)
 1004bec:	d8c00604 	addi	r3,sp,24
 1004bf0:	d8800704 	addi	r2,sp,28
 1004bf4:	800b883a 	mov	r5,r16
 1004bf8:	01c00084 	movi	r7,2
 1004bfc:	d8c00215 	stw	r3,8(sp)
 1004c00:	d8800315 	stw	r2,12(sp)
 1004c04:	dd000015 	stw	r20,0(sp)
 1004c08:	1006b700 	call	1006b70 <_dtoa_r>
 1004c0c:	d9814d17 	ldw	r6,1332(sp)
 1004c10:	d8814115 	stw	r2,1284(sp)
 1004c14:	008019c4 	movi	r2,103
 1004c18:	30809526 	beq	r6,r2,1004e70 <___vfprintf_internal_r+0x1cf0>
 1004c1c:	d8c14d17 	ldw	r3,1332(sp)
 1004c20:	008011c4 	movi	r2,71
 1004c24:	18809226 	beq	r3,r2,1004e70 <___vfprintf_internal_r+0x1cf0>
 1004c28:	d9414117 	ldw	r5,1284(sp)
 1004c2c:	d9814d17 	ldw	r6,1332(sp)
 1004c30:	00801984 	movi	r2,102
 1004c34:	2d25883a 	add	r18,r5,r20
 1004c38:	30808626 	beq	r6,r2,1004e54 <___vfprintf_internal_r+0x1cd4>
 1004c3c:	00801184 	movi	r2,70
 1004c40:	30808426 	beq	r6,r2,1004e54 <___vfprintf_internal_r+0x1cd4>
 1004c44:	000d883a 	mov	r6,zero
 1004c48:	000f883a 	mov	r7,zero
 1004c4c:	880b883a 	mov	r5,r17
 1004c50:	8009883a 	mov	r4,r16
 1004c54:	10109740 	call	1010974 <__eqdf2>
 1004c58:	1000751e 	bne	r2,zero,1004e30 <___vfprintf_internal_r+0x1cb0>
 1004c5c:	9005883a 	mov	r2,r18
 1004c60:	dc800715 	stw	r18,28(sp)
 1004c64:	d9014117 	ldw	r4,1284(sp)
 1004c68:	d9414d17 	ldw	r5,1332(sp)
 1004c6c:	00c019c4 	movi	r3,103
 1004c70:	1125c83a 	sub	r18,r2,r4
 1004c74:	28c06826 	beq	r5,r3,1004e18 <___vfprintf_internal_r+0x1c98>
 1004c78:	008011c4 	movi	r2,71
 1004c7c:	28806626 	beq	r5,r2,1004e18 <___vfprintf_internal_r+0x1c98>
 1004c80:	d9000517 	ldw	r4,20(sp)
 1004c84:	d8c14d17 	ldw	r3,1332(sp)
 1004c88:	00801944 	movi	r2,101
 1004c8c:	10c05516 	blt	r2,r3,1004de4 <___vfprintf_internal_r+0x1c64>
 1004c90:	213fffc4 	addi	r4,r4,-1
 1004c94:	d9000515 	stw	r4,20(sp)
 1004c98:	d8c00805 	stb	r3,32(sp)
 1004c9c:	2021883a 	mov	r16,r4
 1004ca0:	2000c116 	blt	r4,zero,1004fa8 <___vfprintf_internal_r+0x1e28>
 1004ca4:	00800ac4 	movi	r2,43
 1004ca8:	d8800845 	stb	r2,33(sp)
 1004cac:	00800244 	movi	r2,9
 1004cb0:	1400af0e 	bge	r2,r16,1004f70 <___vfprintf_internal_r+0x1df0>
 1004cb4:	1027883a 	mov	r19,r2
 1004cb8:	dc400b84 	addi	r17,sp,46
 1004cbc:	8009883a 	mov	r4,r16
 1004cc0:	01400284 	movi	r5,10
 1004cc4:	10025d40 	call	10025d4 <__modsi3>
 1004cc8:	10800c04 	addi	r2,r2,48
 1004ccc:	8c7fffc4 	addi	r17,r17,-1
 1004cd0:	8009883a 	mov	r4,r16
 1004cd4:	01400284 	movi	r5,10
 1004cd8:	88800005 	stb	r2,0(r17)
 1004cdc:	10025740 	call	1002574 <__divsi3>
 1004ce0:	1021883a 	mov	r16,r2
 1004ce4:	98bff516 	blt	r19,r2,1004cbc <___vfprintf_internal_r+0x1b3c>
 1004ce8:	10c00c04 	addi	r3,r2,48
 1004cec:	d88009c4 	addi	r2,sp,39
 1004cf0:	108001c4 	addi	r2,r2,7
 1004cf4:	897fffc4 	addi	r5,r17,-1
 1004cf8:	88ffffc5 	stb	r3,-1(r17)
 1004cfc:	2880a72e 	bgeu	r5,r2,1004f9c <___vfprintf_internal_r+0x1e1c>
 1004d00:	1009883a 	mov	r4,r2
 1004d04:	d9800804 	addi	r6,sp,32
 1004d08:	d8c00884 	addi	r3,sp,34
 1004d0c:	28800003 	ldbu	r2,0(r5)
 1004d10:	29400044 	addi	r5,r5,1
 1004d14:	18800005 	stb	r2,0(r3)
 1004d18:	18c00044 	addi	r3,r3,1
 1004d1c:	293ffb36 	bltu	r5,r4,1004d0c <___vfprintf_internal_r+0x1b8c>
 1004d20:	1987c83a 	sub	r3,r3,r6
 1004d24:	00800044 	movi	r2,1
 1004d28:	d8c14815 	stw	r3,1312(sp)
 1004d2c:	90cf883a 	add	r7,r18,r3
 1004d30:	1480960e 	bge	r2,r18,1004f8c <___vfprintf_internal_r+0x1e0c>
 1004d34:	39c00044 	addi	r7,r7,1
 1004d38:	d9c14515 	stw	r7,1300(sp)
 1004d3c:	38003416 	blt	r7,zero,1004e10 <___vfprintf_internal_r+0x1c90>
 1004d40:	e0803fcc 	andi	r2,fp,255
 1004d44:	1080201c 	xori	r2,r2,128
 1004d48:	10bfe004 	addi	r2,r2,-128
 1004d4c:	10004e26 	beq	r2,zero,1004e88 <___vfprintf_internal_r+0x1d08>
 1004d50:	00800b44 	movi	r2,45
 1004d54:	dc814715 	stw	r18,1308(sp)
 1004d58:	d8014615 	stw	zero,1304(sp)
 1004d5c:	d8800405 	stb	r2,16(sp)
 1004d60:	003bab06 	br	1003c10 <___vfprintf_internal_r+0xa90>
 1004d64:	00800b44 	movi	r2,45
 1004d68:	d8800405 	stb	r2,16(sp)
 1004d6c:	003d2d06 	br	1004224 <___vfprintf_internal_r+0x10a4>
 1004d70:	d9014f17 	ldw	r4,1340(sp)
 1004d74:	b00b883a 	mov	r5,r22
 1004d78:	d9800c04 	addi	r6,sp,48
 1004d7c:	10031280 	call	1003128 <__sprint_r>
 1004d80:	103ab71e 	bne	r2,zero,1003860 <___vfprintf_internal_r+0x6e0>
 1004d84:	003ab506 	br	100385c <___vfprintf_internal_r+0x6dc>
 1004d88:	38800017 	ldw	r2,0(r7)
 1004d8c:	39c00104 	addi	r7,r7,4
 1004d90:	d9c14015 	stw	r7,1280(sp)
 1004d94:	d9414b17 	ldw	r5,1324(sp)
 1004d98:	d9c14017 	ldw	r7,1280(sp)
 1004d9c:	11400015 	stw	r5,0(r2)
 1004da0:	00395306 	br	10032f0 <___vfprintf_internal_r+0x170>
 1004da4:	980f883a 	mov	r7,r19
 1004da8:	dcc14515 	stw	r19,1300(sp)
 1004dac:	d8014615 	stw	zero,1304(sp)
 1004db0:	003b9506 	br	1003c08 <___vfprintf_internal_r+0xa88>
 1004db4:	0027883a 	mov	r19,zero
 1004db8:	00397206 	br	1003384 <___vfprintf_internal_r+0x204>
 1004dbc:	00c040b4 	movhi	r3,258
 1004dc0:	18f18704 	addi	r3,r3,-14820
 1004dc4:	100f883a 	mov	r7,r2
 1004dc8:	d8814515 	stw	r2,1300(sp)
 1004dcc:	d8c14115 	stw	r3,1284(sp)
 1004dd0:	0039da06 	br	100353c <___vfprintf_internal_r+0x3bc>
 1004dd4:	008040b4 	movhi	r2,258
 1004dd8:	10b18604 	addi	r2,r2,-14824
 1004ddc:	d8814115 	stw	r2,1284(sp)
 1004de0:	003d1606 	br	100423c <___vfprintf_internal_r+0x10bc>
 1004de4:	d9414d17 	ldw	r5,1332(sp)
 1004de8:	00801984 	movi	r2,102
 1004dec:	28804926 	beq	r5,r2,1004f14 <___vfprintf_internal_r+0x1d94>
 1004df0:	200f883a 	mov	r7,r4
 1004df4:	24805716 	blt	r4,r18,1004f54 <___vfprintf_internal_r+0x1dd4>
 1004df8:	d9414c17 	ldw	r5,1328(sp)
 1004dfc:	2880004c 	andi	r2,r5,1
 1004e00:	10000126 	beq	r2,zero,1004e08 <___vfprintf_internal_r+0x1c88>
 1004e04:	21c00044 	addi	r7,r4,1
 1004e08:	d9c14515 	stw	r7,1300(sp)
 1004e0c:	383fcc0e 	bge	r7,zero,1004d40 <___vfprintf_internal_r+0x1bc0>
 1004e10:	d8014515 	stw	zero,1300(sp)
 1004e14:	003fca06 	br	1004d40 <___vfprintf_internal_r+0x1bc0>
 1004e18:	d9000517 	ldw	r4,20(sp)
 1004e1c:	00bfff04 	movi	r2,-4
 1004e20:	1100480e 	bge	r2,r4,1004f44 <___vfprintf_internal_r+0x1dc4>
 1004e24:	99004716 	blt	r19,r4,1004f44 <___vfprintf_internal_r+0x1dc4>
 1004e28:	d8c14d15 	stw	r3,1332(sp)
 1004e2c:	003ff006 	br	1004df0 <___vfprintf_internal_r+0x1c70>
 1004e30:	d8800717 	ldw	r2,28(sp)
 1004e34:	14bf8b2e 	bgeu	r2,r18,1004c64 <___vfprintf_internal_r+0x1ae4>
 1004e38:	9007883a 	mov	r3,r18
 1004e3c:	01000c04 	movi	r4,48
 1004e40:	11000005 	stb	r4,0(r2)
 1004e44:	10800044 	addi	r2,r2,1
 1004e48:	d8800715 	stw	r2,28(sp)
 1004e4c:	18bffc1e 	bne	r3,r2,1004e40 <___vfprintf_internal_r+0x1cc0>
 1004e50:	003f8406 	br	1004c64 <___vfprintf_internal_r+0x1ae4>
 1004e54:	d8814117 	ldw	r2,1284(sp)
 1004e58:	10c00007 	ldb	r3,0(r2)
 1004e5c:	00800c04 	movi	r2,48
 1004e60:	18805b26 	beq	r3,r2,1004fd0 <___vfprintf_internal_r+0x1e50>
 1004e64:	d9000517 	ldw	r4,20(sp)
 1004e68:	9125883a 	add	r18,r18,r4
 1004e6c:	003f7506 	br	1004c44 <___vfprintf_internal_r+0x1ac4>
 1004e70:	d9014c17 	ldw	r4,1328(sp)
 1004e74:	2080004c 	andi	r2,r4,1
 1004e78:	1005003a 	cmpeq	r2,r2,zero
 1004e7c:	103f6a26 	beq	r2,zero,1004c28 <___vfprintf_internal_r+0x1aa8>
 1004e80:	d8800717 	ldw	r2,28(sp)
 1004e84:	003f7706 	br	1004c64 <___vfprintf_internal_r+0x1ae4>
 1004e88:	d9c14515 	stw	r7,1300(sp)
 1004e8c:	38004d16 	blt	r7,zero,1004fc4 <___vfprintf_internal_r+0x1e44>
 1004e90:	dc814715 	stw	r18,1308(sp)
 1004e94:	d8014615 	stw	zero,1304(sp)
 1004e98:	003b5b06 	br	1003c08 <___vfprintf_internal_r+0xa88>
 1004e9c:	d9014f17 	ldw	r4,1340(sp)
 1004ea0:	d8800504 	addi	r2,sp,20
 1004ea4:	d8800115 	stw	r2,4(sp)
 1004ea8:	d8c00604 	addi	r3,sp,24
 1004eac:	d8800704 	addi	r2,sp,28
 1004eb0:	800b883a 	mov	r5,r16
 1004eb4:	880d883a 	mov	r6,r17
 1004eb8:	01c000c4 	movi	r7,3
 1004ebc:	d8c00215 	stw	r3,8(sp)
 1004ec0:	d8800315 	stw	r2,12(sp)
 1004ec4:	dcc00015 	stw	r19,0(sp)
 1004ec8:	9829883a 	mov	r20,r19
 1004ecc:	1006b700 	call	1006b70 <_dtoa_r>
 1004ed0:	d8814115 	stw	r2,1284(sp)
 1004ed4:	003f5106 	br	1004c1c <___vfprintf_internal_r+0x1a9c>
 1004ed8:	d8c14217 	ldw	r3,1288(sp)
 1004edc:	d9014317 	ldw	r4,1292(sp)
 1004ee0:	07000b44 	movi	fp,45
 1004ee4:	1821883a 	mov	r16,r3
 1004ee8:	2460003c 	xorhi	r17,r4,32768
 1004eec:	003f3106 	br	1004bb4 <___vfprintf_internal_r+0x1a34>
 1004ef0:	9d000044 	addi	r20,r19,1
 1004ef4:	003f3906 	br	1004bdc <___vfprintf_internal_r+0x1a5c>
 1004ef8:	983f251e 	bne	r19,zero,1004b90 <___vfprintf_internal_r+0x1a10>
 1004efc:	04c00044 	movi	r19,1
 1004f00:	003f2306 	br	1004b90 <___vfprintf_internal_r+0x1a10>
 1004f04:	04c00184 	movi	r19,6
 1004f08:	003f2106 	br	1004b90 <___vfprintf_internal_r+0x1a10>
 1004f0c:	d8014515 	stw	zero,1300(sp)
 1004f10:	003eee06 	br	1004acc <___vfprintf_internal_r+0x194c>
 1004f14:	200f883a 	mov	r7,r4
 1004f18:	0100370e 	bge	zero,r4,1004ff8 <___vfprintf_internal_r+0x1e78>
 1004f1c:	9800031e 	bne	r19,zero,1004f2c <___vfprintf_internal_r+0x1dac>
 1004f20:	d9814c17 	ldw	r6,1328(sp)
 1004f24:	3080004c 	andi	r2,r6,1
 1004f28:	103fb726 	beq	r2,zero,1004e08 <___vfprintf_internal_r+0x1c88>
 1004f2c:	20800044 	addi	r2,r4,1
 1004f30:	98a7883a 	add	r19,r19,r2
 1004f34:	dcc14515 	stw	r19,1300(sp)
 1004f38:	980f883a 	mov	r7,r19
 1004f3c:	983f800e 	bge	r19,zero,1004d40 <___vfprintf_internal_r+0x1bc0>
 1004f40:	003fb306 	br	1004e10 <___vfprintf_internal_r+0x1c90>
 1004f44:	d9814d17 	ldw	r6,1332(sp)
 1004f48:	31bfff84 	addi	r6,r6,-2
 1004f4c:	d9814d15 	stw	r6,1332(sp)
 1004f50:	003f4c06 	br	1004c84 <___vfprintf_internal_r+0x1b04>
 1004f54:	0100180e 	bge	zero,r4,1004fb8 <___vfprintf_internal_r+0x1e38>
 1004f58:	00800044 	movi	r2,1
 1004f5c:	1485883a 	add	r2,r2,r18
 1004f60:	d8814515 	stw	r2,1300(sp)
 1004f64:	100f883a 	mov	r7,r2
 1004f68:	103f750e 	bge	r2,zero,1004d40 <___vfprintf_internal_r+0x1bc0>
 1004f6c:	003fa806 	br	1004e10 <___vfprintf_internal_r+0x1c90>
 1004f70:	80c00c04 	addi	r3,r16,48
 1004f74:	00800c04 	movi	r2,48
 1004f78:	d8c008c5 	stb	r3,35(sp)
 1004f7c:	d9800804 	addi	r6,sp,32
 1004f80:	d8c00904 	addi	r3,sp,36
 1004f84:	d8800885 	stb	r2,34(sp)
 1004f88:	003f6506 	br	1004d20 <___vfprintf_internal_r+0x1ba0>
 1004f8c:	d9014c17 	ldw	r4,1328(sp)
 1004f90:	2084703a 	and	r2,r4,r2
 1004f94:	103f9c26 	beq	r2,zero,1004e08 <___vfprintf_internal_r+0x1c88>
 1004f98:	003f6606 	br	1004d34 <___vfprintf_internal_r+0x1bb4>
 1004f9c:	d9800804 	addi	r6,sp,32
 1004fa0:	d8c00884 	addi	r3,sp,34
 1004fa4:	003f5e06 	br	1004d20 <___vfprintf_internal_r+0x1ba0>
 1004fa8:	00800b44 	movi	r2,45
 1004fac:	0121c83a 	sub	r16,zero,r4
 1004fb0:	d8800845 	stb	r2,33(sp)
 1004fb4:	003f3d06 	br	1004cac <___vfprintf_internal_r+0x1b2c>
 1004fb8:	00800084 	movi	r2,2
 1004fbc:	1105c83a 	sub	r2,r2,r4
 1004fc0:	003fe606 	br	1004f5c <___vfprintf_internal_r+0x1ddc>
 1004fc4:	d8014515 	stw	zero,1300(sp)
 1004fc8:	dc814715 	stw	r18,1308(sp)
 1004fcc:	003fb106 	br	1004e94 <___vfprintf_internal_r+0x1d14>
 1004fd0:	000d883a 	mov	r6,zero
 1004fd4:	000f883a 	mov	r7,zero
 1004fd8:	8009883a 	mov	r4,r16
 1004fdc:	880b883a 	mov	r5,r17
 1004fe0:	10109fc0 	call	10109fc <__nedf2>
 1004fe4:	103f9f26 	beq	r2,zero,1004e64 <___vfprintf_internal_r+0x1ce4>
 1004fe8:	00800044 	movi	r2,1
 1004fec:	1509c83a 	sub	r4,r2,r20
 1004ff0:	d9000515 	stw	r4,20(sp)
 1004ff4:	003f9b06 	br	1004e64 <___vfprintf_internal_r+0x1ce4>
 1004ff8:	98000d1e 	bne	r19,zero,1005030 <___vfprintf_internal_r+0x1eb0>
 1004ffc:	d8c14c17 	ldw	r3,1328(sp)
 1005000:	1880004c 	andi	r2,r3,1
 1005004:	10000a1e 	bne	r2,zero,1005030 <___vfprintf_internal_r+0x1eb0>
 1005008:	01000044 	movi	r4,1
 100500c:	200f883a 	mov	r7,r4
 1005010:	d9014515 	stw	r4,1300(sp)
 1005014:	003f4a06 	br	1004d40 <___vfprintf_internal_r+0x1bc0>
 1005018:	3cc00017 	ldw	r19,0(r7)
 100501c:	39c00104 	addi	r7,r7,4
 1005020:	983d0e0e 	bge	r19,zero,100445c <___vfprintf_internal_r+0x12dc>
 1005024:	b8c00007 	ldb	r3,0(r23)
 1005028:	04ffffc4 	movi	r19,-1
 100502c:	0038d306 	br	100337c <___vfprintf_internal_r+0x1fc>
 1005030:	9cc00084 	addi	r19,r19,2
 1005034:	dcc14515 	stw	r19,1300(sp)
 1005038:	980f883a 	mov	r7,r19
 100503c:	983f400e 	bge	r19,zero,1004d40 <___vfprintf_internal_r+0x1bc0>
 1005040:	003f7306 	br	1004e10 <___vfprintf_internal_r+0x1c90>

01005044 <__vfprintf_internal>:
 1005044:	008040b4 	movhi	r2,258
 1005048:	10ba3e04 	addi	r2,r2,-5896
 100504c:	2013883a 	mov	r9,r4
 1005050:	11000017 	ldw	r4,0(r2)
 1005054:	2805883a 	mov	r2,r5
 1005058:	300f883a 	mov	r7,r6
 100505c:	480b883a 	mov	r5,r9
 1005060:	100d883a 	mov	r6,r2
 1005064:	10031801 	jmpi	1003180 <___vfprintf_internal_r>

01005068 <__svfscanf_r>:
 1005068:	deff4e04 	addi	sp,sp,-712
 100506c:	dd80ae15 	stw	r22,696(sp)
 1005070:	dd00ac15 	stw	r20,688(sp)
 1005074:	dc40a915 	stw	r17,676(sp)
 1005078:	dc00a815 	stw	r16,672(sp)
 100507c:	dfc0b115 	stw	ra,708(sp)
 1005080:	df00b015 	stw	fp,704(sp)
 1005084:	ddc0af15 	stw	r23,700(sp)
 1005088:	dd40ad15 	stw	r21,692(sp)
 100508c:	dcc0ab15 	stw	r19,684(sp)
 1005090:	dc80aa15 	stw	r18,680(sp)
 1005094:	202d883a 	mov	r22,r4
 1005098:	2821883a 	mov	r16,r5
 100509c:	d9c0a415 	stw	r7,656(sp)
 10050a0:	3029883a 	mov	r20,r6
 10050a4:	d800a215 	stw	zero,648(sp)
 10050a8:	0023883a 	mov	r17,zero
 10050ac:	d800a115 	stw	zero,644(sp)
 10050b0:	d800a015 	stw	zero,640(sp)
 10050b4:	a1000007 	ldb	r4,0(r20)
 10050b8:	d9000115 	stw	r4,4(sp)
 10050bc:	20001f26 	beq	r4,zero,100513c <__svfscanf_r+0xd4>
 10050c0:	04c040b4 	movhi	r19,258
 10050c4:	9cfa3d04 	addi	r19,r19,-5900
 10050c8:	9c800017 	ldw	r18,0(r19)
 10050cc:	a5000044 	addi	r20,r20,1
 10050d0:	9107883a 	add	r3,r18,r4
 10050d4:	18800003 	ldbu	r2,0(r3)
 10050d8:	1080020c 	andi	r2,r2,8
 10050dc:	10002426 	beq	r2,zero,1005170 <__svfscanf_r+0x108>
 10050e0:	80c00117 	ldw	r3,4(r16)
 10050e4:	00c00e0e 	bge	zero,r3,1005120 <__svfscanf_r+0xb8>
 10050e8:	81400017 	ldw	r5,0(r16)
 10050ec:	98800017 	ldw	r2,0(r19)
 10050f0:	28c00003 	ldbu	r3,0(r5)
 10050f4:	1887883a 	add	r3,r3,r2
 10050f8:	19000003 	ldbu	r4,0(r3)
 10050fc:	2100020c 	andi	r4,r4,8
 1005100:	203fec26 	beq	r4,zero,10050b4 <__svfscanf_r+0x4c>
 1005104:	80c00117 	ldw	r3,4(r16)
 1005108:	29800044 	addi	r6,r5,1
 100510c:	8c400044 	addi	r17,r17,1
 1005110:	18ffffc4 	addi	r3,r3,-1
 1005114:	81800015 	stw	r6,0(r16)
 1005118:	80c00115 	stw	r3,4(r16)
 100511c:	00fff216 	blt	zero,r3,10050e8 <__svfscanf_r+0x80>
 1005120:	b009883a 	mov	r4,r22
 1005124:	800b883a 	mov	r5,r16
 1005128:	100b1dc0 	call	100b1dc <__srefill_r>
 100512c:	103fee26 	beq	r2,zero,10050e8 <__svfscanf_r+0x80>
 1005130:	a1000007 	ldb	r4,0(r20)
 1005134:	d9000115 	stw	r4,4(sp)
 1005138:	203fe11e 	bne	r4,zero,10050c0 <__svfscanf_r+0x58>
 100513c:	d880a217 	ldw	r2,648(sp)
 1005140:	dfc0b117 	ldw	ra,708(sp)
 1005144:	df00b017 	ldw	fp,704(sp)
 1005148:	ddc0af17 	ldw	r23,700(sp)
 100514c:	dd80ae17 	ldw	r22,696(sp)
 1005150:	dd40ad17 	ldw	r21,692(sp)
 1005154:	dd00ac17 	ldw	r20,688(sp)
 1005158:	dcc0ab17 	ldw	r19,684(sp)
 100515c:	dc80aa17 	ldw	r18,680(sp)
 1005160:	dc40a917 	ldw	r17,676(sp)
 1005164:	dc00a817 	ldw	r16,672(sp)
 1005168:	dec0b204 	addi	sp,sp,712
 100516c:	f800283a 	ret
 1005170:	00800944 	movi	r2,37
 1005174:	20801626 	beq	r4,r2,10051d0 <__svfscanf_r+0x168>
 1005178:	80800117 	ldw	r2,4(r16)
 100517c:	00800b0e 	bge	zero,r2,10051ac <__svfscanf_r+0x144>
 1005180:	81000017 	ldw	r4,0(r16)
 1005184:	a0ffffc7 	ldb	r3,-1(r20)
 1005188:	20800003 	ldbu	r2,0(r4)
 100518c:	10ffeb1e 	bne	r2,r3,100513c <__svfscanf_r+0xd4>
 1005190:	80c00117 	ldw	r3,4(r16)
 1005194:	21800044 	addi	r6,r4,1
 1005198:	8c400044 	addi	r17,r17,1
 100519c:	18ffffc4 	addi	r3,r3,-1
 10051a0:	80c00115 	stw	r3,4(r16)
 10051a4:	81800015 	stw	r6,0(r16)
 10051a8:	003fc206 	br	10050b4 <__svfscanf_r+0x4c>
 10051ac:	b009883a 	mov	r4,r22
 10051b0:	800b883a 	mov	r5,r16
 10051b4:	100b1dc0 	call	100b1dc <__srefill_r>
 10051b8:	103ff126 	beq	r2,zero,1005180 <__svfscanf_r+0x118>
 10051bc:	d900a217 	ldw	r4,648(sp)
 10051c0:	2004981e 	bne	r4,zero,1006424 <__svfscanf_r+0x13bc>
 10051c4:	00bfffc4 	movi	r2,-1
 10051c8:	d880a215 	stw	r2,648(sp)
 10051cc:	003fdb06 	br	100513c <__svfscanf_r+0xd4>
 10051d0:	d800a315 	stw	zero,652(sp)
 10051d4:	002b883a 	mov	r21,zero
 10051d8:	a0c00003 	ldbu	r3,0(r20)
 10051dc:	00801e04 	movi	r2,120
 10051e0:	a5000044 	addi	r20,r20,1
 10051e4:	1dc03fcc 	andi	r23,r3,255
 10051e8:	bdc0201c 	xori	r23,r23,128
 10051ec:	bdffe004 	addi	r23,r23,-128
 10051f0:	10c08036 	bltu	r2,r3,10053f4 <__svfscanf_r+0x38c>
 10051f4:	18c5883a 	add	r2,r3,r3
 10051f8:	1085883a 	add	r2,r2,r2
 10051fc:	00c04034 	movhi	r3,256
 1005200:	18d48404 	addi	r3,r3,21008
 1005204:	10c5883a 	add	r2,r2,r3
 1005208:	11000017 	ldw	r4,0(r2)
 100520c:	2000683a 	jmp	r4
 1005210:	010051c4 	movi	r4,327
 1005214:	010053f4 	movhi	r4,335
 1005218:	010053f4 	movhi	r4,335
 100521c:	010053f4 	movhi	r4,335
 1005220:	010053f4 	movhi	r4,335
 1005224:	010053f4 	movhi	r4,335
 1005228:	010053f4 	movhi	r4,335
 100522c:	010053f4 	movhi	r4,335
 1005230:	010053f4 	movhi	r4,335
 1005234:	010053f4 	movhi	r4,335
 1005238:	010053f4 	movhi	r4,335
 100523c:	010053f4 	movhi	r4,335
 1005240:	010053f4 	movhi	r4,335
 1005244:	010053f4 	movhi	r4,335
 1005248:	010053f4 	movhi	r4,335
 100524c:	010053f4 	movhi	r4,335
 1005250:	010053f4 	movhi	r4,335
 1005254:	010053f4 	movhi	r4,335
 1005258:	010053f4 	movhi	r4,335
 100525c:	010053f4 	movhi	r4,335
 1005260:	010053f4 	movhi	r4,335
 1005264:	010053f4 	movhi	r4,335
 1005268:	010053f4 	movhi	r4,335
 100526c:	010053f4 	movhi	r4,335
 1005270:	010053f4 	movhi	r4,335
 1005274:	010053f4 	movhi	r4,335
 1005278:	010053f4 	movhi	r4,335
 100527c:	010053f4 	movhi	r4,335
 1005280:	010053f4 	movhi	r4,335
 1005284:	010053f4 	movhi	r4,335
 1005288:	010053f4 	movhi	r4,335
 100528c:	010053f4 	movhi	r4,335
 1005290:	010053f4 	movhi	r4,335
 1005294:	010053f4 	movhi	r4,335
 1005298:	010053f4 	movhi	r4,335
 100529c:	010053f4 	movhi	r4,335
 10052a0:	010053f4 	movhi	r4,335
 10052a4:	01005178 	rdprs	r4,zero,325
 10052a8:	010053f4 	movhi	r4,335
 10052ac:	010053f4 	movhi	r4,335
 10052b0:	010053f4 	movhi	r4,335
 10052b4:	010053f4 	movhi	r4,335
 10052b8:	01006294 	movui	r4,394
 10052bc:	010053f4 	movhi	r4,335
 10052c0:	010053f4 	movhi	r4,335
 10052c4:	010053f4 	movhi	r4,335
 10052c8:	010053f4 	movhi	r4,335
 10052cc:	010053f4 	movhi	r4,335
 10052d0:	01006278 	rdprs	r4,zero,393
 10052d4:	01006278 	rdprs	r4,zero,393
 10052d8:	01006278 	rdprs	r4,zero,393
 10052dc:	01006278 	rdprs	r4,zero,393
 10052e0:	01006278 	rdprs	r4,zero,393
 10052e4:	01006278 	rdprs	r4,zero,393
 10052e8:	01006278 	rdprs	r4,zero,393
 10052ec:	01006278 	rdprs	r4,zero,393
 10052f0:	01006278 	rdprs	r4,zero,393
 10052f4:	01006278 	rdprs	r4,zero,393
 10052f8:	010053f4 	movhi	r4,335
 10052fc:	010053f4 	movhi	r4,335
 1005300:	010053f4 	movhi	r4,335
 1005304:	010053f4 	movhi	r4,335
 1005308:	010053f4 	movhi	r4,335
 100530c:	010053f4 	movhi	r4,335
 1005310:	010053f4 	movhi	r4,335
 1005314:	010053f4 	movhi	r4,335
 1005318:	010053f4 	movhi	r4,335
 100531c:	010053f4 	movhi	r4,335
 1005320:	01005408 	cmpgei	r4,zero,336
 1005324:	0100637c 	xorhi	r4,zero,397
 1005328:	010053f4 	movhi	r4,335
 100532c:	0100637c 	xorhi	r4,zero,397
 1005330:	010053f4 	movhi	r4,335
 1005334:	010053f4 	movhi	r4,335
 1005338:	010053f4 	movhi	r4,335
 100533c:	010053f4 	movhi	r4,335
 1005340:	01006270 	cmpltui	r4,zero,393
 1005344:	010053f4 	movhi	r4,335
 1005348:	010053f4 	movhi	r4,335
 100534c:	01006250 	cmplti	r4,zero,393
 1005350:	010053f4 	movhi	r4,335
 1005354:	010053f4 	movhi	r4,335
 1005358:	010053f4 	movhi	r4,335
 100535c:	010053f4 	movhi	r4,335
 1005360:	010053f4 	movhi	r4,335
 1005364:	010053f4 	movhi	r4,335
 1005368:	010053f4 	movhi	r4,335
 100536c:	010053f4 	movhi	r4,335
 1005370:	0100629c 	xori	r4,zero,394
 1005374:	010053f4 	movhi	r4,335
 1005378:	010053f4 	movhi	r4,335
 100537c:	01006234 	movhi	r4,392
 1005380:	010053f4 	movhi	r4,335
 1005384:	010053f4 	movhi	r4,335
 1005388:	010053f4 	movhi	r4,335
 100538c:	010053f4 	movhi	r4,335
 1005390:	010053f4 	movhi	r4,335
 1005394:	010053f4 	movhi	r4,335
 1005398:	010053f4 	movhi	r4,335
 100539c:	01006384 	movi	r4,398
 10053a0:	0100540c 	andi	r4,zero,336
 10053a4:	0100637c 	xorhi	r4,zero,397
 10053a8:	0100637c 	xorhi	r4,zero,397
 10053ac:	0100637c 	xorhi	r4,zero,397
 10053b0:	01006390 	cmplti	r4,zero,398
 10053b4:	010062d8 	cmpnei	r4,zero,395
 10053b8:	010053f4 	movhi	r4,335
 10053bc:	010053f4 	movhi	r4,335
 10053c0:	010059a0 	cmpeqi	r4,zero,358
 10053c4:	010053f4 	movhi	r4,335
 10053c8:	0100648c 	andi	r4,zero,402
 10053cc:	01006448 	cmpgei	r4,zero,401
 10053d0:	0100646c 	andhi	r4,zero,401
 10053d4:	010053f4 	movhi	r4,335
 10053d8:	010053f4 	movhi	r4,335
 10053dc:	01006464 	muli	r4,zero,401
 10053e0:	010053f4 	movhi	r4,335
 10053e4:	010062bc 	xorhi	r4,zero,394
 10053e8:	010053f4 	movhi	r4,335
 10053ec:	010053f4 	movhi	r4,335
 10053f0:	0100629c 	xori	r4,zero,394
 10053f4:	bc87883a 	add	r3,r23,r18
 10053f8:	18800003 	ldbu	r2,0(r3)
 10053fc:	1080004c 	andi	r2,r2,1
 1005400:	1005003a 	cmpeq	r2,r2,zero
 1005404:	1000011e 	bne	r2,zero,100540c <__svfscanf_r+0x3a4>
 1005408:	ad400054 	ori	r21,r21,1
 100540c:	01004074 	movhi	r4,257
 1005410:	2133c904 	addi	r4,r4,-12508
 1005414:	00800284 	movi	r2,10
 1005418:	d900a015 	stw	r4,640(sp)
 100541c:	048000c4 	movi	r18,3
 1005420:	d880a115 	stw	r2,644(sp)
 1005424:	80c00117 	ldw	r3,4(r16)
 1005428:	00c13f0e 	bge	zero,r3,1005928 <__svfscanf_r+0x8c0>
 100542c:	a880100c 	andi	r2,r21,64
 1005430:	10001326 	beq	r2,zero,1005480 <__svfscanf_r+0x418>
 1005434:	00800104 	movi	r2,4
 1005438:	14bf1e36 	bltu	r2,r18,10050b4 <__svfscanf_r+0x4c>
 100543c:	9485883a 	add	r2,r18,r18
 1005440:	1085883a 	add	r2,r2,r2
 1005444:	00c04034 	movhi	r3,256
 1005448:	18d51604 	addi	r3,r3,21592
 100544c:	10c5883a 	add	r2,r2,r3
 1005450:	11000017 	ldw	r4,0(r2)
 1005454:	2000683a 	jmp	r4
 1005458:	010054bc 	xorhi	r4,zero,338
 100545c:	010055bc 	xorhi	r4,zero,342
 1005460:	010057cc 	andi	r4,zero,351
 1005464:	01005630 	cmpltui	r4,zero,344
 1005468:	01005904 	movi	r4,356
 100546c:	b009883a 	mov	r4,r22
 1005470:	800b883a 	mov	r5,r16
 1005474:	100b1dc0 	call	100b1dc <__srefill_r>
 1005478:	103f501e 	bne	r2,zero,10051bc <__svfscanf_r+0x154>
 100547c:	8c400044 	addi	r17,r17,1
 1005480:	81400017 	ldw	r5,0(r16)
 1005484:	98800017 	ldw	r2,0(r19)
 1005488:	28c00003 	ldbu	r3,0(r5)
 100548c:	1887883a 	add	r3,r3,r2
 1005490:	19000003 	ldbu	r4,0(r3)
 1005494:	2100020c 	andi	r4,r4,8
 1005498:	203fe626 	beq	r4,zero,1005434 <__svfscanf_r+0x3cc>
 100549c:	80c00117 	ldw	r3,4(r16)
 10054a0:	18ffffc4 	addi	r3,r3,-1
 10054a4:	80c00115 	stw	r3,4(r16)
 10054a8:	00fff00e 	bge	zero,r3,100546c <__svfscanf_r+0x404>
 10054ac:	29800044 	addi	r6,r5,1
 10054b0:	8c400044 	addi	r17,r17,1
 10054b4:	81800015 	stw	r6,0(r16)
 10054b8:	003ff106 	br	1005480 <__svfscanf_r+0x418>
 10054bc:	d8c0a317 	ldw	r3,652(sp)
 10054c0:	1800021e 	bne	r3,zero,10054cc <__svfscanf_r+0x464>
 10054c4:	01000044 	movi	r4,1
 10054c8:	d900a315 	stw	r4,652(sp)
 10054cc:	a880004c 	andi	r2,r21,1
 10054d0:	1005003a 	cmpeq	r2,r2,zero
 10054d4:	1002811e 	bne	r2,zero,1005edc <__svfscanf_r+0xe74>
 10054d8:	ad40040c 	andi	r21,r21,16
 10054dc:	a805003a 	cmpeq	r2,r21,zero
 10054e0:	d880a615 	stw	r2,664(sp)
 10054e4:	1003d31e 	bne	r2,zero,1006434 <__svfscanf_r+0x13cc>
 10054e8:	0027883a 	mov	r19,zero
 10054ec:	d900a317 	ldw	r4,652(sp)
 10054f0:	2003c726 	beq	r4,zero,1006410 <__svfscanf_r+0x13a8>
 10054f4:	070040b4 	movhi	fp,258
 10054f8:	e73a4004 	addi	fp,fp,-5888
 10054fc:	e0800017 	ldw	r2,0(fp)
 1005500:	103f2e26 	beq	r2,zero,10051bc <__svfscanf_r+0x154>
 1005504:	d8804404 	addi	r2,sp,272
 1005508:	0025883a 	mov	r18,zero
 100550c:	d880a515 	stw	r2,660(sp)
 1005510:	05ffffc4 	movi	r23,-1
 1005514:	80800017 	ldw	r2,0(r16)
 1005518:	80c00117 	ldw	r3,4(r16)
 100551c:	d900a517 	ldw	r4,660(sp)
 1005520:	12000003 	ldbu	r8,0(r2)
 1005524:	18ffffc4 	addi	r3,r3,-1
 1005528:	11800044 	addi	r6,r2,1
 100552c:	248f883a 	add	r7,r4,r18
 1005530:	80c00115 	stw	r3,4(r16)
 1005534:	81800015 	stw	r6,0(r16)
 1005538:	3a000005 	stb	r8,0(r7)
 100553c:	d9000204 	addi	r4,sp,8
 1005540:	000b883a 	mov	r5,zero
 1005544:	01800204 	movi	r6,8
 1005548:	10098d80 	call	10098d8 <memset>
 100554c:	d980a517 	ldw	r6,660(sp)
 1005550:	94800044 	addi	r18,r18,1
 1005554:	d8800204 	addi	r2,sp,8
 1005558:	b009883a 	mov	r4,r22
 100555c:	980b883a 	mov	r5,r19
 1005560:	900f883a 	mov	r7,r18
 1005564:	d8800015 	stw	r2,0(sp)
 1005568:	10095740 	call	1009574 <_mbrtowc_r>
 100556c:	1007883a 	mov	r3,r2
 1005570:	15ff1226 	beq	r2,r23,10051bc <__svfscanf_r+0x154>
 1005574:	10039e1e 	bne	r2,zero,10063f0 <__svfscanf_r+0x1388>
 1005578:	a800011e 	bne	r21,zero,1005580 <__svfscanf_r+0x518>
 100557c:	98000015 	stw	zero,0(r19)
 1005580:	d8c0a317 	ldw	r3,652(sp)
 1005584:	d900a617 	ldw	r4,664(sp)
 1005588:	8ca3883a 	add	r17,r17,r18
 100558c:	18ffffc4 	addi	r3,r3,-1
 1005590:	d8c0a315 	stw	r3,652(sp)
 1005594:	20000126 	beq	r4,zero,100559c <__svfscanf_r+0x534>
 1005598:	9cc00104 	addi	r19,r19,4
 100559c:	0025883a 	mov	r18,zero
 10055a0:	80c00117 	ldw	r3,4(r16)
 10055a4:	00c3950e 	bge	zero,r3,10063fc <__svfscanf_r+0x1394>
 10055a8:	d880a317 	ldw	r2,652(sp)
 10055ac:	10039826 	beq	r2,zero,1006410 <__svfscanf_r+0x13a8>
 10055b0:	e0800017 	ldw	r2,0(fp)
 10055b4:	90bfd71e 	bne	r18,r2,1005514 <__svfscanf_r+0x4ac>
 10055b8:	003f0006 	br	10051bc <__svfscanf_r+0x154>
 10055bc:	d880a317 	ldw	r2,652(sp)
 10055c0:	1000021e 	bne	r2,zero,10055cc <__svfscanf_r+0x564>
 10055c4:	00ffffc4 	movi	r3,-1
 10055c8:	d8c0a315 	stw	r3,652(sp)
 10055cc:	a880040c 	andi	r2,r21,16
 10055d0:	1003b826 	beq	r2,zero,10064b4 <__svfscanf_r+0x144c>
 10055d4:	0027883a 	mov	r19,zero
 10055d8:	dd400404 	addi	r21,sp,16
 10055dc:	81000017 	ldw	r4,0(r16)
 10055e0:	20800003 	ldbu	r2,0(r4)
 10055e4:	a885883a 	add	r2,r21,r2
 10055e8:	10c00007 	ldb	r3,0(r2)
 10055ec:	18037d26 	beq	r3,zero,10063e4 <__svfscanf_r+0x137c>
 10055f0:	80c00117 	ldw	r3,4(r16)
 10055f4:	21800044 	addi	r6,r4,1
 10055f8:	d900a317 	ldw	r4,652(sp)
 10055fc:	18ffffc4 	addi	r3,r3,-1
 1005600:	9cc00044 	addi	r19,r19,1
 1005604:	81800015 	stw	r6,0(r16)
 1005608:	80c00115 	stw	r3,4(r16)
 100560c:	24c37526 	beq	r4,r19,10063e4 <__svfscanf_r+0x137c>
 1005610:	00fff216 	blt	zero,r3,10055dc <__svfscanf_r+0x574>
 1005614:	b009883a 	mov	r4,r22
 1005618:	800b883a 	mov	r5,r16
 100561c:	100b1dc0 	call	100b1dc <__srefill_r>
 1005620:	103fee26 	beq	r2,zero,10055dc <__svfscanf_r+0x574>
 1005624:	983ee526 	beq	r19,zero,10051bc <__svfscanf_r+0x154>
 1005628:	8ce3883a 	add	r17,r17,r19
 100562c:	003ea106 	br	10050b4 <__svfscanf_r+0x4c>
 1005630:	d900a317 	ldw	r4,652(sp)
 1005634:	00805704 	movi	r2,348
 1005638:	20ffffc4 	addi	r3,r4,-1
 100563c:	10c0bf2e 	bgeu	r2,r3,100593c <__svfscanf_r+0x8d4>
 1005640:	00805744 	movi	r2,349
 1005644:	24ffa8c4 	addi	r19,r4,-349
 1005648:	ac836014 	ori	r18,r21,3456
 100564c:	d880a315 	stw	r2,652(sp)
 1005650:	d8c04404 	addi	r3,sp,272
 1005654:	d8c0a515 	stw	r3,660(sp)
 1005658:	002f883a 	mov	r23,zero
 100565c:	182b883a 	mov	r21,r3
 1005660:	81800017 	ldw	r6,0(r16)
 1005664:	00c01344 	movi	r3,77
 1005668:	31400003 	ldbu	r5,0(r6)
 100566c:	28bff544 	addi	r2,r5,-43
 1005670:	10803fcc 	andi	r2,r2,255
 1005674:	1880b836 	bltu	r3,r2,1005958 <__svfscanf_r+0x8f0>
 1005678:	1085883a 	add	r2,r2,r2
 100567c:	1085883a 	add	r2,r2,r2
 1005680:	00c04034 	movhi	r3,256
 1005684:	18d5a504 	addi	r3,r3,22164
 1005688:	10c5883a 	add	r2,r2,r3
 100568c:	11000017 	ldw	r4,0(r2)
 1005690:	2000683a 	jmp	r4
 1005694:	01005aa8 	cmpgeui	r4,zero,362
 1005698:	01005958 	cmpnei	r4,zero,357
 100569c:	01005aa8 	cmpgeui	r4,zero,362
 10056a0:	01005958 	cmpnei	r4,zero,357
 10056a4:	01005958 	cmpnei	r4,zero,357
 10056a8:	01005aec 	andhi	r4,zero,363
 10056ac:	010062f0 	cmpltui	r4,zero,395
 10056b0:	010062f0 	cmpltui	r4,zero,395
 10056b4:	010062f0 	cmpltui	r4,zero,395
 10056b8:	010062f0 	cmpltui	r4,zero,395
 10056bc:	010062f0 	cmpltui	r4,zero,395
 10056c0:	010062f0 	cmpltui	r4,zero,395
 10056c4:	010062f0 	cmpltui	r4,zero,395
 10056c8:	01006318 	cmpnei	r4,zero,396
 10056cc:	01006318 	cmpnei	r4,zero,396
 10056d0:	01005958 	cmpnei	r4,zero,357
 10056d4:	01005958 	cmpnei	r4,zero,357
 10056d8:	01005958 	cmpnei	r4,zero,357
 10056dc:	01005958 	cmpnei	r4,zero,357
 10056e0:	01005958 	cmpnei	r4,zero,357
 10056e4:	01005958 	cmpnei	r4,zero,357
 10056e8:	01005958 	cmpnei	r4,zero,357
 10056ec:	01006348 	cmpgei	r4,zero,397
 10056f0:	01006348 	cmpgei	r4,zero,397
 10056f4:	01006348 	cmpgei	r4,zero,397
 10056f8:	01006348 	cmpgei	r4,zero,397
 10056fc:	01006348 	cmpgei	r4,zero,397
 1005700:	01006348 	cmpgei	r4,zero,397
 1005704:	01005958 	cmpnei	r4,zero,357
 1005708:	01005958 	cmpnei	r4,zero,357
 100570c:	01005958 	cmpnei	r4,zero,357
 1005710:	01005958 	cmpnei	r4,zero,357
 1005714:	01005958 	cmpnei	r4,zero,357
 1005718:	01005958 	cmpnei	r4,zero,357
 100571c:	01005958 	cmpnei	r4,zero,357
 1005720:	01005958 	cmpnei	r4,zero,357
 1005724:	01005958 	cmpnei	r4,zero,357
 1005728:	01005958 	cmpnei	r4,zero,357
 100572c:	01005958 	cmpnei	r4,zero,357
 1005730:	01005958 	cmpnei	r4,zero,357
 1005734:	01005958 	cmpnei	r4,zero,357
 1005738:	01005958 	cmpnei	r4,zero,357
 100573c:	01005958 	cmpnei	r4,zero,357
 1005740:	01005958 	cmpnei	r4,zero,357
 1005744:	01005958 	cmpnei	r4,zero,357
 1005748:	01006358 	cmpnei	r4,zero,397
 100574c:	01005958 	cmpnei	r4,zero,357
 1005750:	01005958 	cmpnei	r4,zero,357
 1005754:	01005958 	cmpnei	r4,zero,357
 1005758:	01005958 	cmpnei	r4,zero,357
 100575c:	01005958 	cmpnei	r4,zero,357
 1005760:	01005958 	cmpnei	r4,zero,357
 1005764:	01005958 	cmpnei	r4,zero,357
 1005768:	01005958 	cmpnei	r4,zero,357
 100576c:	01006348 	cmpgei	r4,zero,397
 1005770:	01006348 	cmpgei	r4,zero,397
 1005774:	01006348 	cmpgei	r4,zero,397
 1005778:	01006348 	cmpgei	r4,zero,397
 100577c:	01006348 	cmpgei	r4,zero,397
 1005780:	01006348 	cmpgei	r4,zero,397
 1005784:	01005958 	cmpnei	r4,zero,357
 1005788:	01005958 	cmpnei	r4,zero,357
 100578c:	01005958 	cmpnei	r4,zero,357
 1005790:	01005958 	cmpnei	r4,zero,357
 1005794:	01005958 	cmpnei	r4,zero,357
 1005798:	01005958 	cmpnei	r4,zero,357
 100579c:	01005958 	cmpnei	r4,zero,357
 10057a0:	01005958 	cmpnei	r4,zero,357
 10057a4:	01005958 	cmpnei	r4,zero,357
 10057a8:	01005958 	cmpnei	r4,zero,357
 10057ac:	01005958 	cmpnei	r4,zero,357
 10057b0:	01005958 	cmpnei	r4,zero,357
 10057b4:	01005958 	cmpnei	r4,zero,357
 10057b8:	01005958 	cmpnei	r4,zero,357
 10057bc:	01005958 	cmpnei	r4,zero,357
 10057c0:	01005958 	cmpnei	r4,zero,357
 10057c4:	01005958 	cmpnei	r4,zero,357
 10057c8:	01006358 	cmpnei	r4,zero,397
 10057cc:	d900a317 	ldw	r4,652(sp)
 10057d0:	2000021e 	bne	r4,zero,10057dc <__svfscanf_r+0x774>
 10057d4:	00bfffc4 	movi	r2,-1
 10057d8:	d880a315 	stw	r2,652(sp)
 10057dc:	a880004c 	andi	r2,r21,1
 10057e0:	1005003a 	cmpeq	r2,r2,zero
 10057e4:	1003651e 	bne	r2,zero,100657c <__svfscanf_r+0x1514>
 10057e8:	adc0040c 	andi	r23,r21,16
 10057ec:	b807003a 	cmpeq	r3,r23,zero
 10057f0:	d8c0a715 	stw	r3,668(sp)
 10057f4:	1802f61e 	bne	r3,zero,10063d0 <__svfscanf_r+0x1368>
 10057f8:	dd400104 	addi	r21,sp,4
 10057fc:	0025883a 	mov	r18,zero
 1005800:	073fffc4 	movi	fp,-1
 1005804:	81400017 	ldw	r5,0(r16)
 1005808:	98800017 	ldw	r2,0(r19)
 100580c:	29c00003 	ldbu	r7,0(r5)
 1005810:	38c03fcc 	andi	r3,r7,255
 1005814:	1887883a 	add	r3,r3,r2
 1005818:	19000003 	ldbu	r4,0(r3)
 100581c:	2100020c 	andi	r4,r4,8
 1005820:	2000321e 	bne	r4,zero,10058ec <__svfscanf_r+0x884>
 1005824:	d8c0a317 	ldw	r3,652(sp)
 1005828:	18003026 	beq	r3,zero,10058ec <__svfscanf_r+0x884>
 100582c:	008040b4 	movhi	r2,258
 1005830:	10ba4004 	addi	r2,r2,-5888
 1005834:	10c00017 	ldw	r3,0(r2)
 1005838:	90fe6026 	beq	r18,r3,10051bc <__svfscanf_r+0x154>
 100583c:	d8c04404 	addi	r3,sp,272
 1005840:	80800117 	ldw	r2,4(r16)
 1005844:	d8c0a515 	stw	r3,660(sp)
 1005848:	d900a517 	ldw	r4,660(sp)
 100584c:	10ffffc4 	addi	r3,r2,-1
 1005850:	29800044 	addi	r6,r5,1
 1005854:	80c00115 	stw	r3,4(r16)
 1005858:	2485883a 	add	r2,r4,r18
 100585c:	81800015 	stw	r6,0(r16)
 1005860:	d9000204 	addi	r4,sp,8
 1005864:	000b883a 	mov	r5,zero
 1005868:	01800204 	movi	r6,8
 100586c:	11c00005 	stb	r7,0(r2)
 1005870:	10098d80 	call	10098d8 <memset>
 1005874:	d980a517 	ldw	r6,660(sp)
 1005878:	94800044 	addi	r18,r18,1
 100587c:	d8800204 	addi	r2,sp,8
 1005880:	b009883a 	mov	r4,r22
 1005884:	a80b883a 	mov	r5,r21
 1005888:	900f883a 	mov	r7,r18
 100588c:	d8800015 	stw	r2,0(sp)
 1005890:	10095740 	call	1009574 <_mbrtowc_r>
 1005894:	1007883a 	mov	r3,r2
 1005898:	173e4826 	beq	r2,fp,10051bc <__svfscanf_r+0x154>
 100589c:	1002c91e 	bne	r2,zero,10063c4 <__svfscanf_r+0x135c>
 10058a0:	a8000015 	stw	zero,0(r21)
 10058a4:	a9000017 	ldw	r4,0(r21)
 10058a8:	10092f00 	call	10092f0 <iswspace>
 10058ac:	1002bc1e 	bne	r2,zero,10063a0 <__svfscanf_r+0x1338>
 10058b0:	d900a317 	ldw	r4,652(sp)
 10058b4:	d880a717 	ldw	r2,668(sp)
 10058b8:	8ca3883a 	add	r17,r17,r18
 10058bc:	213fffc4 	addi	r4,r4,-1
 10058c0:	d900a315 	stw	r4,652(sp)
 10058c4:	10000126 	beq	r2,zero,10058cc <__svfscanf_r+0x864>
 10058c8:	ad400104 	addi	r21,r21,4
 10058cc:	0025883a 	mov	r18,zero
 10058d0:	80c00117 	ldw	r3,4(r16)
 10058d4:	00ffcb16 	blt	zero,r3,1005804 <__svfscanf_r+0x79c>
 10058d8:	b009883a 	mov	r4,r22
 10058dc:	800b883a 	mov	r5,r16
 10058e0:	100b1dc0 	call	100b1dc <__srefill_r>
 10058e4:	103fc726 	beq	r2,zero,1005804 <__svfscanf_r+0x79c>
 10058e8:	903e341e 	bne	r18,zero,10051bc <__svfscanf_r+0x154>
 10058ec:	b83df11e 	bne	r23,zero,10050b4 <__svfscanf_r+0x4c>
 10058f0:	d900a217 	ldw	r4,648(sp)
 10058f4:	a8000015 	stw	zero,0(r21)
 10058f8:	21000044 	addi	r4,r4,1
 10058fc:	d900a215 	stw	r4,648(sp)
 1005900:	003dec06 	br	10050b4 <__svfscanf_r+0x4c>
 1005904:	d900a317 	ldw	r4,652(sp)
 1005908:	00805704 	movi	r2,348
 100590c:	20ffffc4 	addi	r3,r4,-1
 1005910:	10c0902e 	bgeu	r2,r3,1005b54 <__svfscanf_r+0xaec>
 1005914:	00805744 	movi	r2,349
 1005918:	24ffa8c4 	addi	r19,r4,-349
 100591c:	ad41e014 	ori	r21,r21,1920
 1005920:	d880a315 	stw	r2,652(sp)
 1005924:	00010806 	br	1005d48 <__svfscanf_r+0xce0>
 1005928:	b009883a 	mov	r4,r22
 100592c:	800b883a 	mov	r5,r16
 1005930:	100b1dc0 	call	100b1dc <__srefill_r>
 1005934:	103ebd26 	beq	r2,zero,100542c <__svfscanf_r+0x3c4>
 1005938:	003e2006 	br	10051bc <__svfscanf_r+0x154>
 100593c:	d900a317 	ldw	r4,652(sp)
 1005940:	ac836014 	ori	r18,r21,3456
 1005944:	2002941e 	bne	r4,zero,1006398 <__svfscanf_r+0x1330>
 1005948:	d8804404 	addi	r2,sp,272
 100594c:	d880a515 	stw	r2,660(sp)
 1005950:	002f883a 	mov	r23,zero
 1005954:	102b883a 	mov	r21,r2
 1005958:	9080400c 	andi	r2,r18,256
 100595c:	10000926 	beq	r2,zero,1005984 <__svfscanf_r+0x91c>
 1005960:	d8c0a517 	ldw	r3,660(sp)
 1005964:	1d40052e 	bgeu	r3,r21,100597c <__svfscanf_r+0x914>
 1005968:	ad7fffc4 	addi	r21,r21,-1
 100596c:	a9400007 	ldb	r5,0(r21)
 1005970:	b009883a 	mov	r4,r22
 1005974:	800d883a 	mov	r6,r16
 1005978:	100dae00 	call	100dae0 <_ungetc_r>
 100597c:	d900a517 	ldw	r4,660(sp)
 1005980:	257dee26 	beq	r4,r21,100513c <__svfscanf_r+0xd4>
 1005984:	9080040c 	andi	r2,r18,16
 1005988:	10000a26 	beq	r2,zero,10059b4 <__svfscanf_r+0x94c>
 100598c:	d8c0a517 	ldw	r3,660(sp)
 1005990:	a8c5c83a 	sub	r2,r21,r3
 1005994:	b885883a 	add	r2,r23,r2
 1005998:	88a3883a 	add	r17,r17,r2
 100599c:	003dc506 	br	10050b4 <__svfscanf_r+0x4c>
 10059a0:	a0c00007 	ldb	r3,0(r20)
 10059a4:	00801b04 	movi	r2,108
 10059a8:	18801726 	beq	r3,r2,1005a08 <__svfscanf_r+0x9a0>
 10059ac:	ad400054 	ori	r21,r21,1
 10059b0:	003e0906 	br	10051d8 <__svfscanf_r+0x170>
 10059b4:	a8000005 	stb	zero,0(r21)
 10059b8:	d8c0a017 	ldw	r3,640(sp)
 10059bc:	d940a517 	ldw	r5,660(sp)
 10059c0:	d9c0a117 	ldw	r7,644(sp)
 10059c4:	b009883a 	mov	r4,r22
 10059c8:	000d883a 	mov	r6,zero
 10059cc:	183ee83a 	callr	r3
 10059d0:	1007883a 	mov	r3,r2
 10059d4:	9080080c 	andi	r2,r18,32
 10059d8:	1000251e 	bne	r2,zero,1005a70 <__svfscanf_r+0xa08>
 10059dc:	9080010c 	andi	r2,r18,4
 10059e0:	10000c26 	beq	r2,zero,1005a14 <__svfscanf_r+0x9ac>
 10059e4:	d900a417 	ldw	r4,656(sp)
 10059e8:	20800017 	ldw	r2,0(r4)
 10059ec:	21000104 	addi	r4,r4,4
 10059f0:	d900a415 	stw	r4,656(sp)
 10059f4:	10c0000d 	sth	r3,0(r2)
 10059f8:	d880a217 	ldw	r2,648(sp)
 10059fc:	10800044 	addi	r2,r2,1
 1005a00:	d880a215 	stw	r2,648(sp)
 1005a04:	003fe106 	br	100598c <__svfscanf_r+0x924>
 1005a08:	a5000044 	addi	r20,r20,1
 1005a0c:	ad400094 	ori	r21,r21,2
 1005a10:	003df106 	br	10051d8 <__svfscanf_r+0x170>
 1005a14:	9080004c 	andi	r2,r18,1
 1005a18:	1005003a 	cmpeq	r2,r2,zero
 1005a1c:	10001426 	beq	r2,zero,1005a70 <__svfscanf_r+0xa08>
 1005a20:	9080008c 	andi	r2,r18,2
 1005a24:	10001226 	beq	r2,zero,1005a70 <__svfscanf_r+0xa08>
 1005a28:	d8c0a017 	ldw	r3,640(sp)
 1005a2c:	00804074 	movhi	r2,257
 1005a30:	10b52c04 	addi	r2,r2,-11088
 1005a34:	18801426 	beq	r3,r2,1005a88 <__svfscanf_r+0xa20>
 1005a38:	d9c0a117 	ldw	r7,644(sp)
 1005a3c:	d940a517 	ldw	r5,660(sp)
 1005a40:	000d883a 	mov	r6,zero
 1005a44:	b009883a 	mov	r4,r22
 1005a48:	100d1980 	call	100d198 <_strtoll_r>
 1005a4c:	100d883a 	mov	r6,r2
 1005a50:	180f883a 	mov	r7,r3
 1005a54:	d900a417 	ldw	r4,656(sp)
 1005a58:	20800017 	ldw	r2,0(r4)
 1005a5c:	21000104 	addi	r4,r4,4
 1005a60:	d900a415 	stw	r4,656(sp)
 1005a64:	11c00115 	stw	r7,4(r2)
 1005a68:	11800015 	stw	r6,0(r2)
 1005a6c:	003fe206 	br	10059f8 <__svfscanf_r+0x990>
 1005a70:	d900a417 	ldw	r4,656(sp)
 1005a74:	20800017 	ldw	r2,0(r4)
 1005a78:	21000104 	addi	r4,r4,4
 1005a7c:	d900a415 	stw	r4,656(sp)
 1005a80:	10c00015 	stw	r3,0(r2)
 1005a84:	003fdc06 	br	10059f8 <__svfscanf_r+0x990>
 1005a88:	d9c0a117 	ldw	r7,644(sp)
 1005a8c:	d940a517 	ldw	r5,660(sp)
 1005a90:	000d883a 	mov	r6,zero
 1005a94:	b009883a 	mov	r4,r22
 1005a98:	100d7140 	call	100d714 <_strtoull_r>
 1005a9c:	100d883a 	mov	r6,r2
 1005aa0:	180f883a 	mov	r7,r3
 1005aa4:	003feb06 	br	1005a54 <__svfscanf_r+0x9ec>
 1005aa8:	9080200c 	andi	r2,r18,128
 1005aac:	103faa26 	beq	r2,zero,1005958 <__svfscanf_r+0x8f0>
 1005ab0:	00bfdfc4 	movi	r2,-129
 1005ab4:	90a4703a 	and	r18,r18,r2
 1005ab8:	a9400005 	stb	r5,0(r21)
 1005abc:	ad400044 	addi	r21,r21,1
 1005ac0:	80c00117 	ldw	r3,4(r16)
 1005ac4:	18ffffc4 	addi	r3,r3,-1
 1005ac8:	80c00115 	stw	r3,4(r16)
 1005acc:	00c0130e 	bge	zero,r3,1005b1c <__svfscanf_r+0xab4>
 1005ad0:	31800044 	addi	r6,r6,1
 1005ad4:	81800015 	stw	r6,0(r16)
 1005ad8:	d880a317 	ldw	r2,652(sp)
 1005adc:	10bfffc4 	addi	r2,r2,-1
 1005ae0:	d880a315 	stw	r2,652(sp)
 1005ae4:	103ede1e 	bne	r2,zero,1005660 <__svfscanf_r+0x5f8>
 1005ae8:	003f9b06 	br	1005958 <__svfscanf_r+0x8f0>
 1005aec:	9082000c 	andi	r2,r18,2048
 1005af0:	103ff126 	beq	r2,zero,1005ab8 <__svfscanf_r+0xa50>
 1005af4:	d8c0a117 	ldw	r3,644(sp)
 1005af8:	1800031e 	bne	r3,zero,1005b08 <__svfscanf_r+0xaa0>
 1005afc:	01000204 	movi	r4,8
 1005b00:	94808014 	ori	r18,r18,512
 1005b04:	d900a115 	stw	r4,644(sp)
 1005b08:	9081000c 	andi	r2,r18,1024
 1005b0c:	10000826 	beq	r2,zero,1005b30 <__svfscanf_r+0xac8>
 1005b10:	00be9fc4 	movi	r2,-1409
 1005b14:	90a4703a 	and	r18,r18,r2
 1005b18:	003fe706 	br	1005ab8 <__svfscanf_r+0xa50>
 1005b1c:	b009883a 	mov	r4,r22
 1005b20:	800b883a 	mov	r5,r16
 1005b24:	100b1dc0 	call	100b1dc <__srefill_r>
 1005b28:	103feb26 	beq	r2,zero,1005ad8 <__svfscanf_r+0xa70>
 1005b2c:	003f8a06 	br	1005958 <__svfscanf_r+0x8f0>
 1005b30:	98000426 	beq	r19,zero,1005b44 <__svfscanf_r+0xadc>
 1005b34:	d880a317 	ldw	r2,652(sp)
 1005b38:	9cffffc4 	addi	r19,r19,-1
 1005b3c:	10800044 	addi	r2,r2,1
 1005b40:	d880a315 	stw	r2,652(sp)
 1005b44:	00bf1fc4 	movi	r2,-897
 1005b48:	90a4703a 	and	r18,r18,r2
 1005b4c:	bdc00044 	addi	r23,r23,1
 1005b50:	003fdb06 	br	1005ac0 <__svfscanf_r+0xa58>
 1005b54:	d900a317 	ldw	r4,652(sp)
 1005b58:	ad41e014 	ori	r21,r21,1920
 1005b5c:	2000791e 	bne	r4,zero,1005d44 <__svfscanf_r+0xcdc>
 1005b60:	d8c04404 	addi	r3,sp,272
 1005b64:	d8c0a515 	stw	r3,660(sp)
 1005b68:	182f883a 	mov	r23,r3
 1005b6c:	d8009c15 	stw	zero,624(sp)
 1005b70:	d8009d15 	stw	zero,628(sp)
 1005b74:	d8009f15 	stw	zero,636(sp)
 1005b78:	d8009e15 	stw	zero,632(sp)
 1005b7c:	0039883a 	mov	fp,zero
 1005b80:	e1003fcc 	andi	r4,fp,255
 1005b84:	2100201c 	xori	r4,r4,128
 1005b88:	213fe004 	addi	r4,r4,-128
 1005b8c:	20ffffc4 	addi	r3,r4,-1
 1005b90:	00800184 	movi	r2,6
 1005b94:	10c01736 	bltu	r2,r3,1005bf4 <__svfscanf_r+0xb8c>
 1005b98:	00c00084 	movi	r3,2
 1005b9c:	19026d0e 	bge	r3,r4,1006554 <__svfscanf_r+0x14ec>
 1005ba0:	008000c4 	movi	r2,3
 1005ba4:	1100130e 	bge	r2,r4,1005bf4 <__svfscanf_r+0xb8c>
 1005ba8:	e4ffffc4 	addi	r19,fp,-1
 1005bac:	b825883a 	mov	r18,r23
 1005bb0:	94bfffc4 	addi	r18,r18,-1
 1005bb4:	91400007 	ldb	r5,0(r18)
 1005bb8:	b009883a 	mov	r4,r22
 1005bbc:	800d883a 	mov	r6,r16
 1005bc0:	100dae00 	call	100dae0 <_ungetc_r>
 1005bc4:	9cffffc4 	addi	r19,r19,-1
 1005bc8:	98c03fcc 	andi	r3,r19,255
 1005bcc:	18c0201c 	xori	r3,r3,128
 1005bd0:	18ffe004 	addi	r3,r3,-128
 1005bd4:	00800084 	movi	r2,2
 1005bd8:	18bff51e 	bne	r3,r2,1005bb0 <__svfscanf_r+0xb48>
 1005bdc:	e0bfff04 	addi	r2,fp,-4
 1005be0:	10803fcc 	andi	r2,r2,255
 1005be4:	b887c83a 	sub	r3,r23,r2
 1005be8:	8885c83a 	sub	r2,r17,r2
 1005bec:	147fffc4 	addi	r17,r2,-1
 1005bf0:	1dffffc4 	addi	r23,r3,-1
 1005bf4:	a880400c 	andi	r2,r21,256
 1005bf8:	10001226 	beq	r2,zero,1005c44 <__svfscanf_r+0xbdc>
 1005bfc:	a881000c 	andi	r2,r21,1024
 1005c00:	10002b1e 	bne	r2,zero,1005cb0 <__svfscanf_r+0xc48>
 1005c04:	bdffffc4 	addi	r23,r23,-1
 1005c08:	b9400007 	ldb	r5,0(r23)
 1005c0c:	00801944 	movi	r2,101
 1005c10:	8c7fffc4 	addi	r17,r17,-1
 1005c14:	28800826 	beq	r5,r2,1005c38 <__svfscanf_r+0xbd0>
 1005c18:	00801144 	movi	r2,69
 1005c1c:	28800626 	beq	r5,r2,1005c38 <__svfscanf_r+0xbd0>
 1005c20:	bdffffc4 	addi	r23,r23,-1
 1005c24:	b009883a 	mov	r4,r22
 1005c28:	800d883a 	mov	r6,r16
 1005c2c:	100dae00 	call	100dae0 <_ungetc_r>
 1005c30:	b9400007 	ldb	r5,0(r23)
 1005c34:	8c7fffc4 	addi	r17,r17,-1
 1005c38:	b009883a 	mov	r4,r22
 1005c3c:	800d883a 	mov	r6,r16
 1005c40:	100dae00 	call	100dae0 <_ungetc_r>
 1005c44:	a880040c 	andi	r2,r21,16
 1005c48:	103d1a1e 	bne	r2,zero,10050b4 <__svfscanf_r+0x4c>
 1005c4c:	a8c1800c 	andi	r3,r21,1536
 1005c50:	00810004 	movi	r2,1024
 1005c54:	b8000005 	stb	zero,0(r23)
 1005c58:	18813326 	beq	r3,r2,1006128 <__svfscanf_r+0x10c0>
 1005c5c:	d8809d17 	ldw	r2,628(sp)
 1005c60:	1000251e 	bne	r2,zero,1005cf8 <__svfscanf_r+0xc90>
 1005c64:	d940a517 	ldw	r5,660(sp)
 1005c68:	b009883a 	mov	r4,r22
 1005c6c:	000d883a 	mov	r6,zero
 1005c70:	100b8180 	call	100b818 <_strtod_r>
 1005c74:	a900004c 	andi	r4,r21,1
 1005c78:	2009003a 	cmpeq	r4,r4,zero
 1005c7c:	1025883a 	mov	r18,r2
 1005c80:	1827883a 	mov	r19,r3
 1005c84:	2000141e 	bne	r4,zero,1005cd8 <__svfscanf_r+0xc70>
 1005c88:	d8c0a417 	ldw	r3,656(sp)
 1005c8c:	18800017 	ldw	r2,0(r3)
 1005c90:	1d400104 	addi	r21,r3,4
 1005c94:	14c00115 	stw	r19,4(r2)
 1005c98:	14800015 	stw	r18,0(r2)
 1005c9c:	d8c0a217 	ldw	r3,648(sp)
 1005ca0:	dd40a415 	stw	r21,656(sp)
 1005ca4:	18c00044 	addi	r3,r3,1
 1005ca8:	d8c0a215 	stw	r3,648(sp)
 1005cac:	003d0106 	br	10050b4 <__svfscanf_r+0x4c>
 1005cb0:	d900a517 	ldw	r4,660(sp)
 1005cb4:	25fd212e 	bgeu	r4,r23,100513c <__svfscanf_r+0xd4>
 1005cb8:	bdffffc4 	addi	r23,r23,-1
 1005cbc:	b9400007 	ldb	r5,0(r23)
 1005cc0:	b009883a 	mov	r4,r22
 1005cc4:	800d883a 	mov	r6,r16
 1005cc8:	100dae00 	call	100dae0 <_ungetc_r>
 1005ccc:	d880a517 	ldw	r2,660(sp)
 1005cd0:	15fff936 	bltu	r2,r23,1005cb8 <__svfscanf_r+0xc50>
 1005cd4:	003d1906 	br	100513c <__svfscanf_r+0xd4>
 1005cd8:	a880008c 	andi	r2,r21,2
 1005cdc:	10011926 	beq	r2,zero,1006144 <__svfscanf_r+0x10dc>
 1005ce0:	d900a417 	ldw	r4,656(sp)
 1005ce4:	20800017 	ldw	r2,0(r4)
 1005ce8:	25400104 	addi	r21,r4,4
 1005cec:	10c00115 	stw	r3,4(r2)
 1005cf0:	14800015 	stw	r18,0(r2)
 1005cf4:	003fe906 	br	1005c9c <__svfscanf_r+0xc34>
 1005cf8:	d8c09c17 	ldw	r3,624(sp)
 1005cfc:	b009883a 	mov	r4,r22
 1005d00:	000d883a 	mov	r6,zero
 1005d04:	19400044 	addi	r5,r3,1
 1005d08:	01c00284 	movi	r7,10
 1005d0c:	100cf240 	call	100cf24 <_strtol_r>
 1005d10:	d9009d17 	ldw	r4,628(sp)
 1005d14:	110dc83a 	sub	r6,r2,r4
 1005d18:	d8c0a517 	ldw	r3,660(sp)
 1005d1c:	d9009c17 	ldw	r4,624(sp)
 1005d20:	188054c4 	addi	r2,r3,339
 1005d24:	20800236 	bltu	r4,r2,1005d30 <__svfscanf_r+0xcc8>
 1005d28:	18805484 	addi	r2,r3,338
 1005d2c:	d8809c15 	stw	r2,624(sp)
 1005d30:	d9009c17 	ldw	r4,624(sp)
 1005d34:	014040b4 	movhi	r5,258
 1005d38:	29719e04 	addi	r5,r5,-14728
 1005d3c:	100b4f40 	call	100b4f4 <sprintf>
 1005d40:	003fc806 	br	1005c64 <__svfscanf_r+0xbfc>
 1005d44:	0027883a 	mov	r19,zero
 1005d48:	d8c04404 	addi	r3,sp,272
 1005d4c:	d8c0a515 	stw	r3,660(sp)
 1005d50:	182f883a 	mov	r23,r3
 1005d54:	d8009f15 	stw	zero,636(sp)
 1005d58:	d8009e15 	stw	zero,632(sp)
 1005d5c:	d8009d15 	stw	zero,628(sp)
 1005d60:	d8009c15 	stw	zero,624(sp)
 1005d64:	0039883a 	mov	fp,zero
 1005d68:	0025883a 	mov	r18,zero
 1005d6c:	80800017 	ldw	r2,0(r16)
 1005d70:	11400003 	ldbu	r5,0(r2)
 1005d74:	00801384 	movi	r2,78
 1005d78:	28fff544 	addi	r3,r5,-43
 1005d7c:	18c03fcc 	andi	r3,r3,255
 1005d80:	10c08336 	bltu	r2,r3,1005f90 <__svfscanf_r+0xf28>
 1005d84:	18c5883a 	add	r2,r3,r3
 1005d88:	1085883a 	add	r2,r2,r2
 1005d8c:	00c04034 	movhi	r3,256
 1005d90:	18d76804 	addi	r3,r3,23968
 1005d94:	10c5883a 	add	r2,r2,r3
 1005d98:	11000017 	ldw	r4,0(r2)
 1005d9c:	2000683a 	jmp	r4
 1005da0:	01005f48 	cmpgei	r4,zero,381
 1005da4:	01005f90 	cmplti	r4,zero,382
 1005da8:	01005f48 	cmpgei	r4,zero,381
 1005dac:	01005fd4 	movui	r4,383
 1005db0:	01005f90 	cmplti	r4,zero,382
 1005db4:	01006040 	call	100604 <__alt_mem_onchip_memory+0x100604>
 1005db8:	01006074 	movhi	r4,385
 1005dbc:	01006074 	movhi	r4,385
 1005dc0:	01006074 	movhi	r4,385
 1005dc4:	01006074 	movhi	r4,385
 1005dc8:	01006074 	movhi	r4,385
 1005dcc:	01006074 	movhi	r4,385
 1005dd0:	01006074 	movhi	r4,385
 1005dd4:	01006074 	movhi	r4,385
 1005dd8:	01006074 	movhi	r4,385
 1005ddc:	01005f90 	cmplti	r4,zero,382
 1005de0:	01005f90 	cmplti	r4,zero,382
 1005de4:	01005f90 	cmplti	r4,zero,382
 1005de8:	01005f90 	cmplti	r4,zero,382
 1005dec:	01005f90 	cmplti	r4,zero,382
 1005df0:	01005f90 	cmplti	r4,zero,382
 1005df4:	01005f90 	cmplti	r4,zero,382
 1005df8:	01006094 	movui	r4,386
 1005dfc:	01005f90 	cmplti	r4,zero,382
 1005e00:	01005f90 	cmplti	r4,zero,382
 1005e04:	01005f90 	cmplti	r4,zero,382
 1005e08:	010060a4 	muli	r4,zero,386
 1005e0c:	010060f0 	cmpltui	r4,zero,387
 1005e10:	01005f90 	cmplti	r4,zero,382
 1005e14:	01005f90 	cmplti	r4,zero,382
 1005e18:	010061c8 	cmpgei	r4,zero,391
 1005e1c:	01005f90 	cmplti	r4,zero,382
 1005e20:	01005f90 	cmplti	r4,zero,382
 1005e24:	01005f90 	cmplti	r4,zero,382
 1005e28:	01005f90 	cmplti	r4,zero,382
 1005e2c:	01006174 	movhi	r4,389
 1005e30:	01005f90 	cmplti	r4,zero,382
 1005e34:	01005f90 	cmplti	r4,zero,382
 1005e38:	01005f90 	cmplti	r4,zero,382
 1005e3c:	01005f90 	cmplti	r4,zero,382
 1005e40:	01005f90 	cmplti	r4,zero,382
 1005e44:	01006208 	cmpgei	r4,zero,392
 1005e48:	01005f90 	cmplti	r4,zero,382
 1005e4c:	01005f90 	cmplti	r4,zero,382
 1005e50:	01005f90 	cmplti	r4,zero,382
 1005e54:	01005f90 	cmplti	r4,zero,382
 1005e58:	0100610c 	andi	r4,zero,388
 1005e5c:	01005f90 	cmplti	r4,zero,382
 1005e60:	01005f90 	cmplti	r4,zero,382
 1005e64:	01005f90 	cmplti	r4,zero,382
 1005e68:	01005f90 	cmplti	r4,zero,382
 1005e6c:	01005f90 	cmplti	r4,zero,382
 1005e70:	01005f90 	cmplti	r4,zero,382
 1005e74:	01005f90 	cmplti	r4,zero,382
 1005e78:	01006094 	movui	r4,386
 1005e7c:	01005f90 	cmplti	r4,zero,382
 1005e80:	01005f90 	cmplti	r4,zero,382
 1005e84:	01005f90 	cmplti	r4,zero,382
 1005e88:	010060a4 	muli	r4,zero,386
 1005e8c:	010060f0 	cmpltui	r4,zero,387
 1005e90:	01005f90 	cmplti	r4,zero,382
 1005e94:	01005f90 	cmplti	r4,zero,382
 1005e98:	010061c8 	cmpgei	r4,zero,391
 1005e9c:	01005f90 	cmplti	r4,zero,382
 1005ea0:	01005f90 	cmplti	r4,zero,382
 1005ea4:	01005f90 	cmplti	r4,zero,382
 1005ea8:	01005f90 	cmplti	r4,zero,382
 1005eac:	01006174 	movhi	r4,389
 1005eb0:	01005f90 	cmplti	r4,zero,382
 1005eb4:	01005f90 	cmplti	r4,zero,382
 1005eb8:	01005f90 	cmplti	r4,zero,382
 1005ebc:	01005f90 	cmplti	r4,zero,382
 1005ec0:	01005f90 	cmplti	r4,zero,382
 1005ec4:	01006208 	cmpgei	r4,zero,392
 1005ec8:	01005f90 	cmplti	r4,zero,382
 1005ecc:	01005f90 	cmplti	r4,zero,382
 1005ed0:	01005f90 	cmplti	r4,zero,382
 1005ed4:	01005f90 	cmplti	r4,zero,382
 1005ed8:	0100610c 	andi	r4,zero,388
 1005edc:	a880040c 	andi	r2,r21,16
 1005ee0:	10004826 	beq	r2,zero,1006004 <__svfscanf_r+0xf9c>
 1005ee4:	0027883a 	mov	r19,zero
 1005ee8:	00000b06 	br	1005f18 <__svfscanf_r+0xeb0>
 1005eec:	80800017 	ldw	r2,0(r16)
 1005ef0:	b009883a 	mov	r4,r22
 1005ef4:	800b883a 	mov	r5,r16
 1005ef8:	148d883a 	add	r6,r2,r18
 1005efc:	81800015 	stw	r6,0(r16)
 1005f00:	9ca7883a 	add	r19,r19,r18
 1005f04:	100b1dc0 	call	100b1dc <__srefill_r>
 1005f08:	103dc61e 	bne	r2,zero,1005624 <__svfscanf_r+0x5bc>
 1005f0c:	d880a317 	ldw	r2,652(sp)
 1005f10:	1485c83a 	sub	r2,r2,r18
 1005f14:	d880a315 	stw	r2,652(sp)
 1005f18:	84800117 	ldw	r18,4(r16)
 1005f1c:	d900a317 	ldw	r4,652(sp)
 1005f20:	913ff216 	blt	r18,r4,1005eec <__svfscanf_r+0xe84>
 1005f24:	d900a317 	ldw	r4,652(sp)
 1005f28:	80800017 	ldw	r2,0(r16)
 1005f2c:	9927883a 	add	r19,r19,r4
 1005f30:	9107c83a 	sub	r3,r18,r4
 1005f34:	110d883a 	add	r6,r2,r4
 1005f38:	8ce3883a 	add	r17,r17,r19
 1005f3c:	80c00115 	stw	r3,4(r16)
 1005f40:	81800015 	stw	r6,0(r16)
 1005f44:	003c5b06 	br	10050b4 <__svfscanf_r+0x4c>
 1005f48:	a880200c 	andi	r2,r21,128
 1005f4c:	10001026 	beq	r2,zero,1005f90 <__svfscanf_r+0xf28>
 1005f50:	00bfdfc4 	movi	r2,-129
 1005f54:	a8aa703a 	and	r21,r21,r2
 1005f58:	b9400005 	stb	r5,0(r23)
 1005f5c:	bdc00044 	addi	r23,r23,1
 1005f60:	80c00117 	ldw	r3,4(r16)
 1005f64:	8c400044 	addi	r17,r17,1
 1005f68:	18bfffc4 	addi	r2,r3,-1
 1005f6c:	80800115 	stw	r2,4(r16)
 1005f70:	00801f0e 	bge	zero,r2,1005ff0 <__svfscanf_r+0xf88>
 1005f74:	80800017 	ldw	r2,0(r16)
 1005f78:	10800044 	addi	r2,r2,1
 1005f7c:	80800015 	stw	r2,0(r16)
 1005f80:	d880a317 	ldw	r2,652(sp)
 1005f84:	10bfffc4 	addi	r2,r2,-1
 1005f88:	d880a315 	stw	r2,652(sp)
 1005f8c:	103f771e 	bne	r2,zero,1005d6c <__svfscanf_r+0xd04>
 1005f90:	d8c09e17 	ldw	r3,632(sp)
 1005f94:	18000226 	beq	r3,zero,1005fa0 <__svfscanf_r+0xf38>
 1005f98:	00bfbfc4 	movi	r2,-257
 1005f9c:	a8aa703a 	and	r21,r21,r2
 1005fa0:	90ffffc4 	addi	r3,r18,-1
 1005fa4:	00800044 	movi	r2,1
 1005fa8:	10fef536 	bltu	r2,r3,1005b80 <__svfscanf_r+0xb18>
 1005fac:	d900a517 	ldw	r4,660(sp)
 1005fb0:	25fc622e 	bgeu	r4,r23,100513c <__svfscanf_r+0xd4>
 1005fb4:	bdffffc4 	addi	r23,r23,-1
 1005fb8:	b9400007 	ldb	r5,0(r23)
 1005fbc:	b009883a 	mov	r4,r22
 1005fc0:	800d883a 	mov	r6,r16
 1005fc4:	100dae00 	call	100dae0 <_ungetc_r>
 1005fc8:	d880a517 	ldw	r2,660(sp)
 1005fcc:	15fff936 	bltu	r2,r23,1005fb4 <__svfscanf_r+0xf4c>
 1005fd0:	003c5a06 	br	100513c <__svfscanf_r+0xd4>
 1005fd4:	a880800c 	andi	r2,r21,512
 1005fd8:	103fed26 	beq	r2,zero,1005f90 <__svfscanf_r+0xf28>
 1005fdc:	d9009e17 	ldw	r4,632(sp)
 1005fe0:	00bf5fc4 	movi	r2,-641
 1005fe4:	a8aa703a 	and	r21,r21,r2
 1005fe8:	d9009f15 	stw	r4,636(sp)
 1005fec:	003fda06 	br	1005f58 <__svfscanf_r+0xef0>
 1005ff0:	b009883a 	mov	r4,r22
 1005ff4:	800b883a 	mov	r5,r16
 1005ff8:	100b1dc0 	call	100b1dc <__srefill_r>
 1005ffc:	103fe026 	beq	r2,zero,1005f80 <__svfscanf_r+0xf18>
 1006000:	003fe306 	br	1005f90 <__svfscanf_r+0xf28>
 1006004:	d880a417 	ldw	r2,656(sp)
 1006008:	d980a317 	ldw	r6,652(sp)
 100600c:	01400044 	movi	r5,1
 1006010:	11000017 	ldw	r4,0(r2)
 1006014:	800f883a 	mov	r7,r16
 1006018:	10088540 	call	1008854 <fread>
 100601c:	103c6726 	beq	r2,zero,10051bc <__svfscanf_r+0x154>
 1006020:	d8c0a417 	ldw	r3,656(sp)
 1006024:	d900a217 	ldw	r4,648(sp)
 1006028:	88a3883a 	add	r17,r17,r2
 100602c:	18c00104 	addi	r3,r3,4
 1006030:	21000044 	addi	r4,r4,1
 1006034:	d8c0a415 	stw	r3,656(sp)
 1006038:	d900a215 	stw	r4,648(sp)
 100603c:	003c1d06 	br	10050b4 <__svfscanf_r+0x4c>
 1006040:	a880400c 	andi	r2,r21,256
 1006044:	10000b26 	beq	r2,zero,1006074 <__svfscanf_r+0x100c>
 1006048:	00bfdfc4 	movi	r2,-129
 100604c:	a8aa703a 	and	r21,r21,r2
 1006050:	d8809e17 	ldw	r2,632(sp)
 1006054:	10800044 	addi	r2,r2,1
 1006058:	d8809e15 	stw	r2,632(sp)
 100605c:	983fc026 	beq	r19,zero,1005f60 <__svfscanf_r+0xef8>
 1006060:	d8c0a317 	ldw	r3,652(sp)
 1006064:	9cffffc4 	addi	r19,r19,-1
 1006068:	18c00044 	addi	r3,r3,1
 100606c:	d8c0a315 	stw	r3,652(sp)
 1006070:	003fbb06 	br	1005f60 <__svfscanf_r+0xef8>
 1006074:	e0803fcc 	andi	r2,fp,255
 1006078:	1080201c 	xori	r2,r2,128
 100607c:	10bfe004 	addi	r2,r2,-128
 1006080:	9085883a 	add	r2,r18,r2
 1006084:	103fc21e 	bne	r2,zero,1005f90 <__svfscanf_r+0xf28>
 1006088:	00bf9fc4 	movi	r2,-385
 100608c:	a8aa703a 	and	r21,r21,r2
 1006090:	003fb106 	br	1005f58 <__svfscanf_r+0xef0>
 1006094:	00800044 	movi	r2,1
 1006098:	90bfbd1e 	bne	r18,r2,1005f90 <__svfscanf_r+0xf28>
 100609c:	04800084 	movi	r18,2
 10060a0:	003fad06 	br	1005f58 <__svfscanf_r+0xef0>
 10060a4:	a8c1400c 	andi	r3,r21,1280
 10060a8:	00810004 	movi	r2,1024
 10060ac:	18800426 	beq	r3,r2,10060c0 <__svfscanf_r+0x1058>
 10060b0:	a884703a 	and	r2,r21,r2
 10060b4:	103fb626 	beq	r2,zero,1005f90 <__svfscanf_r+0xf28>
 10060b8:	d8809e17 	ldw	r2,632(sp)
 10060bc:	103fb826 	beq	r2,zero,1005fa0 <__svfscanf_r+0xf38>
 10060c0:	a880800c 	andi	r2,r21,512
 10060c4:	1000051e 	bne	r2,zero,10060dc <__svfscanf_r+0x1074>
 10060c8:	d8c09e17 	ldw	r3,632(sp)
 10060cc:	d9009f17 	ldw	r4,636(sp)
 10060d0:	ddc09c15 	stw	r23,624(sp)
 10060d4:	1907c83a 	sub	r3,r3,r4
 10060d8:	d8c09d15 	stw	r3,628(sp)
 10060dc:	00be7fc4 	movi	r2,-1537
 10060e0:	a884703a 	and	r2,r21,r2
 10060e4:	15406014 	ori	r21,r2,384
 10060e8:	d8009e15 	stw	zero,632(sp)
 10060ec:	003f9a06 	br	1005f58 <__svfscanf_r+0xef0>
 10060f0:	e0c03fcc 	andi	r3,fp,255
 10060f4:	18c0201c 	xori	r3,r3,128
 10060f8:	18ffe004 	addi	r3,r3,-128
 10060fc:	00800084 	movi	r2,2
 1006100:	18bfa31e 	bne	r3,r2,1005f90 <__svfscanf_r+0xf28>
 1006104:	070000c4 	movi	fp,3
 1006108:	003f9306 	br	1005f58 <__svfscanf_r+0xef0>
 100610c:	e0c03fcc 	andi	r3,fp,255
 1006110:	18c0201c 	xori	r3,r3,128
 1006114:	18ffe004 	addi	r3,r3,-128
 1006118:	008001c4 	movi	r2,7
 100611c:	18bf9c1e 	bne	r3,r2,1005f90 <__svfscanf_r+0xf28>
 1006120:	07000204 	movi	fp,8
 1006124:	003f8c06 	br	1005f58 <__svfscanf_r+0xef0>
 1006128:	d8c09e17 	ldw	r3,632(sp)
 100612c:	d9009f17 	ldw	r4,636(sp)
 1006130:	1905c83a 	sub	r2,r3,r4
 1006134:	103ecb26 	beq	r2,zero,1005c64 <__svfscanf_r+0xbfc>
 1006138:	008dc83a 	sub	r6,zero,r2
 100613c:	ddc09c15 	stw	r23,624(sp)
 1006140:	003ef506 	br	1005d18 <__svfscanf_r+0xcb0>
 1006144:	d880a417 	ldw	r2,656(sp)
 1006148:	9009883a 	mov	r4,r18
 100614c:	180b883a 	mov	r5,r3
 1006150:	15c00017 	ldw	r23,0(r2)
 1006154:	15400104 	addi	r21,r2,4
 1006158:	100b3fc0 	call	100b3fc <__isnand>
 100615c:	1000311e 	bne	r2,zero,1006224 <__svfscanf_r+0x11bc>
 1006160:	980b883a 	mov	r5,r19
 1006164:	9009883a 	mov	r4,r18
 1006168:	1010e740 	call	1010e74 <__truncdfsf2>
 100616c:	b8800015 	stw	r2,0(r23)
 1006170:	003eca06 	br	1005c9c <__svfscanf_r+0xc34>
 1006174:	9000101e 	bne	r18,zero,10061b8 <__svfscanf_r+0x1150>
 1006178:	a8c1c00c 	andi	r3,r21,1792
 100617c:	0081c004 	movi	r2,1792
 1006180:	18800926 	beq	r3,r2,10061a8 <__svfscanf_r+0x1140>
 1006184:	e0c03fcc 	andi	r3,fp,255
 1006188:	18c0201c 	xori	r3,r3,128
 100618c:	18ffe004 	addi	r3,r3,-128
 1006190:	00800044 	movi	r2,1
 1006194:	18800226 	beq	r3,r2,10061a0 <__svfscanf_r+0x1138>
 1006198:	00800104 	movi	r2,4
 100619c:	18bf7c1e 	bne	r3,r2,1005f90 <__svfscanf_r+0xf28>
 10061a0:	e7000044 	addi	fp,fp,1
 10061a4:	003f6c06 	br	1005f58 <__svfscanf_r+0xef0>
 10061a8:	00be1fc4 	movi	r2,-1921
 10061ac:	a8aa703a 	and	r21,r21,r2
 10061b0:	04800044 	movi	r18,1
 10061b4:	003f6806 	br	1005f58 <__svfscanf_r+0xef0>
 10061b8:	00800084 	movi	r2,2
 10061bc:	90bff11e 	bne	r18,r2,1006184 <__svfscanf_r+0x111c>
 10061c0:	048000c4 	movi	r18,3
 10061c4:	003f6406 	br	1005f58 <__svfscanf_r+0xef0>
 10061c8:	e0c03fcc 	andi	r3,fp,255
 10061cc:	18c0201c 	xori	r3,r3,128
 10061d0:	18ffe004 	addi	r3,r3,-128
 10061d4:	1800071e 	bne	r3,zero,10061f4 <__svfscanf_r+0x118c>
 10061d8:	a8c1c00c 	andi	r3,r21,1792
 10061dc:	0081c004 	movi	r2,1792
 10061e0:	18bf6b1e 	bne	r3,r2,1005f90 <__svfscanf_r+0xf28>
 10061e4:	00be1fc4 	movi	r2,-1921
 10061e8:	a8aa703a 	and	r21,r21,r2
 10061ec:	07000044 	movi	fp,1
 10061f0:	003f5906 	br	1005f58 <__svfscanf_r+0xef0>
 10061f4:	008000c4 	movi	r2,3
 10061f8:	18bfe926 	beq	r3,r2,10061a0 <__svfscanf_r+0x1138>
 10061fc:	00800144 	movi	r2,5
 1006200:	18bfe726 	beq	r3,r2,10061a0 <__svfscanf_r+0x1138>
 1006204:	003f6206 	br	1005f90 <__svfscanf_r+0xf28>
 1006208:	e0c03fcc 	andi	r3,fp,255
 100620c:	18c0201c 	xori	r3,r3,128
 1006210:	18ffe004 	addi	r3,r3,-128
 1006214:	00800184 	movi	r2,6
 1006218:	18bf5d1e 	bne	r3,r2,1005f90 <__svfscanf_r+0xf28>
 100621c:	070001c4 	movi	fp,7
 1006220:	003f4d06 	br	1005f58 <__svfscanf_r+0xef0>
 1006224:	0009883a 	mov	r4,zero
 1006228:	100b4ec0 	call	100b4ec <nanf>
 100622c:	b8800015 	stw	r2,0(r23)
 1006230:	003e9a06 	br	1005c9c <__svfscanf_r+0xc34>
 1006234:	a00b883a 	mov	r5,r20
 1006238:	d9000404 	addi	r4,sp,16
 100623c:	100b42c0 	call	100b42c <__sccl>
 1006240:	1029883a 	mov	r20,r2
 1006244:	ad401014 	ori	r21,r21,64
 1006248:	04800044 	movi	r18,1
 100624c:	003c7506 	br	1005424 <__svfscanf_r+0x3bc>
 1006250:	01000204 	movi	r4,8
 1006254:	00804074 	movhi	r2,257
 1006258:	10b52c04 	addi	r2,r2,-11088
 100625c:	ad400054 	ori	r21,r21,1
 1006260:	048000c4 	movi	r18,3
 1006264:	d900a115 	stw	r4,644(sp)
 1006268:	d880a015 	stw	r2,640(sp)
 100626c:	003c6d06 	br	1005424 <__svfscanf_r+0x3bc>
 1006270:	ad400094 	ori	r21,r21,2
 1006274:	003bd806 	br	10051d8 <__svfscanf_r+0x170>
 1006278:	d900a317 	ldw	r4,652(sp)
 100627c:	01400284 	movi	r5,10
 1006280:	10026440 	call	1002644 <__mulsi3>
 1006284:	15c5883a 	add	r2,r2,r23
 1006288:	10bff404 	addi	r2,r2,-48
 100628c:	d880a315 	stw	r2,652(sp)
 1006290:	003bd106 	br	10051d8 <__svfscanf_r+0x170>
 1006294:	ad400414 	ori	r21,r21,16
 1006298:	003bcf06 	br	10051d8 <__svfscanf_r+0x170>
 100629c:	00800404 	movi	r2,16
 10062a0:	00c04074 	movhi	r3,257
 10062a4:	18f52c04 	addi	r3,r3,-11088
 10062a8:	ad408014 	ori	r21,r21,512
 10062ac:	048000c4 	movi	r18,3
 10062b0:	d880a115 	stw	r2,644(sp)
 10062b4:	d8c0a015 	stw	r3,640(sp)
 10062b8:	003c5a06 	br	1005424 <__svfscanf_r+0x3bc>
 10062bc:	00c00284 	movi	r3,10
 10062c0:	01004074 	movhi	r4,257
 10062c4:	21352c04 	addi	r4,r4,-11088
 10062c8:	048000c4 	movi	r18,3
 10062cc:	d8c0a115 	stw	r3,644(sp)
 10062d0:	d900a015 	stw	r4,640(sp)
 10062d4:	003c5306 	br	1005424 <__svfscanf_r+0x3bc>
 10062d8:	00c04074 	movhi	r3,257
 10062dc:	18f3c904 	addi	r3,r3,-12508
 10062e0:	048000c4 	movi	r18,3
 10062e4:	d8c0a015 	stw	r3,640(sp)
 10062e8:	d800a115 	stw	zero,644(sp)
 10062ec:	003c4d06 	br	1005424 <__svfscanf_r+0x3bc>
 10062f0:	d8c0a117 	ldw	r3,644(sp)
 10062f4:	18c5883a 	add	r2,r3,r3
 10062f8:	00c040b4 	movhi	r3,258
 10062fc:	18f19f84 	addi	r3,r3,-14722
 1006300:	10c5883a 	add	r2,r2,r3
 1006304:	1080000f 	ldh	r2,0(r2)
 1006308:	00fd1fc4 	movi	r3,-2945
 100630c:	90e4703a 	and	r18,r18,r3
 1006310:	d880a115 	stw	r2,644(sp)
 1006314:	003de806 	br	1005ab8 <__svfscanf_r+0xa50>
 1006318:	d900a117 	ldw	r4,644(sp)
 100631c:	00c040b4 	movhi	r3,258
 1006320:	18f19f84 	addi	r3,r3,-14722
 1006324:	2105883a 	add	r2,r4,r4
 1006328:	10c5883a 	add	r2,r2,r3
 100632c:	1080000f 	ldh	r2,0(r2)
 1006330:	00c00204 	movi	r3,8
 1006334:	d880a115 	stw	r2,644(sp)
 1006338:	18bd870e 	bge	r3,r2,1005958 <__svfscanf_r+0x8f0>
 100633c:	00bd1fc4 	movi	r2,-2945
 1006340:	90a4703a 	and	r18,r18,r2
 1006344:	003ddc06 	br	1005ab8 <__svfscanf_r+0xa50>
 1006348:	d8c0a117 	ldw	r3,644(sp)
 100634c:	00800284 	movi	r2,10
 1006350:	10fffa16 	blt	r2,r3,100633c <__svfscanf_r+0x12d4>
 1006354:	003d8006 	br	1005958 <__svfscanf_r+0x8f0>
 1006358:	90c1800c 	andi	r3,r18,1536
 100635c:	00808004 	movi	r2,512
 1006360:	18bd7d1e 	bne	r3,r2,1005958 <__svfscanf_r+0x8f0>
 1006364:	00bf7fc4 	movi	r2,-513
 1006368:	9084703a 	and	r2,r18,r2
 100636c:	01000404 	movi	r4,16
 1006370:	14814014 	ori	r18,r2,1280
 1006374:	d900a115 	stw	r4,644(sp)
 1006378:	003dcf06 	br	1005ab8 <__svfscanf_r+0xa50>
 100637c:	04800104 	movi	r18,4
 1006380:	003c2806 	br	1005424 <__svfscanf_r+0x3bc>
 1006384:	ad401014 	ori	r21,r21,64
 1006388:	0025883a 	mov	r18,zero
 100638c:	003c2506 	br	1005424 <__svfscanf_r+0x3bc>
 1006390:	ad400114 	ori	r21,r21,4
 1006394:	003b9006 	br	10051d8 <__svfscanf_r+0x170>
 1006398:	0027883a 	mov	r19,zero
 100639c:	003cac06 	br	1005650 <__svfscanf_r+0x5e8>
 10063a0:	903d5226 	beq	r18,zero,10058ec <__svfscanf_r+0x884>
 10063a4:	94bfffc4 	addi	r18,r18,-1
 10063a8:	d8c04404 	addi	r3,sp,272
 10063ac:	1c85883a 	add	r2,r3,r18
 10063b0:	11400003 	ldbu	r5,0(r2)
 10063b4:	b009883a 	mov	r4,r22
 10063b8:	800d883a 	mov	r6,r16
 10063bc:	100dae00 	call	100dae0 <_ungetc_r>
 10063c0:	003ff706 	br	10063a0 <__svfscanf_r+0x1338>
 10063c4:	00bfff84 	movi	r2,-2
 10063c8:	18bd361e 	bne	r3,r2,10058a4 <__svfscanf_r+0x83c>
 10063cc:	003d4006 	br	10058d0 <__svfscanf_r+0x868>
 10063d0:	d900a417 	ldw	r4,656(sp)
 10063d4:	25400017 	ldw	r21,0(r4)
 10063d8:	21000104 	addi	r4,r4,4
 10063dc:	d900a415 	stw	r4,656(sp)
 10063e0:	003d0606 	br	10057fc <__svfscanf_r+0x794>
 10063e4:	983b5526 	beq	r19,zero,100513c <__svfscanf_r+0xd4>
 10063e8:	8ce3883a 	add	r17,r17,r19
 10063ec:	003b3106 	br	10050b4 <__svfscanf_r+0x4c>
 10063f0:	00bfff84 	movi	r2,-2
 10063f4:	18bc621e 	bne	r3,r2,1005580 <__svfscanf_r+0x518>
 10063f8:	003c6906 	br	10055a0 <__svfscanf_r+0x538>
 10063fc:	b009883a 	mov	r4,r22
 1006400:	800b883a 	mov	r5,r16
 1006404:	100b1dc0 	call	100b1dc <__srefill_r>
 1006408:	103c6726 	beq	r2,zero,10055a8 <__svfscanf_r+0x540>
 100640c:	903b6b1e 	bne	r18,zero,10051bc <__svfscanf_r+0x154>
 1006410:	a83b281e 	bne	r21,zero,10050b4 <__svfscanf_r+0x4c>
 1006414:	d8c0a217 	ldw	r3,648(sp)
 1006418:	18c00044 	addi	r3,r3,1
 100641c:	d8c0a215 	stw	r3,648(sp)
 1006420:	003b2406 	br	10050b4 <__svfscanf_r+0x4c>
 1006424:	8080030b 	ldhu	r2,12(r16)
 1006428:	1080100c 	andi	r2,r2,64
 100642c:	103b4326 	beq	r2,zero,100513c <__svfscanf_r+0xd4>
 1006430:	003b6406 	br	10051c4 <__svfscanf_r+0x15c>
 1006434:	d8c0a417 	ldw	r3,656(sp)
 1006438:	1cc00017 	ldw	r19,0(r3)
 100643c:	18c00104 	addi	r3,r3,4
 1006440:	d8c0a415 	stw	r3,656(sp)
 1006444:	003c2906 	br	10054ec <__svfscanf_r+0x484>
 1006448:	00800204 	movi	r2,8
 100644c:	00c04074 	movhi	r3,257
 1006450:	18f52c04 	addi	r3,r3,-11088
 1006454:	048000c4 	movi	r18,3
 1006458:	d880a115 	stw	r2,644(sp)
 100645c:	d8c0a015 	stw	r3,640(sp)
 1006460:	003bf006 	br	1005424 <__svfscanf_r+0x3bc>
 1006464:	04800084 	movi	r18,2
 1006468:	003bee06 	br	1005424 <__svfscanf_r+0x3bc>
 100646c:	01000404 	movi	r4,16
 1006470:	00804074 	movhi	r2,257
 1006474:	10b52c04 	addi	r2,r2,-11088
 1006478:	ad408814 	ori	r21,r21,544
 100647c:	048000c4 	movi	r18,3
 1006480:	d900a115 	stw	r4,644(sp)
 1006484:	d880a015 	stw	r2,640(sp)
 1006488:	003be606 	br	1005424 <__svfscanf_r+0x3bc>
 100648c:	a880040c 	andi	r2,r21,16
 1006490:	103b081e 	bne	r2,zero,10050b4 <__svfscanf_r+0x4c>
 1006494:	a880010c 	andi	r2,r21,4
 1006498:	10004e26 	beq	r2,zero,10065d4 <__svfscanf_r+0x156c>
 100649c:	d8c0a417 	ldw	r3,656(sp)
 10064a0:	18800017 	ldw	r2,0(r3)
 10064a4:	18c00104 	addi	r3,r3,4
 10064a8:	d8c0a415 	stw	r3,656(sp)
 10064ac:	1440000d 	sth	r17,0(r2)
 10064b0:	003b0006 	br	10050b4 <__svfscanf_r+0x4c>
 10064b4:	d880a417 	ldw	r2,656(sp)
 10064b8:	dd400404 	addi	r21,sp,16
 10064bc:	14800017 	ldw	r18,0(r2)
 10064c0:	9027883a 	mov	r19,r18
 10064c4:	81000017 	ldw	r4,0(r16)
 10064c8:	20800003 	ldbu	r2,0(r4)
 10064cc:	a885883a 	add	r2,r21,r2
 10064d0:	10c00007 	ldb	r3,0(r2)
 10064d4:	18001426 	beq	r3,zero,1006528 <__svfscanf_r+0x14c0>
 10064d8:	d8c0a317 	ldw	r3,652(sp)
 10064dc:	80800117 	ldw	r2,4(r16)
 10064e0:	21800044 	addi	r6,r4,1
 10064e4:	18ffffc4 	addi	r3,r3,-1
 10064e8:	d8c0a315 	stw	r3,652(sp)
 10064ec:	10ffffc4 	addi	r3,r2,-1
 10064f0:	80c00115 	stw	r3,4(r16)
 10064f4:	20800003 	ldbu	r2,0(r4)
 10064f8:	90800005 	stb	r2,0(r18)
 10064fc:	d900a317 	ldw	r4,652(sp)
 1006500:	81800015 	stw	r6,0(r16)
 1006504:	94800044 	addi	r18,r18,1
 1006508:	20000726 	beq	r4,zero,1006528 <__svfscanf_r+0x14c0>
 100650c:	80800117 	ldw	r2,4(r16)
 1006510:	00bfec16 	blt	zero,r2,10064c4 <__svfscanf_r+0x145c>
 1006514:	b009883a 	mov	r4,r22
 1006518:	800b883a 	mov	r5,r16
 100651c:	100b1dc0 	call	100b1dc <__srefill_r>
 1006520:	103fe826 	beq	r2,zero,10064c4 <__svfscanf_r+0x145c>
 1006524:	9cbb2526 	beq	r19,r18,10051bc <__svfscanf_r+0x154>
 1006528:	94e7c83a 	sub	r19,r18,r19
 100652c:	983b0326 	beq	r19,zero,100513c <__svfscanf_r+0xd4>
 1006530:	90000005 	stb	zero,0(r18)
 1006534:	d880a417 	ldw	r2,656(sp)
 1006538:	d8c0a217 	ldw	r3,648(sp)
 100653c:	8ce3883a 	add	r17,r17,r19
 1006540:	10800104 	addi	r2,r2,4
 1006544:	18c00044 	addi	r3,r3,1
 1006548:	d880a415 	stw	r2,656(sp)
 100654c:	d8c0a215 	stw	r3,648(sp)
 1006550:	003ad806 	br	10050b4 <__svfscanf_r+0x4c>
 1006554:	d900a517 	ldw	r4,660(sp)
 1006558:	25faf82e 	bgeu	r4,r23,100513c <__svfscanf_r+0xd4>
 100655c:	bdffffc4 	addi	r23,r23,-1
 1006560:	b9400007 	ldb	r5,0(r23)
 1006564:	b009883a 	mov	r4,r22
 1006568:	800d883a 	mov	r6,r16
 100656c:	100dae00 	call	100dae0 <_ungetc_r>
 1006570:	d8c0a517 	ldw	r3,660(sp)
 1006574:	1dfff936 	bltu	r3,r23,100655c <__svfscanf_r+0x14f4>
 1006578:	003af006 	br	100513c <__svfscanf_r+0xd4>
 100657c:	a880040c 	andi	r2,r21,16
 1006580:	10002d26 	beq	r2,zero,1006638 <__svfscanf_r+0x15d0>
 1006584:	0025883a 	mov	r18,zero
 1006588:	00000906 	br	10065b0 <__svfscanf_r+0x1548>
 100658c:	80c00117 	ldw	r3,4(r16)
 1006590:	d880a317 	ldw	r2,652(sp)
 1006594:	29800044 	addi	r6,r5,1
 1006598:	18ffffc4 	addi	r3,r3,-1
 100659c:	94800044 	addi	r18,r18,1
 10065a0:	81800015 	stw	r6,0(r16)
 10065a4:	80c00115 	stw	r3,4(r16)
 10065a8:	14800826 	beq	r2,r18,10065cc <__svfscanf_r+0x1564>
 10065ac:	00c0120e 	bge	zero,r3,10065f8 <__svfscanf_r+0x1590>
 10065b0:	81400017 	ldw	r5,0(r16)
 10065b4:	98800017 	ldw	r2,0(r19)
 10065b8:	28c00003 	ldbu	r3,0(r5)
 10065bc:	1887883a 	add	r3,r3,r2
 10065c0:	19000003 	ldbu	r4,0(r3)
 10065c4:	2100020c 	andi	r4,r4,8
 10065c8:	203ff026 	beq	r4,zero,100658c <__svfscanf_r+0x1524>
 10065cc:	8ca3883a 	add	r17,r17,r18
 10065d0:	003ab806 	br	10050b4 <__svfscanf_r+0x4c>
 10065d4:	a880004c 	andi	r2,r21,1
 10065d8:	1005003a 	cmpeq	r2,r2,zero
 10065dc:	10000b1e 	bne	r2,zero,100660c <__svfscanf_r+0x15a4>
 10065e0:	d900a417 	ldw	r4,656(sp)
 10065e4:	20800017 	ldw	r2,0(r4)
 10065e8:	21000104 	addi	r4,r4,4
 10065ec:	d900a415 	stw	r4,656(sp)
 10065f0:	14400015 	stw	r17,0(r2)
 10065f4:	003aaf06 	br	10050b4 <__svfscanf_r+0x4c>
 10065f8:	b009883a 	mov	r4,r22
 10065fc:	800b883a 	mov	r5,r16
 1006600:	100b1dc0 	call	100b1dc <__srefill_r>
 1006604:	103fea26 	beq	r2,zero,10065b0 <__svfscanf_r+0x1548>
 1006608:	003ff006 	br	10065cc <__svfscanf_r+0x1564>
 100660c:	a880008c 	andi	r2,r21,2
 1006610:	10002c26 	beq	r2,zero,10066c4 <__svfscanf_r+0x165c>
 1006614:	d8c0a417 	ldw	r3,656(sp)
 1006618:	d900a417 	ldw	r4,656(sp)
 100661c:	18800017 	ldw	r2,0(r3)
 1006620:	8807d7fa 	srai	r3,r17,31
 1006624:	21000104 	addi	r4,r4,4
 1006628:	d900a415 	stw	r4,656(sp)
 100662c:	14400015 	stw	r17,0(r2)
 1006630:	10c00115 	stw	r3,4(r2)
 1006634:	003a9f06 	br	10050b4 <__svfscanf_r+0x4c>
 1006638:	d8c0a417 	ldw	r3,656(sp)
 100663c:	1d400017 	ldw	r21,0(r3)
 1006640:	a825883a 	mov	r18,r21
 1006644:	00000e06 	br	1006680 <__svfscanf_r+0x1618>
 1006648:	80800117 	ldw	r2,4(r16)
 100664c:	d900a317 	ldw	r4,652(sp)
 1006650:	29800044 	addi	r6,r5,1
 1006654:	10ffffc4 	addi	r3,r2,-1
 1006658:	213fffc4 	addi	r4,r4,-1
 100665c:	d900a315 	stw	r4,652(sp)
 1006660:	80c00115 	stw	r3,4(r16)
 1006664:	28800003 	ldbu	r2,0(r5)
 1006668:	90800005 	stb	r2,0(r18)
 100666c:	81800015 	stw	r6,0(r16)
 1006670:	94800044 	addi	r18,r18,1
 1006674:	20000926 	beq	r4,zero,100669c <__svfscanf_r+0x1634>
 1006678:	80800117 	ldw	r2,4(r16)
 100667c:	0080170e 	bge	zero,r2,10066dc <__svfscanf_r+0x1674>
 1006680:	81400017 	ldw	r5,0(r16)
 1006684:	98800017 	ldw	r2,0(r19)
 1006688:	28c00003 	ldbu	r3,0(r5)
 100668c:	1887883a 	add	r3,r3,r2
 1006690:	19000003 	ldbu	r4,0(r3)
 1006694:	2100020c 	andi	r4,r4,8
 1006698:	203feb26 	beq	r4,zero,1006648 <__svfscanf_r+0x15e0>
 100669c:	9545c83a 	sub	r2,r18,r21
 10066a0:	d8c0a217 	ldw	r3,648(sp)
 10066a4:	88a3883a 	add	r17,r17,r2
 10066a8:	d880a417 	ldw	r2,656(sp)
 10066ac:	18c00044 	addi	r3,r3,1
 10066b0:	d8c0a215 	stw	r3,648(sp)
 10066b4:	10800104 	addi	r2,r2,4
 10066b8:	d880a415 	stw	r2,656(sp)
 10066bc:	90000005 	stb	zero,0(r18)
 10066c0:	003a7c06 	br	10050b4 <__svfscanf_r+0x4c>
 10066c4:	d8c0a417 	ldw	r3,656(sp)
 10066c8:	18800017 	ldw	r2,0(r3)
 10066cc:	18c00104 	addi	r3,r3,4
 10066d0:	d8c0a415 	stw	r3,656(sp)
 10066d4:	14400015 	stw	r17,0(r2)
 10066d8:	003a7606 	br	10050b4 <__svfscanf_r+0x4c>
 10066dc:	b009883a 	mov	r4,r22
 10066e0:	800b883a 	mov	r5,r16
 10066e4:	100b1dc0 	call	100b1dc <__srefill_r>
 10066e8:	103fe526 	beq	r2,zero,1006680 <__svfscanf_r+0x1618>
 10066ec:	003feb06 	br	100669c <__svfscanf_r+0x1634>

010066f0 <__svfscanf>:
 10066f0:	008040b4 	movhi	r2,258
 10066f4:	10ba3e04 	addi	r2,r2,-5896
 10066f8:	2013883a 	mov	r9,r4
 10066fc:	11000017 	ldw	r4,0(r2)
 1006700:	2805883a 	mov	r2,r5
 1006704:	300f883a 	mov	r7,r6
 1006708:	480b883a 	mov	r5,r9
 100670c:	100d883a 	mov	r6,r2
 1006710:	10050681 	jmpi	1005068 <__svfscanf_r>

01006714 <_vfscanf_r>:
 1006714:	defffb04 	addi	sp,sp,-20
 1006718:	dcc00315 	stw	r19,12(sp)
 100671c:	dc800215 	stw	r18,8(sp)
 1006720:	dc400115 	stw	r17,4(sp)
 1006724:	dc000015 	stw	r16,0(sp)
 1006728:	dfc00415 	stw	ra,16(sp)
 100672c:	2021883a 	mov	r16,r4
 1006730:	2823883a 	mov	r17,r5
 1006734:	3025883a 	mov	r18,r6
 1006738:	3827883a 	mov	r19,r7
 100673c:	20000226 	beq	r4,zero,1006748 <_vfscanf_r+0x34>
 1006740:	20800e17 	ldw	r2,56(r4)
 1006744:	10000b26 	beq	r2,zero,1006774 <_vfscanf_r+0x60>
 1006748:	8009883a 	mov	r4,r16
 100674c:	880b883a 	mov	r5,r17
 1006750:	900d883a 	mov	r6,r18
 1006754:	980f883a 	mov	r7,r19
 1006758:	dfc00417 	ldw	ra,16(sp)
 100675c:	dcc00317 	ldw	r19,12(sp)
 1006760:	dc800217 	ldw	r18,8(sp)
 1006764:	dc400117 	ldw	r17,4(sp)
 1006768:	dc000017 	ldw	r16,0(sp)
 100676c:	dec00504 	addi	sp,sp,20
 1006770:	10050681 	jmpi	1005068 <__svfscanf_r>
 1006774:	10083bc0 	call	10083bc <__sinit>
 1006778:	003ff306 	br	1006748 <_vfscanf_r+0x34>

0100677c <vfscanf>:
 100677c:	defffb04 	addi	sp,sp,-20
 1006780:	dcc00315 	stw	r19,12(sp)
 1006784:	04c040b4 	movhi	r19,258
 1006788:	9cfa3e04 	addi	r19,r19,-5896
 100678c:	98c00017 	ldw	r3,0(r19)
 1006790:	dc800215 	stw	r18,8(sp)
 1006794:	dc400115 	stw	r17,4(sp)
 1006798:	dc000015 	stw	r16,0(sp)
 100679c:	dfc00415 	stw	ra,16(sp)
 10067a0:	2021883a 	mov	r16,r4
 10067a4:	2823883a 	mov	r17,r5
 10067a8:	3025883a 	mov	r18,r6
 10067ac:	18000326 	beq	r3,zero,10067bc <vfscanf+0x40>
 10067b0:	18800e17 	ldw	r2,56(r3)
 10067b4:	1809883a 	mov	r4,r3
 10067b8:	10000b26 	beq	r2,zero,10067e8 <vfscanf+0x6c>
 10067bc:	99000017 	ldw	r4,0(r19)
 10067c0:	800b883a 	mov	r5,r16
 10067c4:	880d883a 	mov	r6,r17
 10067c8:	900f883a 	mov	r7,r18
 10067cc:	dfc00417 	ldw	ra,16(sp)
 10067d0:	dcc00317 	ldw	r19,12(sp)
 10067d4:	dc800217 	ldw	r18,8(sp)
 10067d8:	dc400117 	ldw	r17,4(sp)
 10067dc:	dc000017 	ldw	r16,0(sp)
 10067e0:	dec00504 	addi	sp,sp,20
 10067e4:	10050681 	jmpi	1005068 <__svfscanf_r>
 10067e8:	10083bc0 	call	10083bc <__sinit>
 10067ec:	003ff306 	br	10067bc <vfscanf+0x40>

010067f0 <__swsetup_r>:
 10067f0:	008040b4 	movhi	r2,258
 10067f4:	10ba3e04 	addi	r2,r2,-5896
 10067f8:	10c00017 	ldw	r3,0(r2)
 10067fc:	defffd04 	addi	sp,sp,-12
 1006800:	dc400115 	stw	r17,4(sp)
 1006804:	dc000015 	stw	r16,0(sp)
 1006808:	dfc00215 	stw	ra,8(sp)
 100680c:	2023883a 	mov	r17,r4
 1006810:	2821883a 	mov	r16,r5
 1006814:	18000226 	beq	r3,zero,1006820 <__swsetup_r+0x30>
 1006818:	18800e17 	ldw	r2,56(r3)
 100681c:	10001f26 	beq	r2,zero,100689c <__swsetup_r+0xac>
 1006820:	8100030b 	ldhu	r4,12(r16)
 1006824:	2080020c 	andi	r2,r4,8
 1006828:	10002826 	beq	r2,zero,10068cc <__swsetup_r+0xdc>
 100682c:	81400417 	ldw	r5,16(r16)
 1006830:	28001d26 	beq	r5,zero,10068a8 <__swsetup_r+0xb8>
 1006834:	2080004c 	andi	r2,r4,1
 1006838:	1005003a 	cmpeq	r2,r2,zero
 100683c:	10000b26 	beq	r2,zero,100686c <__swsetup_r+0x7c>
 1006840:	2080008c 	andi	r2,r4,2
 1006844:	10001226 	beq	r2,zero,1006890 <__swsetup_r+0xa0>
 1006848:	0005883a 	mov	r2,zero
 100684c:	80800215 	stw	r2,8(r16)
 1006850:	28000b26 	beq	r5,zero,1006880 <__swsetup_r+0x90>
 1006854:	0005883a 	mov	r2,zero
 1006858:	dfc00217 	ldw	ra,8(sp)
 100685c:	dc400117 	ldw	r17,4(sp)
 1006860:	dc000017 	ldw	r16,0(sp)
 1006864:	dec00304 	addi	sp,sp,12
 1006868:	f800283a 	ret
 100686c:	80800517 	ldw	r2,20(r16)
 1006870:	80000215 	stw	zero,8(r16)
 1006874:	0085c83a 	sub	r2,zero,r2
 1006878:	80800615 	stw	r2,24(r16)
 100687c:	283ff51e 	bne	r5,zero,1006854 <__swsetup_r+0x64>
 1006880:	2080200c 	andi	r2,r4,128
 1006884:	103ff326 	beq	r2,zero,1006854 <__swsetup_r+0x64>
 1006888:	00bfffc4 	movi	r2,-1
 100688c:	003ff206 	br	1006858 <__swsetup_r+0x68>
 1006890:	80800517 	ldw	r2,20(r16)
 1006894:	80800215 	stw	r2,8(r16)
 1006898:	003fed06 	br	1006850 <__swsetup_r+0x60>
 100689c:	1809883a 	mov	r4,r3
 10068a0:	10083bc0 	call	10083bc <__sinit>
 10068a4:	003fde06 	br	1006820 <__swsetup_r+0x30>
 10068a8:	20c0a00c 	andi	r3,r4,640
 10068ac:	00808004 	movi	r2,512
 10068b0:	18bfe026 	beq	r3,r2,1006834 <__swsetup_r+0x44>
 10068b4:	8809883a 	mov	r4,r17
 10068b8:	800b883a 	mov	r5,r16
 10068bc:	10093e00 	call	10093e0 <__smakebuf_r>
 10068c0:	8100030b 	ldhu	r4,12(r16)
 10068c4:	81400417 	ldw	r5,16(r16)
 10068c8:	003fda06 	br	1006834 <__swsetup_r+0x44>
 10068cc:	2080040c 	andi	r2,r4,16
 10068d0:	103fed26 	beq	r2,zero,1006888 <__swsetup_r+0x98>
 10068d4:	2080010c 	andi	r2,r4,4
 10068d8:	10001226 	beq	r2,zero,1006924 <__swsetup_r+0x134>
 10068dc:	81400c17 	ldw	r5,48(r16)
 10068e0:	28000526 	beq	r5,zero,10068f8 <__swsetup_r+0x108>
 10068e4:	80801004 	addi	r2,r16,64
 10068e8:	28800226 	beq	r5,r2,10068f4 <__swsetup_r+0x104>
 10068ec:	8809883a 	mov	r4,r17
 10068f0:	10089c00 	call	10089c0 <_free_r>
 10068f4:	80000c15 	stw	zero,48(r16)
 10068f8:	8080030b 	ldhu	r2,12(r16)
 10068fc:	81400417 	ldw	r5,16(r16)
 1006900:	80000115 	stw	zero,4(r16)
 1006904:	10bff6cc 	andi	r2,r2,65499
 1006908:	8080030d 	sth	r2,12(r16)
 100690c:	81400015 	stw	r5,0(r16)
 1006910:	8080030b 	ldhu	r2,12(r16)
 1006914:	10800214 	ori	r2,r2,8
 1006918:	113fffcc 	andi	r4,r2,65535
 100691c:	8080030d 	sth	r2,12(r16)
 1006920:	003fc306 	br	1006830 <__swsetup_r+0x40>
 1006924:	81400417 	ldw	r5,16(r16)
 1006928:	003ff906 	br	1006910 <__swsetup_r+0x120>

0100692c <quorem>:
 100692c:	28c00417 	ldw	r3,16(r5)
 1006930:	20800417 	ldw	r2,16(r4)
 1006934:	defff104 	addi	sp,sp,-60
 1006938:	dfc00e15 	stw	ra,56(sp)
 100693c:	df000d15 	stw	fp,52(sp)
 1006940:	ddc00c15 	stw	r23,48(sp)
 1006944:	dd800b15 	stw	r22,44(sp)
 1006948:	dd400a15 	stw	r21,40(sp)
 100694c:	dd000915 	stw	r20,36(sp)
 1006950:	dcc00815 	stw	r19,32(sp)
 1006954:	dc800715 	stw	r18,28(sp)
 1006958:	dc400615 	stw	r17,24(sp)
 100695c:	dc000515 	stw	r16,20(sp)
 1006960:	d9000315 	stw	r4,12(sp)
 1006964:	d9400415 	stw	r5,16(sp)
 1006968:	10c07f16 	blt	r2,r3,1006b68 <quorem+0x23c>
 100696c:	1d3fffc4 	addi	r20,r3,-1
 1006970:	d8c00417 	ldw	r3,16(sp)
 1006974:	d9000317 	ldw	r4,12(sp)
 1006978:	a505883a 	add	r2,r20,r20
 100697c:	1085883a 	add	r2,r2,r2
 1006980:	1cc00504 	addi	r19,r3,20
 1006984:	25c00504 	addi	r23,r4,20
 1006988:	98ad883a 	add	r22,r19,r2
 100698c:	15c7883a 	add	r3,r2,r23
 1006990:	b1400017 	ldw	r5,0(r22)
 1006994:	19000017 	ldw	r4,0(r3)
 1006998:	d8c00015 	stw	r3,0(sp)
 100699c:	29400044 	addi	r5,r5,1
 10069a0:	d9000215 	stw	r4,8(sp)
 10069a4:	10026340 	call	1002634 <__udivsi3>
 10069a8:	1039883a 	mov	fp,r2
 10069ac:	10003d1e 	bne	r2,zero,1006aa4 <quorem+0x178>
 10069b0:	d9400417 	ldw	r5,16(sp)
 10069b4:	d9000317 	ldw	r4,12(sp)
 10069b8:	1009acc0 	call	1009acc <__mcmp>
 10069bc:	10002c16 	blt	r2,zero,1006a70 <quorem+0x144>
 10069c0:	e7000044 	addi	fp,fp,1
 10069c4:	b80f883a 	mov	r7,r23
 10069c8:	0011883a 	mov	r8,zero
 10069cc:	0009883a 	mov	r4,zero
 10069d0:	99400017 	ldw	r5,0(r19)
 10069d4:	38c00017 	ldw	r3,0(r7)
 10069d8:	9cc00104 	addi	r19,r19,4
 10069dc:	28bfffcc 	andi	r2,r5,65535
 10069e0:	2085883a 	add	r2,r4,r2
 10069e4:	11bfffcc 	andi	r6,r2,65535
 10069e8:	193fffcc 	andi	r4,r3,65535
 10069ec:	1004d43a 	srli	r2,r2,16
 10069f0:	280ad43a 	srli	r5,r5,16
 10069f4:	2189c83a 	sub	r4,r4,r6
 10069f8:	2209883a 	add	r4,r4,r8
 10069fc:	1806d43a 	srli	r3,r3,16
 1006a00:	288b883a 	add	r5,r5,r2
 1006a04:	200dd43a 	srai	r6,r4,16
 1006a08:	28bfffcc 	andi	r2,r5,65535
 1006a0c:	1887c83a 	sub	r3,r3,r2
 1006a10:	1987883a 	add	r3,r3,r6
 1006a14:	3900000d 	sth	r4,0(r7)
 1006a18:	38c0008d 	sth	r3,2(r7)
 1006a1c:	2808d43a 	srli	r4,r5,16
 1006a20:	39c00104 	addi	r7,r7,4
 1006a24:	1811d43a 	srai	r8,r3,16
 1006a28:	b4ffe92e 	bgeu	r22,r19,10069d0 <quorem+0xa4>
 1006a2c:	a505883a 	add	r2,r20,r20
 1006a30:	1085883a 	add	r2,r2,r2
 1006a34:	b885883a 	add	r2,r23,r2
 1006a38:	10c00017 	ldw	r3,0(r2)
 1006a3c:	18000c1e 	bne	r3,zero,1006a70 <quorem+0x144>
 1006a40:	113fff04 	addi	r4,r2,-4
 1006a44:	b900082e 	bgeu	r23,r4,1006a68 <quorem+0x13c>
 1006a48:	10bfff17 	ldw	r2,-4(r2)
 1006a4c:	10000326 	beq	r2,zero,1006a5c <quorem+0x130>
 1006a50:	00000506 	br	1006a68 <quorem+0x13c>
 1006a54:	20800017 	ldw	r2,0(r4)
 1006a58:	1000031e 	bne	r2,zero,1006a68 <quorem+0x13c>
 1006a5c:	213fff04 	addi	r4,r4,-4
 1006a60:	a53fffc4 	addi	r20,r20,-1
 1006a64:	b93ffb36 	bltu	r23,r4,1006a54 <quorem+0x128>
 1006a68:	d9000317 	ldw	r4,12(sp)
 1006a6c:	25000415 	stw	r20,16(r4)
 1006a70:	e005883a 	mov	r2,fp
 1006a74:	dfc00e17 	ldw	ra,56(sp)
 1006a78:	df000d17 	ldw	fp,52(sp)
 1006a7c:	ddc00c17 	ldw	r23,48(sp)
 1006a80:	dd800b17 	ldw	r22,44(sp)
 1006a84:	dd400a17 	ldw	r21,40(sp)
 1006a88:	dd000917 	ldw	r20,36(sp)
 1006a8c:	dcc00817 	ldw	r19,32(sp)
 1006a90:	dc800717 	ldw	r18,28(sp)
 1006a94:	dc400617 	ldw	r17,24(sp)
 1006a98:	dc000517 	ldw	r16,20(sp)
 1006a9c:	dec00f04 	addi	sp,sp,60
 1006aa0:	f800283a 	ret
 1006aa4:	b823883a 	mov	r17,r23
 1006aa8:	9825883a 	mov	r18,r19
 1006aac:	d8000115 	stw	zero,4(sp)
 1006ab0:	002b883a 	mov	r21,zero
 1006ab4:	94000017 	ldw	r16,0(r18)
 1006ab8:	e009883a 	mov	r4,fp
 1006abc:	94800104 	addi	r18,r18,4
 1006ac0:	817fffcc 	andi	r5,r16,65535
 1006ac4:	10026440 	call	1002644 <__mulsi3>
 1006ac8:	800ad43a 	srli	r5,r16,16
 1006acc:	e009883a 	mov	r4,fp
 1006ad0:	a8a1883a 	add	r16,r21,r2
 1006ad4:	10026440 	call	1002644 <__mulsi3>
 1006ad8:	89000017 	ldw	r4,0(r17)
 1006adc:	80ffffcc 	andi	r3,r16,65535
 1006ae0:	8020d43a 	srli	r16,r16,16
 1006ae4:	217fffcc 	andi	r5,r4,65535
 1006ae8:	28cbc83a 	sub	r5,r5,r3
 1006aec:	d8c00117 	ldw	r3,4(sp)
 1006af0:	2008d43a 	srli	r4,r4,16
 1006af4:	1405883a 	add	r2,r2,r16
 1006af8:	28cb883a 	add	r5,r5,r3
 1006afc:	280dd43a 	srai	r6,r5,16
 1006b00:	10ffffcc 	andi	r3,r2,65535
 1006b04:	20c9c83a 	sub	r4,r4,r3
 1006b08:	2189883a 	add	r4,r4,r6
 1006b0c:	8900008d 	sth	r4,2(r17)
 1006b10:	2009d43a 	srai	r4,r4,16
 1006b14:	8940000d 	sth	r5,0(r17)
 1006b18:	102ad43a 	srli	r21,r2,16
 1006b1c:	8c400104 	addi	r17,r17,4
 1006b20:	d9000115 	stw	r4,4(sp)
 1006b24:	b4bfe32e 	bgeu	r22,r18,1006ab4 <quorem+0x188>
 1006b28:	d9000217 	ldw	r4,8(sp)
 1006b2c:	203fa01e 	bne	r4,zero,10069b0 <quorem+0x84>
 1006b30:	d8800017 	ldw	r2,0(sp)
 1006b34:	10ffff04 	addi	r3,r2,-4
 1006b38:	b8c0082e 	bgeu	r23,r3,1006b5c <quorem+0x230>
 1006b3c:	10bfff17 	ldw	r2,-4(r2)
 1006b40:	10000326 	beq	r2,zero,1006b50 <quorem+0x224>
 1006b44:	00000506 	br	1006b5c <quorem+0x230>
 1006b48:	18800017 	ldw	r2,0(r3)
 1006b4c:	1000031e 	bne	r2,zero,1006b5c <quorem+0x230>
 1006b50:	18ffff04 	addi	r3,r3,-4
 1006b54:	a53fffc4 	addi	r20,r20,-1
 1006b58:	b8fffb36 	bltu	r23,r3,1006b48 <quorem+0x21c>
 1006b5c:	d8c00317 	ldw	r3,12(sp)
 1006b60:	1d000415 	stw	r20,16(r3)
 1006b64:	003f9206 	br	10069b0 <quorem+0x84>
 1006b68:	0005883a 	mov	r2,zero
 1006b6c:	003fc106 	br	1006a74 <quorem+0x148>

01006b70 <_dtoa_r>:
 1006b70:	22001017 	ldw	r8,64(r4)
 1006b74:	deffda04 	addi	sp,sp,-152
 1006b78:	dd402115 	stw	r21,132(sp)
 1006b7c:	dd002015 	stw	r20,128(sp)
 1006b80:	dc801e15 	stw	r18,120(sp)
 1006b84:	dc401d15 	stw	r17,116(sp)
 1006b88:	dfc02515 	stw	ra,148(sp)
 1006b8c:	df002415 	stw	fp,144(sp)
 1006b90:	ddc02315 	stw	r23,140(sp)
 1006b94:	dd802215 	stw	r22,136(sp)
 1006b98:	dcc01f15 	stw	r19,124(sp)
 1006b9c:	dc001c15 	stw	r16,112(sp)
 1006ba0:	d9001615 	stw	r4,88(sp)
 1006ba4:	3023883a 	mov	r17,r6
 1006ba8:	2829883a 	mov	r20,r5
 1006bac:	d9c01715 	stw	r7,92(sp)
 1006bb0:	dc802817 	ldw	r18,160(sp)
 1006bb4:	302b883a 	mov	r21,r6
 1006bb8:	40000a26 	beq	r8,zero,1006be4 <_dtoa_r+0x74>
 1006bbc:	20801117 	ldw	r2,68(r4)
 1006bc0:	400b883a 	mov	r5,r8
 1006bc4:	40800115 	stw	r2,4(r8)
 1006bc8:	20c01117 	ldw	r3,68(r4)
 1006bcc:	00800044 	movi	r2,1
 1006bd0:	10c4983a 	sll	r2,r2,r3
 1006bd4:	40800215 	stw	r2,8(r8)
 1006bd8:	10099700 	call	1009970 <_Bfree>
 1006bdc:	d8c01617 	ldw	r3,88(sp)
 1006be0:	18001015 	stw	zero,64(r3)
 1006be4:	8800a316 	blt	r17,zero,1006e74 <_dtoa_r+0x304>
 1006be8:	90000015 	stw	zero,0(r18)
 1006bec:	a8dffc2c 	andhi	r3,r21,32752
 1006bf0:	009ffc34 	movhi	r2,32752
 1006bf4:	18809126 	beq	r3,r2,1006e3c <_dtoa_r+0x2cc>
 1006bf8:	000d883a 	mov	r6,zero
 1006bfc:	000f883a 	mov	r7,zero
 1006c00:	a009883a 	mov	r4,r20
 1006c04:	a80b883a 	mov	r5,r21
 1006c08:	dd001215 	stw	r20,72(sp)
 1006c0c:	dd401315 	stw	r21,76(sp)
 1006c10:	10109fc0 	call	10109fc <__nedf2>
 1006c14:	1000171e 	bne	r2,zero,1006c74 <_dtoa_r+0x104>
 1006c18:	d9802717 	ldw	r6,156(sp)
 1006c1c:	00800044 	movi	r2,1
 1006c20:	30800015 	stw	r2,0(r6)
 1006c24:	d8802917 	ldw	r2,164(sp)
 1006c28:	10029b26 	beq	r2,zero,1007698 <_dtoa_r+0xb28>
 1006c2c:	d9002917 	ldw	r4,164(sp)
 1006c30:	008040b4 	movhi	r2,258
 1006c34:	10b19544 	addi	r2,r2,-14763
 1006c38:	10ffffc4 	addi	r3,r2,-1
 1006c3c:	20800015 	stw	r2,0(r4)
 1006c40:	1805883a 	mov	r2,r3
 1006c44:	dfc02517 	ldw	ra,148(sp)
 1006c48:	df002417 	ldw	fp,144(sp)
 1006c4c:	ddc02317 	ldw	r23,140(sp)
 1006c50:	dd802217 	ldw	r22,136(sp)
 1006c54:	dd402117 	ldw	r21,132(sp)
 1006c58:	dd002017 	ldw	r20,128(sp)
 1006c5c:	dcc01f17 	ldw	r19,124(sp)
 1006c60:	dc801e17 	ldw	r18,120(sp)
 1006c64:	dc401d17 	ldw	r17,116(sp)
 1006c68:	dc001c17 	ldw	r16,112(sp)
 1006c6c:	dec02604 	addi	sp,sp,152
 1006c70:	f800283a 	ret
 1006c74:	d9001617 	ldw	r4,88(sp)
 1006c78:	d9401217 	ldw	r5,72(sp)
 1006c7c:	d8800104 	addi	r2,sp,4
 1006c80:	a80d883a 	mov	r6,r21
 1006c84:	d9c00204 	addi	r7,sp,8
 1006c88:	d8800015 	stw	r2,0(sp)
 1006c8c:	1009fac0 	call	1009fac <__d2b>
 1006c90:	d8800715 	stw	r2,28(sp)
 1006c94:	a804d53a 	srli	r2,r21,20
 1006c98:	1101ffcc 	andi	r4,r2,2047
 1006c9c:	20008626 	beq	r4,zero,1006eb8 <_dtoa_r+0x348>
 1006ca0:	d8c01217 	ldw	r3,72(sp)
 1006ca4:	00800434 	movhi	r2,16
 1006ca8:	10bfffc4 	addi	r2,r2,-1
 1006cac:	ddc00117 	ldw	r23,4(sp)
 1006cb0:	a884703a 	and	r2,r21,r2
 1006cb4:	1811883a 	mov	r8,r3
 1006cb8:	124ffc34 	orhi	r9,r2,16368
 1006cbc:	25bf0044 	addi	r22,r4,-1023
 1006cc0:	d8000815 	stw	zero,32(sp)
 1006cc4:	0005883a 	mov	r2,zero
 1006cc8:	00cffe34 	movhi	r3,16376
 1006ccc:	480b883a 	mov	r5,r9
 1006cd0:	4009883a 	mov	r4,r8
 1006cd4:	180f883a 	mov	r7,r3
 1006cd8:	100d883a 	mov	r6,r2
 1006cdc:	10102640 	call	1010264 <__subdf3>
 1006ce0:	0218dbf4 	movhi	r8,25455
 1006ce4:	4210d844 	addi	r8,r8,17249
 1006ce8:	024ff4f4 	movhi	r9,16339
 1006cec:	4a61e9c4 	addi	r9,r9,-30809
 1006cf0:	480f883a 	mov	r7,r9
 1006cf4:	400d883a 	mov	r6,r8
 1006cf8:	180b883a 	mov	r5,r3
 1006cfc:	1009883a 	mov	r4,r2
 1006d00:	10103580 	call	1010358 <__muldf3>
 1006d04:	0222d874 	movhi	r8,35681
 1006d08:	42322cc4 	addi	r8,r8,-14157
 1006d0c:	024ff1f4 	movhi	r9,16327
 1006d10:	4a628a04 	addi	r9,r9,-30168
 1006d14:	480f883a 	mov	r7,r9
 1006d18:	400d883a 	mov	r6,r8
 1006d1c:	180b883a 	mov	r5,r3
 1006d20:	1009883a 	mov	r4,r2
 1006d24:	10102e40 	call	10102e4 <__adddf3>
 1006d28:	b009883a 	mov	r4,r22
 1006d2c:	1021883a 	mov	r16,r2
 1006d30:	1823883a 	mov	r17,r3
 1006d34:	1010ca40 	call	1010ca4 <__floatsidf>
 1006d38:	021427f4 	movhi	r8,20639
 1006d3c:	421e7ec4 	addi	r8,r8,31227
 1006d40:	024ff4f4 	movhi	r9,16339
 1006d44:	4a5104c4 	addi	r9,r9,17427
 1006d48:	480f883a 	mov	r7,r9
 1006d4c:	400d883a 	mov	r6,r8
 1006d50:	180b883a 	mov	r5,r3
 1006d54:	1009883a 	mov	r4,r2
 1006d58:	10103580 	call	1010358 <__muldf3>
 1006d5c:	180f883a 	mov	r7,r3
 1006d60:	880b883a 	mov	r5,r17
 1006d64:	100d883a 	mov	r6,r2
 1006d68:	8009883a 	mov	r4,r16
 1006d6c:	10102e40 	call	10102e4 <__adddf3>
 1006d70:	1009883a 	mov	r4,r2
 1006d74:	180b883a 	mov	r5,r3
 1006d78:	1021883a 	mov	r16,r2
 1006d7c:	1823883a 	mov	r17,r3
 1006d80:	1010d9c0 	call	1010d9c <__fixdfsi>
 1006d84:	000d883a 	mov	r6,zero
 1006d88:	000f883a 	mov	r7,zero
 1006d8c:	8009883a 	mov	r4,r16
 1006d90:	880b883a 	mov	r5,r17
 1006d94:	d8800d15 	stw	r2,52(sp)
 1006d98:	1010b940 	call	1010b94 <__ltdf2>
 1006d9c:	10031716 	blt	r2,zero,10079fc <_dtoa_r+0xe8c>
 1006da0:	d8c00d17 	ldw	r3,52(sp)
 1006da4:	00800584 	movi	r2,22
 1006da8:	10c1482e 	bgeu	r2,r3,10072cc <_dtoa_r+0x75c>
 1006dac:	01000044 	movi	r4,1
 1006db0:	d9000c15 	stw	r4,48(sp)
 1006db4:	bd85c83a 	sub	r2,r23,r22
 1006db8:	11bfffc4 	addi	r6,r2,-1
 1006dbc:	30030b16 	blt	r6,zero,10079ec <_dtoa_r+0xe7c>
 1006dc0:	d9800a15 	stw	r6,40(sp)
 1006dc4:	d8001115 	stw	zero,68(sp)
 1006dc8:	d8c00d17 	ldw	r3,52(sp)
 1006dcc:	1802ff16 	blt	r3,zero,10079cc <_dtoa_r+0xe5c>
 1006dd0:	d9000a17 	ldw	r4,40(sp)
 1006dd4:	d8c00915 	stw	r3,36(sp)
 1006dd8:	d8001015 	stw	zero,64(sp)
 1006ddc:	20c9883a 	add	r4,r4,r3
 1006de0:	d9000a15 	stw	r4,40(sp)
 1006de4:	d9001717 	ldw	r4,92(sp)
 1006de8:	00800244 	movi	r2,9
 1006dec:	11004636 	bltu	r2,r4,1006f08 <_dtoa_r+0x398>
 1006df0:	00800144 	movi	r2,5
 1006df4:	11020416 	blt	r2,r4,1007608 <_dtoa_r+0xa98>
 1006df8:	04400044 	movi	r17,1
 1006dfc:	d8c01717 	ldw	r3,92(sp)
 1006e00:	00800144 	movi	r2,5
 1006e04:	10c1ed36 	bltu	r2,r3,10075bc <_dtoa_r+0xa4c>
 1006e08:	18c5883a 	add	r2,r3,r3
 1006e0c:	1085883a 	add	r2,r2,r2
 1006e10:	00c04034 	movhi	r3,256
 1006e14:	18db8904 	addi	r3,r3,28196
 1006e18:	10c5883a 	add	r2,r2,r3
 1006e1c:	11000017 	ldw	r4,0(r2)
 1006e20:	2000683a 	jmp	r4
 1006e24:	01006f10 	cmplti	r4,zero,444
 1006e28:	01006f10 	cmplti	r4,zero,444
 1006e2c:	01007910 	cmplti	r4,zero,484
 1006e30:	010078e8 	cmpgeui	r4,zero,483
 1006e34:	0100792c 	andhi	r4,zero,484
 1006e38:	01007938 	rdprs	r4,zero,484
 1006e3c:	d9002717 	ldw	r4,156(sp)
 1006e40:	0089c3c4 	movi	r2,9999
 1006e44:	20800015 	stw	r2,0(r4)
 1006e48:	a0001026 	beq	r20,zero,1006e8c <_dtoa_r+0x31c>
 1006e4c:	00c040b4 	movhi	r3,258
 1006e50:	18f24c04 	addi	r3,r3,-14032
 1006e54:	d9802917 	ldw	r6,164(sp)
 1006e58:	303f7926 	beq	r6,zero,1006c40 <_dtoa_r+0xd0>
 1006e5c:	188000c7 	ldb	r2,3(r3)
 1006e60:	190000c4 	addi	r4,r3,3
 1006e64:	1000101e 	bne	r2,zero,1006ea8 <_dtoa_r+0x338>
 1006e68:	d8802917 	ldw	r2,164(sp)
 1006e6c:	11000015 	stw	r4,0(r2)
 1006e70:	003f7306 	br	1006c40 <_dtoa_r+0xd0>
 1006e74:	00a00034 	movhi	r2,32768
 1006e78:	10bfffc4 	addi	r2,r2,-1
 1006e7c:	00c00044 	movi	r3,1
 1006e80:	88aa703a 	and	r21,r17,r2
 1006e84:	90c00015 	stw	r3,0(r18)
 1006e88:	003f5806 	br	1006bec <_dtoa_r+0x7c>
 1006e8c:	00800434 	movhi	r2,16
 1006e90:	10bfffc4 	addi	r2,r2,-1
 1006e94:	a884703a 	and	r2,r21,r2
 1006e98:	103fec1e 	bne	r2,zero,1006e4c <_dtoa_r+0x2dc>
 1006e9c:	00c040b4 	movhi	r3,258
 1006ea0:	18f24904 	addi	r3,r3,-14044
 1006ea4:	003feb06 	br	1006e54 <_dtoa_r+0x2e4>
 1006ea8:	d8802917 	ldw	r2,164(sp)
 1006eac:	19000204 	addi	r4,r3,8
 1006eb0:	11000015 	stw	r4,0(r2)
 1006eb4:	003f6206 	br	1006c40 <_dtoa_r+0xd0>
 1006eb8:	ddc00117 	ldw	r23,4(sp)
 1006ebc:	d8800217 	ldw	r2,8(sp)
 1006ec0:	01000804 	movi	r4,32
 1006ec4:	b8c10c84 	addi	r3,r23,1074
 1006ec8:	18a3883a 	add	r17,r3,r2
 1006ecc:	2441b80e 	bge	r4,r17,10075b0 <_dtoa_r+0xa40>
 1006ed0:	00c01004 	movi	r3,64
 1006ed4:	1c47c83a 	sub	r3,r3,r17
 1006ed8:	88bff804 	addi	r2,r17,-32
 1006edc:	a8c6983a 	sll	r3,r21,r3
 1006ee0:	a084d83a 	srl	r2,r20,r2
 1006ee4:	1888b03a 	or	r4,r3,r2
 1006ee8:	1010ee80 	call	1010ee8 <__floatunsidf>
 1006eec:	1011883a 	mov	r8,r2
 1006ef0:	00bf8434 	movhi	r2,65040
 1006ef4:	01000044 	movi	r4,1
 1006ef8:	10d3883a 	add	r9,r2,r3
 1006efc:	8dbef344 	addi	r22,r17,-1075
 1006f00:	d9000815 	stw	r4,32(sp)
 1006f04:	003f6f06 	br	1006cc4 <_dtoa_r+0x154>
 1006f08:	d8001715 	stw	zero,92(sp)
 1006f0c:	04400044 	movi	r17,1
 1006f10:	00bfffc4 	movi	r2,-1
 1006f14:	00c00044 	movi	r3,1
 1006f18:	d8800e15 	stw	r2,56(sp)
 1006f1c:	d8002615 	stw	zero,152(sp)
 1006f20:	d8800f15 	stw	r2,60(sp)
 1006f24:	d8c00b15 	stw	r3,44(sp)
 1006f28:	1021883a 	mov	r16,r2
 1006f2c:	d8801617 	ldw	r2,88(sp)
 1006f30:	10001115 	stw	zero,68(r2)
 1006f34:	d8801617 	ldw	r2,88(sp)
 1006f38:	11401117 	ldw	r5,68(r2)
 1006f3c:	1009883a 	mov	r4,r2
 1006f40:	1009ef00 	call	1009ef0 <_Balloc>
 1006f44:	d8c01617 	ldw	r3,88(sp)
 1006f48:	d8800515 	stw	r2,20(sp)
 1006f4c:	18801015 	stw	r2,64(r3)
 1006f50:	00800384 	movi	r2,14
 1006f54:	14006836 	bltu	r2,r16,10070f8 <_dtoa_r+0x588>
 1006f58:	8805003a 	cmpeq	r2,r17,zero
 1006f5c:	1000661e 	bne	r2,zero,10070f8 <_dtoa_r+0x588>
 1006f60:	d9000d17 	ldw	r4,52(sp)
 1006f64:	0102300e 	bge	zero,r4,1007828 <_dtoa_r+0xcb8>
 1006f68:	208003cc 	andi	r2,r4,15
 1006f6c:	100490fa 	slli	r2,r2,3
 1006f70:	2025d13a 	srai	r18,r4,4
 1006f74:	00c040b4 	movhi	r3,258
 1006f78:	18f25e04 	addi	r3,r3,-13960
 1006f7c:	10c5883a 	add	r2,r2,r3
 1006f80:	90c0040c 	andi	r3,r18,16
 1006f84:	14000017 	ldw	r16,0(r2)
 1006f88:	14400117 	ldw	r17,4(r2)
 1006f8c:	18036a1e 	bne	r3,zero,1007d38 <_dtoa_r+0x11c8>
 1006f90:	05800084 	movi	r22,2
 1006f94:	90001026 	beq	r18,zero,1006fd8 <_dtoa_r+0x468>
 1006f98:	04c040b4 	movhi	r19,258
 1006f9c:	9cf29004 	addi	r19,r19,-13760
 1006fa0:	9080004c 	andi	r2,r18,1
 1006fa4:	1005003a 	cmpeq	r2,r2,zero
 1006fa8:	1000081e 	bne	r2,zero,1006fcc <_dtoa_r+0x45c>
 1006fac:	99800017 	ldw	r6,0(r19)
 1006fb0:	99c00117 	ldw	r7,4(r19)
 1006fb4:	880b883a 	mov	r5,r17
 1006fb8:	8009883a 	mov	r4,r16
 1006fbc:	10103580 	call	1010358 <__muldf3>
 1006fc0:	1021883a 	mov	r16,r2
 1006fc4:	b5800044 	addi	r22,r22,1
 1006fc8:	1823883a 	mov	r17,r3
 1006fcc:	9025d07a 	srai	r18,r18,1
 1006fd0:	9cc00204 	addi	r19,r19,8
 1006fd4:	903ff21e 	bne	r18,zero,1006fa0 <_dtoa_r+0x430>
 1006fd8:	a80b883a 	mov	r5,r21
 1006fdc:	a009883a 	mov	r4,r20
 1006fe0:	880f883a 	mov	r7,r17
 1006fe4:	800d883a 	mov	r6,r16
 1006fe8:	101071c0 	call	101071c <__divdf3>
 1006fec:	1029883a 	mov	r20,r2
 1006ff0:	182b883a 	mov	r21,r3
 1006ff4:	d8c00c17 	ldw	r3,48(sp)
 1006ff8:	1805003a 	cmpeq	r2,r3,zero
 1006ffc:	1000081e 	bne	r2,zero,1007020 <_dtoa_r+0x4b0>
 1007000:	0005883a 	mov	r2,zero
 1007004:	00cffc34 	movhi	r3,16368
 1007008:	180f883a 	mov	r7,r3
 100700c:	a009883a 	mov	r4,r20
 1007010:	a80b883a 	mov	r5,r21
 1007014:	100d883a 	mov	r6,r2
 1007018:	1010b940 	call	1010b94 <__ltdf2>
 100701c:	1003fe16 	blt	r2,zero,1008018 <_dtoa_r+0x14a8>
 1007020:	b009883a 	mov	r4,r22
 1007024:	1010ca40 	call	1010ca4 <__floatsidf>
 1007028:	180b883a 	mov	r5,r3
 100702c:	1009883a 	mov	r4,r2
 1007030:	a00d883a 	mov	r6,r20
 1007034:	a80f883a 	mov	r7,r21
 1007038:	10103580 	call	1010358 <__muldf3>
 100703c:	0011883a 	mov	r8,zero
 1007040:	02500734 	movhi	r9,16412
 1007044:	1009883a 	mov	r4,r2
 1007048:	180b883a 	mov	r5,r3
 100704c:	480f883a 	mov	r7,r9
 1007050:	400d883a 	mov	r6,r8
 1007054:	10102e40 	call	10102e4 <__adddf3>
 1007058:	d9000f17 	ldw	r4,60(sp)
 100705c:	102d883a 	mov	r22,r2
 1007060:	00bf3034 	movhi	r2,64704
 1007064:	18b9883a 	add	fp,r3,r2
 1007068:	e02f883a 	mov	r23,fp
 100706c:	20028f1e 	bne	r4,zero,1007aac <_dtoa_r+0xf3c>
 1007070:	0005883a 	mov	r2,zero
 1007074:	00d00534 	movhi	r3,16404
 1007078:	a009883a 	mov	r4,r20
 100707c:	a80b883a 	mov	r5,r21
 1007080:	180f883a 	mov	r7,r3
 1007084:	100d883a 	mov	r6,r2
 1007088:	10102640 	call	1010264 <__subdf3>
 100708c:	1009883a 	mov	r4,r2
 1007090:	e00f883a 	mov	r7,fp
 1007094:	180b883a 	mov	r5,r3
 1007098:	b00d883a 	mov	r6,r22
 100709c:	1025883a 	mov	r18,r2
 10070a0:	1827883a 	mov	r19,r3
 10070a4:	1010a840 	call	1010a84 <__gtdf2>
 10070a8:	00834f16 	blt	zero,r2,1007de8 <_dtoa_r+0x1278>
 10070ac:	e0e0003c 	xorhi	r3,fp,32768
 10070b0:	9009883a 	mov	r4,r18
 10070b4:	980b883a 	mov	r5,r19
 10070b8:	180f883a 	mov	r7,r3
 10070bc:	b00d883a 	mov	r6,r22
 10070c0:	1010b940 	call	1010b94 <__ltdf2>
 10070c4:	1000080e 	bge	r2,zero,10070e8 <_dtoa_r+0x578>
 10070c8:	0027883a 	mov	r19,zero
 10070cc:	0025883a 	mov	r18,zero
 10070d0:	d8802617 	ldw	r2,152(sp)
 10070d4:	df000517 	ldw	fp,20(sp)
 10070d8:	d8000615 	stw	zero,24(sp)
 10070dc:	0084303a 	nor	r2,zero,r2
 10070e0:	d8800d15 	stw	r2,52(sp)
 10070e4:	00019b06 	br	1007754 <_dtoa_r+0xbe4>
 10070e8:	d9801217 	ldw	r6,72(sp)
 10070ec:	d8801317 	ldw	r2,76(sp)
 10070f0:	3029883a 	mov	r20,r6
 10070f4:	102b883a 	mov	r21,r2
 10070f8:	d8c00217 	ldw	r3,8(sp)
 10070fc:	18008516 	blt	r3,zero,1007314 <_dtoa_r+0x7a4>
 1007100:	d9000d17 	ldw	r4,52(sp)
 1007104:	00800384 	movi	r2,14
 1007108:	11008216 	blt	r2,r4,1007314 <_dtoa_r+0x7a4>
 100710c:	200490fa 	slli	r2,r4,3
 1007110:	d9802617 	ldw	r6,152(sp)
 1007114:	00c040b4 	movhi	r3,258
 1007118:	18f25e04 	addi	r3,r3,-13960
 100711c:	10c5883a 	add	r2,r2,r3
 1007120:	14800017 	ldw	r18,0(r2)
 1007124:	14c00117 	ldw	r19,4(r2)
 1007128:	30031e16 	blt	r6,zero,1007da4 <_dtoa_r+0x1234>
 100712c:	d9000517 	ldw	r4,20(sp)
 1007130:	d8c00f17 	ldw	r3,60(sp)
 1007134:	a823883a 	mov	r17,r21
 1007138:	a021883a 	mov	r16,r20
 100713c:	192b883a 	add	r21,r3,r4
 1007140:	2039883a 	mov	fp,r4
 1007144:	00000f06 	br	1007184 <_dtoa_r+0x614>
 1007148:	0005883a 	mov	r2,zero
 100714c:	00d00934 	movhi	r3,16420
 1007150:	5009883a 	mov	r4,r10
 1007154:	580b883a 	mov	r5,r11
 1007158:	180f883a 	mov	r7,r3
 100715c:	100d883a 	mov	r6,r2
 1007160:	10103580 	call	1010358 <__muldf3>
 1007164:	180b883a 	mov	r5,r3
 1007168:	000d883a 	mov	r6,zero
 100716c:	000f883a 	mov	r7,zero
 1007170:	1009883a 	mov	r4,r2
 1007174:	1021883a 	mov	r16,r2
 1007178:	1823883a 	mov	r17,r3
 100717c:	10109fc0 	call	10109fc <__nedf2>
 1007180:	10004526 	beq	r2,zero,1007298 <_dtoa_r+0x728>
 1007184:	900d883a 	mov	r6,r18
 1007188:	980f883a 	mov	r7,r19
 100718c:	8009883a 	mov	r4,r16
 1007190:	880b883a 	mov	r5,r17
 1007194:	101071c0 	call	101071c <__divdf3>
 1007198:	180b883a 	mov	r5,r3
 100719c:	1009883a 	mov	r4,r2
 10071a0:	1010d9c0 	call	1010d9c <__fixdfsi>
 10071a4:	1009883a 	mov	r4,r2
 10071a8:	1029883a 	mov	r20,r2
 10071ac:	1010ca40 	call	1010ca4 <__floatsidf>
 10071b0:	180f883a 	mov	r7,r3
 10071b4:	9009883a 	mov	r4,r18
 10071b8:	980b883a 	mov	r5,r19
 10071bc:	100d883a 	mov	r6,r2
 10071c0:	10103580 	call	1010358 <__muldf3>
 10071c4:	180f883a 	mov	r7,r3
 10071c8:	880b883a 	mov	r5,r17
 10071cc:	8009883a 	mov	r4,r16
 10071d0:	100d883a 	mov	r6,r2
 10071d4:	10102640 	call	1010264 <__subdf3>
 10071d8:	1015883a 	mov	r10,r2
 10071dc:	a0800c04 	addi	r2,r20,48
 10071e0:	e0800005 	stb	r2,0(fp)
 10071e4:	e7000044 	addi	fp,fp,1
 10071e8:	1817883a 	mov	r11,r3
 10071ec:	e57fd61e 	bne	fp,r21,1007148 <_dtoa_r+0x5d8>
 10071f0:	500d883a 	mov	r6,r10
 10071f4:	180f883a 	mov	r7,r3
 10071f8:	5009883a 	mov	r4,r10
 10071fc:	180b883a 	mov	r5,r3
 1007200:	10102e40 	call	10102e4 <__adddf3>
 1007204:	100d883a 	mov	r6,r2
 1007208:	9009883a 	mov	r4,r18
 100720c:	980b883a 	mov	r5,r19
 1007210:	180f883a 	mov	r7,r3
 1007214:	1021883a 	mov	r16,r2
 1007218:	1823883a 	mov	r17,r3
 100721c:	1010b940 	call	1010b94 <__ltdf2>
 1007220:	10000816 	blt	r2,zero,1007244 <_dtoa_r+0x6d4>
 1007224:	980b883a 	mov	r5,r19
 1007228:	800d883a 	mov	r6,r16
 100722c:	880f883a 	mov	r7,r17
 1007230:	9009883a 	mov	r4,r18
 1007234:	10109740 	call	1010974 <__eqdf2>
 1007238:	1000171e 	bne	r2,zero,1007298 <_dtoa_r+0x728>
 100723c:	a080004c 	andi	r2,r20,1
 1007240:	10001526 	beq	r2,zero,1007298 <_dtoa_r+0x728>
 1007244:	d8800d17 	ldw	r2,52(sp)
 1007248:	d8800415 	stw	r2,16(sp)
 100724c:	e009883a 	mov	r4,fp
 1007250:	213fffc4 	addi	r4,r4,-1
 1007254:	20c00007 	ldb	r3,0(r4)
 1007258:	00800e44 	movi	r2,57
 100725c:	1880081e 	bne	r3,r2,1007280 <_dtoa_r+0x710>
 1007260:	d8800517 	ldw	r2,20(sp)
 1007264:	113ffa1e 	bne	r2,r4,1007250 <_dtoa_r+0x6e0>
 1007268:	d8c00417 	ldw	r3,16(sp)
 100726c:	d9800517 	ldw	r6,20(sp)
 1007270:	00800c04 	movi	r2,48
 1007274:	18c00044 	addi	r3,r3,1
 1007278:	d8c00415 	stw	r3,16(sp)
 100727c:	30800005 	stb	r2,0(r6)
 1007280:	20800003 	ldbu	r2,0(r4)
 1007284:	d8c00417 	ldw	r3,16(sp)
 1007288:	27000044 	addi	fp,r4,1
 100728c:	10800044 	addi	r2,r2,1
 1007290:	d8c00d15 	stw	r3,52(sp)
 1007294:	20800005 	stb	r2,0(r4)
 1007298:	d9001617 	ldw	r4,88(sp)
 100729c:	d9400717 	ldw	r5,28(sp)
 10072a0:	10099700 	call	1009970 <_Bfree>
 10072a4:	e0000005 	stb	zero,0(fp)
 10072a8:	d9800d17 	ldw	r6,52(sp)
 10072ac:	d8c02717 	ldw	r3,156(sp)
 10072b0:	d9002917 	ldw	r4,164(sp)
 10072b4:	30800044 	addi	r2,r6,1
 10072b8:	18800015 	stw	r2,0(r3)
 10072bc:	20029c26 	beq	r4,zero,1007d30 <_dtoa_r+0x11c0>
 10072c0:	d8c00517 	ldw	r3,20(sp)
 10072c4:	27000015 	stw	fp,0(r4)
 10072c8:	003e5d06 	br	1006c40 <_dtoa_r+0xd0>
 10072cc:	d9800d17 	ldw	r6,52(sp)
 10072d0:	00c040b4 	movhi	r3,258
 10072d4:	18f25e04 	addi	r3,r3,-13960
 10072d8:	d9001217 	ldw	r4,72(sp)
 10072dc:	300490fa 	slli	r2,r6,3
 10072e0:	d9401317 	ldw	r5,76(sp)
 10072e4:	10c5883a 	add	r2,r2,r3
 10072e8:	12000017 	ldw	r8,0(r2)
 10072ec:	12400117 	ldw	r9,4(r2)
 10072f0:	400d883a 	mov	r6,r8
 10072f4:	480f883a 	mov	r7,r9
 10072f8:	1010b940 	call	1010b94 <__ltdf2>
 10072fc:	1000030e 	bge	r2,zero,100730c <_dtoa_r+0x79c>
 1007300:	d8800d17 	ldw	r2,52(sp)
 1007304:	10bfffc4 	addi	r2,r2,-1
 1007308:	d8800d15 	stw	r2,52(sp)
 100730c:	d8000c15 	stw	zero,48(sp)
 1007310:	003ea806 	br	1006db4 <_dtoa_r+0x244>
 1007314:	d9000b17 	ldw	r4,44(sp)
 1007318:	202cc03a 	cmpne	r22,r4,zero
 100731c:	b000c71e 	bne	r22,zero,100763c <_dtoa_r+0xacc>
 1007320:	dc001117 	ldw	r16,68(sp)
 1007324:	dc801017 	ldw	r18,64(sp)
 1007328:	0027883a 	mov	r19,zero
 100732c:	04000b0e 	bge	zero,r16,100735c <_dtoa_r+0x7ec>
 1007330:	d8c00a17 	ldw	r3,40(sp)
 1007334:	00c0090e 	bge	zero,r3,100735c <_dtoa_r+0x7ec>
 1007338:	8005883a 	mov	r2,r16
 100733c:	1c011316 	blt	r3,r16,100778c <_dtoa_r+0xc1c>
 1007340:	d9000a17 	ldw	r4,40(sp)
 1007344:	d9801117 	ldw	r6,68(sp)
 1007348:	80a1c83a 	sub	r16,r16,r2
 100734c:	2089c83a 	sub	r4,r4,r2
 1007350:	308dc83a 	sub	r6,r6,r2
 1007354:	d9000a15 	stw	r4,40(sp)
 1007358:	d9801115 	stw	r6,68(sp)
 100735c:	d8801017 	ldw	r2,64(sp)
 1007360:	0080150e 	bge	zero,r2,10073b8 <_dtoa_r+0x848>
 1007364:	d8c00b17 	ldw	r3,44(sp)
 1007368:	1805003a 	cmpeq	r2,r3,zero
 100736c:	1001c91e 	bne	r2,zero,1007a94 <_dtoa_r+0xf24>
 1007370:	04800e0e 	bge	zero,r18,10073ac <_dtoa_r+0x83c>
 1007374:	d9001617 	ldw	r4,88(sp)
 1007378:	980b883a 	mov	r5,r19
 100737c:	900d883a 	mov	r6,r18
 1007380:	100a7bc0 	call	100a7bc <__pow5mult>
 1007384:	d9001617 	ldw	r4,88(sp)
 1007388:	d9800717 	ldw	r6,28(sp)
 100738c:	100b883a 	mov	r5,r2
 1007390:	1027883a 	mov	r19,r2
 1007394:	100a4000 	call	100a400 <__multiply>
 1007398:	d9001617 	ldw	r4,88(sp)
 100739c:	d9400717 	ldw	r5,28(sp)
 10073a0:	1023883a 	mov	r17,r2
 10073a4:	10099700 	call	1009970 <_Bfree>
 10073a8:	dc400715 	stw	r17,28(sp)
 10073ac:	d9001017 	ldw	r4,64(sp)
 10073b0:	248dc83a 	sub	r6,r4,r18
 10073b4:	30010e1e 	bne	r6,zero,10077f0 <_dtoa_r+0xc80>
 10073b8:	d9001617 	ldw	r4,88(sp)
 10073bc:	04400044 	movi	r17,1
 10073c0:	880b883a 	mov	r5,r17
 10073c4:	100a6540 	call	100a654 <__i2b>
 10073c8:	d9800917 	ldw	r6,36(sp)
 10073cc:	1025883a 	mov	r18,r2
 10073d0:	0180040e 	bge	zero,r6,10073e4 <_dtoa_r+0x874>
 10073d4:	d9001617 	ldw	r4,88(sp)
 10073d8:	100b883a 	mov	r5,r2
 10073dc:	100a7bc0 	call	100a7bc <__pow5mult>
 10073e0:	1025883a 	mov	r18,r2
 10073e4:	d8801717 	ldw	r2,92(sp)
 10073e8:	8880f30e 	bge	r17,r2,10077b8 <_dtoa_r+0xc48>
 10073ec:	0023883a 	mov	r17,zero
 10073f0:	d9800917 	ldw	r6,36(sp)
 10073f4:	30019e1e 	bne	r6,zero,1007a70 <_dtoa_r+0xf00>
 10073f8:	00c00044 	movi	r3,1
 10073fc:	d9000a17 	ldw	r4,40(sp)
 1007400:	20c5883a 	add	r2,r4,r3
 1007404:	10c007cc 	andi	r3,r2,31
 1007408:	1800841e 	bne	r3,zero,100761c <_dtoa_r+0xaac>
 100740c:	00800704 	movi	r2,28
 1007410:	d9000a17 	ldw	r4,40(sp)
 1007414:	d9801117 	ldw	r6,68(sp)
 1007418:	80a1883a 	add	r16,r16,r2
 100741c:	2089883a 	add	r4,r4,r2
 1007420:	308d883a 	add	r6,r6,r2
 1007424:	d9000a15 	stw	r4,40(sp)
 1007428:	d9801115 	stw	r6,68(sp)
 100742c:	d8801117 	ldw	r2,68(sp)
 1007430:	0080050e 	bge	zero,r2,1007448 <_dtoa_r+0x8d8>
 1007434:	d9400717 	ldw	r5,28(sp)
 1007438:	d9001617 	ldw	r4,88(sp)
 100743c:	100d883a 	mov	r6,r2
 1007440:	100a2b40 	call	100a2b4 <__lshift>
 1007444:	d8800715 	stw	r2,28(sp)
 1007448:	d8c00a17 	ldw	r3,40(sp)
 100744c:	00c0050e 	bge	zero,r3,1007464 <_dtoa_r+0x8f4>
 1007450:	d9001617 	ldw	r4,88(sp)
 1007454:	900b883a 	mov	r5,r18
 1007458:	180d883a 	mov	r6,r3
 100745c:	100a2b40 	call	100a2b4 <__lshift>
 1007460:	1025883a 	mov	r18,r2
 1007464:	d9000c17 	ldw	r4,48(sp)
 1007468:	2005003a 	cmpeq	r2,r4,zero
 100746c:	10016f26 	beq	r2,zero,1007a2c <_dtoa_r+0xebc>
 1007470:	d9000f17 	ldw	r4,60(sp)
 1007474:	0102170e 	bge	zero,r4,1007cd4 <_dtoa_r+0x1164>
 1007478:	d9800b17 	ldw	r6,44(sp)
 100747c:	3005003a 	cmpeq	r2,r6,zero
 1007480:	1000881e 	bne	r2,zero,10076a4 <_dtoa_r+0xb34>
 1007484:	0400050e 	bge	zero,r16,100749c <_dtoa_r+0x92c>
 1007488:	d9001617 	ldw	r4,88(sp)
 100748c:	980b883a 	mov	r5,r19
 1007490:	800d883a 	mov	r6,r16
 1007494:	100a2b40 	call	100a2b4 <__lshift>
 1007498:	1027883a 	mov	r19,r2
 100749c:	8804c03a 	cmpne	r2,r17,zero
 10074a0:	1002541e 	bne	r2,zero,1007df4 <_dtoa_r+0x1284>
 10074a4:	980b883a 	mov	r5,r19
 10074a8:	dd800517 	ldw	r22,20(sp)
 10074ac:	dcc00615 	stw	r19,24(sp)
 10074b0:	a700004c 	andi	fp,r20,1
 10074b4:	2827883a 	mov	r19,r5
 10074b8:	d9000717 	ldw	r4,28(sp)
 10074bc:	900b883a 	mov	r5,r18
 10074c0:	100692c0 	call	100692c <quorem>
 10074c4:	d9000717 	ldw	r4,28(sp)
 10074c8:	d9400617 	ldw	r5,24(sp)
 10074cc:	1023883a 	mov	r17,r2
 10074d0:	8dc00c04 	addi	r23,r17,48
 10074d4:	1009acc0 	call	1009acc <__mcmp>
 10074d8:	d9001617 	ldw	r4,88(sp)
 10074dc:	900b883a 	mov	r5,r18
 10074e0:	980d883a 	mov	r6,r19
 10074e4:	1029883a 	mov	r20,r2
 10074e8:	100a1280 	call	100a128 <__mdiff>
 10074ec:	102b883a 	mov	r21,r2
 10074f0:	10800317 	ldw	r2,12(r2)
 10074f4:	1001281e 	bne	r2,zero,1007998 <_dtoa_r+0xe28>
 10074f8:	d9000717 	ldw	r4,28(sp)
 10074fc:	a80b883a 	mov	r5,r21
 1007500:	1009acc0 	call	1009acc <__mcmp>
 1007504:	d9001617 	ldw	r4,88(sp)
 1007508:	1021883a 	mov	r16,r2
 100750c:	a80b883a 	mov	r5,r21
 1007510:	10099700 	call	1009970 <_Bfree>
 1007514:	8000041e 	bne	r16,zero,1007528 <_dtoa_r+0x9b8>
 1007518:	d8801717 	ldw	r2,92(sp)
 100751c:	1000021e 	bne	r2,zero,1007528 <_dtoa_r+0x9b8>
 1007520:	e004c03a 	cmpne	r2,fp,zero
 1007524:	10011726 	beq	r2,zero,1007984 <_dtoa_r+0xe14>
 1007528:	a0010616 	blt	r20,zero,1007944 <_dtoa_r+0xdd4>
 100752c:	a000041e 	bne	r20,zero,1007540 <_dtoa_r+0x9d0>
 1007530:	d8c01717 	ldw	r3,92(sp)
 1007534:	1800021e 	bne	r3,zero,1007540 <_dtoa_r+0x9d0>
 1007538:	e004c03a 	cmpne	r2,fp,zero
 100753c:	10010126 	beq	r2,zero,1007944 <_dtoa_r+0xdd4>
 1007540:	04023d16 	blt	zero,r16,1007e38 <_dtoa_r+0x12c8>
 1007544:	b5c00005 	stb	r23,0(r22)
 1007548:	d9800517 	ldw	r6,20(sp)
 100754c:	d9000f17 	ldw	r4,60(sp)
 1007550:	b5800044 	addi	r22,r22,1
 1007554:	3105883a 	add	r2,r6,r4
 1007558:	b0806526 	beq	r22,r2,10076f0 <_dtoa_r+0xb80>
 100755c:	d9400717 	ldw	r5,28(sp)
 1007560:	d9001617 	ldw	r4,88(sp)
 1007564:	01800284 	movi	r6,10
 1007568:	000f883a 	mov	r7,zero
 100756c:	100a6900 	call	100a690 <__multadd>
 1007570:	d8800715 	stw	r2,28(sp)
 1007574:	d8800617 	ldw	r2,24(sp)
 1007578:	14c10c26 	beq	r2,r19,10079ac <_dtoa_r+0xe3c>
 100757c:	d9400617 	ldw	r5,24(sp)
 1007580:	d9001617 	ldw	r4,88(sp)
 1007584:	01800284 	movi	r6,10
 1007588:	000f883a 	mov	r7,zero
 100758c:	100a6900 	call	100a690 <__multadd>
 1007590:	d9001617 	ldw	r4,88(sp)
 1007594:	980b883a 	mov	r5,r19
 1007598:	01800284 	movi	r6,10
 100759c:	000f883a 	mov	r7,zero
 10075a0:	d8800615 	stw	r2,24(sp)
 10075a4:	100a6900 	call	100a690 <__multadd>
 10075a8:	1027883a 	mov	r19,r2
 10075ac:	003fc206 	br	10074b8 <_dtoa_r+0x948>
 10075b0:	2445c83a 	sub	r2,r4,r17
 10075b4:	a088983a 	sll	r4,r20,r2
 10075b8:	003e4b06 	br	1006ee8 <_dtoa_r+0x378>
 10075bc:	01bfffc4 	movi	r6,-1
 10075c0:	00800044 	movi	r2,1
 10075c4:	d9800e15 	stw	r6,56(sp)
 10075c8:	d9800f15 	stw	r6,60(sp)
 10075cc:	d8800b15 	stw	r2,44(sp)
 10075d0:	d8c01617 	ldw	r3,88(sp)
 10075d4:	008005c4 	movi	r2,23
 10075d8:	18001115 	stw	zero,68(r3)
 10075dc:	1580082e 	bgeu	r2,r22,1007600 <_dtoa_r+0xa90>
 10075e0:	00c00104 	movi	r3,4
 10075e4:	0009883a 	mov	r4,zero
 10075e8:	18c7883a 	add	r3,r3,r3
 10075ec:	18800504 	addi	r2,r3,20
 10075f0:	21000044 	addi	r4,r4,1
 10075f4:	b0bffc2e 	bgeu	r22,r2,10075e8 <_dtoa_r+0xa78>
 10075f8:	d9801617 	ldw	r6,88(sp)
 10075fc:	31001115 	stw	r4,68(r6)
 1007600:	dc000f17 	ldw	r16,60(sp)
 1007604:	003e4b06 	br	1006f34 <_dtoa_r+0x3c4>
 1007608:	d9801717 	ldw	r6,92(sp)
 100760c:	0023883a 	mov	r17,zero
 1007610:	31bfff04 	addi	r6,r6,-4
 1007614:	d9801715 	stw	r6,92(sp)
 1007618:	003df806 	br	1006dfc <_dtoa_r+0x28c>
 100761c:	00800804 	movi	r2,32
 1007620:	10c9c83a 	sub	r4,r2,r3
 1007624:	00c00104 	movi	r3,4
 1007628:	19005a16 	blt	r3,r4,1007794 <_dtoa_r+0xc24>
 100762c:	008000c4 	movi	r2,3
 1007630:	113f7e16 	blt	r2,r4,100742c <_dtoa_r+0x8bc>
 1007634:	20800704 	addi	r2,r4,28
 1007638:	003f7506 	br	1007410 <_dtoa_r+0x8a0>
 100763c:	d9801717 	ldw	r6,92(sp)
 1007640:	00800044 	movi	r2,1
 1007644:	1180a10e 	bge	r2,r6,10078cc <_dtoa_r+0xd5c>
 1007648:	d9800f17 	ldw	r6,60(sp)
 100764c:	d8c01017 	ldw	r3,64(sp)
 1007650:	30bfffc4 	addi	r2,r6,-1
 1007654:	1881c616 	blt	r3,r2,1007d70 <_dtoa_r+0x1200>
 1007658:	18a5c83a 	sub	r18,r3,r2
 100765c:	d8800f17 	ldw	r2,60(sp)
 1007660:	10026216 	blt	r2,zero,1007fec <_dtoa_r+0x147c>
 1007664:	dc001117 	ldw	r16,68(sp)
 1007668:	1007883a 	mov	r3,r2
 100766c:	d9800a17 	ldw	r6,40(sp)
 1007670:	d8801117 	ldw	r2,68(sp)
 1007674:	d9001617 	ldw	r4,88(sp)
 1007678:	30cd883a 	add	r6,r6,r3
 100767c:	10c5883a 	add	r2,r2,r3
 1007680:	01400044 	movi	r5,1
 1007684:	d9800a15 	stw	r6,40(sp)
 1007688:	d8801115 	stw	r2,68(sp)
 100768c:	100a6540 	call	100a654 <__i2b>
 1007690:	1027883a 	mov	r19,r2
 1007694:	003f2506 	br	100732c <_dtoa_r+0x7bc>
 1007698:	00c040b4 	movhi	r3,258
 100769c:	18f19504 	addi	r3,r3,-14764
 10076a0:	003d6706 	br	1006c40 <_dtoa_r+0xd0>
 10076a4:	dd800517 	ldw	r22,20(sp)
 10076a8:	04000044 	movi	r16,1
 10076ac:	00000706 	br	10076cc <_dtoa_r+0xb5c>
 10076b0:	d9400717 	ldw	r5,28(sp)
 10076b4:	d9001617 	ldw	r4,88(sp)
 10076b8:	01800284 	movi	r6,10
 10076bc:	000f883a 	mov	r7,zero
 10076c0:	100a6900 	call	100a690 <__multadd>
 10076c4:	d8800715 	stw	r2,28(sp)
 10076c8:	84000044 	addi	r16,r16,1
 10076cc:	d9000717 	ldw	r4,28(sp)
 10076d0:	900b883a 	mov	r5,r18
 10076d4:	100692c0 	call	100692c <quorem>
 10076d8:	15c00c04 	addi	r23,r2,48
 10076dc:	b5c00005 	stb	r23,0(r22)
 10076e0:	d8c00f17 	ldw	r3,60(sp)
 10076e4:	b5800044 	addi	r22,r22,1
 10076e8:	80fff116 	blt	r16,r3,10076b0 <_dtoa_r+0xb40>
 10076ec:	d8000615 	stw	zero,24(sp)
 10076f0:	d9400717 	ldw	r5,28(sp)
 10076f4:	d9001617 	ldw	r4,88(sp)
 10076f8:	01800044 	movi	r6,1
 10076fc:	100a2b40 	call	100a2b4 <__lshift>
 1007700:	1009883a 	mov	r4,r2
 1007704:	900b883a 	mov	r5,r18
 1007708:	d8800715 	stw	r2,28(sp)
 100770c:	1009acc0 	call	1009acc <__mcmp>
 1007710:	00803c0e 	bge	zero,r2,1007804 <_dtoa_r+0xc94>
 1007714:	b009883a 	mov	r4,r22
 1007718:	213fffc4 	addi	r4,r4,-1
 100771c:	21400003 	ldbu	r5,0(r4)
 1007720:	00800e44 	movi	r2,57
 1007724:	28c03fcc 	andi	r3,r5,255
 1007728:	18c0201c 	xori	r3,r3,128
 100772c:	18ffe004 	addi	r3,r3,-128
 1007730:	1881981e 	bne	r3,r2,1007d94 <_dtoa_r+0x1224>
 1007734:	d9800517 	ldw	r6,20(sp)
 1007738:	21bff71e 	bne	r4,r6,1007718 <_dtoa_r+0xba8>
 100773c:	d8800d17 	ldw	r2,52(sp)
 1007740:	37000044 	addi	fp,r6,1
 1007744:	10800044 	addi	r2,r2,1
 1007748:	d8800d15 	stw	r2,52(sp)
 100774c:	00800c44 	movi	r2,49
 1007750:	30800005 	stb	r2,0(r6)
 1007754:	d9001617 	ldw	r4,88(sp)
 1007758:	900b883a 	mov	r5,r18
 100775c:	10099700 	call	1009970 <_Bfree>
 1007760:	983ecd26 	beq	r19,zero,1007298 <_dtoa_r+0x728>
 1007764:	d8c00617 	ldw	r3,24(sp)
 1007768:	18000426 	beq	r3,zero,100777c <_dtoa_r+0xc0c>
 100776c:	1cc00326 	beq	r3,r19,100777c <_dtoa_r+0xc0c>
 1007770:	d9001617 	ldw	r4,88(sp)
 1007774:	180b883a 	mov	r5,r3
 1007778:	10099700 	call	1009970 <_Bfree>
 100777c:	d9001617 	ldw	r4,88(sp)
 1007780:	980b883a 	mov	r5,r19
 1007784:	10099700 	call	1009970 <_Bfree>
 1007788:	003ec306 	br	1007298 <_dtoa_r+0x728>
 100778c:	1805883a 	mov	r2,r3
 1007790:	003eeb06 	br	1007340 <_dtoa_r+0x7d0>
 1007794:	d9800a17 	ldw	r6,40(sp)
 1007798:	d8c01117 	ldw	r3,68(sp)
 100779c:	20bfff04 	addi	r2,r4,-4
 10077a0:	308d883a 	add	r6,r6,r2
 10077a4:	1887883a 	add	r3,r3,r2
 10077a8:	80a1883a 	add	r16,r16,r2
 10077ac:	d9800a15 	stw	r6,40(sp)
 10077b0:	d8c01115 	stw	r3,68(sp)
 10077b4:	003f1d06 	br	100742c <_dtoa_r+0x8bc>
 10077b8:	a03f0c1e 	bne	r20,zero,10073ec <_dtoa_r+0x87c>
 10077bc:	00800434 	movhi	r2,16
 10077c0:	10bfffc4 	addi	r2,r2,-1
 10077c4:	a884703a 	and	r2,r21,r2
 10077c8:	103f081e 	bne	r2,zero,10073ec <_dtoa_r+0x87c>
 10077cc:	a89ffc2c 	andhi	r2,r21,32752
 10077d0:	103f0626 	beq	r2,zero,10073ec <_dtoa_r+0x87c>
 10077d4:	d8c01117 	ldw	r3,68(sp)
 10077d8:	d9000a17 	ldw	r4,40(sp)
 10077dc:	18c00044 	addi	r3,r3,1
 10077e0:	21000044 	addi	r4,r4,1
 10077e4:	d8c01115 	stw	r3,68(sp)
 10077e8:	d9000a15 	stw	r4,40(sp)
 10077ec:	003f0006 	br	10073f0 <_dtoa_r+0x880>
 10077f0:	d9400717 	ldw	r5,28(sp)
 10077f4:	d9001617 	ldw	r4,88(sp)
 10077f8:	100a7bc0 	call	100a7bc <__pow5mult>
 10077fc:	d8800715 	stw	r2,28(sp)
 1007800:	003eed06 	br	10073b8 <_dtoa_r+0x848>
 1007804:	1000021e 	bne	r2,zero,1007810 <_dtoa_r+0xca0>
 1007808:	b880004c 	andi	r2,r23,1
 100780c:	103fc11e 	bne	r2,zero,1007714 <_dtoa_r+0xba4>
 1007810:	b5bfffc4 	addi	r22,r22,-1
 1007814:	b0c00007 	ldb	r3,0(r22)
 1007818:	00800c04 	movi	r2,48
 100781c:	18bffc26 	beq	r3,r2,1007810 <_dtoa_r+0xca0>
 1007820:	b7000044 	addi	fp,r22,1
 1007824:	003fcb06 	br	1007754 <_dtoa_r+0xbe4>
 1007828:	d9800d17 	ldw	r6,52(sp)
 100782c:	018fc83a 	sub	r7,zero,r6
 1007830:	3801f726 	beq	r7,zero,1008010 <_dtoa_r+0x14a0>
 1007834:	398003cc 	andi	r6,r7,15
 1007838:	300c90fa 	slli	r6,r6,3
 100783c:	014040b4 	movhi	r5,258
 1007840:	29725e04 	addi	r5,r5,-13960
 1007844:	d9001217 	ldw	r4,72(sp)
 1007848:	314d883a 	add	r6,r6,r5
 100784c:	30c00117 	ldw	r3,4(r6)
 1007850:	30800017 	ldw	r2,0(r6)
 1007854:	d9401317 	ldw	r5,76(sp)
 1007858:	3821d13a 	srai	r16,r7,4
 100785c:	100d883a 	mov	r6,r2
 1007860:	180f883a 	mov	r7,r3
 1007864:	10103580 	call	1010358 <__muldf3>
 1007868:	1011883a 	mov	r8,r2
 100786c:	1813883a 	mov	r9,r3
 1007870:	1029883a 	mov	r20,r2
 1007874:	182b883a 	mov	r21,r3
 1007878:	8001e526 	beq	r16,zero,1008010 <_dtoa_r+0x14a0>
 100787c:	05800084 	movi	r22,2
 1007880:	044040b4 	movhi	r17,258
 1007884:	8c729004 	addi	r17,r17,-13760
 1007888:	8080004c 	andi	r2,r16,1
 100788c:	1005003a 	cmpeq	r2,r2,zero
 1007890:	1000081e 	bne	r2,zero,10078b4 <_dtoa_r+0xd44>
 1007894:	89800017 	ldw	r6,0(r17)
 1007898:	89c00117 	ldw	r7,4(r17)
 100789c:	480b883a 	mov	r5,r9
 10078a0:	4009883a 	mov	r4,r8
 10078a4:	10103580 	call	1010358 <__muldf3>
 10078a8:	1011883a 	mov	r8,r2
 10078ac:	b5800044 	addi	r22,r22,1
 10078b0:	1813883a 	mov	r9,r3
 10078b4:	8021d07a 	srai	r16,r16,1
 10078b8:	8c400204 	addi	r17,r17,8
 10078bc:	803ff21e 	bne	r16,zero,1007888 <_dtoa_r+0xd18>
 10078c0:	4029883a 	mov	r20,r8
 10078c4:	482b883a 	mov	r21,r9
 10078c8:	003dca06 	br	1006ff4 <_dtoa_r+0x484>
 10078cc:	d9000817 	ldw	r4,32(sp)
 10078d0:	2005003a 	cmpeq	r2,r4,zero
 10078d4:	1001f61e 	bne	r2,zero,10080b0 <_dtoa_r+0x1540>
 10078d8:	dc001117 	ldw	r16,68(sp)
 10078dc:	dc801017 	ldw	r18,64(sp)
 10078e0:	18c10cc4 	addi	r3,r3,1075
 10078e4:	003f6106 	br	100766c <_dtoa_r+0xafc>
 10078e8:	d8000b15 	stw	zero,44(sp)
 10078ec:	d9802617 	ldw	r6,152(sp)
 10078f0:	d8c00d17 	ldw	r3,52(sp)
 10078f4:	30800044 	addi	r2,r6,1
 10078f8:	18ad883a 	add	r22,r3,r2
 10078fc:	b13fffc4 	addi	r4,r22,-1
 1007900:	d9000e15 	stw	r4,56(sp)
 1007904:	0581f60e 	bge	zero,r22,10080e0 <_dtoa_r+0x1570>
 1007908:	dd800f15 	stw	r22,60(sp)
 100790c:	003f3006 	br	10075d0 <_dtoa_r+0xa60>
 1007910:	d8000b15 	stw	zero,44(sp)
 1007914:	d9002617 	ldw	r4,152(sp)
 1007918:	0101eb0e 	bge	zero,r4,10080c8 <_dtoa_r+0x1558>
 100791c:	202d883a 	mov	r22,r4
 1007920:	d9000e15 	stw	r4,56(sp)
 1007924:	d9000f15 	stw	r4,60(sp)
 1007928:	003f2906 	br	10075d0 <_dtoa_r+0xa60>
 100792c:	01800044 	movi	r6,1
 1007930:	d9800b15 	stw	r6,44(sp)
 1007934:	003ff706 	br	1007914 <_dtoa_r+0xda4>
 1007938:	01000044 	movi	r4,1
 100793c:	d9000b15 	stw	r4,44(sp)
 1007940:	003fea06 	br	10078ec <_dtoa_r+0xd7c>
 1007944:	04000c0e 	bge	zero,r16,1007978 <_dtoa_r+0xe08>
 1007948:	d9400717 	ldw	r5,28(sp)
 100794c:	d9001617 	ldw	r4,88(sp)
 1007950:	01800044 	movi	r6,1
 1007954:	100a2b40 	call	100a2b4 <__lshift>
 1007958:	1009883a 	mov	r4,r2
 100795c:	900b883a 	mov	r5,r18
 1007960:	d8800715 	stw	r2,28(sp)
 1007964:	1009acc0 	call	1009acc <__mcmp>
 1007968:	0081e00e 	bge	zero,r2,10080ec <_dtoa_r+0x157c>
 100796c:	bdc00044 	addi	r23,r23,1
 1007970:	00800e84 	movi	r2,58
 1007974:	b881a226 	beq	r23,r2,1008000 <_dtoa_r+0x1490>
 1007978:	b7000044 	addi	fp,r22,1
 100797c:	b5c00005 	stb	r23,0(r22)
 1007980:	003f7406 	br	1007754 <_dtoa_r+0xbe4>
 1007984:	00800e44 	movi	r2,57
 1007988:	b8819d26 	beq	r23,r2,1008000 <_dtoa_r+0x1490>
 100798c:	053ffa0e 	bge	zero,r20,1007978 <_dtoa_r+0xe08>
 1007990:	8dc00c44 	addi	r23,r17,49
 1007994:	003ff806 	br	1007978 <_dtoa_r+0xe08>
 1007998:	d9001617 	ldw	r4,88(sp)
 100799c:	a80b883a 	mov	r5,r21
 10079a0:	04000044 	movi	r16,1
 10079a4:	10099700 	call	1009970 <_Bfree>
 10079a8:	003edf06 	br	1007528 <_dtoa_r+0x9b8>
 10079ac:	d9001617 	ldw	r4,88(sp)
 10079b0:	980b883a 	mov	r5,r19
 10079b4:	01800284 	movi	r6,10
 10079b8:	000f883a 	mov	r7,zero
 10079bc:	100a6900 	call	100a690 <__multadd>
 10079c0:	1027883a 	mov	r19,r2
 10079c4:	d8800615 	stw	r2,24(sp)
 10079c8:	003ebb06 	br	10074b8 <_dtoa_r+0x948>
 10079cc:	d9801117 	ldw	r6,68(sp)
 10079d0:	d8800d17 	ldw	r2,52(sp)
 10079d4:	d8000915 	stw	zero,36(sp)
 10079d8:	308dc83a 	sub	r6,r6,r2
 10079dc:	0087c83a 	sub	r3,zero,r2
 10079e0:	d9801115 	stw	r6,68(sp)
 10079e4:	d8c01015 	stw	r3,64(sp)
 10079e8:	003cfe06 	br	1006de4 <_dtoa_r+0x274>
 10079ec:	018dc83a 	sub	r6,zero,r6
 10079f0:	d9801115 	stw	r6,68(sp)
 10079f4:	d8000a15 	stw	zero,40(sp)
 10079f8:	003cf306 	br	1006dc8 <_dtoa_r+0x258>
 10079fc:	d9000d17 	ldw	r4,52(sp)
 1007a00:	1010ca40 	call	1010ca4 <__floatsidf>
 1007a04:	880b883a 	mov	r5,r17
 1007a08:	8009883a 	mov	r4,r16
 1007a0c:	180f883a 	mov	r7,r3
 1007a10:	100d883a 	mov	r6,r2
 1007a14:	10109fc0 	call	10109fc <__nedf2>
 1007a18:	103ce126 	beq	r2,zero,1006da0 <_dtoa_r+0x230>
 1007a1c:	d9800d17 	ldw	r6,52(sp)
 1007a20:	31bfffc4 	addi	r6,r6,-1
 1007a24:	d9800d15 	stw	r6,52(sp)
 1007a28:	003cdd06 	br	1006da0 <_dtoa_r+0x230>
 1007a2c:	d9000717 	ldw	r4,28(sp)
 1007a30:	900b883a 	mov	r5,r18
 1007a34:	1009acc0 	call	1009acc <__mcmp>
 1007a38:	103e8d0e 	bge	r2,zero,1007470 <_dtoa_r+0x900>
 1007a3c:	d9400717 	ldw	r5,28(sp)
 1007a40:	d9001617 	ldw	r4,88(sp)
 1007a44:	01800284 	movi	r6,10
 1007a48:	000f883a 	mov	r7,zero
 1007a4c:	100a6900 	call	100a690 <__multadd>
 1007a50:	d9800d17 	ldw	r6,52(sp)
 1007a54:	d8800715 	stw	r2,28(sp)
 1007a58:	31bfffc4 	addi	r6,r6,-1
 1007a5c:	d9800d15 	stw	r6,52(sp)
 1007a60:	b001a71e 	bne	r22,zero,1008100 <_dtoa_r+0x1590>
 1007a64:	d8800e17 	ldw	r2,56(sp)
 1007a68:	d8800f15 	stw	r2,60(sp)
 1007a6c:	003e8006 	br	1007470 <_dtoa_r+0x900>
 1007a70:	90800417 	ldw	r2,16(r18)
 1007a74:	1085883a 	add	r2,r2,r2
 1007a78:	1085883a 	add	r2,r2,r2
 1007a7c:	1485883a 	add	r2,r2,r18
 1007a80:	11000417 	ldw	r4,16(r2)
 1007a84:	10099980 	call	1009998 <__hi0bits>
 1007a88:	00c00804 	movi	r3,32
 1007a8c:	1887c83a 	sub	r3,r3,r2
 1007a90:	003e5a06 	br	10073fc <_dtoa_r+0x88c>
 1007a94:	d9400717 	ldw	r5,28(sp)
 1007a98:	d9801017 	ldw	r6,64(sp)
 1007a9c:	d9001617 	ldw	r4,88(sp)
 1007aa0:	100a7bc0 	call	100a7bc <__pow5mult>
 1007aa4:	d8800715 	stw	r2,28(sp)
 1007aa8:	003e4306 	br	10073b8 <_dtoa_r+0x848>
 1007aac:	d9800f17 	ldw	r6,60(sp)
 1007ab0:	d8800d17 	ldw	r2,52(sp)
 1007ab4:	d9800315 	stw	r6,12(sp)
 1007ab8:	d8800415 	stw	r2,16(sp)
 1007abc:	d8c00b17 	ldw	r3,44(sp)
 1007ac0:	1805003a 	cmpeq	r2,r3,zero
 1007ac4:	1000e21e 	bne	r2,zero,1007e50 <_dtoa_r+0x12e0>
 1007ac8:	d9000317 	ldw	r4,12(sp)
 1007acc:	0005883a 	mov	r2,zero
 1007ad0:	00cff834 	movhi	r3,16352
 1007ad4:	200c90fa 	slli	r6,r4,3
 1007ad8:	010040b4 	movhi	r4,258
 1007adc:	21325e04 	addi	r4,r4,-13960
 1007ae0:	180b883a 	mov	r5,r3
 1007ae4:	310d883a 	add	r6,r6,r4
 1007ae8:	327fff17 	ldw	r9,-4(r6)
 1007aec:	323ffe17 	ldw	r8,-8(r6)
 1007af0:	1009883a 	mov	r4,r2
 1007af4:	480f883a 	mov	r7,r9
 1007af8:	400d883a 	mov	r6,r8
 1007afc:	101071c0 	call	101071c <__divdf3>
 1007b00:	180b883a 	mov	r5,r3
 1007b04:	b00d883a 	mov	r6,r22
 1007b08:	b80f883a 	mov	r7,r23
 1007b0c:	1009883a 	mov	r4,r2
 1007b10:	10102640 	call	1010264 <__subdf3>
 1007b14:	a80b883a 	mov	r5,r21
 1007b18:	a009883a 	mov	r4,r20
 1007b1c:	d8c01915 	stw	r3,100(sp)
 1007b20:	d8801815 	stw	r2,96(sp)
 1007b24:	1010d9c0 	call	1010d9c <__fixdfsi>
 1007b28:	1009883a 	mov	r4,r2
 1007b2c:	1027883a 	mov	r19,r2
 1007b30:	1010ca40 	call	1010ca4 <__floatsidf>
 1007b34:	a80b883a 	mov	r5,r21
 1007b38:	a009883a 	mov	r4,r20
 1007b3c:	180f883a 	mov	r7,r3
 1007b40:	100d883a 	mov	r6,r2
 1007b44:	10102640 	call	1010264 <__subdf3>
 1007b48:	d9801817 	ldw	r6,96(sp)
 1007b4c:	1823883a 	mov	r17,r3
 1007b50:	d8801415 	stw	r2,80(sp)
 1007b54:	302d883a 	mov	r22,r6
 1007b58:	d9800517 	ldw	r6,20(sp)
 1007b5c:	9cc00c04 	addi	r19,r19,48
 1007b60:	dc401515 	stw	r17,84(sp)
 1007b64:	d8c01917 	ldw	r3,100(sp)
 1007b68:	34c00005 	stb	r19,0(r6)
 1007b6c:	d8800517 	ldw	r2,20(sp)
 1007b70:	d9401917 	ldw	r5,100(sp)
 1007b74:	d9801417 	ldw	r6,80(sp)
 1007b78:	b009883a 	mov	r4,r22
 1007b7c:	880f883a 	mov	r7,r17
 1007b80:	182f883a 	mov	r23,r3
 1007b84:	17000044 	addi	fp,r2,1
 1007b88:	1010a840 	call	1010a84 <__gtdf2>
 1007b8c:	00804e16 	blt	zero,r2,1007cc8 <_dtoa_r+0x1158>
 1007b90:	d9801417 	ldw	r6,80(sp)
 1007b94:	0005883a 	mov	r2,zero
 1007b98:	00cffc34 	movhi	r3,16368
 1007b9c:	180b883a 	mov	r5,r3
 1007ba0:	880f883a 	mov	r7,r17
 1007ba4:	1009883a 	mov	r4,r2
 1007ba8:	10102640 	call	1010264 <__subdf3>
 1007bac:	d9401917 	ldw	r5,100(sp)
 1007bb0:	180f883a 	mov	r7,r3
 1007bb4:	b009883a 	mov	r4,r22
 1007bb8:	100d883a 	mov	r6,r2
 1007bbc:	1010a840 	call	1010a84 <__gtdf2>
 1007bc0:	00bda216 	blt	zero,r2,100724c <_dtoa_r+0x6dc>
 1007bc4:	d8c00317 	ldw	r3,12(sp)
 1007bc8:	00800044 	movi	r2,1
 1007bcc:	10c01216 	blt	r2,r3,1007c18 <_dtoa_r+0x10a8>
 1007bd0:	003d4506 	br	10070e8 <_dtoa_r+0x578>
 1007bd4:	d9801417 	ldw	r6,80(sp)
 1007bd8:	0005883a 	mov	r2,zero
 1007bdc:	00cffc34 	movhi	r3,16368
 1007be0:	180b883a 	mov	r5,r3
 1007be4:	880f883a 	mov	r7,r17
 1007be8:	1009883a 	mov	r4,r2
 1007bec:	10102640 	call	1010264 <__subdf3>
 1007bf0:	d9c01b17 	ldw	r7,108(sp)
 1007bf4:	180b883a 	mov	r5,r3
 1007bf8:	1009883a 	mov	r4,r2
 1007bfc:	b00d883a 	mov	r6,r22
 1007c00:	1010b940 	call	1010b94 <__ltdf2>
 1007c04:	103d9116 	blt	r2,zero,100724c <_dtoa_r+0x6dc>
 1007c08:	d9800517 	ldw	r6,20(sp)
 1007c0c:	d9000317 	ldw	r4,12(sp)
 1007c10:	3105883a 	add	r2,r6,r4
 1007c14:	e0bd3426 	beq	fp,r2,10070e8 <_dtoa_r+0x578>
 1007c18:	04500934 	movhi	r17,16420
 1007c1c:	0021883a 	mov	r16,zero
 1007c20:	b80b883a 	mov	r5,r23
 1007c24:	b009883a 	mov	r4,r22
 1007c28:	800d883a 	mov	r6,r16
 1007c2c:	880f883a 	mov	r7,r17
 1007c30:	10103580 	call	1010358 <__muldf3>
 1007c34:	d9401517 	ldw	r5,84(sp)
 1007c38:	d9001417 	ldw	r4,80(sp)
 1007c3c:	880f883a 	mov	r7,r17
 1007c40:	000d883a 	mov	r6,zero
 1007c44:	d8801a15 	stw	r2,104(sp)
 1007c48:	d8c01b15 	stw	r3,108(sp)
 1007c4c:	10103580 	call	1010358 <__muldf3>
 1007c50:	180b883a 	mov	r5,r3
 1007c54:	1009883a 	mov	r4,r2
 1007c58:	1823883a 	mov	r17,r3
 1007c5c:	1021883a 	mov	r16,r2
 1007c60:	1010d9c0 	call	1010d9c <__fixdfsi>
 1007c64:	1009883a 	mov	r4,r2
 1007c68:	102b883a 	mov	r21,r2
 1007c6c:	1010ca40 	call	1010ca4 <__floatsidf>
 1007c70:	880b883a 	mov	r5,r17
 1007c74:	8009883a 	mov	r4,r16
 1007c78:	180f883a 	mov	r7,r3
 1007c7c:	100d883a 	mov	r6,r2
 1007c80:	10102640 	call	1010264 <__subdf3>
 1007c84:	1021883a 	mov	r16,r2
 1007c88:	d9001b17 	ldw	r4,108(sp)
 1007c8c:	1823883a 	mov	r17,r3
 1007c90:	dc001415 	stw	r16,80(sp)
 1007c94:	ad400c04 	addi	r21,r21,48
 1007c98:	dc401515 	stw	r17,84(sp)
 1007c9c:	d8801a17 	ldw	r2,104(sp)
 1007ca0:	e5400005 	stb	r21,0(fp)
 1007ca4:	202f883a 	mov	r23,r4
 1007ca8:	d9c01b17 	ldw	r7,108(sp)
 1007cac:	d9001417 	ldw	r4,80(sp)
 1007cb0:	880b883a 	mov	r5,r17
 1007cb4:	100d883a 	mov	r6,r2
 1007cb8:	102d883a 	mov	r22,r2
 1007cbc:	e7000044 	addi	fp,fp,1
 1007cc0:	1010b940 	call	1010b94 <__ltdf2>
 1007cc4:	103fc30e 	bge	r2,zero,1007bd4 <_dtoa_r+0x1064>
 1007cc8:	d9000417 	ldw	r4,16(sp)
 1007ccc:	d9000d15 	stw	r4,52(sp)
 1007cd0:	003d7106 	br	1007298 <_dtoa_r+0x728>
 1007cd4:	d9801717 	ldw	r6,92(sp)
 1007cd8:	00800084 	movi	r2,2
 1007cdc:	11bde60e 	bge	r2,r6,1007478 <_dtoa_r+0x908>
 1007ce0:	203cfb1e 	bne	r4,zero,10070d0 <_dtoa_r+0x560>
 1007ce4:	d9001617 	ldw	r4,88(sp)
 1007ce8:	900b883a 	mov	r5,r18
 1007cec:	01800144 	movi	r6,5
 1007cf0:	000f883a 	mov	r7,zero
 1007cf4:	100a6900 	call	100a690 <__multadd>
 1007cf8:	d9000717 	ldw	r4,28(sp)
 1007cfc:	100b883a 	mov	r5,r2
 1007d00:	1025883a 	mov	r18,r2
 1007d04:	1009acc0 	call	1009acc <__mcmp>
 1007d08:	00bcf10e 	bge	zero,r2,10070d0 <_dtoa_r+0x560>
 1007d0c:	d8c00d17 	ldw	r3,52(sp)
 1007d10:	d9000517 	ldw	r4,20(sp)
 1007d14:	d8000615 	stw	zero,24(sp)
 1007d18:	18c00044 	addi	r3,r3,1
 1007d1c:	d8c00d15 	stw	r3,52(sp)
 1007d20:	00800c44 	movi	r2,49
 1007d24:	27000044 	addi	fp,r4,1
 1007d28:	20800005 	stb	r2,0(r4)
 1007d2c:	003e8906 	br	1007754 <_dtoa_r+0xbe4>
 1007d30:	d8c00517 	ldw	r3,20(sp)
 1007d34:	003bc206 	br	1006c40 <_dtoa_r+0xd0>
 1007d38:	018040b4 	movhi	r6,258
 1007d3c:	31b29004 	addi	r6,r6,-13760
 1007d40:	30c00917 	ldw	r3,36(r6)
 1007d44:	30800817 	ldw	r2,32(r6)
 1007d48:	d9001217 	ldw	r4,72(sp)
 1007d4c:	d9401317 	ldw	r5,76(sp)
 1007d50:	180f883a 	mov	r7,r3
 1007d54:	100d883a 	mov	r6,r2
 1007d58:	101071c0 	call	101071c <__divdf3>
 1007d5c:	948003cc 	andi	r18,r18,15
 1007d60:	058000c4 	movi	r22,3
 1007d64:	1029883a 	mov	r20,r2
 1007d68:	182b883a 	mov	r21,r3
 1007d6c:	003c8906 	br	1006f94 <_dtoa_r+0x424>
 1007d70:	d9001017 	ldw	r4,64(sp)
 1007d74:	d9800917 	ldw	r6,36(sp)
 1007d78:	0025883a 	mov	r18,zero
 1007d7c:	1105c83a 	sub	r2,r2,r4
 1007d80:	2089883a 	add	r4,r4,r2
 1007d84:	308d883a 	add	r6,r6,r2
 1007d88:	d9001015 	stw	r4,64(sp)
 1007d8c:	d9800915 	stw	r6,36(sp)
 1007d90:	003e3206 	br	100765c <_dtoa_r+0xaec>
 1007d94:	28800044 	addi	r2,r5,1
 1007d98:	27000044 	addi	fp,r4,1
 1007d9c:	20800005 	stb	r2,0(r4)
 1007da0:	003e6c06 	br	1007754 <_dtoa_r+0xbe4>
 1007da4:	d8800f17 	ldw	r2,60(sp)
 1007da8:	00bce016 	blt	zero,r2,100712c <_dtoa_r+0x5bc>
 1007dac:	d9800f17 	ldw	r6,60(sp)
 1007db0:	303cc51e 	bne	r6,zero,10070c8 <_dtoa_r+0x558>
 1007db4:	0005883a 	mov	r2,zero
 1007db8:	00d00534 	movhi	r3,16404
 1007dbc:	980b883a 	mov	r5,r19
 1007dc0:	180f883a 	mov	r7,r3
 1007dc4:	9009883a 	mov	r4,r18
 1007dc8:	100d883a 	mov	r6,r2
 1007dcc:	10103580 	call	1010358 <__muldf3>
 1007dd0:	180b883a 	mov	r5,r3
 1007dd4:	a80f883a 	mov	r7,r21
 1007dd8:	1009883a 	mov	r4,r2
 1007ddc:	a00d883a 	mov	r6,r20
 1007de0:	1010b0c0 	call	1010b0c <__gedf2>
 1007de4:	103cb80e 	bge	r2,zero,10070c8 <_dtoa_r+0x558>
 1007de8:	0027883a 	mov	r19,zero
 1007dec:	0025883a 	mov	r18,zero
 1007df0:	003fc606 	br	1007d0c <_dtoa_r+0x119c>
 1007df4:	99400117 	ldw	r5,4(r19)
 1007df8:	d9001617 	ldw	r4,88(sp)
 1007dfc:	1009ef00 	call	1009ef0 <_Balloc>
 1007e00:	99800417 	ldw	r6,16(r19)
 1007e04:	11000304 	addi	r4,r2,12
 1007e08:	99400304 	addi	r5,r19,12
 1007e0c:	318d883a 	add	r6,r6,r6
 1007e10:	318d883a 	add	r6,r6,r6
 1007e14:	31800204 	addi	r6,r6,8
 1007e18:	1023883a 	mov	r17,r2
 1007e1c:	10097580 	call	1009758 <memcpy>
 1007e20:	d9001617 	ldw	r4,88(sp)
 1007e24:	880b883a 	mov	r5,r17
 1007e28:	01800044 	movi	r6,1
 1007e2c:	100a2b40 	call	100a2b4 <__lshift>
 1007e30:	100b883a 	mov	r5,r2
 1007e34:	003d9c06 	br	10074a8 <_dtoa_r+0x938>
 1007e38:	00800e44 	movi	r2,57
 1007e3c:	b8807026 	beq	r23,r2,1008000 <_dtoa_r+0x1490>
 1007e40:	b8800044 	addi	r2,r23,1
 1007e44:	b7000044 	addi	fp,r22,1
 1007e48:	b0800005 	stb	r2,0(r22)
 1007e4c:	003e4106 	br	1007754 <_dtoa_r+0xbe4>
 1007e50:	d8800317 	ldw	r2,12(sp)
 1007e54:	018040b4 	movhi	r6,258
 1007e58:	31b25e04 	addi	r6,r6,-13960
 1007e5c:	b009883a 	mov	r4,r22
 1007e60:	100e90fa 	slli	r7,r2,3
 1007e64:	b80b883a 	mov	r5,r23
 1007e68:	398f883a 	add	r7,r7,r6
 1007e6c:	38bffe17 	ldw	r2,-8(r7)
 1007e70:	d9800517 	ldw	r6,20(sp)
 1007e74:	38ffff17 	ldw	r3,-4(r7)
 1007e78:	37000044 	addi	fp,r6,1
 1007e7c:	180f883a 	mov	r7,r3
 1007e80:	100d883a 	mov	r6,r2
 1007e84:	10103580 	call	1010358 <__muldf3>
 1007e88:	a80b883a 	mov	r5,r21
 1007e8c:	a009883a 	mov	r4,r20
 1007e90:	182f883a 	mov	r23,r3
 1007e94:	102d883a 	mov	r22,r2
 1007e98:	1010d9c0 	call	1010d9c <__fixdfsi>
 1007e9c:	1009883a 	mov	r4,r2
 1007ea0:	1027883a 	mov	r19,r2
 1007ea4:	1010ca40 	call	1010ca4 <__floatsidf>
 1007ea8:	a80b883a 	mov	r5,r21
 1007eac:	a009883a 	mov	r4,r20
 1007eb0:	180f883a 	mov	r7,r3
 1007eb4:	100d883a 	mov	r6,r2
 1007eb8:	10102640 	call	1010264 <__subdf3>
 1007ebc:	180b883a 	mov	r5,r3
 1007ec0:	d8c00517 	ldw	r3,20(sp)
 1007ec4:	9cc00c04 	addi	r19,r19,48
 1007ec8:	1009883a 	mov	r4,r2
 1007ecc:	1cc00005 	stb	r19,0(r3)
 1007ed0:	2021883a 	mov	r16,r4
 1007ed4:	d9000317 	ldw	r4,12(sp)
 1007ed8:	00800044 	movi	r2,1
 1007edc:	2823883a 	mov	r17,r5
 1007ee0:	20802226 	beq	r4,r2,1007f6c <_dtoa_r+0x13fc>
 1007ee4:	1029883a 	mov	r20,r2
 1007ee8:	0005883a 	mov	r2,zero
 1007eec:	00d00934 	movhi	r3,16420
 1007ef0:	180f883a 	mov	r7,r3
 1007ef4:	100d883a 	mov	r6,r2
 1007ef8:	880b883a 	mov	r5,r17
 1007efc:	8009883a 	mov	r4,r16
 1007f00:	10103580 	call	1010358 <__muldf3>
 1007f04:	180b883a 	mov	r5,r3
 1007f08:	1009883a 	mov	r4,r2
 1007f0c:	1823883a 	mov	r17,r3
 1007f10:	1021883a 	mov	r16,r2
 1007f14:	1010d9c0 	call	1010d9c <__fixdfsi>
 1007f18:	1009883a 	mov	r4,r2
 1007f1c:	102b883a 	mov	r21,r2
 1007f20:	1010ca40 	call	1010ca4 <__floatsidf>
 1007f24:	880b883a 	mov	r5,r17
 1007f28:	8009883a 	mov	r4,r16
 1007f2c:	180f883a 	mov	r7,r3
 1007f30:	100d883a 	mov	r6,r2
 1007f34:	10102640 	call	1010264 <__subdf3>
 1007f38:	180b883a 	mov	r5,r3
 1007f3c:	d8c00517 	ldw	r3,20(sp)
 1007f40:	1009883a 	mov	r4,r2
 1007f44:	ad400c04 	addi	r21,r21,48
 1007f48:	1d05883a 	add	r2,r3,r20
 1007f4c:	15400005 	stb	r21,0(r2)
 1007f50:	2021883a 	mov	r16,r4
 1007f54:	d9000317 	ldw	r4,12(sp)
 1007f58:	a5000044 	addi	r20,r20,1
 1007f5c:	2823883a 	mov	r17,r5
 1007f60:	a13fe11e 	bne	r20,r4,1007ee8 <_dtoa_r+0x1378>
 1007f64:	e505883a 	add	r2,fp,r20
 1007f68:	173fffc4 	addi	fp,r2,-1
 1007f6c:	0025883a 	mov	r18,zero
 1007f70:	04cff834 	movhi	r19,16352
 1007f74:	b009883a 	mov	r4,r22
 1007f78:	b80b883a 	mov	r5,r23
 1007f7c:	900d883a 	mov	r6,r18
 1007f80:	980f883a 	mov	r7,r19
 1007f84:	10102e40 	call	10102e4 <__adddf3>
 1007f88:	180b883a 	mov	r5,r3
 1007f8c:	1009883a 	mov	r4,r2
 1007f90:	800d883a 	mov	r6,r16
 1007f94:	880f883a 	mov	r7,r17
 1007f98:	1010b940 	call	1010b94 <__ltdf2>
 1007f9c:	103cab16 	blt	r2,zero,100724c <_dtoa_r+0x6dc>
 1007fa0:	0009883a 	mov	r4,zero
 1007fa4:	980b883a 	mov	r5,r19
 1007fa8:	b80f883a 	mov	r7,r23
 1007fac:	b00d883a 	mov	r6,r22
 1007fb0:	10102640 	call	1010264 <__subdf3>
 1007fb4:	180b883a 	mov	r5,r3
 1007fb8:	880f883a 	mov	r7,r17
 1007fbc:	1009883a 	mov	r4,r2
 1007fc0:	800d883a 	mov	r6,r16
 1007fc4:	1010a840 	call	1010a84 <__gtdf2>
 1007fc8:	00bc470e 	bge	zero,r2,10070e8 <_dtoa_r+0x578>
 1007fcc:	00c00c04 	movi	r3,48
 1007fd0:	e73fffc4 	addi	fp,fp,-1
 1007fd4:	e0800007 	ldb	r2,0(fp)
 1007fd8:	10fffd26 	beq	r2,r3,1007fd0 <_dtoa_r+0x1460>
 1007fdc:	d9800417 	ldw	r6,16(sp)
 1007fe0:	e7000044 	addi	fp,fp,1
 1007fe4:	d9800d15 	stw	r6,52(sp)
 1007fe8:	003cab06 	br	1007298 <_dtoa_r+0x728>
 1007fec:	d8c00f17 	ldw	r3,60(sp)
 1007ff0:	d9001117 	ldw	r4,68(sp)
 1007ff4:	20e1c83a 	sub	r16,r4,r3
 1007ff8:	0007883a 	mov	r3,zero
 1007ffc:	003d9b06 	br	100766c <_dtoa_r+0xafc>
 1008000:	00800e44 	movi	r2,57
 1008004:	b0800005 	stb	r2,0(r22)
 1008008:	b5800044 	addi	r22,r22,1
 100800c:	003dc106 	br	1007714 <_dtoa_r+0xba4>
 1008010:	05800084 	movi	r22,2
 1008014:	003bf706 	br	1006ff4 <_dtoa_r+0x484>
 1008018:	d9000f17 	ldw	r4,60(sp)
 100801c:	013c000e 	bge	zero,r4,1007020 <_dtoa_r+0x4b0>
 1008020:	d9800e17 	ldw	r6,56(sp)
 1008024:	01bc300e 	bge	zero,r6,10070e8 <_dtoa_r+0x578>
 1008028:	0005883a 	mov	r2,zero
 100802c:	00d00934 	movhi	r3,16420
 1008030:	a80b883a 	mov	r5,r21
 1008034:	180f883a 	mov	r7,r3
 1008038:	a009883a 	mov	r4,r20
 100803c:	100d883a 	mov	r6,r2
 1008040:	10103580 	call	1010358 <__muldf3>
 1008044:	b1000044 	addi	r4,r22,1
 1008048:	1021883a 	mov	r16,r2
 100804c:	1823883a 	mov	r17,r3
 1008050:	1010ca40 	call	1010ca4 <__floatsidf>
 1008054:	880b883a 	mov	r5,r17
 1008058:	8009883a 	mov	r4,r16
 100805c:	180f883a 	mov	r7,r3
 1008060:	100d883a 	mov	r6,r2
 1008064:	10103580 	call	1010358 <__muldf3>
 1008068:	0011883a 	mov	r8,zero
 100806c:	02500734 	movhi	r9,16412
 1008070:	180b883a 	mov	r5,r3
 1008074:	480f883a 	mov	r7,r9
 1008078:	1009883a 	mov	r4,r2
 100807c:	400d883a 	mov	r6,r8
 1008080:	10102e40 	call	10102e4 <__adddf3>
 1008084:	102d883a 	mov	r22,r2
 1008088:	00bf3034 	movhi	r2,64704
 100808c:	10ef883a 	add	r23,r2,r3
 1008090:	d8800d17 	ldw	r2,52(sp)
 1008094:	d8c00e17 	ldw	r3,56(sp)
 1008098:	8029883a 	mov	r20,r16
 100809c:	10bfffc4 	addi	r2,r2,-1
 10080a0:	882b883a 	mov	r21,r17
 10080a4:	d8800415 	stw	r2,16(sp)
 10080a8:	d8c00315 	stw	r3,12(sp)
 10080ac:	003e8306 	br	1007abc <_dtoa_r+0xf4c>
 10080b0:	d8800117 	ldw	r2,4(sp)
 10080b4:	dc001117 	ldw	r16,68(sp)
 10080b8:	dc801017 	ldw	r18,64(sp)
 10080bc:	00c00d84 	movi	r3,54
 10080c0:	1887c83a 	sub	r3,r3,r2
 10080c4:	003d6906 	br	100766c <_dtoa_r+0xafc>
 10080c8:	01800044 	movi	r6,1
 10080cc:	3021883a 	mov	r16,r6
 10080d0:	d9800f15 	stw	r6,60(sp)
 10080d4:	d9802615 	stw	r6,152(sp)
 10080d8:	d9800e15 	stw	r6,56(sp)
 10080dc:	003b9306 	br	1006f2c <_dtoa_r+0x3bc>
 10080e0:	b021883a 	mov	r16,r22
 10080e4:	dd800f15 	stw	r22,60(sp)
 10080e8:	003b9006 	br	1006f2c <_dtoa_r+0x3bc>
 10080ec:	103e221e 	bne	r2,zero,1007978 <_dtoa_r+0xe08>
 10080f0:	b880004c 	andi	r2,r23,1
 10080f4:	1005003a 	cmpeq	r2,r2,zero
 10080f8:	103e1f1e 	bne	r2,zero,1007978 <_dtoa_r+0xe08>
 10080fc:	003e1b06 	br	100796c <_dtoa_r+0xdfc>
 1008100:	d9001617 	ldw	r4,88(sp)
 1008104:	980b883a 	mov	r5,r19
 1008108:	01800284 	movi	r6,10
 100810c:	000f883a 	mov	r7,zero
 1008110:	100a6900 	call	100a690 <__multadd>
 1008114:	d8c00e17 	ldw	r3,56(sp)
 1008118:	1027883a 	mov	r19,r2
 100811c:	d8c00f15 	stw	r3,60(sp)
 1008120:	003cd306 	br	1007470 <_dtoa_r+0x900>

01008124 <_fflush_r>:
 1008124:	defffb04 	addi	sp,sp,-20
 1008128:	dcc00315 	stw	r19,12(sp)
 100812c:	dc800215 	stw	r18,8(sp)
 1008130:	dfc00415 	stw	ra,16(sp)
 1008134:	dc400115 	stw	r17,4(sp)
 1008138:	dc000015 	stw	r16,0(sp)
 100813c:	2027883a 	mov	r19,r4
 1008140:	2825883a 	mov	r18,r5
 1008144:	20000226 	beq	r4,zero,1008150 <_fflush_r+0x2c>
 1008148:	20800e17 	ldw	r2,56(r4)
 100814c:	10005626 	beq	r2,zero,10082a8 <_fflush_r+0x184>
 1008150:	9100030b 	ldhu	r4,12(r18)
 1008154:	20ffffcc 	andi	r3,r4,65535
 1008158:	18e0001c 	xori	r3,r3,32768
 100815c:	18e00004 	addi	r3,r3,-32768
 1008160:	1880020c 	andi	r2,r3,8
 1008164:	1000261e 	bne	r2,zero,1008200 <_fflush_r+0xdc>
 1008168:	90c00117 	ldw	r3,4(r18)
 100816c:	20820014 	ori	r2,r4,2048
 1008170:	9080030d 	sth	r2,12(r18)
 1008174:	1009883a 	mov	r4,r2
 1008178:	00c0400e 	bge	zero,r3,100827c <_fflush_r+0x158>
 100817c:	92000a17 	ldw	r8,40(r18)
 1008180:	40004026 	beq	r8,zero,1008284 <_fflush_r+0x160>
 1008184:	2084000c 	andi	r2,r4,4096
 1008188:	10005326 	beq	r2,zero,10082d8 <_fflush_r+0x1b4>
 100818c:	94001417 	ldw	r16,80(r18)
 1008190:	9080030b 	ldhu	r2,12(r18)
 1008194:	1080010c 	andi	r2,r2,4
 1008198:	1000481e 	bne	r2,zero,10082bc <_fflush_r+0x198>
 100819c:	91400717 	ldw	r5,28(r18)
 10081a0:	9809883a 	mov	r4,r19
 10081a4:	800d883a 	mov	r6,r16
 10081a8:	000f883a 	mov	r7,zero
 10081ac:	403ee83a 	callr	r8
 10081b0:	8080261e 	bne	r16,r2,100824c <_fflush_r+0x128>
 10081b4:	9080030b 	ldhu	r2,12(r18)
 10081b8:	91000417 	ldw	r4,16(r18)
 10081bc:	90000115 	stw	zero,4(r18)
 10081c0:	10bdffcc 	andi	r2,r2,63487
 10081c4:	10ffffcc 	andi	r3,r2,65535
 10081c8:	18c4000c 	andi	r3,r3,4096
 10081cc:	9080030d 	sth	r2,12(r18)
 10081d0:	91000015 	stw	r4,0(r18)
 10081d4:	18002b26 	beq	r3,zero,1008284 <_fflush_r+0x160>
 10081d8:	0007883a 	mov	r3,zero
 10081dc:	1805883a 	mov	r2,r3
 10081e0:	94001415 	stw	r16,80(r18)
 10081e4:	dfc00417 	ldw	ra,16(sp)
 10081e8:	dcc00317 	ldw	r19,12(sp)
 10081ec:	dc800217 	ldw	r18,8(sp)
 10081f0:	dc400117 	ldw	r17,4(sp)
 10081f4:	dc000017 	ldw	r16,0(sp)
 10081f8:	dec00504 	addi	sp,sp,20
 10081fc:	f800283a 	ret
 1008200:	94400417 	ldw	r17,16(r18)
 1008204:	88001f26 	beq	r17,zero,1008284 <_fflush_r+0x160>
 1008208:	90800017 	ldw	r2,0(r18)
 100820c:	18c000cc 	andi	r3,r3,3
 1008210:	94400015 	stw	r17,0(r18)
 1008214:	1461c83a 	sub	r16,r2,r17
 1008218:	18002526 	beq	r3,zero,10082b0 <_fflush_r+0x18c>
 100821c:	0005883a 	mov	r2,zero
 1008220:	90800215 	stw	r2,8(r18)
 1008224:	0400170e 	bge	zero,r16,1008284 <_fflush_r+0x160>
 1008228:	90c00917 	ldw	r3,36(r18)
 100822c:	91400717 	ldw	r5,28(r18)
 1008230:	880d883a 	mov	r6,r17
 1008234:	800f883a 	mov	r7,r16
 1008238:	9809883a 	mov	r4,r19
 100823c:	183ee83a 	callr	r3
 1008240:	88a3883a 	add	r17,r17,r2
 1008244:	80a1c83a 	sub	r16,r16,r2
 1008248:	00bff616 	blt	zero,r2,1008224 <_fflush_r+0x100>
 100824c:	9080030b 	ldhu	r2,12(r18)
 1008250:	00ffffc4 	movi	r3,-1
 1008254:	10801014 	ori	r2,r2,64
 1008258:	9080030d 	sth	r2,12(r18)
 100825c:	1805883a 	mov	r2,r3
 1008260:	dfc00417 	ldw	ra,16(sp)
 1008264:	dcc00317 	ldw	r19,12(sp)
 1008268:	dc800217 	ldw	r18,8(sp)
 100826c:	dc400117 	ldw	r17,4(sp)
 1008270:	dc000017 	ldw	r16,0(sp)
 1008274:	dec00504 	addi	sp,sp,20
 1008278:	f800283a 	ret
 100827c:	90800f17 	ldw	r2,60(r18)
 1008280:	00bfbe16 	blt	zero,r2,100817c <_fflush_r+0x58>
 1008284:	0007883a 	mov	r3,zero
 1008288:	1805883a 	mov	r2,r3
 100828c:	dfc00417 	ldw	ra,16(sp)
 1008290:	dcc00317 	ldw	r19,12(sp)
 1008294:	dc800217 	ldw	r18,8(sp)
 1008298:	dc400117 	ldw	r17,4(sp)
 100829c:	dc000017 	ldw	r16,0(sp)
 10082a0:	dec00504 	addi	sp,sp,20
 10082a4:	f800283a 	ret
 10082a8:	10083bc0 	call	10083bc <__sinit>
 10082ac:	003fa806 	br	1008150 <_fflush_r+0x2c>
 10082b0:	90800517 	ldw	r2,20(r18)
 10082b4:	90800215 	stw	r2,8(r18)
 10082b8:	003fda06 	br	1008224 <_fflush_r+0x100>
 10082bc:	90800117 	ldw	r2,4(r18)
 10082c0:	90c00c17 	ldw	r3,48(r18)
 10082c4:	80a1c83a 	sub	r16,r16,r2
 10082c8:	183fb426 	beq	r3,zero,100819c <_fflush_r+0x78>
 10082cc:	90800f17 	ldw	r2,60(r18)
 10082d0:	80a1c83a 	sub	r16,r16,r2
 10082d4:	003fb106 	br	100819c <_fflush_r+0x78>
 10082d8:	91400717 	ldw	r5,28(r18)
 10082dc:	9809883a 	mov	r4,r19
 10082e0:	000d883a 	mov	r6,zero
 10082e4:	01c00044 	movi	r7,1
 10082e8:	403ee83a 	callr	r8
 10082ec:	1021883a 	mov	r16,r2
 10082f0:	00bfffc4 	movi	r2,-1
 10082f4:	80800226 	beq	r16,r2,1008300 <_fflush_r+0x1dc>
 10082f8:	92000a17 	ldw	r8,40(r18)
 10082fc:	003fa406 	br	1008190 <_fflush_r+0x6c>
 1008300:	98c00017 	ldw	r3,0(r19)
 1008304:	00800744 	movi	r2,29
 1008308:	18bfde26 	beq	r3,r2,1008284 <_fflush_r+0x160>
 100830c:	9080030b 	ldhu	r2,12(r18)
 1008310:	8007883a 	mov	r3,r16
 1008314:	10801014 	ori	r2,r2,64
 1008318:	9080030d 	sth	r2,12(r18)
 100831c:	003fcf06 	br	100825c <_fflush_r+0x138>

01008320 <fflush>:
 1008320:	01404074 	movhi	r5,257
 1008324:	29604904 	addi	r5,r5,-32476
 1008328:	2007883a 	mov	r3,r4
 100832c:	20000526 	beq	r4,zero,1008344 <fflush+0x24>
 1008330:	008040b4 	movhi	r2,258
 1008334:	10ba3e04 	addi	r2,r2,-5896
 1008338:	11000017 	ldw	r4,0(r2)
 100833c:	180b883a 	mov	r5,r3
 1008340:	10081241 	jmpi	1008124 <_fflush_r>
 1008344:	008040b4 	movhi	r2,258
 1008348:	10ba3f04 	addi	r2,r2,-5892
 100834c:	11000017 	ldw	r4,0(r2)
 1008350:	10091701 	jmpi	1009170 <_fwalk_reent>

01008354 <std>:
 1008354:	00804074 	movhi	r2,257
 1008358:	10ad7204 	addi	r2,r2,-19000
 100835c:	20800b15 	stw	r2,44(r4)
 1008360:	00804074 	movhi	r2,257
 1008364:	10adad04 	addi	r2,r2,-18764
 1008368:	20800815 	stw	r2,32(r4)
 100836c:	00c04074 	movhi	r3,257
 1008370:	18ed8e04 	addi	r3,r3,-18888
 1008374:	00804074 	movhi	r2,257
 1008378:	10ad7404 	addi	r2,r2,-18992
 100837c:	2140030d 	sth	r5,12(r4)
 1008380:	2180038d 	sth	r6,14(r4)
 1008384:	20c00915 	stw	r3,36(r4)
 1008388:	20800a15 	stw	r2,40(r4)
 100838c:	20000015 	stw	zero,0(r4)
 1008390:	20000115 	stw	zero,4(r4)
 1008394:	20000215 	stw	zero,8(r4)
 1008398:	20000415 	stw	zero,16(r4)
 100839c:	20000515 	stw	zero,20(r4)
 10083a0:	20000615 	stw	zero,24(r4)
 10083a4:	21000715 	stw	r4,28(r4)
 10083a8:	f800283a 	ret

010083ac <__sfp_lock_acquire>:
 10083ac:	f800283a 	ret

010083b0 <__sfp_lock_release>:
 10083b0:	f800283a 	ret

010083b4 <__sinit_lock_acquire>:
 10083b4:	f800283a 	ret

010083b8 <__sinit_lock_release>:
 10083b8:	f800283a 	ret

010083bc <__sinit>:
 10083bc:	20800e17 	ldw	r2,56(r4)
 10083c0:	defffd04 	addi	sp,sp,-12
 10083c4:	dc400115 	stw	r17,4(sp)
 10083c8:	dc000015 	stw	r16,0(sp)
 10083cc:	dfc00215 	stw	ra,8(sp)
 10083d0:	04400044 	movi	r17,1
 10083d4:	01400104 	movi	r5,4
 10083d8:	000d883a 	mov	r6,zero
 10083dc:	2021883a 	mov	r16,r4
 10083e0:	2200bb04 	addi	r8,r4,748
 10083e4:	200f883a 	mov	r7,r4
 10083e8:	10000526 	beq	r2,zero,1008400 <__sinit+0x44>
 10083ec:	dfc00217 	ldw	ra,8(sp)
 10083f0:	dc400117 	ldw	r17,4(sp)
 10083f4:	dc000017 	ldw	r16,0(sp)
 10083f8:	dec00304 	addi	sp,sp,12
 10083fc:	f800283a 	ret
 1008400:	21000117 	ldw	r4,4(r4)
 1008404:	00804074 	movhi	r2,257
 1008408:	10a12804 	addi	r2,r2,-31584
 100840c:	00c000c4 	movi	r3,3
 1008410:	80800f15 	stw	r2,60(r16)
 1008414:	80c0b915 	stw	r3,740(r16)
 1008418:	8200ba15 	stw	r8,744(r16)
 100841c:	84400e15 	stw	r17,56(r16)
 1008420:	8000b815 	stw	zero,736(r16)
 1008424:	10083540 	call	1008354 <std>
 1008428:	81000217 	ldw	r4,8(r16)
 100842c:	880d883a 	mov	r6,r17
 1008430:	800f883a 	mov	r7,r16
 1008434:	01400284 	movi	r5,10
 1008438:	10083540 	call	1008354 <std>
 100843c:	81000317 	ldw	r4,12(r16)
 1008440:	800f883a 	mov	r7,r16
 1008444:	01400484 	movi	r5,18
 1008448:	01800084 	movi	r6,2
 100844c:	dfc00217 	ldw	ra,8(sp)
 1008450:	dc400117 	ldw	r17,4(sp)
 1008454:	dc000017 	ldw	r16,0(sp)
 1008458:	dec00304 	addi	sp,sp,12
 100845c:	10083541 	jmpi	1008354 <std>

01008460 <__fp_lock>:
 1008460:	0005883a 	mov	r2,zero
 1008464:	f800283a 	ret

01008468 <__fp_unlock>:
 1008468:	0005883a 	mov	r2,zero
 100846c:	f800283a 	ret

01008470 <__fp_unlock_all>:
 1008470:	008040b4 	movhi	r2,258
 1008474:	10ba3e04 	addi	r2,r2,-5896
 1008478:	11000017 	ldw	r4,0(r2)
 100847c:	01404074 	movhi	r5,257
 1008480:	29611a04 	addi	r5,r5,-31640
 1008484:	10092381 	jmpi	1009238 <_fwalk>

01008488 <__fp_lock_all>:
 1008488:	008040b4 	movhi	r2,258
 100848c:	10ba3e04 	addi	r2,r2,-5896
 1008490:	11000017 	ldw	r4,0(r2)
 1008494:	01404074 	movhi	r5,257
 1008498:	29611804 	addi	r5,r5,-31648
 100849c:	10092381 	jmpi	1009238 <_fwalk>

010084a0 <_cleanup_r>:
 10084a0:	01404074 	movhi	r5,257
 10084a4:	29782904 	addi	r5,r5,-8028
 10084a8:	10092381 	jmpi	1009238 <_fwalk>

010084ac <_cleanup>:
 10084ac:	008040b4 	movhi	r2,258
 10084b0:	10ba3f04 	addi	r2,r2,-5892
 10084b4:	11000017 	ldw	r4,0(r2)
 10084b8:	10084a01 	jmpi	10084a0 <_cleanup_r>

010084bc <__sfmoreglue>:
 10084bc:	defffc04 	addi	sp,sp,-16
 10084c0:	dc000015 	stw	r16,0(sp)
 10084c4:	2821883a 	mov	r16,r5
 10084c8:	dc400115 	stw	r17,4(sp)
 10084cc:	01401704 	movi	r5,92
 10084d0:	2023883a 	mov	r17,r4
 10084d4:	8009883a 	mov	r4,r16
 10084d8:	dfc00315 	stw	ra,12(sp)
 10084dc:	dcc00215 	stw	r19,8(sp)
 10084e0:	10026440 	call	1002644 <__mulsi3>
 10084e4:	11400304 	addi	r5,r2,12
 10084e8:	8809883a 	mov	r4,r17
 10084ec:	1027883a 	mov	r19,r2
 10084f0:	10026a40 	call	10026a4 <_malloc_r>
 10084f4:	10c00304 	addi	r3,r2,12
 10084f8:	1023883a 	mov	r17,r2
 10084fc:	1809883a 	mov	r4,r3
 1008500:	980d883a 	mov	r6,r19
 1008504:	000b883a 	mov	r5,zero
 1008508:	10000b26 	beq	r2,zero,1008538 <__sfmoreglue+0x7c>
 100850c:	14000115 	stw	r16,4(r2)
 1008510:	10c00215 	stw	r3,8(r2)
 1008514:	10000015 	stw	zero,0(r2)
 1008518:	10098d80 	call	10098d8 <memset>
 100851c:	8805883a 	mov	r2,r17
 1008520:	dfc00317 	ldw	ra,12(sp)
 1008524:	dcc00217 	ldw	r19,8(sp)
 1008528:	dc400117 	ldw	r17,4(sp)
 100852c:	dc000017 	ldw	r16,0(sp)
 1008530:	dec00404 	addi	sp,sp,16
 1008534:	f800283a 	ret
 1008538:	0023883a 	mov	r17,zero
 100853c:	8805883a 	mov	r2,r17
 1008540:	dfc00317 	ldw	ra,12(sp)
 1008544:	dcc00217 	ldw	r19,8(sp)
 1008548:	dc400117 	ldw	r17,4(sp)
 100854c:	dc000017 	ldw	r16,0(sp)
 1008550:	dec00404 	addi	sp,sp,16
 1008554:	f800283a 	ret

01008558 <__sfp>:
 1008558:	defffd04 	addi	sp,sp,-12
 100855c:	008040b4 	movhi	r2,258
 1008560:	10ba3f04 	addi	r2,r2,-5892
 1008564:	dc000015 	stw	r16,0(sp)
 1008568:	14000017 	ldw	r16,0(r2)
 100856c:	dc400115 	stw	r17,4(sp)
 1008570:	dfc00215 	stw	ra,8(sp)
 1008574:	80800e17 	ldw	r2,56(r16)
 1008578:	2023883a 	mov	r17,r4
 100857c:	10002626 	beq	r2,zero,1008618 <__sfp+0xc0>
 1008580:	8400b804 	addi	r16,r16,736
 1008584:	80800117 	ldw	r2,4(r16)
 1008588:	81000217 	ldw	r4,8(r16)
 100858c:	10ffffc4 	addi	r3,r2,-1
 1008590:	18000916 	blt	r3,zero,10085b8 <__sfp+0x60>
 1008594:	2080030f 	ldh	r2,12(r4)
 1008598:	10000b26 	beq	r2,zero,10085c8 <__sfp+0x70>
 100859c:	017fffc4 	movi	r5,-1
 10085a0:	00000206 	br	10085ac <__sfp+0x54>
 10085a4:	2080030f 	ldh	r2,12(r4)
 10085a8:	10000726 	beq	r2,zero,10085c8 <__sfp+0x70>
 10085ac:	18ffffc4 	addi	r3,r3,-1
 10085b0:	21001704 	addi	r4,r4,92
 10085b4:	197ffb1e 	bne	r3,r5,10085a4 <__sfp+0x4c>
 10085b8:	80800017 	ldw	r2,0(r16)
 10085bc:	10001926 	beq	r2,zero,1008624 <__sfp+0xcc>
 10085c0:	1021883a 	mov	r16,r2
 10085c4:	003fef06 	br	1008584 <__sfp+0x2c>
 10085c8:	00bfffc4 	movi	r2,-1
 10085cc:	00c00044 	movi	r3,1
 10085d0:	2080038d 	sth	r2,14(r4)
 10085d4:	20c0030d 	sth	r3,12(r4)
 10085d8:	20000015 	stw	zero,0(r4)
 10085dc:	20000215 	stw	zero,8(r4)
 10085e0:	20000115 	stw	zero,4(r4)
 10085e4:	20000415 	stw	zero,16(r4)
 10085e8:	20000515 	stw	zero,20(r4)
 10085ec:	20000615 	stw	zero,24(r4)
 10085f0:	20000c15 	stw	zero,48(r4)
 10085f4:	20000d15 	stw	zero,52(r4)
 10085f8:	20001115 	stw	zero,68(r4)
 10085fc:	20001215 	stw	zero,72(r4)
 1008600:	2005883a 	mov	r2,r4
 1008604:	dfc00217 	ldw	ra,8(sp)
 1008608:	dc400117 	ldw	r17,4(sp)
 100860c:	dc000017 	ldw	r16,0(sp)
 1008610:	dec00304 	addi	sp,sp,12
 1008614:	f800283a 	ret
 1008618:	8009883a 	mov	r4,r16
 100861c:	10083bc0 	call	10083bc <__sinit>
 1008620:	003fd706 	br	1008580 <__sfp+0x28>
 1008624:	8809883a 	mov	r4,r17
 1008628:	01400104 	movi	r5,4
 100862c:	10084bc0 	call	10084bc <__sfmoreglue>
 1008630:	80800015 	stw	r2,0(r16)
 1008634:	103fe21e 	bne	r2,zero,10085c0 <__sfp+0x68>
 1008638:	00800304 	movi	r2,12
 100863c:	0009883a 	mov	r4,zero
 1008640:	88800015 	stw	r2,0(r17)
 1008644:	003fee06 	br	1008600 <__sfp+0xa8>

01008648 <_fread_r>:
 1008648:	defff504 	addi	sp,sp,-44
 100864c:	dd800715 	stw	r22,28(sp)
 1008650:	dc000115 	stw	r16,4(sp)
 1008654:	202d883a 	mov	r22,r4
 1008658:	2821883a 	mov	r16,r5
 100865c:	3809883a 	mov	r4,r7
 1008660:	300b883a 	mov	r5,r6
 1008664:	df000915 	stw	fp,36(sp)
 1008668:	ddc00815 	stw	r23,32(sp)
 100866c:	dcc00415 	stw	r19,16(sp)
 1008670:	dfc00a15 	stw	ra,40(sp)
 1008674:	dd400615 	stw	r21,24(sp)
 1008678:	dd000515 	stw	r20,20(sp)
 100867c:	dc800315 	stw	r18,12(sp)
 1008680:	dc400215 	stw	r17,8(sp)
 1008684:	d9800015 	stw	r6,0(sp)
 1008688:	3839883a 	mov	fp,r7
 100868c:	10026440 	call	1002644 <__mulsi3>
 1008690:	102f883a 	mov	r23,r2
 1008694:	dcc00b17 	ldw	r19,44(sp)
 1008698:	10005926 	beq	r2,zero,1008800 <_fread_r+0x1b8>
 100869c:	b0000226 	beq	r22,zero,10086a8 <_fread_r+0x60>
 10086a0:	b0800e17 	ldw	r2,56(r22)
 10086a4:	10005826 	beq	r2,zero,1008808 <_fread_r+0x1c0>
 10086a8:	9c400117 	ldw	r17,4(r19)
 10086ac:	88005a16 	blt	r17,zero,1008818 <_fread_r+0x1d0>
 10086b0:	9880030b 	ldhu	r2,12(r19)
 10086b4:	8029883a 	mov	r20,r16
 10086b8:	1080008c 	andi	r2,r2,2
 10086bc:	1000221e 	bne	r2,zero,1008748 <_fread_r+0x100>
 10086c0:	b825883a 	mov	r18,r23
 10086c4:	00000106 	br	10086cc <_fread_r+0x84>
 10086c8:	9c400117 	ldw	r17,4(r19)
 10086cc:	a009883a 	mov	r4,r20
 10086d0:	880d883a 	mov	r6,r17
 10086d4:	8c80552e 	bgeu	r17,r18,100882c <_fread_r+0x1e4>
 10086d8:	99400017 	ldw	r5,0(r19)
 10086dc:	a469883a 	add	r20,r20,r17
 10086e0:	9465c83a 	sub	r18,r18,r17
 10086e4:	10097580 	call	1009758 <memcpy>
 10086e8:	98800017 	ldw	r2,0(r19)
 10086ec:	b009883a 	mov	r4,r22
 10086f0:	980b883a 	mov	r5,r19
 10086f4:	1461883a 	add	r16,r2,r17
 10086f8:	9c000015 	stw	r16,0(r19)
 10086fc:	100b1dc0 	call	100b1dc <__srefill_r>
 1008700:	103ff126 	beq	r2,zero,10086c8 <_fread_r+0x80>
 1008704:	d9400017 	ldw	r5,0(sp)
 1008708:	bc89c83a 	sub	r4,r23,r18
 100870c:	10026340 	call	1002634 <__udivsi3>
 1008710:	1039883a 	mov	fp,r2
 1008714:	e005883a 	mov	r2,fp
 1008718:	dfc00a17 	ldw	ra,40(sp)
 100871c:	df000917 	ldw	fp,36(sp)
 1008720:	ddc00817 	ldw	r23,32(sp)
 1008724:	dd800717 	ldw	r22,28(sp)
 1008728:	dd400617 	ldw	r21,24(sp)
 100872c:	dd000517 	ldw	r20,20(sp)
 1008730:	dcc00417 	ldw	r19,16(sp)
 1008734:	dc800317 	ldw	r18,12(sp)
 1008738:	dc400217 	ldw	r17,8(sp)
 100873c:	dc000117 	ldw	r16,4(sp)
 1008740:	dec00b04 	addi	sp,sp,44
 1008744:	f800283a 	ret
 1008748:	b825883a 	mov	r18,r23
 100874c:	8dc03536 	bltu	r17,r23,1008824 <_fread_r+0x1dc>
 1008750:	99400017 	ldw	r5,0(r19)
 1008754:	a009883a 	mov	r4,r20
 1008758:	900d883a 	mov	r6,r18
 100875c:	10097580 	call	1009758 <memcpy>
 1008760:	9c000017 	ldw	r16,0(r19)
 1008764:	98800117 	ldw	r2,4(r19)
 1008768:	99400c17 	ldw	r5,48(r19)
 100876c:	84a1883a 	add	r16,r16,r18
 1008770:	14a3c83a 	sub	r17,r2,r18
 1008774:	a4ab883a 	add	r21,r20,r18
 1008778:	9c400115 	stw	r17,4(r19)
 100877c:	9c000015 	stw	r16,0(r19)
 1008780:	bca9c83a 	sub	r20,r23,r18
 1008784:	28000826 	beq	r5,zero,10087a8 <_fread_r+0x160>
 1008788:	a03fe226 	beq	r20,zero,1008714 <_fread_r+0xcc>
 100878c:	98801004 	addi	r2,r19,64
 1008790:	28800326 	beq	r5,r2,10087a0 <_fread_r+0x158>
 1008794:	b009883a 	mov	r4,r22
 1008798:	10089c00 	call	10089c0 <_free_r>
 100879c:	9c000017 	ldw	r16,0(r19)
 10087a0:	98000c15 	stw	zero,48(r19)
 10087a4:	00000106 	br	10087ac <_fread_r+0x164>
 10087a8:	a03fda26 	beq	r20,zero,1008714 <_fread_r+0xcc>
 10087ac:	9c800417 	ldw	r18,16(r19)
 10087b0:	9c400517 	ldw	r17,20(r19)
 10087b4:	9d400015 	stw	r21,0(r19)
 10087b8:	9d400415 	stw	r21,16(r19)
 10087bc:	9d000515 	stw	r20,20(r19)
 10087c0:	b009883a 	mov	r4,r22
 10087c4:	980b883a 	mov	r5,r19
 10087c8:	100b1dc0 	call	100b1dc <__srefill_r>
 10087cc:	98c00117 	ldw	r3,4(r19)
 10087d0:	9c800415 	stw	r18,16(r19)
 10087d4:	9c400515 	stw	r17,20(r19)
 10087d8:	a8eb883a 	add	r21,r21,r3
 10087dc:	9c000015 	stw	r16,0(r19)
 10087e0:	a0e9c83a 	sub	r20,r20,r3
 10087e4:	98000115 	stw	zero,4(r19)
 10087e8:	103fef26 	beq	r2,zero,10087a8 <_fread_r+0x160>
 10087ec:	d9400017 	ldw	r5,0(sp)
 10087f0:	bd09c83a 	sub	r4,r23,r20
 10087f4:	10026340 	call	1002634 <__udivsi3>
 10087f8:	1039883a 	mov	fp,r2
 10087fc:	003fc506 	br	1008714 <_fread_r+0xcc>
 1008800:	0039883a 	mov	fp,zero
 1008804:	003fc306 	br	1008714 <_fread_r+0xcc>
 1008808:	b009883a 	mov	r4,r22
 100880c:	10083bc0 	call	10083bc <__sinit>
 1008810:	9c400117 	ldw	r17,4(r19)
 1008814:	883fa60e 	bge	r17,zero,10086b0 <_fread_r+0x68>
 1008818:	0023883a 	mov	r17,zero
 100881c:	98000115 	stw	zero,4(r19)
 1008820:	003fa306 	br	10086b0 <_fread_r+0x68>
 1008824:	8825883a 	mov	r18,r17
 1008828:	003fc906 	br	1008750 <_fread_r+0x108>
 100882c:	99400017 	ldw	r5,0(r19)
 1008830:	900d883a 	mov	r6,r18
 1008834:	10097580 	call	1009758 <memcpy>
 1008838:	98c00117 	ldw	r3,4(r19)
 100883c:	98800017 	ldw	r2,0(r19)
 1008840:	1c87c83a 	sub	r3,r3,r18
 1008844:	1485883a 	add	r2,r2,r18
 1008848:	98800015 	stw	r2,0(r19)
 100884c:	98c00115 	stw	r3,4(r19)
 1008850:	003fb006 	br	1008714 <_fread_r+0xcc>

01008854 <fread>:
 1008854:	008040b4 	movhi	r2,258
 1008858:	10ba3e04 	addi	r2,r2,-5896
 100885c:	2017883a 	mov	r11,r4
 1008860:	11000017 	ldw	r4,0(r2)
 1008864:	defffe04 	addi	sp,sp,-8
 1008868:	3013883a 	mov	r9,r6
 100886c:	2805883a 	mov	r2,r5
 1008870:	d9c00015 	stw	r7,0(sp)
 1008874:	580b883a 	mov	r5,r11
 1008878:	100d883a 	mov	r6,r2
 100887c:	480f883a 	mov	r7,r9
 1008880:	dfc00115 	stw	ra,4(sp)
 1008884:	10086480 	call	1008648 <_fread_r>
 1008888:	dfc00117 	ldw	ra,4(sp)
 100888c:	dec00204 	addi	sp,sp,8
 1008890:	f800283a 	ret

01008894 <_malloc_trim_r>:
 1008894:	defffb04 	addi	sp,sp,-20
 1008898:	dcc00315 	stw	r19,12(sp)
 100889c:	04c040b4 	movhi	r19,258
 10088a0:	9cf33d04 	addi	r19,r19,-13068
 10088a4:	dc800215 	stw	r18,8(sp)
 10088a8:	dc400115 	stw	r17,4(sp)
 10088ac:	dc000015 	stw	r16,0(sp)
 10088b0:	2823883a 	mov	r17,r5
 10088b4:	2025883a 	mov	r18,r4
 10088b8:	dfc00415 	stw	ra,16(sp)
 10088bc:	10120f40 	call	10120f4 <__malloc_lock>
 10088c0:	98800217 	ldw	r2,8(r19)
 10088c4:	9009883a 	mov	r4,r18
 10088c8:	000b883a 	mov	r5,zero
 10088cc:	10c00117 	ldw	r3,4(r2)
 10088d0:	00bfff04 	movi	r2,-4
 10088d4:	18a0703a 	and	r16,r3,r2
 10088d8:	8463c83a 	sub	r17,r16,r17
 10088dc:	8c43fbc4 	addi	r17,r17,4079
 10088e0:	8822d33a 	srli	r17,r17,12
 10088e4:	0083ffc4 	movi	r2,4095
 10088e8:	8c7fffc4 	addi	r17,r17,-1
 10088ec:	8822933a 	slli	r17,r17,12
 10088f0:	1440060e 	bge	r2,r17,100890c <_malloc_trim_r+0x78>
 10088f4:	1002fc80 	call	1002fc8 <_sbrk_r>
 10088f8:	98c00217 	ldw	r3,8(r19)
 10088fc:	9009883a 	mov	r4,r18
 1008900:	044bc83a 	sub	r5,zero,r17
 1008904:	80c7883a 	add	r3,r16,r3
 1008908:	10c00926 	beq	r2,r3,1008930 <_malloc_trim_r+0x9c>
 100890c:	10121140 	call	1012114 <__malloc_unlock>
 1008910:	0005883a 	mov	r2,zero
 1008914:	dfc00417 	ldw	ra,16(sp)
 1008918:	dcc00317 	ldw	r19,12(sp)
 100891c:	dc800217 	ldw	r18,8(sp)
 1008920:	dc400117 	ldw	r17,4(sp)
 1008924:	dc000017 	ldw	r16,0(sp)
 1008928:	dec00504 	addi	sp,sp,20
 100892c:	f800283a 	ret
 1008930:	9009883a 	mov	r4,r18
 1008934:	1002fc80 	call	1002fc8 <_sbrk_r>
 1008938:	844dc83a 	sub	r6,r16,r17
 100893c:	00ffffc4 	movi	r3,-1
 1008940:	9009883a 	mov	r4,r18
 1008944:	000b883a 	mov	r5,zero
 1008948:	01c040b4 	movhi	r7,258
 100894c:	39c18604 	addi	r7,r7,1560
 1008950:	31800054 	ori	r6,r6,1
 1008954:	10c00926 	beq	r2,r3,100897c <_malloc_trim_r+0xe8>
 1008958:	38800017 	ldw	r2,0(r7)
 100895c:	98c00217 	ldw	r3,8(r19)
 1008960:	9009883a 	mov	r4,r18
 1008964:	1445c83a 	sub	r2,r2,r17
 1008968:	38800015 	stw	r2,0(r7)
 100896c:	19800115 	stw	r6,4(r3)
 1008970:	10121140 	call	1012114 <__malloc_unlock>
 1008974:	00800044 	movi	r2,1
 1008978:	003fe606 	br	1008914 <_malloc_trim_r+0x80>
 100897c:	1002fc80 	call	1002fc8 <_sbrk_r>
 1008980:	99800217 	ldw	r6,8(r19)
 1008984:	100f883a 	mov	r7,r2
 1008988:	9009883a 	mov	r4,r18
 100898c:	1187c83a 	sub	r3,r2,r6
 1008990:	008003c4 	movi	r2,15
 1008994:	19400054 	ori	r5,r3,1
 1008998:	10ffdc0e 	bge	r2,r3,100890c <_malloc_trim_r+0x78>
 100899c:	008040b4 	movhi	r2,258
 10089a0:	10ba3c04 	addi	r2,r2,-5904
 10089a4:	10c00017 	ldw	r3,0(r2)
 10089a8:	008040b4 	movhi	r2,258
 10089ac:	10818604 	addi	r2,r2,1560
 10089b0:	31400115 	stw	r5,4(r6)
 10089b4:	38c7c83a 	sub	r3,r7,r3
 10089b8:	10c00015 	stw	r3,0(r2)
 10089bc:	003fd306 	br	100890c <_malloc_trim_r+0x78>

010089c0 <_free_r>:
 10089c0:	defffd04 	addi	sp,sp,-12
 10089c4:	dc400115 	stw	r17,4(sp)
 10089c8:	dc000015 	stw	r16,0(sp)
 10089cc:	dfc00215 	stw	ra,8(sp)
 10089d0:	2821883a 	mov	r16,r5
 10089d4:	2023883a 	mov	r17,r4
 10089d8:	28005a26 	beq	r5,zero,1008b44 <_free_r+0x184>
 10089dc:	10120f40 	call	10120f4 <__malloc_lock>
 10089e0:	823ffe04 	addi	r8,r16,-8
 10089e4:	41400117 	ldw	r5,4(r8)
 10089e8:	00bfff84 	movi	r2,-2
 10089ec:	028040b4 	movhi	r10,258
 10089f0:	52b33d04 	addi	r10,r10,-13068
 10089f4:	288e703a 	and	r7,r5,r2
 10089f8:	41cd883a 	add	r6,r8,r7
 10089fc:	30c00117 	ldw	r3,4(r6)
 1008a00:	51000217 	ldw	r4,8(r10)
 1008a04:	00bfff04 	movi	r2,-4
 1008a08:	1892703a 	and	r9,r3,r2
 1008a0c:	5017883a 	mov	r11,r10
 1008a10:	31006726 	beq	r6,r4,1008bb0 <_free_r+0x1f0>
 1008a14:	2880004c 	andi	r2,r5,1
 1008a18:	1005003a 	cmpeq	r2,r2,zero
 1008a1c:	32400115 	stw	r9,4(r6)
 1008a20:	10001a1e 	bne	r2,zero,1008a8c <_free_r+0xcc>
 1008a24:	000b883a 	mov	r5,zero
 1008a28:	3247883a 	add	r3,r6,r9
 1008a2c:	18800117 	ldw	r2,4(r3)
 1008a30:	1080004c 	andi	r2,r2,1
 1008a34:	1000231e 	bne	r2,zero,1008ac4 <_free_r+0x104>
 1008a38:	280ac03a 	cmpne	r5,r5,zero
 1008a3c:	3a4f883a 	add	r7,r7,r9
 1008a40:	2800451e 	bne	r5,zero,1008b58 <_free_r+0x198>
 1008a44:	31000217 	ldw	r4,8(r6)
 1008a48:	008040b4 	movhi	r2,258
 1008a4c:	10b33f04 	addi	r2,r2,-13060
 1008a50:	20807b26 	beq	r4,r2,1008c40 <_free_r+0x280>
 1008a54:	30800317 	ldw	r2,12(r6)
 1008a58:	3a07883a 	add	r3,r7,r8
 1008a5c:	19c00015 	stw	r7,0(r3)
 1008a60:	11000215 	stw	r4,8(r2)
 1008a64:	20800315 	stw	r2,12(r4)
 1008a68:	38800054 	ori	r2,r7,1
 1008a6c:	40800115 	stw	r2,4(r8)
 1008a70:	28001a26 	beq	r5,zero,1008adc <_free_r+0x11c>
 1008a74:	8809883a 	mov	r4,r17
 1008a78:	dfc00217 	ldw	ra,8(sp)
 1008a7c:	dc400117 	ldw	r17,4(sp)
 1008a80:	dc000017 	ldw	r16,0(sp)
 1008a84:	dec00304 	addi	sp,sp,12
 1008a88:	10121141 	jmpi	1012114 <__malloc_unlock>
 1008a8c:	80bffe17 	ldw	r2,-8(r16)
 1008a90:	50c00204 	addi	r3,r10,8
 1008a94:	4091c83a 	sub	r8,r8,r2
 1008a98:	41000217 	ldw	r4,8(r8)
 1008a9c:	388f883a 	add	r7,r7,r2
 1008aa0:	20c06126 	beq	r4,r3,1008c28 <_free_r+0x268>
 1008aa4:	40800317 	ldw	r2,12(r8)
 1008aa8:	3247883a 	add	r3,r6,r9
 1008aac:	000b883a 	mov	r5,zero
 1008ab0:	11000215 	stw	r4,8(r2)
 1008ab4:	20800315 	stw	r2,12(r4)
 1008ab8:	18800117 	ldw	r2,4(r3)
 1008abc:	1080004c 	andi	r2,r2,1
 1008ac0:	103fdd26 	beq	r2,zero,1008a38 <_free_r+0x78>
 1008ac4:	38800054 	ori	r2,r7,1
 1008ac8:	3a07883a 	add	r3,r7,r8
 1008acc:	280ac03a 	cmpne	r5,r5,zero
 1008ad0:	40800115 	stw	r2,4(r8)
 1008ad4:	19c00015 	stw	r7,0(r3)
 1008ad8:	283fe61e 	bne	r5,zero,1008a74 <_free_r+0xb4>
 1008adc:	00807fc4 	movi	r2,511
 1008ae0:	11c01f2e 	bgeu	r2,r7,1008b60 <_free_r+0x1a0>
 1008ae4:	3806d27a 	srli	r3,r7,9
 1008ae8:	1800481e 	bne	r3,zero,1008c0c <_free_r+0x24c>
 1008aec:	3804d0fa 	srli	r2,r7,3
 1008af0:	100690fa 	slli	r3,r2,3
 1008af4:	1acd883a 	add	r6,r3,r11
 1008af8:	31400217 	ldw	r5,8(r6)
 1008afc:	31405926 	beq	r6,r5,1008c64 <_free_r+0x2a4>
 1008b00:	28800117 	ldw	r2,4(r5)
 1008b04:	00ffff04 	movi	r3,-4
 1008b08:	10c4703a 	and	r2,r2,r3
 1008b0c:	3880022e 	bgeu	r7,r2,1008b18 <_free_r+0x158>
 1008b10:	29400217 	ldw	r5,8(r5)
 1008b14:	317ffa1e 	bne	r6,r5,1008b00 <_free_r+0x140>
 1008b18:	29800317 	ldw	r6,12(r5)
 1008b1c:	41800315 	stw	r6,12(r8)
 1008b20:	41400215 	stw	r5,8(r8)
 1008b24:	8809883a 	mov	r4,r17
 1008b28:	2a000315 	stw	r8,12(r5)
 1008b2c:	32000215 	stw	r8,8(r6)
 1008b30:	dfc00217 	ldw	ra,8(sp)
 1008b34:	dc400117 	ldw	r17,4(sp)
 1008b38:	dc000017 	ldw	r16,0(sp)
 1008b3c:	dec00304 	addi	sp,sp,12
 1008b40:	10121141 	jmpi	1012114 <__malloc_unlock>
 1008b44:	dfc00217 	ldw	ra,8(sp)
 1008b48:	dc400117 	ldw	r17,4(sp)
 1008b4c:	dc000017 	ldw	r16,0(sp)
 1008b50:	dec00304 	addi	sp,sp,12
 1008b54:	f800283a 	ret
 1008b58:	31000217 	ldw	r4,8(r6)
 1008b5c:	003fbd06 	br	1008a54 <_free_r+0x94>
 1008b60:	3806d0fa 	srli	r3,r7,3
 1008b64:	00800044 	movi	r2,1
 1008b68:	51400117 	ldw	r5,4(r10)
 1008b6c:	180890fa 	slli	r4,r3,3
 1008b70:	1807d0ba 	srai	r3,r3,2
 1008b74:	22c9883a 	add	r4,r4,r11
 1008b78:	21800217 	ldw	r6,8(r4)
 1008b7c:	10c4983a 	sll	r2,r2,r3
 1008b80:	41000315 	stw	r4,12(r8)
 1008b84:	41800215 	stw	r6,8(r8)
 1008b88:	288ab03a 	or	r5,r5,r2
 1008b8c:	22000215 	stw	r8,8(r4)
 1008b90:	8809883a 	mov	r4,r17
 1008b94:	51400115 	stw	r5,4(r10)
 1008b98:	32000315 	stw	r8,12(r6)
 1008b9c:	dfc00217 	ldw	ra,8(sp)
 1008ba0:	dc400117 	ldw	r17,4(sp)
 1008ba4:	dc000017 	ldw	r16,0(sp)
 1008ba8:	dec00304 	addi	sp,sp,12
 1008bac:	10121141 	jmpi	1012114 <__malloc_unlock>
 1008bb0:	2880004c 	andi	r2,r5,1
 1008bb4:	3a4d883a 	add	r6,r7,r9
 1008bb8:	1000071e 	bne	r2,zero,1008bd8 <_free_r+0x218>
 1008bbc:	80bffe17 	ldw	r2,-8(r16)
 1008bc0:	4091c83a 	sub	r8,r8,r2
 1008bc4:	41000317 	ldw	r4,12(r8)
 1008bc8:	40c00217 	ldw	r3,8(r8)
 1008bcc:	308d883a 	add	r6,r6,r2
 1008bd0:	20c00215 	stw	r3,8(r4)
 1008bd4:	19000315 	stw	r4,12(r3)
 1008bd8:	008040b4 	movhi	r2,258
 1008bdc:	10ba3b04 	addi	r2,r2,-5908
 1008be0:	11000017 	ldw	r4,0(r2)
 1008be4:	30c00054 	ori	r3,r6,1
 1008be8:	52000215 	stw	r8,8(r10)
 1008bec:	40c00115 	stw	r3,4(r8)
 1008bf0:	313fa036 	bltu	r6,r4,1008a74 <_free_r+0xb4>
 1008bf4:	008040b4 	movhi	r2,258
 1008bf8:	10816404 	addi	r2,r2,1424
 1008bfc:	11400017 	ldw	r5,0(r2)
 1008c00:	8809883a 	mov	r4,r17
 1008c04:	10088940 	call	1008894 <_malloc_trim_r>
 1008c08:	003f9a06 	br	1008a74 <_free_r+0xb4>
 1008c0c:	00800104 	movi	r2,4
 1008c10:	10c0072e 	bgeu	r2,r3,1008c30 <_free_r+0x270>
 1008c14:	00800504 	movi	r2,20
 1008c18:	10c01936 	bltu	r2,r3,1008c80 <_free_r+0x2c0>
 1008c1c:	188016c4 	addi	r2,r3,91
 1008c20:	100690fa 	slli	r3,r2,3
 1008c24:	003fb306 	br	1008af4 <_free_r+0x134>
 1008c28:	01400044 	movi	r5,1
 1008c2c:	003f7e06 	br	1008a28 <_free_r+0x68>
 1008c30:	3804d1ba 	srli	r2,r7,6
 1008c34:	10800e04 	addi	r2,r2,56
 1008c38:	100690fa 	slli	r3,r2,3
 1008c3c:	003fad06 	br	1008af4 <_free_r+0x134>
 1008c40:	22000315 	stw	r8,12(r4)
 1008c44:	22000215 	stw	r8,8(r4)
 1008c48:	3a05883a 	add	r2,r7,r8
 1008c4c:	38c00054 	ori	r3,r7,1
 1008c50:	11c00015 	stw	r7,0(r2)
 1008c54:	41000215 	stw	r4,8(r8)
 1008c58:	40c00115 	stw	r3,4(r8)
 1008c5c:	41000315 	stw	r4,12(r8)
 1008c60:	003f8406 	br	1008a74 <_free_r+0xb4>
 1008c64:	1005d0ba 	srai	r2,r2,2
 1008c68:	00c00044 	movi	r3,1
 1008c6c:	51000117 	ldw	r4,4(r10)
 1008c70:	1886983a 	sll	r3,r3,r2
 1008c74:	20c8b03a 	or	r4,r4,r3
 1008c78:	51000115 	stw	r4,4(r10)
 1008c7c:	003fa706 	br	1008b1c <_free_r+0x15c>
 1008c80:	00801504 	movi	r2,84
 1008c84:	10c00436 	bltu	r2,r3,1008c98 <_free_r+0x2d8>
 1008c88:	3804d33a 	srli	r2,r7,12
 1008c8c:	10801b84 	addi	r2,r2,110
 1008c90:	100690fa 	slli	r3,r2,3
 1008c94:	003f9706 	br	1008af4 <_free_r+0x134>
 1008c98:	00805504 	movi	r2,340
 1008c9c:	10c00436 	bltu	r2,r3,1008cb0 <_free_r+0x2f0>
 1008ca0:	3804d3fa 	srli	r2,r7,15
 1008ca4:	10801dc4 	addi	r2,r2,119
 1008ca8:	100690fa 	slli	r3,r2,3
 1008cac:	003f9106 	br	1008af4 <_free_r+0x134>
 1008cb0:	00815504 	movi	r2,1364
 1008cb4:	10c0032e 	bgeu	r2,r3,1008cc4 <_free_r+0x304>
 1008cb8:	00801f84 	movi	r2,126
 1008cbc:	00c0fc04 	movi	r3,1008
 1008cc0:	003f8c06 	br	1008af4 <_free_r+0x134>
 1008cc4:	3804d4ba 	srli	r2,r7,18
 1008cc8:	10801f04 	addi	r2,r2,124
 1008ccc:	100690fa 	slli	r3,r2,3
 1008cd0:	003f8806 	br	1008af4 <_free_r+0x134>

01008cd4 <__sfvwrite_r>:
 1008cd4:	30800217 	ldw	r2,8(r6)
 1008cd8:	defff504 	addi	sp,sp,-44
 1008cdc:	df000915 	stw	fp,36(sp)
 1008ce0:	dd800715 	stw	r22,28(sp)
 1008ce4:	dc800315 	stw	r18,12(sp)
 1008ce8:	dfc00a15 	stw	ra,40(sp)
 1008cec:	ddc00815 	stw	r23,32(sp)
 1008cf0:	dd400615 	stw	r21,24(sp)
 1008cf4:	dd000515 	stw	r20,20(sp)
 1008cf8:	dcc00415 	stw	r19,16(sp)
 1008cfc:	dc400215 	stw	r17,8(sp)
 1008d00:	dc000115 	stw	r16,4(sp)
 1008d04:	302d883a 	mov	r22,r6
 1008d08:	2039883a 	mov	fp,r4
 1008d0c:	2825883a 	mov	r18,r5
 1008d10:	10001c26 	beq	r2,zero,1008d84 <__sfvwrite_r+0xb0>
 1008d14:	29c0030b 	ldhu	r7,12(r5)
 1008d18:	3880020c 	andi	r2,r7,8
 1008d1c:	10002726 	beq	r2,zero,1008dbc <__sfvwrite_r+0xe8>
 1008d20:	28800417 	ldw	r2,16(r5)
 1008d24:	10002526 	beq	r2,zero,1008dbc <__sfvwrite_r+0xe8>
 1008d28:	3880008c 	andi	r2,r7,2
 1008d2c:	b5400017 	ldw	r21,0(r22)
 1008d30:	10002826 	beq	r2,zero,1008dd4 <__sfvwrite_r+0x100>
 1008d34:	0021883a 	mov	r16,zero
 1008d38:	0023883a 	mov	r17,zero
 1008d3c:	880d883a 	mov	r6,r17
 1008d40:	e009883a 	mov	r4,fp
 1008d44:	00810004 	movi	r2,1024
 1008d48:	80006e26 	beq	r16,zero,1008f04 <__sfvwrite_r+0x230>
 1008d4c:	800f883a 	mov	r7,r16
 1008d50:	91400717 	ldw	r5,28(r18)
 1008d54:	1400012e 	bgeu	r2,r16,1008d5c <__sfvwrite_r+0x88>
 1008d58:	100f883a 	mov	r7,r2
 1008d5c:	90c00917 	ldw	r3,36(r18)
 1008d60:	183ee83a 	callr	r3
 1008d64:	1007883a 	mov	r3,r2
 1008d68:	80a1c83a 	sub	r16,r16,r2
 1008d6c:	88a3883a 	add	r17,r17,r2
 1008d70:	00806d0e 	bge	zero,r2,1008f28 <__sfvwrite_r+0x254>
 1008d74:	b0800217 	ldw	r2,8(r22)
 1008d78:	10c5c83a 	sub	r2,r2,r3
 1008d7c:	b0800215 	stw	r2,8(r22)
 1008d80:	103fee1e 	bne	r2,zero,1008d3c <__sfvwrite_r+0x68>
 1008d84:	0009883a 	mov	r4,zero
 1008d88:	2005883a 	mov	r2,r4
 1008d8c:	dfc00a17 	ldw	ra,40(sp)
 1008d90:	df000917 	ldw	fp,36(sp)
 1008d94:	ddc00817 	ldw	r23,32(sp)
 1008d98:	dd800717 	ldw	r22,28(sp)
 1008d9c:	dd400617 	ldw	r21,24(sp)
 1008da0:	dd000517 	ldw	r20,20(sp)
 1008da4:	dcc00417 	ldw	r19,16(sp)
 1008da8:	dc800317 	ldw	r18,12(sp)
 1008dac:	dc400217 	ldw	r17,8(sp)
 1008db0:	dc000117 	ldw	r16,4(sp)
 1008db4:	dec00b04 	addi	sp,sp,44
 1008db8:	f800283a 	ret
 1008dbc:	10067f00 	call	10067f0 <__swsetup_r>
 1008dc0:	1000e41e 	bne	r2,zero,1009154 <__sfvwrite_r+0x480>
 1008dc4:	91c0030b 	ldhu	r7,12(r18)
 1008dc8:	b5400017 	ldw	r21,0(r22)
 1008dcc:	3880008c 	andi	r2,r7,2
 1008dd0:	103fd81e 	bne	r2,zero,1008d34 <__sfvwrite_r+0x60>
 1008dd4:	3880004c 	andi	r2,r7,1
 1008dd8:	1005003a 	cmpeq	r2,r2,zero
 1008ddc:	10005726 	beq	r2,zero,1008f3c <__sfvwrite_r+0x268>
 1008de0:	0029883a 	mov	r20,zero
 1008de4:	002f883a 	mov	r23,zero
 1008de8:	a0004226 	beq	r20,zero,1008ef4 <__sfvwrite_r+0x220>
 1008dec:	3880800c 	andi	r2,r7,512
 1008df0:	94000217 	ldw	r16,8(r18)
 1008df4:	10008b26 	beq	r2,zero,1009024 <__sfvwrite_r+0x350>
 1008df8:	800d883a 	mov	r6,r16
 1008dfc:	a400a536 	bltu	r20,r16,1009094 <__sfvwrite_r+0x3c0>
 1008e00:	3881200c 	andi	r2,r7,1152
 1008e04:	10002726 	beq	r2,zero,1008ea4 <__sfvwrite_r+0x1d0>
 1008e08:	90800517 	ldw	r2,20(r18)
 1008e0c:	92000417 	ldw	r8,16(r18)
 1008e10:	91400017 	ldw	r5,0(r18)
 1008e14:	1087883a 	add	r3,r2,r2
 1008e18:	1887883a 	add	r3,r3,r2
 1008e1c:	1808d7fa 	srli	r4,r3,31
 1008e20:	2a21c83a 	sub	r16,r5,r8
 1008e24:	80800044 	addi	r2,r16,1
 1008e28:	20c9883a 	add	r4,r4,r3
 1008e2c:	2027d07a 	srai	r19,r4,1
 1008e30:	a085883a 	add	r2,r20,r2
 1008e34:	980d883a 	mov	r6,r19
 1008e38:	9880022e 	bgeu	r19,r2,1008e44 <__sfvwrite_r+0x170>
 1008e3c:	1027883a 	mov	r19,r2
 1008e40:	100d883a 	mov	r6,r2
 1008e44:	3881000c 	andi	r2,r7,1024
 1008e48:	1000b826 	beq	r2,zero,100912c <__sfvwrite_r+0x458>
 1008e4c:	300b883a 	mov	r5,r6
 1008e50:	e009883a 	mov	r4,fp
 1008e54:	10026a40 	call	10026a4 <_malloc_r>
 1008e58:	10003126 	beq	r2,zero,1008f20 <__sfvwrite_r+0x24c>
 1008e5c:	91400417 	ldw	r5,16(r18)
 1008e60:	1009883a 	mov	r4,r2
 1008e64:	800d883a 	mov	r6,r16
 1008e68:	1023883a 	mov	r17,r2
 1008e6c:	10097580 	call	1009758 <memcpy>
 1008e70:	90c0030b 	ldhu	r3,12(r18)
 1008e74:	00beffc4 	movi	r2,-1025
 1008e78:	1886703a 	and	r3,r3,r2
 1008e7c:	18c02014 	ori	r3,r3,128
 1008e80:	90c0030d 	sth	r3,12(r18)
 1008e84:	9c07c83a 	sub	r3,r19,r16
 1008e88:	8c05883a 	add	r2,r17,r16
 1008e8c:	a00d883a 	mov	r6,r20
 1008e90:	a021883a 	mov	r16,r20
 1008e94:	90800015 	stw	r2,0(r18)
 1008e98:	90c00215 	stw	r3,8(r18)
 1008e9c:	94400415 	stw	r17,16(r18)
 1008ea0:	94c00515 	stw	r19,20(r18)
 1008ea4:	91000017 	ldw	r4,0(r18)
 1008ea8:	b80b883a 	mov	r5,r23
 1008eac:	a023883a 	mov	r17,r20
 1008eb0:	10097f80 	call	10097f8 <memmove>
 1008eb4:	90c00217 	ldw	r3,8(r18)
 1008eb8:	90800017 	ldw	r2,0(r18)
 1008ebc:	a027883a 	mov	r19,r20
 1008ec0:	1c07c83a 	sub	r3,r3,r16
 1008ec4:	1405883a 	add	r2,r2,r16
 1008ec8:	90c00215 	stw	r3,8(r18)
 1008ecc:	a021883a 	mov	r16,r20
 1008ed0:	90800015 	stw	r2,0(r18)
 1008ed4:	b0800217 	ldw	r2,8(r22)
 1008ed8:	1405c83a 	sub	r2,r2,r16
 1008edc:	b0800215 	stw	r2,8(r22)
 1008ee0:	103fa826 	beq	r2,zero,1008d84 <__sfvwrite_r+0xb0>
 1008ee4:	a469c83a 	sub	r20,r20,r17
 1008ee8:	91c0030b 	ldhu	r7,12(r18)
 1008eec:	bcef883a 	add	r23,r23,r19
 1008ef0:	a03fbe1e 	bne	r20,zero,1008dec <__sfvwrite_r+0x118>
 1008ef4:	adc00017 	ldw	r23,0(r21)
 1008ef8:	ad000117 	ldw	r20,4(r21)
 1008efc:	ad400204 	addi	r21,r21,8
 1008f00:	003fb906 	br	1008de8 <__sfvwrite_r+0x114>
 1008f04:	ac400017 	ldw	r17,0(r21)
 1008f08:	ac000117 	ldw	r16,4(r21)
 1008f0c:	ad400204 	addi	r21,r21,8
 1008f10:	003f8a06 	br	1008d3c <__sfvwrite_r+0x68>
 1008f14:	91400417 	ldw	r5,16(r18)
 1008f18:	e009883a 	mov	r4,fp
 1008f1c:	10089c00 	call	10089c0 <_free_r>
 1008f20:	00800304 	movi	r2,12
 1008f24:	e0800015 	stw	r2,0(fp)
 1008f28:	9080030b 	ldhu	r2,12(r18)
 1008f2c:	013fffc4 	movi	r4,-1
 1008f30:	10801014 	ori	r2,r2,64
 1008f34:	9080030d 	sth	r2,12(r18)
 1008f38:	003f9306 	br	1008d88 <__sfvwrite_r+0xb4>
 1008f3c:	0027883a 	mov	r19,zero
 1008f40:	002f883a 	mov	r23,zero
 1008f44:	d8000015 	stw	zero,0(sp)
 1008f48:	0029883a 	mov	r20,zero
 1008f4c:	98001e26 	beq	r19,zero,1008fc8 <__sfvwrite_r+0x2f4>
 1008f50:	d8c00017 	ldw	r3,0(sp)
 1008f54:	1804c03a 	cmpne	r2,r3,zero
 1008f58:	10005e26 	beq	r2,zero,10090d4 <__sfvwrite_r+0x400>
 1008f5c:	9821883a 	mov	r16,r19
 1008f60:	a4c0012e 	bgeu	r20,r19,1008f68 <__sfvwrite_r+0x294>
 1008f64:	a021883a 	mov	r16,r20
 1008f68:	91000017 	ldw	r4,0(r18)
 1008f6c:	90800417 	ldw	r2,16(r18)
 1008f70:	91800217 	ldw	r6,8(r18)
 1008f74:	91c00517 	ldw	r7,20(r18)
 1008f78:	1100022e 	bgeu	r2,r4,1008f84 <__sfvwrite_r+0x2b0>
 1008f7c:	31e3883a 	add	r17,r6,r7
 1008f80:	8c001616 	blt	r17,r16,1008fdc <__sfvwrite_r+0x308>
 1008f84:	81c03816 	blt	r16,r7,1009068 <__sfvwrite_r+0x394>
 1008f88:	90c00917 	ldw	r3,36(r18)
 1008f8c:	91400717 	ldw	r5,28(r18)
 1008f90:	e009883a 	mov	r4,fp
 1008f94:	b80d883a 	mov	r6,r23
 1008f98:	183ee83a 	callr	r3
 1008f9c:	1023883a 	mov	r17,r2
 1008fa0:	00bfe10e 	bge	zero,r2,1008f28 <__sfvwrite_r+0x254>
 1008fa4:	a469c83a 	sub	r20,r20,r17
 1008fa8:	a0001826 	beq	r20,zero,100900c <__sfvwrite_r+0x338>
 1008fac:	b0800217 	ldw	r2,8(r22)
 1008fb0:	1445c83a 	sub	r2,r2,r17
 1008fb4:	b0800215 	stw	r2,8(r22)
 1008fb8:	103f7226 	beq	r2,zero,1008d84 <__sfvwrite_r+0xb0>
 1008fbc:	9c67c83a 	sub	r19,r19,r17
 1008fc0:	bc6f883a 	add	r23,r23,r17
 1008fc4:	983fe21e 	bne	r19,zero,1008f50 <__sfvwrite_r+0x27c>
 1008fc8:	adc00017 	ldw	r23,0(r21)
 1008fcc:	acc00117 	ldw	r19,4(r21)
 1008fd0:	ad400204 	addi	r21,r21,8
 1008fd4:	d8000015 	stw	zero,0(sp)
 1008fd8:	003fdc06 	br	1008f4c <__sfvwrite_r+0x278>
 1008fdc:	b80b883a 	mov	r5,r23
 1008fe0:	880d883a 	mov	r6,r17
 1008fe4:	10097f80 	call	10097f8 <memmove>
 1008fe8:	90c00017 	ldw	r3,0(r18)
 1008fec:	e009883a 	mov	r4,fp
 1008ff0:	900b883a 	mov	r5,r18
 1008ff4:	1c47883a 	add	r3,r3,r17
 1008ff8:	90c00015 	stw	r3,0(r18)
 1008ffc:	10081240 	call	1008124 <_fflush_r>
 1009000:	103fc91e 	bne	r2,zero,1008f28 <__sfvwrite_r+0x254>
 1009004:	a469c83a 	sub	r20,r20,r17
 1009008:	a03fe81e 	bne	r20,zero,1008fac <__sfvwrite_r+0x2d8>
 100900c:	e009883a 	mov	r4,fp
 1009010:	900b883a 	mov	r5,r18
 1009014:	10081240 	call	1008124 <_fflush_r>
 1009018:	103fc31e 	bne	r2,zero,1008f28 <__sfvwrite_r+0x254>
 100901c:	d8000015 	stw	zero,0(sp)
 1009020:	003fe206 	br	1008fac <__sfvwrite_r+0x2d8>
 1009024:	91000017 	ldw	r4,0(r18)
 1009028:	90800417 	ldw	r2,16(r18)
 100902c:	1100022e 	bgeu	r2,r4,1009038 <__sfvwrite_r+0x364>
 1009030:	8023883a 	mov	r17,r16
 1009034:	85003136 	bltu	r16,r20,10090fc <__sfvwrite_r+0x428>
 1009038:	91c00517 	ldw	r7,20(r18)
 100903c:	a1c01836 	bltu	r20,r7,10090a0 <__sfvwrite_r+0x3cc>
 1009040:	90c00917 	ldw	r3,36(r18)
 1009044:	91400717 	ldw	r5,28(r18)
 1009048:	e009883a 	mov	r4,fp
 100904c:	b80d883a 	mov	r6,r23
 1009050:	183ee83a 	callr	r3
 1009054:	1021883a 	mov	r16,r2
 1009058:	00bfb30e 	bge	zero,r2,1008f28 <__sfvwrite_r+0x254>
 100905c:	1023883a 	mov	r17,r2
 1009060:	1027883a 	mov	r19,r2
 1009064:	003f9b06 	br	1008ed4 <__sfvwrite_r+0x200>
 1009068:	b80b883a 	mov	r5,r23
 100906c:	800d883a 	mov	r6,r16
 1009070:	10097f80 	call	10097f8 <memmove>
 1009074:	90c00217 	ldw	r3,8(r18)
 1009078:	90800017 	ldw	r2,0(r18)
 100907c:	8023883a 	mov	r17,r16
 1009080:	1c07c83a 	sub	r3,r3,r16
 1009084:	1405883a 	add	r2,r2,r16
 1009088:	90c00215 	stw	r3,8(r18)
 100908c:	90800015 	stw	r2,0(r18)
 1009090:	003fc406 	br	1008fa4 <__sfvwrite_r+0x2d0>
 1009094:	a00d883a 	mov	r6,r20
 1009098:	a021883a 	mov	r16,r20
 100909c:	003f8106 	br	1008ea4 <__sfvwrite_r+0x1d0>
 10090a0:	b80b883a 	mov	r5,r23
 10090a4:	a00d883a 	mov	r6,r20
 10090a8:	10097f80 	call	10097f8 <memmove>
 10090ac:	90c00217 	ldw	r3,8(r18)
 10090b0:	90800017 	ldw	r2,0(r18)
 10090b4:	a021883a 	mov	r16,r20
 10090b8:	1d07c83a 	sub	r3,r3,r20
 10090bc:	1505883a 	add	r2,r2,r20
 10090c0:	a023883a 	mov	r17,r20
 10090c4:	a027883a 	mov	r19,r20
 10090c8:	90c00215 	stw	r3,8(r18)
 10090cc:	90800015 	stw	r2,0(r18)
 10090d0:	003f8006 	br	1008ed4 <__sfvwrite_r+0x200>
 10090d4:	b809883a 	mov	r4,r23
 10090d8:	01400284 	movi	r5,10
 10090dc:	980d883a 	mov	r6,r19
 10090e0:	10096740 	call	1009674 <memchr>
 10090e4:	10001726 	beq	r2,zero,1009144 <__sfvwrite_r+0x470>
 10090e8:	15c5c83a 	sub	r2,r2,r23
 10090ec:	15000044 	addi	r20,r2,1
 10090f0:	00800044 	movi	r2,1
 10090f4:	d8800015 	stw	r2,0(sp)
 10090f8:	003f9806 	br	1008f5c <__sfvwrite_r+0x288>
 10090fc:	b80b883a 	mov	r5,r23
 1009100:	800d883a 	mov	r6,r16
 1009104:	10097f80 	call	10097f8 <memmove>
 1009108:	90c00017 	ldw	r3,0(r18)
 100910c:	e009883a 	mov	r4,fp
 1009110:	900b883a 	mov	r5,r18
 1009114:	1c07883a 	add	r3,r3,r16
 1009118:	90c00015 	stw	r3,0(r18)
 100911c:	8027883a 	mov	r19,r16
 1009120:	10081240 	call	1008124 <_fflush_r>
 1009124:	103f6b26 	beq	r2,zero,1008ed4 <__sfvwrite_r+0x200>
 1009128:	003f7f06 	br	1008f28 <__sfvwrite_r+0x254>
 100912c:	400b883a 	mov	r5,r8
 1009130:	e009883a 	mov	r4,fp
 1009134:	100abe80 	call	100abe8 <_realloc_r>
 1009138:	103f7626 	beq	r2,zero,1008f14 <__sfvwrite_r+0x240>
 100913c:	1023883a 	mov	r17,r2
 1009140:	003f5006 	br	1008e84 <__sfvwrite_r+0x1b0>
 1009144:	00c00044 	movi	r3,1
 1009148:	9d000044 	addi	r20,r19,1
 100914c:	d8c00015 	stw	r3,0(sp)
 1009150:	003f8206 	br	1008f5c <__sfvwrite_r+0x288>
 1009154:	9080030b 	ldhu	r2,12(r18)
 1009158:	00c00244 	movi	r3,9
 100915c:	013fffc4 	movi	r4,-1
 1009160:	10801014 	ori	r2,r2,64
 1009164:	9080030d 	sth	r2,12(r18)
 1009168:	e0c00015 	stw	r3,0(fp)
 100916c:	003f0606 	br	1008d88 <__sfvwrite_r+0xb4>

01009170 <_fwalk_reent>:
 1009170:	defff704 	addi	sp,sp,-36
 1009174:	dcc00315 	stw	r19,12(sp)
 1009178:	24c0b804 	addi	r19,r4,736
 100917c:	dd800615 	stw	r22,24(sp)
 1009180:	dd400515 	stw	r21,20(sp)
 1009184:	dfc00815 	stw	ra,32(sp)
 1009188:	ddc00715 	stw	r23,28(sp)
 100918c:	dd000415 	stw	r20,16(sp)
 1009190:	dc800215 	stw	r18,8(sp)
 1009194:	dc400115 	stw	r17,4(sp)
 1009198:	dc000015 	stw	r16,0(sp)
 100919c:	202b883a 	mov	r21,r4
 10091a0:	282d883a 	mov	r22,r5
 10091a4:	10083ac0 	call	10083ac <__sfp_lock_acquire>
 10091a8:	98002126 	beq	r19,zero,1009230 <_fwalk_reent+0xc0>
 10091ac:	002f883a 	mov	r23,zero
 10091b0:	9c800117 	ldw	r18,4(r19)
 10091b4:	9c000217 	ldw	r16,8(r19)
 10091b8:	90bfffc4 	addi	r2,r18,-1
 10091bc:	10000d16 	blt	r2,zero,10091f4 <_fwalk_reent+0x84>
 10091c0:	0023883a 	mov	r17,zero
 10091c4:	053fffc4 	movi	r20,-1
 10091c8:	8080030f 	ldh	r2,12(r16)
 10091cc:	8c400044 	addi	r17,r17,1
 10091d0:	10000626 	beq	r2,zero,10091ec <_fwalk_reent+0x7c>
 10091d4:	8080038f 	ldh	r2,14(r16)
 10091d8:	800b883a 	mov	r5,r16
 10091dc:	a809883a 	mov	r4,r21
 10091e0:	15000226 	beq	r2,r20,10091ec <_fwalk_reent+0x7c>
 10091e4:	b03ee83a 	callr	r22
 10091e8:	b8aeb03a 	or	r23,r23,r2
 10091ec:	84001704 	addi	r16,r16,92
 10091f0:	947ff51e 	bne	r18,r17,10091c8 <_fwalk_reent+0x58>
 10091f4:	9cc00017 	ldw	r19,0(r19)
 10091f8:	983fed1e 	bne	r19,zero,10091b0 <_fwalk_reent+0x40>
 10091fc:	10083b00 	call	10083b0 <__sfp_lock_release>
 1009200:	b805883a 	mov	r2,r23
 1009204:	dfc00817 	ldw	ra,32(sp)
 1009208:	ddc00717 	ldw	r23,28(sp)
 100920c:	dd800617 	ldw	r22,24(sp)
 1009210:	dd400517 	ldw	r21,20(sp)
 1009214:	dd000417 	ldw	r20,16(sp)
 1009218:	dcc00317 	ldw	r19,12(sp)
 100921c:	dc800217 	ldw	r18,8(sp)
 1009220:	dc400117 	ldw	r17,4(sp)
 1009224:	dc000017 	ldw	r16,0(sp)
 1009228:	dec00904 	addi	sp,sp,36
 100922c:	f800283a 	ret
 1009230:	002f883a 	mov	r23,zero
 1009234:	003ff106 	br	10091fc <_fwalk_reent+0x8c>

01009238 <_fwalk>:
 1009238:	defff804 	addi	sp,sp,-32
 100923c:	dcc00315 	stw	r19,12(sp)
 1009240:	24c0b804 	addi	r19,r4,736
 1009244:	dd400515 	stw	r21,20(sp)
 1009248:	dfc00715 	stw	ra,28(sp)
 100924c:	dd800615 	stw	r22,24(sp)
 1009250:	dd000415 	stw	r20,16(sp)
 1009254:	dc800215 	stw	r18,8(sp)
 1009258:	dc400115 	stw	r17,4(sp)
 100925c:	dc000015 	stw	r16,0(sp)
 1009260:	282b883a 	mov	r21,r5
 1009264:	10083ac0 	call	10083ac <__sfp_lock_acquire>
 1009268:	98001f26 	beq	r19,zero,10092e8 <_fwalk+0xb0>
 100926c:	002d883a 	mov	r22,zero
 1009270:	9c800117 	ldw	r18,4(r19)
 1009274:	9c000217 	ldw	r16,8(r19)
 1009278:	90bfffc4 	addi	r2,r18,-1
 100927c:	10000c16 	blt	r2,zero,10092b0 <_fwalk+0x78>
 1009280:	0023883a 	mov	r17,zero
 1009284:	053fffc4 	movi	r20,-1
 1009288:	8080030f 	ldh	r2,12(r16)
 100928c:	8c400044 	addi	r17,r17,1
 1009290:	10000526 	beq	r2,zero,10092a8 <_fwalk+0x70>
 1009294:	8080038f 	ldh	r2,14(r16)
 1009298:	8009883a 	mov	r4,r16
 100929c:	15000226 	beq	r2,r20,10092a8 <_fwalk+0x70>
 10092a0:	a83ee83a 	callr	r21
 10092a4:	b0acb03a 	or	r22,r22,r2
 10092a8:	84001704 	addi	r16,r16,92
 10092ac:	947ff61e 	bne	r18,r17,1009288 <_fwalk+0x50>
 10092b0:	9cc00017 	ldw	r19,0(r19)
 10092b4:	983fee1e 	bne	r19,zero,1009270 <_fwalk+0x38>
 10092b8:	10083b00 	call	10083b0 <__sfp_lock_release>
 10092bc:	b005883a 	mov	r2,r22
 10092c0:	dfc00717 	ldw	ra,28(sp)
 10092c4:	dd800617 	ldw	r22,24(sp)
 10092c8:	dd400517 	ldw	r21,20(sp)
 10092cc:	dd000417 	ldw	r20,16(sp)
 10092d0:	dcc00317 	ldw	r19,12(sp)
 10092d4:	dc800217 	ldw	r18,8(sp)
 10092d8:	dc400117 	ldw	r17,4(sp)
 10092dc:	dc000017 	ldw	r16,0(sp)
 10092e0:	dec00804 	addi	sp,sp,32
 10092e4:	f800283a 	ret
 10092e8:	002d883a 	mov	r22,zero
 10092ec:	003ff206 	br	10092b8 <_fwalk+0x80>

010092f0 <iswspace>:
 10092f0:	00803fc4 	movi	r2,255
 10092f4:	0007883a 	mov	r3,zero
 10092f8:	11000636 	bltu	r2,r4,1009314 <iswspace+0x24>
 10092fc:	008040b4 	movhi	r2,258
 1009300:	10ba3d04 	addi	r2,r2,-5900
 1009304:	10c00017 	ldw	r3,0(r2)
 1009308:	1907883a 	add	r3,r3,r4
 100930c:	18800003 	ldbu	r2,0(r3)
 1009310:	10c0020c 	andi	r3,r2,8
 1009314:	1805883a 	mov	r2,r3
 1009318:	f800283a 	ret

0100931c <__locale_charset>:
 100931c:	d0a00817 	ldw	r2,-32736(gp)
 1009320:	f800283a 	ret

01009324 <_localeconv_r>:
 1009324:	008040b4 	movhi	r2,258
 1009328:	10b25204 	addi	r2,r2,-14008
 100932c:	f800283a 	ret

01009330 <localeconv>:
 1009330:	008040b4 	movhi	r2,258
 1009334:	10ba3e04 	addi	r2,r2,-5896
 1009338:	11000017 	ldw	r4,0(r2)
 100933c:	10093241 	jmpi	1009324 <_localeconv_r>

01009340 <_setlocale_r>:
 1009340:	defffc04 	addi	sp,sp,-16
 1009344:	00c040b4 	movhi	r3,258
 1009348:	18f24d04 	addi	r3,r3,-14028
 100934c:	dc800215 	stw	r18,8(sp)
 1009350:	dc400115 	stw	r17,4(sp)
 1009354:	dc000015 	stw	r16,0(sp)
 1009358:	2023883a 	mov	r17,r4
 100935c:	2825883a 	mov	r18,r5
 1009360:	dfc00315 	stw	ra,12(sp)
 1009364:	3021883a 	mov	r16,r6
 1009368:	3009883a 	mov	r4,r6
 100936c:	180b883a 	mov	r5,r3
 1009370:	30000926 	beq	r6,zero,1009398 <_setlocale_r+0x58>
 1009374:	100b7140 	call	100b714 <strcmp>
 1009378:	8009883a 	mov	r4,r16
 100937c:	014040b4 	movhi	r5,258
 1009380:	29718d04 	addi	r5,r5,-14796
 1009384:	10000b1e 	bne	r2,zero,10093b4 <_setlocale_r+0x74>
 1009388:	8c000d15 	stw	r16,52(r17)
 100938c:	8c800c15 	stw	r18,48(r17)
 1009390:	00c040b4 	movhi	r3,258
 1009394:	18f24d04 	addi	r3,r3,-14028
 1009398:	1805883a 	mov	r2,r3
 100939c:	dfc00317 	ldw	ra,12(sp)
 10093a0:	dc800217 	ldw	r18,8(sp)
 10093a4:	dc400117 	ldw	r17,4(sp)
 10093a8:	dc000017 	ldw	r16,0(sp)
 10093ac:	dec00404 	addi	sp,sp,16
 10093b0:	f800283a 	ret
 10093b4:	100b7140 	call	100b714 <strcmp>
 10093b8:	0007883a 	mov	r3,zero
 10093bc:	103ff226 	beq	r2,zero,1009388 <_setlocale_r+0x48>
 10093c0:	003ff506 	br	1009398 <_setlocale_r+0x58>

010093c4 <setlocale>:
 10093c4:	018040b4 	movhi	r6,258
 10093c8:	31ba3e04 	addi	r6,r6,-5896
 10093cc:	2007883a 	mov	r3,r4
 10093d0:	31000017 	ldw	r4,0(r6)
 10093d4:	280d883a 	mov	r6,r5
 10093d8:	180b883a 	mov	r5,r3
 10093dc:	10093401 	jmpi	1009340 <_setlocale_r>

010093e0 <__smakebuf_r>:
 10093e0:	2880030b 	ldhu	r2,12(r5)
 10093e4:	deffed04 	addi	sp,sp,-76
 10093e8:	dc401015 	stw	r17,64(sp)
 10093ec:	1080008c 	andi	r2,r2,2
 10093f0:	dc000f15 	stw	r16,60(sp)
 10093f4:	dfc01215 	stw	ra,72(sp)
 10093f8:	dc801115 	stw	r18,68(sp)
 10093fc:	2821883a 	mov	r16,r5
 1009400:	2023883a 	mov	r17,r4
 1009404:	10000b26 	beq	r2,zero,1009434 <__smakebuf_r+0x54>
 1009408:	28c010c4 	addi	r3,r5,67
 100940c:	00800044 	movi	r2,1
 1009410:	28800515 	stw	r2,20(r5)
 1009414:	28c00415 	stw	r3,16(r5)
 1009418:	28c00015 	stw	r3,0(r5)
 100941c:	dfc01217 	ldw	ra,72(sp)
 1009420:	dc801117 	ldw	r18,68(sp)
 1009424:	dc401017 	ldw	r17,64(sp)
 1009428:	dc000f17 	ldw	r16,60(sp)
 100942c:	dec01304 	addi	sp,sp,76
 1009430:	f800283a 	ret
 1009434:	2940038f 	ldh	r5,14(r5)
 1009438:	28002116 	blt	r5,zero,10094c0 <__smakebuf_r+0xe0>
 100943c:	d80d883a 	mov	r6,sp
 1009440:	100e0b80 	call	100e0b8 <_fstat_r>
 1009444:	10001e16 	blt	r2,zero,10094c0 <__smakebuf_r+0xe0>
 1009448:	d8800117 	ldw	r2,4(sp)
 100944c:	00e00014 	movui	r3,32768
 1009450:	113c000c 	andi	r4,r2,61440
 1009454:	20c03126 	beq	r4,r3,100951c <__smakebuf_r+0x13c>
 1009458:	8080030b 	ldhu	r2,12(r16)
 100945c:	00c80004 	movi	r3,8192
 1009460:	10820014 	ori	r2,r2,2048
 1009464:	8080030d 	sth	r2,12(r16)
 1009468:	20c01e26 	beq	r4,r3,10094e4 <__smakebuf_r+0x104>
 100946c:	04810004 	movi	r18,1024
 1009470:	8809883a 	mov	r4,r17
 1009474:	900b883a 	mov	r5,r18
 1009478:	10026a40 	call	10026a4 <_malloc_r>
 100947c:	1009883a 	mov	r4,r2
 1009480:	10003126 	beq	r2,zero,1009548 <__smakebuf_r+0x168>
 1009484:	80c0030b 	ldhu	r3,12(r16)
 1009488:	00804074 	movhi	r2,257
 100948c:	10a12804 	addi	r2,r2,-31584
 1009490:	88800f15 	stw	r2,60(r17)
 1009494:	18c02014 	ori	r3,r3,128
 1009498:	84800515 	stw	r18,20(r16)
 100949c:	80c0030d 	sth	r3,12(r16)
 10094a0:	81000415 	stw	r4,16(r16)
 10094a4:	81000015 	stw	r4,0(r16)
 10094a8:	dfc01217 	ldw	ra,72(sp)
 10094ac:	dc801117 	ldw	r18,68(sp)
 10094b0:	dc401017 	ldw	r17,64(sp)
 10094b4:	dc000f17 	ldw	r16,60(sp)
 10094b8:	dec01304 	addi	sp,sp,76
 10094bc:	f800283a 	ret
 10094c0:	80c0030b 	ldhu	r3,12(r16)
 10094c4:	1880200c 	andi	r2,r3,128
 10094c8:	10000426 	beq	r2,zero,10094dc <__smakebuf_r+0xfc>
 10094cc:	04801004 	movi	r18,64
 10094d0:	18820014 	ori	r2,r3,2048
 10094d4:	8080030d 	sth	r2,12(r16)
 10094d8:	003fe506 	br	1009470 <__smakebuf_r+0x90>
 10094dc:	04810004 	movi	r18,1024
 10094e0:	003ffb06 	br	10094d0 <__smakebuf_r+0xf0>
 10094e4:	8140038f 	ldh	r5,14(r16)
 10094e8:	8809883a 	mov	r4,r17
 10094ec:	100ecf80 	call	100ecf8 <_isatty_r>
 10094f0:	103fde26 	beq	r2,zero,100946c <__smakebuf_r+0x8c>
 10094f4:	8080030b 	ldhu	r2,12(r16)
 10094f8:	80c010c4 	addi	r3,r16,67
 10094fc:	04810004 	movi	r18,1024
 1009500:	10800054 	ori	r2,r2,1
 1009504:	8080030d 	sth	r2,12(r16)
 1009508:	00800044 	movi	r2,1
 100950c:	80c00415 	stw	r3,16(r16)
 1009510:	80800515 	stw	r2,20(r16)
 1009514:	80c00015 	stw	r3,0(r16)
 1009518:	003fd506 	br	1009470 <__smakebuf_r+0x90>
 100951c:	80c00a17 	ldw	r3,40(r16)
 1009520:	00804074 	movhi	r2,257
 1009524:	10ad7404 	addi	r2,r2,-18992
 1009528:	18bfcb1e 	bne	r3,r2,1009458 <__smakebuf_r+0x78>
 100952c:	8080030b 	ldhu	r2,12(r16)
 1009530:	00c10004 	movi	r3,1024
 1009534:	1825883a 	mov	r18,r3
 1009538:	10c4b03a 	or	r2,r2,r3
 100953c:	8080030d 	sth	r2,12(r16)
 1009540:	80c01315 	stw	r3,76(r16)
 1009544:	003fca06 	br	1009470 <__smakebuf_r+0x90>
 1009548:	8100030b 	ldhu	r4,12(r16)
 100954c:	2080800c 	andi	r2,r4,512
 1009550:	103fb21e 	bne	r2,zero,100941c <__smakebuf_r+0x3c>
 1009554:	80c010c4 	addi	r3,r16,67
 1009558:	21000094 	ori	r4,r4,2
 100955c:	00800044 	movi	r2,1
 1009560:	80800515 	stw	r2,20(r16)
 1009564:	8100030d 	sth	r4,12(r16)
 1009568:	80c00415 	stw	r3,16(r16)
 100956c:	80c00015 	stw	r3,0(r16)
 1009570:	003faa06 	br	100941c <__smakebuf_r+0x3c>

01009574 <_mbrtowc_r>:
 1009574:	defffc04 	addi	sp,sp,-16
 1009578:	dc400215 	stw	r17,8(sp)
 100957c:	dc000115 	stw	r16,4(sp)
 1009580:	dfc00315 	stw	ra,12(sp)
 1009584:	dc000417 	ldw	r16,16(sp)
 1009588:	2023883a 	mov	r17,r4
 100958c:	30000f26 	beq	r6,zero,10095cc <_mbrtowc_r+0x58>
 1009590:	dc000015 	stw	r16,0(sp)
 1009594:	10096340 	call	1009634 <_mbtowc_r>
 1009598:	1007883a 	mov	r3,r2
 100959c:	00bfffc4 	movi	r2,-1
 10095a0:	1809883a 	mov	r4,r3
 10095a4:	1880111e 	bne	r3,r2,10095ec <_mbrtowc_r+0x78>
 10095a8:	80000015 	stw	zero,0(r16)
 10095ac:	00802284 	movi	r2,138
 10095b0:	88800015 	stw	r2,0(r17)
 10095b4:	2005883a 	mov	r2,r4
 10095b8:	dfc00317 	ldw	ra,12(sp)
 10095bc:	dc400217 	ldw	r17,8(sp)
 10095c0:	dc000117 	ldw	r16,4(sp)
 10095c4:	dec00404 	addi	sp,sp,16
 10095c8:	f800283a 	ret
 10095cc:	000b883a 	mov	r5,zero
 10095d0:	018040b4 	movhi	r6,258
 10095d4:	31b18d04 	addi	r6,r6,-14796
 10095d8:	01c00044 	movi	r7,1
 10095dc:	dc000015 	stw	r16,0(sp)
 10095e0:	10096340 	call	1009634 <_mbtowc_r>
 10095e4:	1007883a 	mov	r3,r2
 10095e8:	003fec06 	br	100959c <_mbrtowc_r+0x28>
 10095ec:	1809883a 	mov	r4,r3
 10095f0:	003ff006 	br	10095b4 <_mbrtowc_r+0x40>

010095f4 <mbrtowc>:
 10095f4:	008040b4 	movhi	r2,258
 10095f8:	10ba3e04 	addi	r2,r2,-5896
 10095fc:	2017883a 	mov	r11,r4
 1009600:	11000017 	ldw	r4,0(r2)
 1009604:	defffe04 	addi	sp,sp,-8
 1009608:	3013883a 	mov	r9,r6
 100960c:	2805883a 	mov	r2,r5
 1009610:	d9c00015 	stw	r7,0(sp)
 1009614:	580b883a 	mov	r5,r11
 1009618:	100d883a 	mov	r6,r2
 100961c:	480f883a 	mov	r7,r9
 1009620:	dfc00115 	stw	ra,4(sp)
 1009624:	10095740 	call	1009574 <_mbrtowc_r>
 1009628:	dfc00117 	ldw	ra,4(sp)
 100962c:	dec00204 	addi	sp,sp,8
 1009630:	f800283a 	ret

01009634 <_mbtowc_r>:
 1009634:	deffff04 	addi	sp,sp,-4
 1009638:	0005883a 	mov	r2,zero
 100963c:	28000326 	beq	r5,zero,100964c <_mbtowc_r+0x18>
 1009640:	3000041e 	bne	r6,zero,1009654 <_mbtowc_r+0x20>
 1009644:	dec00104 	addi	sp,sp,4
 1009648:	f800283a 	ret
 100964c:	d80b883a 	mov	r5,sp
 1009650:	303ffc26 	beq	r6,zero,1009644 <_mbtowc_r+0x10>
 1009654:	00bfff84 	movi	r2,-2
 1009658:	383ffa26 	beq	r7,zero,1009644 <_mbtowc_r+0x10>
 100965c:	30800003 	ldbu	r2,0(r6)
 1009660:	28800015 	stw	r2,0(r5)
 1009664:	30c00003 	ldbu	r3,0(r6)
 1009668:	1804c03a 	cmpne	r2,r3,zero
 100966c:	dec00104 	addi	sp,sp,4
 1009670:	f800283a 	ret

01009674 <memchr>:
 1009674:	008000c4 	movi	r2,3
 1009678:	29403fcc 	andi	r5,r5,255
 100967c:	2007883a 	mov	r3,r4
 1009680:	1180022e 	bgeu	r2,r6,100968c <memchr+0x18>
 1009684:	2084703a 	and	r2,r4,r2
 1009688:	10000b26 	beq	r2,zero,10096b8 <memchr+0x44>
 100968c:	313fffc4 	addi	r4,r6,-1
 1009690:	3000051e 	bne	r6,zero,10096a8 <memchr+0x34>
 1009694:	00002c06 	br	1009748 <memchr+0xd4>
 1009698:	213fffc4 	addi	r4,r4,-1
 100969c:	00bfffc4 	movi	r2,-1
 10096a0:	18c00044 	addi	r3,r3,1
 10096a4:	20802826 	beq	r4,r2,1009748 <memchr+0xd4>
 10096a8:	18800003 	ldbu	r2,0(r3)
 10096ac:	28bffa1e 	bne	r5,r2,1009698 <memchr+0x24>
 10096b0:	1805883a 	mov	r2,r3
 10096b4:	f800283a 	ret
 10096b8:	0011883a 	mov	r8,zero
 10096bc:	0007883a 	mov	r3,zero
 10096c0:	01c00104 	movi	r7,4
 10096c4:	4004923a 	slli	r2,r8,8
 10096c8:	18c00044 	addi	r3,r3,1
 10096cc:	1151883a 	add	r8,r2,r5
 10096d0:	19fffc1e 	bne	r3,r7,10096c4 <memchr+0x50>
 10096d4:	02bfbff4 	movhi	r10,65279
 10096d8:	52bfbfc4 	addi	r10,r10,-257
 10096dc:	02602074 	movhi	r9,32897
 10096e0:	4a602004 	addi	r9,r9,-32640
 10096e4:	02c000c4 	movi	r11,3
 10096e8:	20800017 	ldw	r2,0(r4)
 10096ec:	31bfff04 	addi	r6,r6,-4
 10096f0:	200f883a 	mov	r7,r4
 10096f4:	1204f03a 	xor	r2,r2,r8
 10096f8:	1287883a 	add	r3,r2,r10
 10096fc:	1a46703a 	and	r3,r3,r9
 1009700:	0084303a 	nor	r2,zero,r2
 1009704:	10c4703a 	and	r2,r2,r3
 1009708:	10000b26 	beq	r2,zero,1009738 <memchr+0xc4>
 100970c:	20800003 	ldbu	r2,0(r4)
 1009710:	28800f26 	beq	r5,r2,1009750 <memchr+0xdc>
 1009714:	20800043 	ldbu	r2,1(r4)
 1009718:	21c00044 	addi	r7,r4,1
 100971c:	28800c26 	beq	r5,r2,1009750 <memchr+0xdc>
 1009720:	20800083 	ldbu	r2,2(r4)
 1009724:	21c00084 	addi	r7,r4,2
 1009728:	28800926 	beq	r5,r2,1009750 <memchr+0xdc>
 100972c:	208000c3 	ldbu	r2,3(r4)
 1009730:	21c000c4 	addi	r7,r4,3
 1009734:	28800626 	beq	r5,r2,1009750 <memchr+0xdc>
 1009738:	21000104 	addi	r4,r4,4
 100973c:	59bfea36 	bltu	r11,r6,10096e8 <memchr+0x74>
 1009740:	2007883a 	mov	r3,r4
 1009744:	003fd106 	br	100968c <memchr+0x18>
 1009748:	0005883a 	mov	r2,zero
 100974c:	f800283a 	ret
 1009750:	3805883a 	mov	r2,r7
 1009754:	f800283a 	ret

01009758 <memcpy>:
 1009758:	01c003c4 	movi	r7,15
 100975c:	2007883a 	mov	r3,r4
 1009760:	3980032e 	bgeu	r7,r6,1009770 <memcpy+0x18>
 1009764:	2904b03a 	or	r2,r5,r4
 1009768:	108000cc 	andi	r2,r2,3
 100976c:	10000926 	beq	r2,zero,1009794 <memcpy+0x3c>
 1009770:	30000626 	beq	r6,zero,100978c <memcpy+0x34>
 1009774:	30cd883a 	add	r6,r6,r3
 1009778:	28800003 	ldbu	r2,0(r5)
 100977c:	29400044 	addi	r5,r5,1
 1009780:	18800005 	stb	r2,0(r3)
 1009784:	18c00044 	addi	r3,r3,1
 1009788:	30fffb1e 	bne	r6,r3,1009778 <memcpy+0x20>
 100978c:	2005883a 	mov	r2,r4
 1009790:	f800283a 	ret
 1009794:	3811883a 	mov	r8,r7
 1009798:	200f883a 	mov	r7,r4
 100979c:	28c00017 	ldw	r3,0(r5)
 10097a0:	31bffc04 	addi	r6,r6,-16
 10097a4:	38c00015 	stw	r3,0(r7)
 10097a8:	28800117 	ldw	r2,4(r5)
 10097ac:	38800115 	stw	r2,4(r7)
 10097b0:	28c00217 	ldw	r3,8(r5)
 10097b4:	38c00215 	stw	r3,8(r7)
 10097b8:	28800317 	ldw	r2,12(r5)
 10097bc:	29400404 	addi	r5,r5,16
 10097c0:	38800315 	stw	r2,12(r7)
 10097c4:	39c00404 	addi	r7,r7,16
 10097c8:	41bff436 	bltu	r8,r6,100979c <memcpy+0x44>
 10097cc:	008000c4 	movi	r2,3
 10097d0:	1180072e 	bgeu	r2,r6,10097f0 <memcpy+0x98>
 10097d4:	1007883a 	mov	r3,r2
 10097d8:	28800017 	ldw	r2,0(r5)
 10097dc:	31bfff04 	addi	r6,r6,-4
 10097e0:	29400104 	addi	r5,r5,4
 10097e4:	38800015 	stw	r2,0(r7)
 10097e8:	39c00104 	addi	r7,r7,4
 10097ec:	19bffa36 	bltu	r3,r6,10097d8 <memcpy+0x80>
 10097f0:	3807883a 	mov	r3,r7
 10097f4:	003fde06 	br	1009770 <memcpy+0x18>

010097f8 <memmove>:
 10097f8:	2807883a 	mov	r3,r5
 10097fc:	2011883a 	mov	r8,r4
 1009800:	29000c2e 	bgeu	r5,r4,1009834 <memmove+0x3c>
 1009804:	298f883a 	add	r7,r5,r6
 1009808:	21c00a2e 	bgeu	r4,r7,1009834 <memmove+0x3c>
 100980c:	30000726 	beq	r6,zero,100982c <memmove+0x34>
 1009810:	2187883a 	add	r3,r4,r6
 1009814:	198dc83a 	sub	r6,r3,r6
 1009818:	39ffffc4 	addi	r7,r7,-1
 100981c:	38800003 	ldbu	r2,0(r7)
 1009820:	18ffffc4 	addi	r3,r3,-1
 1009824:	18800005 	stb	r2,0(r3)
 1009828:	19bffb1e 	bne	r3,r6,1009818 <memmove+0x20>
 100982c:	2005883a 	mov	r2,r4
 1009830:	f800283a 	ret
 1009834:	01c003c4 	movi	r7,15
 1009838:	39800a36 	bltu	r7,r6,1009864 <memmove+0x6c>
 100983c:	303ffb26 	beq	r6,zero,100982c <memmove+0x34>
 1009840:	400f883a 	mov	r7,r8
 1009844:	320d883a 	add	r6,r6,r8
 1009848:	28800003 	ldbu	r2,0(r5)
 100984c:	29400044 	addi	r5,r5,1
 1009850:	38800005 	stb	r2,0(r7)
 1009854:	39c00044 	addi	r7,r7,1
 1009858:	39bffb1e 	bne	r7,r6,1009848 <memmove+0x50>
 100985c:	2005883a 	mov	r2,r4
 1009860:	f800283a 	ret
 1009864:	1904b03a 	or	r2,r3,r4
 1009868:	108000cc 	andi	r2,r2,3
 100986c:	103ff31e 	bne	r2,zero,100983c <memmove+0x44>
 1009870:	3811883a 	mov	r8,r7
 1009874:	180b883a 	mov	r5,r3
 1009878:	200f883a 	mov	r7,r4
 100987c:	28c00017 	ldw	r3,0(r5)
 1009880:	31bffc04 	addi	r6,r6,-16
 1009884:	38c00015 	stw	r3,0(r7)
 1009888:	28800117 	ldw	r2,4(r5)
 100988c:	38800115 	stw	r2,4(r7)
 1009890:	28c00217 	ldw	r3,8(r5)
 1009894:	38c00215 	stw	r3,8(r7)
 1009898:	28800317 	ldw	r2,12(r5)
 100989c:	29400404 	addi	r5,r5,16
 10098a0:	38800315 	stw	r2,12(r7)
 10098a4:	39c00404 	addi	r7,r7,16
 10098a8:	41bff436 	bltu	r8,r6,100987c <memmove+0x84>
 10098ac:	008000c4 	movi	r2,3
 10098b0:	1180072e 	bgeu	r2,r6,10098d0 <memmove+0xd8>
 10098b4:	1007883a 	mov	r3,r2
 10098b8:	28800017 	ldw	r2,0(r5)
 10098bc:	31bfff04 	addi	r6,r6,-4
 10098c0:	29400104 	addi	r5,r5,4
 10098c4:	38800015 	stw	r2,0(r7)
 10098c8:	39c00104 	addi	r7,r7,4
 10098cc:	19bffa36 	bltu	r3,r6,10098b8 <memmove+0xc0>
 10098d0:	3811883a 	mov	r8,r7
 10098d4:	003fd906 	br	100983c <memmove+0x44>

010098d8 <memset>:
 10098d8:	008000c4 	movi	r2,3
 10098dc:	29403fcc 	andi	r5,r5,255
 10098e0:	2007883a 	mov	r3,r4
 10098e4:	1180022e 	bgeu	r2,r6,10098f0 <memset+0x18>
 10098e8:	2084703a 	and	r2,r4,r2
 10098ec:	10000826 	beq	r2,zero,1009910 <memset+0x38>
 10098f0:	30000526 	beq	r6,zero,1009908 <memset+0x30>
 10098f4:	2805883a 	mov	r2,r5
 10098f8:	30cd883a 	add	r6,r6,r3
 10098fc:	18800005 	stb	r2,0(r3)
 1009900:	18c00044 	addi	r3,r3,1
 1009904:	19bffd1e 	bne	r3,r6,10098fc <memset+0x24>
 1009908:	2005883a 	mov	r2,r4
 100990c:	f800283a 	ret
 1009910:	2804923a 	slli	r2,r5,8
 1009914:	020003c4 	movi	r8,15
 1009918:	200f883a 	mov	r7,r4
 100991c:	2884b03a 	or	r2,r5,r2
 1009920:	1006943a 	slli	r3,r2,16
 1009924:	10c6b03a 	or	r3,r2,r3
 1009928:	41800a2e 	bgeu	r8,r6,1009954 <memset+0x7c>
 100992c:	4005883a 	mov	r2,r8
 1009930:	31bffc04 	addi	r6,r6,-16
 1009934:	38c00015 	stw	r3,0(r7)
 1009938:	38c00115 	stw	r3,4(r7)
 100993c:	38c00215 	stw	r3,8(r7)
 1009940:	38c00315 	stw	r3,12(r7)
 1009944:	39c00404 	addi	r7,r7,16
 1009948:	11bff936 	bltu	r2,r6,1009930 <memset+0x58>
 100994c:	008000c4 	movi	r2,3
 1009950:	1180052e 	bgeu	r2,r6,1009968 <memset+0x90>
 1009954:	31bfff04 	addi	r6,r6,-4
 1009958:	008000c4 	movi	r2,3
 100995c:	38c00015 	stw	r3,0(r7)
 1009960:	39c00104 	addi	r7,r7,4
 1009964:	11bffb36 	bltu	r2,r6,1009954 <memset+0x7c>
 1009968:	3807883a 	mov	r3,r7
 100996c:	003fe006 	br	10098f0 <memset+0x18>

01009970 <_Bfree>:
 1009970:	28000826 	beq	r5,zero,1009994 <_Bfree+0x24>
 1009974:	28800117 	ldw	r2,4(r5)
 1009978:	21001317 	ldw	r4,76(r4)
 100997c:	1085883a 	add	r2,r2,r2
 1009980:	1085883a 	add	r2,r2,r2
 1009984:	1105883a 	add	r2,r2,r4
 1009988:	10c00017 	ldw	r3,0(r2)
 100998c:	28c00015 	stw	r3,0(r5)
 1009990:	11400015 	stw	r5,0(r2)
 1009994:	f800283a 	ret

01009998 <__hi0bits>:
 1009998:	20bfffec 	andhi	r2,r4,65535
 100999c:	10001426 	beq	r2,zero,10099f0 <__hi0bits+0x58>
 10099a0:	0007883a 	mov	r3,zero
 10099a4:	20bfc02c 	andhi	r2,r4,65280
 10099a8:	1000021e 	bne	r2,zero,10099b4 <__hi0bits+0x1c>
 10099ac:	2008923a 	slli	r4,r4,8
 10099b0:	18c00204 	addi	r3,r3,8
 10099b4:	20bc002c 	andhi	r2,r4,61440
 10099b8:	1000021e 	bne	r2,zero,10099c4 <__hi0bits+0x2c>
 10099bc:	2008913a 	slli	r4,r4,4
 10099c0:	18c00104 	addi	r3,r3,4
 10099c4:	20b0002c 	andhi	r2,r4,49152
 10099c8:	1000031e 	bne	r2,zero,10099d8 <__hi0bits+0x40>
 10099cc:	2105883a 	add	r2,r4,r4
 10099d0:	18c00084 	addi	r3,r3,2
 10099d4:	1089883a 	add	r4,r2,r2
 10099d8:	20000316 	blt	r4,zero,10099e8 <__hi0bits+0x50>
 10099dc:	2090002c 	andhi	r2,r4,16384
 10099e0:	10000626 	beq	r2,zero,10099fc <__hi0bits+0x64>
 10099e4:	18c00044 	addi	r3,r3,1
 10099e8:	1805883a 	mov	r2,r3
 10099ec:	f800283a 	ret
 10099f0:	2008943a 	slli	r4,r4,16
 10099f4:	00c00404 	movi	r3,16
 10099f8:	003fea06 	br	10099a4 <__hi0bits+0xc>
 10099fc:	00c00804 	movi	r3,32
 1009a00:	1805883a 	mov	r2,r3
 1009a04:	f800283a 	ret

01009a08 <__lo0bits>:
 1009a08:	20c00017 	ldw	r3,0(r4)
 1009a0c:	188001cc 	andi	r2,r3,7
 1009a10:	10000a26 	beq	r2,zero,1009a3c <__lo0bits+0x34>
 1009a14:	1880004c 	andi	r2,r3,1
 1009a18:	1005003a 	cmpeq	r2,r2,zero
 1009a1c:	10002126 	beq	r2,zero,1009aa4 <__lo0bits+0x9c>
 1009a20:	1880008c 	andi	r2,r3,2
 1009a24:	1000251e 	bne	r2,zero,1009abc <__lo0bits+0xb4>
 1009a28:	1804d0ba 	srli	r2,r3,2
 1009a2c:	01400084 	movi	r5,2
 1009a30:	20800015 	stw	r2,0(r4)
 1009a34:	2805883a 	mov	r2,r5
 1009a38:	f800283a 	ret
 1009a3c:	18bfffcc 	andi	r2,r3,65535
 1009a40:	10001526 	beq	r2,zero,1009a98 <__lo0bits+0x90>
 1009a44:	000b883a 	mov	r5,zero
 1009a48:	18803fcc 	andi	r2,r3,255
 1009a4c:	1000021e 	bne	r2,zero,1009a58 <__lo0bits+0x50>
 1009a50:	1806d23a 	srli	r3,r3,8
 1009a54:	29400204 	addi	r5,r5,8
 1009a58:	188003cc 	andi	r2,r3,15
 1009a5c:	1000021e 	bne	r2,zero,1009a68 <__lo0bits+0x60>
 1009a60:	1806d13a 	srli	r3,r3,4
 1009a64:	29400104 	addi	r5,r5,4
 1009a68:	188000cc 	andi	r2,r3,3
 1009a6c:	1000021e 	bne	r2,zero,1009a78 <__lo0bits+0x70>
 1009a70:	1806d0ba 	srli	r3,r3,2
 1009a74:	29400084 	addi	r5,r5,2
 1009a78:	1880004c 	andi	r2,r3,1
 1009a7c:	1000031e 	bne	r2,zero,1009a8c <__lo0bits+0x84>
 1009a80:	1806d07a 	srli	r3,r3,1
 1009a84:	18000a26 	beq	r3,zero,1009ab0 <__lo0bits+0xa8>
 1009a88:	29400044 	addi	r5,r5,1
 1009a8c:	2805883a 	mov	r2,r5
 1009a90:	20c00015 	stw	r3,0(r4)
 1009a94:	f800283a 	ret
 1009a98:	1806d43a 	srli	r3,r3,16
 1009a9c:	01400404 	movi	r5,16
 1009aa0:	003fe906 	br	1009a48 <__lo0bits+0x40>
 1009aa4:	000b883a 	mov	r5,zero
 1009aa8:	2805883a 	mov	r2,r5
 1009aac:	f800283a 	ret
 1009ab0:	01400804 	movi	r5,32
 1009ab4:	2805883a 	mov	r2,r5
 1009ab8:	f800283a 	ret
 1009abc:	1804d07a 	srli	r2,r3,1
 1009ac0:	01400044 	movi	r5,1
 1009ac4:	20800015 	stw	r2,0(r4)
 1009ac8:	003fda06 	br	1009a34 <__lo0bits+0x2c>

01009acc <__mcmp>:
 1009acc:	20800417 	ldw	r2,16(r4)
 1009ad0:	28c00417 	ldw	r3,16(r5)
 1009ad4:	10cfc83a 	sub	r7,r2,r3
 1009ad8:	38000c1e 	bne	r7,zero,1009b0c <__mcmp+0x40>
 1009adc:	18c5883a 	add	r2,r3,r3
 1009ae0:	1085883a 	add	r2,r2,r2
 1009ae4:	10c00504 	addi	r3,r2,20
 1009ae8:	21000504 	addi	r4,r4,20
 1009aec:	28cb883a 	add	r5,r5,r3
 1009af0:	2085883a 	add	r2,r4,r2
 1009af4:	10bfff04 	addi	r2,r2,-4
 1009af8:	297fff04 	addi	r5,r5,-4
 1009afc:	11800017 	ldw	r6,0(r2)
 1009b00:	28c00017 	ldw	r3,0(r5)
 1009b04:	30c0031e 	bne	r6,r3,1009b14 <__mcmp+0x48>
 1009b08:	20bffa36 	bltu	r4,r2,1009af4 <__mcmp+0x28>
 1009b0c:	3805883a 	mov	r2,r7
 1009b10:	f800283a 	ret
 1009b14:	30c00336 	bltu	r6,r3,1009b24 <__mcmp+0x58>
 1009b18:	01c00044 	movi	r7,1
 1009b1c:	3805883a 	mov	r2,r7
 1009b20:	f800283a 	ret
 1009b24:	01ffffc4 	movi	r7,-1
 1009b28:	003ff806 	br	1009b0c <__mcmp+0x40>

01009b2c <__ulp>:
 1009b2c:	295ffc2c 	andhi	r5,r5,32752
 1009b30:	013f3034 	movhi	r4,64704
 1009b34:	290b883a 	add	r5,r5,r4
 1009b38:	0145c83a 	sub	r2,zero,r5
 1009b3c:	1007d53a 	srai	r3,r2,20
 1009b40:	000d883a 	mov	r6,zero
 1009b44:	0140040e 	bge	zero,r5,1009b58 <__ulp+0x2c>
 1009b48:	280f883a 	mov	r7,r5
 1009b4c:	3807883a 	mov	r3,r7
 1009b50:	3005883a 	mov	r2,r6
 1009b54:	f800283a 	ret
 1009b58:	008004c4 	movi	r2,19
 1009b5c:	193ffb04 	addi	r4,r3,-20
 1009b60:	10c00c0e 	bge	r2,r3,1009b94 <__ulp+0x68>
 1009b64:	008007c4 	movi	r2,31
 1009b68:	1107c83a 	sub	r3,r2,r4
 1009b6c:	00800784 	movi	r2,30
 1009b70:	01400044 	movi	r5,1
 1009b74:	11000216 	blt	r2,r4,1009b80 <__ulp+0x54>
 1009b78:	00800044 	movi	r2,1
 1009b7c:	10ca983a 	sll	r5,r2,r3
 1009b80:	000f883a 	mov	r7,zero
 1009b84:	280d883a 	mov	r6,r5
 1009b88:	3807883a 	mov	r3,r7
 1009b8c:	3005883a 	mov	r2,r6
 1009b90:	f800283a 	ret
 1009b94:	00800234 	movhi	r2,8
 1009b98:	10cfd83a 	sra	r7,r2,r3
 1009b9c:	000d883a 	mov	r6,zero
 1009ba0:	3005883a 	mov	r2,r6
 1009ba4:	3807883a 	mov	r3,r7
 1009ba8:	f800283a 	ret

01009bac <__b2d>:
 1009bac:	20800417 	ldw	r2,16(r4)
 1009bb0:	defff904 	addi	sp,sp,-28
 1009bb4:	dd000415 	stw	r20,16(sp)
 1009bb8:	1085883a 	add	r2,r2,r2
 1009bbc:	25000504 	addi	r20,r4,20
 1009bc0:	1085883a 	add	r2,r2,r2
 1009bc4:	dc000015 	stw	r16,0(sp)
 1009bc8:	a0a1883a 	add	r16,r20,r2
 1009bcc:	dd400515 	stw	r21,20(sp)
 1009bd0:	857fff17 	ldw	r21,-4(r16)
 1009bd4:	dc400115 	stw	r17,4(sp)
 1009bd8:	dfc00615 	stw	ra,24(sp)
 1009bdc:	a809883a 	mov	r4,r21
 1009be0:	2823883a 	mov	r17,r5
 1009be4:	dcc00315 	stw	r19,12(sp)
 1009be8:	dc800215 	stw	r18,8(sp)
 1009bec:	10099980 	call	1009998 <__hi0bits>
 1009bf0:	100b883a 	mov	r5,r2
 1009bf4:	00800804 	movi	r2,32
 1009bf8:	1145c83a 	sub	r2,r2,r5
 1009bfc:	88800015 	stw	r2,0(r17)
 1009c00:	00800284 	movi	r2,10
 1009c04:	80ffff04 	addi	r3,r16,-4
 1009c08:	11401416 	blt	r2,r5,1009c5c <__b2d+0xb0>
 1009c0c:	008002c4 	movi	r2,11
 1009c10:	1149c83a 	sub	r4,r2,r5
 1009c14:	a0c02736 	bltu	r20,r3,1009cb4 <__b2d+0x108>
 1009c18:	000d883a 	mov	r6,zero
 1009c1c:	28800544 	addi	r2,r5,21
 1009c20:	a906d83a 	srl	r3,r21,r4
 1009c24:	a884983a 	sll	r2,r21,r2
 1009c28:	1ccffc34 	orhi	r19,r3,16368
 1009c2c:	11a4b03a 	or	r18,r2,r6
 1009c30:	9005883a 	mov	r2,r18
 1009c34:	9807883a 	mov	r3,r19
 1009c38:	dfc00617 	ldw	ra,24(sp)
 1009c3c:	dd400517 	ldw	r21,20(sp)
 1009c40:	dd000417 	ldw	r20,16(sp)
 1009c44:	dcc00317 	ldw	r19,12(sp)
 1009c48:	dc800217 	ldw	r18,8(sp)
 1009c4c:	dc400117 	ldw	r17,4(sp)
 1009c50:	dc000017 	ldw	r16,0(sp)
 1009c54:	dec00704 	addi	sp,sp,28
 1009c58:	f800283a 	ret
 1009c5c:	a0c00e36 	bltu	r20,r3,1009c98 <__b2d+0xec>
 1009c60:	293ffd44 	addi	r4,r5,-11
 1009c64:	000d883a 	mov	r6,zero
 1009c68:	20000f26 	beq	r4,zero,1009ca8 <__b2d+0xfc>
 1009c6c:	00800804 	movi	r2,32
 1009c70:	110bc83a 	sub	r5,r2,r4
 1009c74:	a0c01236 	bltu	r20,r3,1009cc0 <__b2d+0x114>
 1009c78:	000f883a 	mov	r7,zero
 1009c7c:	a904983a 	sll	r2,r21,r4
 1009c80:	3146d83a 	srl	r3,r6,r5
 1009c84:	3108983a 	sll	r4,r6,r4
 1009c88:	108ffc34 	orhi	r2,r2,16368
 1009c8c:	18a6b03a 	or	r19,r3,r2
 1009c90:	3924b03a 	or	r18,r7,r4
 1009c94:	003fe606 	br	1009c30 <__b2d+0x84>
 1009c98:	293ffd44 	addi	r4,r5,-11
 1009c9c:	81bffe17 	ldw	r6,-8(r16)
 1009ca0:	80fffe04 	addi	r3,r16,-8
 1009ca4:	203ff11e 	bne	r4,zero,1009c6c <__b2d+0xc0>
 1009ca8:	accffc34 	orhi	r19,r21,16368
 1009cac:	3025883a 	mov	r18,r6
 1009cb0:	003fdf06 	br	1009c30 <__b2d+0x84>
 1009cb4:	18bfff17 	ldw	r2,-4(r3)
 1009cb8:	110cd83a 	srl	r6,r2,r4
 1009cbc:	003fd706 	br	1009c1c <__b2d+0x70>
 1009cc0:	18bfff17 	ldw	r2,-4(r3)
 1009cc4:	114ed83a 	srl	r7,r2,r5
 1009cc8:	003fec06 	br	1009c7c <__b2d+0xd0>

01009ccc <__ratio>:
 1009ccc:	defff904 	addi	sp,sp,-28
 1009cd0:	dc400215 	stw	r17,8(sp)
 1009cd4:	2823883a 	mov	r17,r5
 1009cd8:	d80b883a 	mov	r5,sp
 1009cdc:	dfc00615 	stw	ra,24(sp)
 1009ce0:	dd000515 	stw	r20,20(sp)
 1009ce4:	dcc00415 	stw	r19,16(sp)
 1009ce8:	dc800315 	stw	r18,12(sp)
 1009cec:	2025883a 	mov	r18,r4
 1009cf0:	1009bac0 	call	1009bac <__b2d>
 1009cf4:	8809883a 	mov	r4,r17
 1009cf8:	d9400104 	addi	r5,sp,4
 1009cfc:	1027883a 	mov	r19,r2
 1009d00:	1829883a 	mov	r20,r3
 1009d04:	1009bac0 	call	1009bac <__b2d>
 1009d08:	89000417 	ldw	r4,16(r17)
 1009d0c:	91c00417 	ldw	r7,16(r18)
 1009d10:	d9800117 	ldw	r6,4(sp)
 1009d14:	180b883a 	mov	r5,r3
 1009d18:	390fc83a 	sub	r7,r7,r4
 1009d1c:	1009883a 	mov	r4,r2
 1009d20:	d8800017 	ldw	r2,0(sp)
 1009d24:	380e917a 	slli	r7,r7,5
 1009d28:	2011883a 	mov	r8,r4
 1009d2c:	1185c83a 	sub	r2,r2,r6
 1009d30:	11c5883a 	add	r2,r2,r7
 1009d34:	1006953a 	slli	r3,r2,20
 1009d38:	2813883a 	mov	r9,r5
 1009d3c:	00800d0e 	bge	zero,r2,1009d74 <__ratio+0xa8>
 1009d40:	1d29883a 	add	r20,r3,r20
 1009d44:	a00b883a 	mov	r5,r20
 1009d48:	480f883a 	mov	r7,r9
 1009d4c:	9809883a 	mov	r4,r19
 1009d50:	400d883a 	mov	r6,r8
 1009d54:	101071c0 	call	101071c <__divdf3>
 1009d58:	dfc00617 	ldw	ra,24(sp)
 1009d5c:	dd000517 	ldw	r20,20(sp)
 1009d60:	dcc00417 	ldw	r19,16(sp)
 1009d64:	dc800317 	ldw	r18,12(sp)
 1009d68:	dc400217 	ldw	r17,8(sp)
 1009d6c:	dec00704 	addi	sp,sp,28
 1009d70:	f800283a 	ret
 1009d74:	28d3c83a 	sub	r9,r5,r3
 1009d78:	003ff206 	br	1009d44 <__ratio+0x78>

01009d7c <_mprec_log10>:
 1009d7c:	defffe04 	addi	sp,sp,-8
 1009d80:	008005c4 	movi	r2,23
 1009d84:	dc000015 	stw	r16,0(sp)
 1009d88:	dfc00115 	stw	ra,4(sp)
 1009d8c:	2021883a 	mov	r16,r4
 1009d90:	11000c16 	blt	r2,r4,1009dc4 <_mprec_log10+0x48>
 1009d94:	200490fa 	slli	r2,r4,3
 1009d98:	00c040b4 	movhi	r3,258
 1009d9c:	18f25e04 	addi	r3,r3,-13960
 1009da0:	10c5883a 	add	r2,r2,r3
 1009da4:	12400117 	ldw	r9,4(r2)
 1009da8:	12000017 	ldw	r8,0(r2)
 1009dac:	4807883a 	mov	r3,r9
 1009db0:	4005883a 	mov	r2,r8
 1009db4:	dfc00117 	ldw	ra,4(sp)
 1009db8:	dc000017 	ldw	r16,0(sp)
 1009dbc:	dec00204 	addi	sp,sp,8
 1009dc0:	f800283a 	ret
 1009dc4:	0011883a 	mov	r8,zero
 1009dc8:	024ffc34 	movhi	r9,16368
 1009dcc:	0005883a 	mov	r2,zero
 1009dd0:	00d00934 	movhi	r3,16420
 1009dd4:	480b883a 	mov	r5,r9
 1009dd8:	4009883a 	mov	r4,r8
 1009ddc:	180f883a 	mov	r7,r3
 1009de0:	100d883a 	mov	r6,r2
 1009de4:	10103580 	call	1010358 <__muldf3>
 1009de8:	843fffc4 	addi	r16,r16,-1
 1009dec:	1011883a 	mov	r8,r2
 1009df0:	1813883a 	mov	r9,r3
 1009df4:	803ff51e 	bne	r16,zero,1009dcc <_mprec_log10+0x50>
 1009df8:	4005883a 	mov	r2,r8
 1009dfc:	4807883a 	mov	r3,r9
 1009e00:	dfc00117 	ldw	ra,4(sp)
 1009e04:	dc000017 	ldw	r16,0(sp)
 1009e08:	dec00204 	addi	sp,sp,8
 1009e0c:	f800283a 	ret

01009e10 <__copybits>:
 1009e10:	297fffc4 	addi	r5,r5,-1
 1009e14:	30800417 	ldw	r2,16(r6)
 1009e18:	280bd17a 	srai	r5,r5,5
 1009e1c:	31800504 	addi	r6,r6,20
 1009e20:	1085883a 	add	r2,r2,r2
 1009e24:	294b883a 	add	r5,r5,r5
 1009e28:	294b883a 	add	r5,r5,r5
 1009e2c:	1085883a 	add	r2,r2,r2
 1009e30:	290b883a 	add	r5,r5,r4
 1009e34:	3087883a 	add	r3,r6,r2
 1009e38:	29400104 	addi	r5,r5,4
 1009e3c:	30c0052e 	bgeu	r6,r3,1009e54 <__copybits+0x44>
 1009e40:	30800017 	ldw	r2,0(r6)
 1009e44:	31800104 	addi	r6,r6,4
 1009e48:	20800015 	stw	r2,0(r4)
 1009e4c:	21000104 	addi	r4,r4,4
 1009e50:	30fffb36 	bltu	r6,r3,1009e40 <__copybits+0x30>
 1009e54:	2140032e 	bgeu	r4,r5,1009e64 <__copybits+0x54>
 1009e58:	20000015 	stw	zero,0(r4)
 1009e5c:	21000104 	addi	r4,r4,4
 1009e60:	217ffd36 	bltu	r4,r5,1009e58 <__copybits+0x48>
 1009e64:	f800283a 	ret

01009e68 <__any_on>:
 1009e68:	20800417 	ldw	r2,16(r4)
 1009e6c:	2807d17a 	srai	r3,r5,5
 1009e70:	21000504 	addi	r4,r4,20
 1009e74:	10c00d0e 	bge	r2,r3,1009eac <__any_on+0x44>
 1009e78:	1085883a 	add	r2,r2,r2
 1009e7c:	1085883a 	add	r2,r2,r2
 1009e80:	208d883a 	add	r6,r4,r2
 1009e84:	2180182e 	bgeu	r4,r6,1009ee8 <__any_on+0x80>
 1009e88:	30bfff17 	ldw	r2,-4(r6)
 1009e8c:	30ffff04 	addi	r3,r6,-4
 1009e90:	1000041e 	bne	r2,zero,1009ea4 <__any_on+0x3c>
 1009e94:	20c0142e 	bgeu	r4,r3,1009ee8 <__any_on+0x80>
 1009e98:	18ffff04 	addi	r3,r3,-4
 1009e9c:	18800017 	ldw	r2,0(r3)
 1009ea0:	103ffc26 	beq	r2,zero,1009e94 <__any_on+0x2c>
 1009ea4:	00800044 	movi	r2,1
 1009ea8:	f800283a 	ret
 1009eac:	18800a0e 	bge	r3,r2,1009ed8 <__any_on+0x70>
 1009eb0:	294007cc 	andi	r5,r5,31
 1009eb4:	28000826 	beq	r5,zero,1009ed8 <__any_on+0x70>
 1009eb8:	18c5883a 	add	r2,r3,r3
 1009ebc:	1085883a 	add	r2,r2,r2
 1009ec0:	208d883a 	add	r6,r4,r2
 1009ec4:	30c00017 	ldw	r3,0(r6)
 1009ec8:	1944d83a 	srl	r2,r3,r5
 1009ecc:	1144983a 	sll	r2,r2,r5
 1009ed0:	18bff41e 	bne	r3,r2,1009ea4 <__any_on+0x3c>
 1009ed4:	003feb06 	br	1009e84 <__any_on+0x1c>
 1009ed8:	18c5883a 	add	r2,r3,r3
 1009edc:	1085883a 	add	r2,r2,r2
 1009ee0:	208d883a 	add	r6,r4,r2
 1009ee4:	003fe706 	br	1009e84 <__any_on+0x1c>
 1009ee8:	0005883a 	mov	r2,zero
 1009eec:	f800283a 	ret

01009ef0 <_Balloc>:
 1009ef0:	20c01317 	ldw	r3,76(r4)
 1009ef4:	defffb04 	addi	sp,sp,-20
 1009ef8:	dcc00315 	stw	r19,12(sp)
 1009efc:	dc800215 	stw	r18,8(sp)
 1009f00:	dfc00415 	stw	ra,16(sp)
 1009f04:	2825883a 	mov	r18,r5
 1009f08:	dc400115 	stw	r17,4(sp)
 1009f0c:	dc000015 	stw	r16,0(sp)
 1009f10:	2027883a 	mov	r19,r4
 1009f14:	01800404 	movi	r6,16
 1009f18:	01400104 	movi	r5,4
 1009f1c:	18001726 	beq	r3,zero,1009f7c <_Balloc+0x8c>
 1009f20:	01400044 	movi	r5,1
 1009f24:	9485883a 	add	r2,r18,r18
 1009f28:	2ca2983a 	sll	r17,r5,r18
 1009f2c:	1085883a 	add	r2,r2,r2
 1009f30:	10c7883a 	add	r3,r2,r3
 1009f34:	1c000017 	ldw	r16,0(r3)
 1009f38:	8c4d883a 	add	r6,r17,r17
 1009f3c:	318d883a 	add	r6,r6,r6
 1009f40:	9809883a 	mov	r4,r19
 1009f44:	31800504 	addi	r6,r6,20
 1009f48:	80001226 	beq	r16,zero,1009f94 <_Balloc+0xa4>
 1009f4c:	80800017 	ldw	r2,0(r16)
 1009f50:	18800015 	stw	r2,0(r3)
 1009f54:	80000415 	stw	zero,16(r16)
 1009f58:	80000315 	stw	zero,12(r16)
 1009f5c:	8005883a 	mov	r2,r16
 1009f60:	dfc00417 	ldw	ra,16(sp)
 1009f64:	dcc00317 	ldw	r19,12(sp)
 1009f68:	dc800217 	ldw	r18,8(sp)
 1009f6c:	dc400117 	ldw	r17,4(sp)
 1009f70:	dc000017 	ldw	r16,0(sp)
 1009f74:	dec00504 	addi	sp,sp,20
 1009f78:	f800283a 	ret
 1009f7c:	100de5c0 	call	100de5c <_calloc_r>
 1009f80:	1007883a 	mov	r3,r2
 1009f84:	0021883a 	mov	r16,zero
 1009f88:	98801315 	stw	r2,76(r19)
 1009f8c:	103fe41e 	bne	r2,zero,1009f20 <_Balloc+0x30>
 1009f90:	003ff206 	br	1009f5c <_Balloc+0x6c>
 1009f94:	100de5c0 	call	100de5c <_calloc_r>
 1009f98:	103ff026 	beq	r2,zero,1009f5c <_Balloc+0x6c>
 1009f9c:	1021883a 	mov	r16,r2
 1009fa0:	14800115 	stw	r18,4(r2)
 1009fa4:	14400215 	stw	r17,8(r2)
 1009fa8:	003fea06 	br	1009f54 <_Balloc+0x64>

01009fac <__d2b>:
 1009fac:	defff504 	addi	sp,sp,-44
 1009fb0:	dcc00515 	stw	r19,20(sp)
 1009fb4:	04c00044 	movi	r19,1
 1009fb8:	dc000215 	stw	r16,8(sp)
 1009fbc:	2821883a 	mov	r16,r5
 1009fc0:	980b883a 	mov	r5,r19
 1009fc4:	ddc00915 	stw	r23,36(sp)
 1009fc8:	dd800815 	stw	r22,32(sp)
 1009fcc:	dd400715 	stw	r21,28(sp)
 1009fd0:	dd000615 	stw	r20,24(sp)
 1009fd4:	dc800415 	stw	r18,16(sp)
 1009fd8:	dc400315 	stw	r17,12(sp)
 1009fdc:	dfc00a15 	stw	ra,40(sp)
 1009fe0:	3023883a 	mov	r17,r6
 1009fe4:	382d883a 	mov	r22,r7
 1009fe8:	ddc00b17 	ldw	r23,44(sp)
 1009fec:	1009ef00 	call	1009ef0 <_Balloc>
 1009ff0:	1025883a 	mov	r18,r2
 1009ff4:	00a00034 	movhi	r2,32768
 1009ff8:	10bfffc4 	addi	r2,r2,-1
 1009ffc:	8888703a 	and	r4,r17,r2
 100a000:	202ad53a 	srli	r21,r4,20
 100a004:	00800434 	movhi	r2,16
 100a008:	10bfffc4 	addi	r2,r2,-1
 100a00c:	8886703a 	and	r3,r17,r2
 100a010:	a829003a 	cmpeq	r20,r21,zero
 100a014:	800b883a 	mov	r5,r16
 100a018:	d8c00115 	stw	r3,4(sp)
 100a01c:	94000504 	addi	r16,r18,20
 100a020:	a000021e 	bne	r20,zero,100a02c <__d2b+0x80>
 100a024:	18c00434 	orhi	r3,r3,16
 100a028:	d8c00115 	stw	r3,4(sp)
 100a02c:	28002726 	beq	r5,zero,100a0cc <__d2b+0x120>
 100a030:	d809883a 	mov	r4,sp
 100a034:	d9400015 	stw	r5,0(sp)
 100a038:	1009a080 	call	1009a08 <__lo0bits>
 100a03c:	100d883a 	mov	r6,r2
 100a040:	10003526 	beq	r2,zero,100a118 <__d2b+0x16c>
 100a044:	d8c00117 	ldw	r3,4(sp)
 100a048:	00800804 	movi	r2,32
 100a04c:	1185c83a 	sub	r2,r2,r6
 100a050:	d9000017 	ldw	r4,0(sp)
 100a054:	1886983a 	sll	r3,r3,r2
 100a058:	1906b03a 	or	r3,r3,r4
 100a05c:	90c00515 	stw	r3,20(r18)
 100a060:	d8c00117 	ldw	r3,4(sp)
 100a064:	1986d83a 	srl	r3,r3,r6
 100a068:	d8c00115 	stw	r3,4(sp)
 100a06c:	180b003a 	cmpeq	r5,r3,zero
 100a070:	00800084 	movi	r2,2
 100a074:	114bc83a 	sub	r5,r2,r5
 100a078:	80c00115 	stw	r3,4(r16)
 100a07c:	91400415 	stw	r5,16(r18)
 100a080:	a0001a1e 	bne	r20,zero,100a0ec <__d2b+0x140>
 100a084:	3545883a 	add	r2,r6,r21
 100a088:	10bef344 	addi	r2,r2,-1075
 100a08c:	00c00d44 	movi	r3,53
 100a090:	b0800015 	stw	r2,0(r22)
 100a094:	1987c83a 	sub	r3,r3,r6
 100a098:	b8c00015 	stw	r3,0(r23)
 100a09c:	9005883a 	mov	r2,r18
 100a0a0:	dfc00a17 	ldw	ra,40(sp)
 100a0a4:	ddc00917 	ldw	r23,36(sp)
 100a0a8:	dd800817 	ldw	r22,32(sp)
 100a0ac:	dd400717 	ldw	r21,28(sp)
 100a0b0:	dd000617 	ldw	r20,24(sp)
 100a0b4:	dcc00517 	ldw	r19,20(sp)
 100a0b8:	dc800417 	ldw	r18,16(sp)
 100a0bc:	dc400317 	ldw	r17,12(sp)
 100a0c0:	dc000217 	ldw	r16,8(sp)
 100a0c4:	dec00b04 	addi	sp,sp,44
 100a0c8:	f800283a 	ret
 100a0cc:	d9000104 	addi	r4,sp,4
 100a0d0:	1009a080 	call	1009a08 <__lo0bits>
 100a0d4:	11800804 	addi	r6,r2,32
 100a0d8:	d8800117 	ldw	r2,4(sp)
 100a0dc:	94c00415 	stw	r19,16(r18)
 100a0e0:	980b883a 	mov	r5,r19
 100a0e4:	90800515 	stw	r2,20(r18)
 100a0e8:	a03fe626 	beq	r20,zero,100a084 <__d2b+0xd8>
 100a0ec:	2945883a 	add	r2,r5,r5
 100a0f0:	1085883a 	add	r2,r2,r2
 100a0f4:	1405883a 	add	r2,r2,r16
 100a0f8:	113fff17 	ldw	r4,-4(r2)
 100a0fc:	30fef384 	addi	r3,r6,-1074
 100a100:	2820917a 	slli	r16,r5,5
 100a104:	b0c00015 	stw	r3,0(r22)
 100a108:	10099980 	call	1009998 <__hi0bits>
 100a10c:	80a1c83a 	sub	r16,r16,r2
 100a110:	bc000015 	stw	r16,0(r23)
 100a114:	003fe106 	br	100a09c <__d2b+0xf0>
 100a118:	d8800017 	ldw	r2,0(sp)
 100a11c:	90800515 	stw	r2,20(r18)
 100a120:	d8c00117 	ldw	r3,4(sp)
 100a124:	003fd106 	br	100a06c <__d2b+0xc0>

0100a128 <__mdiff>:
 100a128:	defffb04 	addi	sp,sp,-20
 100a12c:	dc000015 	stw	r16,0(sp)
 100a130:	2821883a 	mov	r16,r5
 100a134:	dc800215 	stw	r18,8(sp)
 100a138:	300b883a 	mov	r5,r6
 100a13c:	2025883a 	mov	r18,r4
 100a140:	8009883a 	mov	r4,r16
 100a144:	dc400115 	stw	r17,4(sp)
 100a148:	dfc00415 	stw	ra,16(sp)
 100a14c:	dcc00315 	stw	r19,12(sp)
 100a150:	3023883a 	mov	r17,r6
 100a154:	1009acc0 	call	1009acc <__mcmp>
 100a158:	10004226 	beq	r2,zero,100a264 <__mdiff+0x13c>
 100a15c:	10005016 	blt	r2,zero,100a2a0 <__mdiff+0x178>
 100a160:	0027883a 	mov	r19,zero
 100a164:	81400117 	ldw	r5,4(r16)
 100a168:	9009883a 	mov	r4,r18
 100a16c:	1009ef00 	call	1009ef0 <_Balloc>
 100a170:	1019883a 	mov	r12,r2
 100a174:	82800417 	ldw	r10,16(r16)
 100a178:	88800417 	ldw	r2,16(r17)
 100a17c:	81800504 	addi	r6,r16,20
 100a180:	5287883a 	add	r3,r10,r10
 100a184:	1085883a 	add	r2,r2,r2
 100a188:	18c7883a 	add	r3,r3,r3
 100a18c:	1085883a 	add	r2,r2,r2
 100a190:	8a000504 	addi	r8,r17,20
 100a194:	64c00315 	stw	r19,12(r12)
 100a198:	30db883a 	add	r13,r6,r3
 100a19c:	4097883a 	add	r11,r8,r2
 100a1a0:	61c00504 	addi	r7,r12,20
 100a1a4:	0013883a 	mov	r9,zero
 100a1a8:	31000017 	ldw	r4,0(r6)
 100a1ac:	41400017 	ldw	r5,0(r8)
 100a1b0:	42000104 	addi	r8,r8,4
 100a1b4:	20bfffcc 	andi	r2,r4,65535
 100a1b8:	28ffffcc 	andi	r3,r5,65535
 100a1bc:	10c5c83a 	sub	r2,r2,r3
 100a1c0:	1245883a 	add	r2,r2,r9
 100a1c4:	2008d43a 	srli	r4,r4,16
 100a1c8:	280ad43a 	srli	r5,r5,16
 100a1cc:	1007d43a 	srai	r3,r2,16
 100a1d0:	3880000d 	sth	r2,0(r7)
 100a1d4:	2149c83a 	sub	r4,r4,r5
 100a1d8:	20c9883a 	add	r4,r4,r3
 100a1dc:	3900008d 	sth	r4,2(r7)
 100a1e0:	31800104 	addi	r6,r6,4
 100a1e4:	39c00104 	addi	r7,r7,4
 100a1e8:	2013d43a 	srai	r9,r4,16
 100a1ec:	42ffee36 	bltu	r8,r11,100a1a8 <__mdiff+0x80>
 100a1f0:	33400c2e 	bgeu	r6,r13,100a224 <__mdiff+0xfc>
 100a1f4:	30800017 	ldw	r2,0(r6)
 100a1f8:	31800104 	addi	r6,r6,4
 100a1fc:	10ffffcc 	andi	r3,r2,65535
 100a200:	1a47883a 	add	r3,r3,r9
 100a204:	1004d43a 	srli	r2,r2,16
 100a208:	1809d43a 	srai	r4,r3,16
 100a20c:	38c0000d 	sth	r3,0(r7)
 100a210:	1105883a 	add	r2,r2,r4
 100a214:	3880008d 	sth	r2,2(r7)
 100a218:	1013d43a 	srai	r9,r2,16
 100a21c:	39c00104 	addi	r7,r7,4
 100a220:	337ff436 	bltu	r6,r13,100a1f4 <__mdiff+0xcc>
 100a224:	38bfff17 	ldw	r2,-4(r7)
 100a228:	38ffff04 	addi	r3,r7,-4
 100a22c:	1000041e 	bne	r2,zero,100a240 <__mdiff+0x118>
 100a230:	18ffff04 	addi	r3,r3,-4
 100a234:	18800017 	ldw	r2,0(r3)
 100a238:	52bfffc4 	addi	r10,r10,-1
 100a23c:	103ffc26 	beq	r2,zero,100a230 <__mdiff+0x108>
 100a240:	6005883a 	mov	r2,r12
 100a244:	62800415 	stw	r10,16(r12)
 100a248:	dfc00417 	ldw	ra,16(sp)
 100a24c:	dcc00317 	ldw	r19,12(sp)
 100a250:	dc800217 	ldw	r18,8(sp)
 100a254:	dc400117 	ldw	r17,4(sp)
 100a258:	dc000017 	ldw	r16,0(sp)
 100a25c:	dec00504 	addi	sp,sp,20
 100a260:	f800283a 	ret
 100a264:	9009883a 	mov	r4,r18
 100a268:	000b883a 	mov	r5,zero
 100a26c:	1009ef00 	call	1009ef0 <_Balloc>
 100a270:	1019883a 	mov	r12,r2
 100a274:	00800044 	movi	r2,1
 100a278:	60800415 	stw	r2,16(r12)
 100a27c:	6005883a 	mov	r2,r12
 100a280:	60000515 	stw	zero,20(r12)
 100a284:	dfc00417 	ldw	ra,16(sp)
 100a288:	dcc00317 	ldw	r19,12(sp)
 100a28c:	dc800217 	ldw	r18,8(sp)
 100a290:	dc400117 	ldw	r17,4(sp)
 100a294:	dc000017 	ldw	r16,0(sp)
 100a298:	dec00504 	addi	sp,sp,20
 100a29c:	f800283a 	ret
 100a2a0:	880d883a 	mov	r6,r17
 100a2a4:	04c00044 	movi	r19,1
 100a2a8:	8023883a 	mov	r17,r16
 100a2ac:	3021883a 	mov	r16,r6
 100a2b0:	003fac06 	br	100a164 <__mdiff+0x3c>

0100a2b4 <__lshift>:
 100a2b4:	defff904 	addi	sp,sp,-28
 100a2b8:	28800417 	ldw	r2,16(r5)
 100a2bc:	dc000015 	stw	r16,0(sp)
 100a2c0:	3021d17a 	srai	r16,r6,5
 100a2c4:	28c00217 	ldw	r3,8(r5)
 100a2c8:	10800044 	addi	r2,r2,1
 100a2cc:	dc400115 	stw	r17,4(sp)
 100a2d0:	80a3883a 	add	r17,r16,r2
 100a2d4:	dd400515 	stw	r21,20(sp)
 100a2d8:	dd000415 	stw	r20,16(sp)
 100a2dc:	dc800215 	stw	r18,8(sp)
 100a2e0:	dfc00615 	stw	ra,24(sp)
 100a2e4:	2825883a 	mov	r18,r5
 100a2e8:	dcc00315 	stw	r19,12(sp)
 100a2ec:	3029883a 	mov	r20,r6
 100a2f0:	202b883a 	mov	r21,r4
 100a2f4:	29400117 	ldw	r5,4(r5)
 100a2f8:	1c40030e 	bge	r3,r17,100a308 <__lshift+0x54>
 100a2fc:	18c7883a 	add	r3,r3,r3
 100a300:	29400044 	addi	r5,r5,1
 100a304:	1c7ffd16 	blt	r3,r17,100a2fc <__lshift+0x48>
 100a308:	a809883a 	mov	r4,r21
 100a30c:	1009ef00 	call	1009ef0 <_Balloc>
 100a310:	1027883a 	mov	r19,r2
 100a314:	11400504 	addi	r5,r2,20
 100a318:	0400090e 	bge	zero,r16,100a340 <__lshift+0x8c>
 100a31c:	2805883a 	mov	r2,r5
 100a320:	0007883a 	mov	r3,zero
 100a324:	18c00044 	addi	r3,r3,1
 100a328:	10000015 	stw	zero,0(r2)
 100a32c:	10800104 	addi	r2,r2,4
 100a330:	80fffc1e 	bne	r16,r3,100a324 <__lshift+0x70>
 100a334:	8405883a 	add	r2,r16,r16
 100a338:	1085883a 	add	r2,r2,r2
 100a33c:	288b883a 	add	r5,r5,r2
 100a340:	90800417 	ldw	r2,16(r18)
 100a344:	91000504 	addi	r4,r18,20
 100a348:	a18007cc 	andi	r6,r20,31
 100a34c:	1085883a 	add	r2,r2,r2
 100a350:	1085883a 	add	r2,r2,r2
 100a354:	208f883a 	add	r7,r4,r2
 100a358:	30001e26 	beq	r6,zero,100a3d4 <__lshift+0x120>
 100a35c:	00800804 	movi	r2,32
 100a360:	1191c83a 	sub	r8,r2,r6
 100a364:	0007883a 	mov	r3,zero
 100a368:	20800017 	ldw	r2,0(r4)
 100a36c:	1184983a 	sll	r2,r2,r6
 100a370:	1884b03a 	or	r2,r3,r2
 100a374:	28800015 	stw	r2,0(r5)
 100a378:	20c00017 	ldw	r3,0(r4)
 100a37c:	21000104 	addi	r4,r4,4
 100a380:	29400104 	addi	r5,r5,4
 100a384:	1a06d83a 	srl	r3,r3,r8
 100a388:	21fff736 	bltu	r4,r7,100a368 <__lshift+0xb4>
 100a38c:	28c00015 	stw	r3,0(r5)
 100a390:	18000126 	beq	r3,zero,100a398 <__lshift+0xe4>
 100a394:	8c400044 	addi	r17,r17,1
 100a398:	88bfffc4 	addi	r2,r17,-1
 100a39c:	98800415 	stw	r2,16(r19)
 100a3a0:	a809883a 	mov	r4,r21
 100a3a4:	900b883a 	mov	r5,r18
 100a3a8:	10099700 	call	1009970 <_Bfree>
 100a3ac:	9805883a 	mov	r2,r19
 100a3b0:	dfc00617 	ldw	ra,24(sp)
 100a3b4:	dd400517 	ldw	r21,20(sp)
 100a3b8:	dd000417 	ldw	r20,16(sp)
 100a3bc:	dcc00317 	ldw	r19,12(sp)
 100a3c0:	dc800217 	ldw	r18,8(sp)
 100a3c4:	dc400117 	ldw	r17,4(sp)
 100a3c8:	dc000017 	ldw	r16,0(sp)
 100a3cc:	dec00704 	addi	sp,sp,28
 100a3d0:	f800283a 	ret
 100a3d4:	20800017 	ldw	r2,0(r4)
 100a3d8:	21000104 	addi	r4,r4,4
 100a3dc:	28800015 	stw	r2,0(r5)
 100a3e0:	29400104 	addi	r5,r5,4
 100a3e4:	21ffec2e 	bgeu	r4,r7,100a398 <__lshift+0xe4>
 100a3e8:	20800017 	ldw	r2,0(r4)
 100a3ec:	21000104 	addi	r4,r4,4
 100a3f0:	28800015 	stw	r2,0(r5)
 100a3f4:	29400104 	addi	r5,r5,4
 100a3f8:	21fff636 	bltu	r4,r7,100a3d4 <__lshift+0x120>
 100a3fc:	003fe606 	br	100a398 <__lshift+0xe4>

0100a400 <__multiply>:
 100a400:	defff004 	addi	sp,sp,-64
 100a404:	dc800815 	stw	r18,32(sp)
 100a408:	dc400715 	stw	r17,28(sp)
 100a40c:	2c800417 	ldw	r18,16(r5)
 100a410:	34400417 	ldw	r17,16(r6)
 100a414:	dcc00915 	stw	r19,36(sp)
 100a418:	dc000615 	stw	r16,24(sp)
 100a41c:	dfc00f15 	stw	ra,60(sp)
 100a420:	df000e15 	stw	fp,56(sp)
 100a424:	ddc00d15 	stw	r23,52(sp)
 100a428:	dd800c15 	stw	r22,48(sp)
 100a42c:	dd400b15 	stw	r21,44(sp)
 100a430:	dd000a15 	stw	r20,40(sp)
 100a434:	2821883a 	mov	r16,r5
 100a438:	3027883a 	mov	r19,r6
 100a43c:	9440040e 	bge	r18,r17,100a450 <__multiply+0x50>
 100a440:	8825883a 	mov	r18,r17
 100a444:	2c400417 	ldw	r17,16(r5)
 100a448:	2827883a 	mov	r19,r5
 100a44c:	3021883a 	mov	r16,r6
 100a450:	80800217 	ldw	r2,8(r16)
 100a454:	9447883a 	add	r3,r18,r17
 100a458:	d8c00415 	stw	r3,16(sp)
 100a45c:	81400117 	ldw	r5,4(r16)
 100a460:	10c0010e 	bge	r2,r3,100a468 <__multiply+0x68>
 100a464:	29400044 	addi	r5,r5,1
 100a468:	1009ef00 	call	1009ef0 <_Balloc>
 100a46c:	d8800515 	stw	r2,20(sp)
 100a470:	d9000417 	ldw	r4,16(sp)
 100a474:	d8c00517 	ldw	r3,20(sp)
 100a478:	2105883a 	add	r2,r4,r4
 100a47c:	1085883a 	add	r2,r2,r2
 100a480:	19000504 	addi	r4,r3,20
 100a484:	2085883a 	add	r2,r4,r2
 100a488:	d8800315 	stw	r2,12(sp)
 100a48c:	2080052e 	bgeu	r4,r2,100a4a4 <__multiply+0xa4>
 100a490:	2005883a 	mov	r2,r4
 100a494:	d8c00317 	ldw	r3,12(sp)
 100a498:	10000015 	stw	zero,0(r2)
 100a49c:	10800104 	addi	r2,r2,4
 100a4a0:	10fffc36 	bltu	r2,r3,100a494 <__multiply+0x94>
 100a4a4:	8c45883a 	add	r2,r17,r17
 100a4a8:	9487883a 	add	r3,r18,r18
 100a4ac:	9dc00504 	addi	r23,r19,20
 100a4b0:	1085883a 	add	r2,r2,r2
 100a4b4:	84000504 	addi	r16,r16,20
 100a4b8:	18c7883a 	add	r3,r3,r3
 100a4bc:	b885883a 	add	r2,r23,r2
 100a4c0:	dc000015 	stw	r16,0(sp)
 100a4c4:	d8800215 	stw	r2,8(sp)
 100a4c8:	80f9883a 	add	fp,r16,r3
 100a4cc:	b880432e 	bgeu	r23,r2,100a5dc <__multiply+0x1dc>
 100a4d0:	d9000115 	stw	r4,4(sp)
 100a4d4:	b9000017 	ldw	r4,0(r23)
 100a4d8:	253fffcc 	andi	r20,r4,65535
 100a4dc:	a0001a26 	beq	r20,zero,100a548 <__multiply+0x148>
 100a4e0:	dcc00017 	ldw	r19,0(sp)
 100a4e4:	dc800117 	ldw	r18,4(sp)
 100a4e8:	002b883a 	mov	r21,zero
 100a4ec:	9c400017 	ldw	r17,0(r19)
 100a4f0:	94000017 	ldw	r16,0(r18)
 100a4f4:	a009883a 	mov	r4,r20
 100a4f8:	897fffcc 	andi	r5,r17,65535
 100a4fc:	10026440 	call	1002644 <__mulsi3>
 100a500:	880ad43a 	srli	r5,r17,16
 100a504:	80ffffcc 	andi	r3,r16,65535
 100a508:	a8c7883a 	add	r3,r21,r3
 100a50c:	a009883a 	mov	r4,r20
 100a510:	10e3883a 	add	r17,r2,r3
 100a514:	8020d43a 	srli	r16,r16,16
 100a518:	10026440 	call	1002644 <__mulsi3>
 100a51c:	8806d43a 	srli	r3,r17,16
 100a520:	1405883a 	add	r2,r2,r16
 100a524:	9cc00104 	addi	r19,r19,4
 100a528:	1887883a 	add	r3,r3,r2
 100a52c:	90c0008d 	sth	r3,2(r18)
 100a530:	9440000d 	sth	r17,0(r18)
 100a534:	182ad43a 	srli	r21,r3,16
 100a538:	94800104 	addi	r18,r18,4
 100a53c:	9f3feb36 	bltu	r19,fp,100a4ec <__multiply+0xec>
 100a540:	95400015 	stw	r21,0(r18)
 100a544:	b9000017 	ldw	r4,0(r23)
 100a548:	202ad43a 	srli	r21,r4,16
 100a54c:	a8001c26 	beq	r21,zero,100a5c0 <__multiply+0x1c0>
 100a550:	d9000117 	ldw	r4,4(sp)
 100a554:	dd000017 	ldw	r20,0(sp)
 100a558:	002d883a 	mov	r22,zero
 100a55c:	24c00017 	ldw	r19,0(r4)
 100a560:	2025883a 	mov	r18,r4
 100a564:	9823883a 	mov	r17,r19
 100a568:	a4000017 	ldw	r16,0(r20)
 100a56c:	a809883a 	mov	r4,r21
 100a570:	a5000104 	addi	r20,r20,4
 100a574:	817fffcc 	andi	r5,r16,65535
 100a578:	10026440 	call	1002644 <__mulsi3>
 100a57c:	8806d43a 	srli	r3,r17,16
 100a580:	800ad43a 	srli	r5,r16,16
 100a584:	94c0000d 	sth	r19,0(r18)
 100a588:	b0c7883a 	add	r3,r22,r3
 100a58c:	10e1883a 	add	r16,r2,r3
 100a590:	9400008d 	sth	r16,2(r18)
 100a594:	a809883a 	mov	r4,r21
 100a598:	94800104 	addi	r18,r18,4
 100a59c:	10026440 	call	1002644 <__mulsi3>
 100a5a0:	94400017 	ldw	r17,0(r18)
 100a5a4:	8020d43a 	srli	r16,r16,16
 100a5a8:	88ffffcc 	andi	r3,r17,65535
 100a5ac:	10c5883a 	add	r2,r2,r3
 100a5b0:	80a7883a 	add	r19,r16,r2
 100a5b4:	982cd43a 	srli	r22,r19,16
 100a5b8:	a73feb36 	bltu	r20,fp,100a568 <__multiply+0x168>
 100a5bc:	94c00015 	stw	r19,0(r18)
 100a5c0:	d8800217 	ldw	r2,8(sp)
 100a5c4:	bdc00104 	addi	r23,r23,4
 100a5c8:	b880042e 	bgeu	r23,r2,100a5dc <__multiply+0x1dc>
 100a5cc:	d8c00117 	ldw	r3,4(sp)
 100a5d0:	18c00104 	addi	r3,r3,4
 100a5d4:	d8c00115 	stw	r3,4(sp)
 100a5d8:	003fbe06 	br	100a4d4 <__multiply+0xd4>
 100a5dc:	d9000417 	ldw	r4,16(sp)
 100a5e0:	01000c0e 	bge	zero,r4,100a614 <__multiply+0x214>
 100a5e4:	d8c00317 	ldw	r3,12(sp)
 100a5e8:	18bfff17 	ldw	r2,-4(r3)
 100a5ec:	18ffff04 	addi	r3,r3,-4
 100a5f0:	10000326 	beq	r2,zero,100a600 <__multiply+0x200>
 100a5f4:	00000706 	br	100a614 <__multiply+0x214>
 100a5f8:	18800017 	ldw	r2,0(r3)
 100a5fc:	1000051e 	bne	r2,zero,100a614 <__multiply+0x214>
 100a600:	d9000417 	ldw	r4,16(sp)
 100a604:	18ffff04 	addi	r3,r3,-4
 100a608:	213fffc4 	addi	r4,r4,-1
 100a60c:	d9000415 	stw	r4,16(sp)
 100a610:	203ff91e 	bne	r4,zero,100a5f8 <__multiply+0x1f8>
 100a614:	d8800417 	ldw	r2,16(sp)
 100a618:	d8c00517 	ldw	r3,20(sp)
 100a61c:	18800415 	stw	r2,16(r3)
 100a620:	1805883a 	mov	r2,r3
 100a624:	dfc00f17 	ldw	ra,60(sp)
 100a628:	df000e17 	ldw	fp,56(sp)
 100a62c:	ddc00d17 	ldw	r23,52(sp)
 100a630:	dd800c17 	ldw	r22,48(sp)
 100a634:	dd400b17 	ldw	r21,44(sp)
 100a638:	dd000a17 	ldw	r20,40(sp)
 100a63c:	dcc00917 	ldw	r19,36(sp)
 100a640:	dc800817 	ldw	r18,32(sp)
 100a644:	dc400717 	ldw	r17,28(sp)
 100a648:	dc000617 	ldw	r16,24(sp)
 100a64c:	dec01004 	addi	sp,sp,64
 100a650:	f800283a 	ret

0100a654 <__i2b>:
 100a654:	defffd04 	addi	sp,sp,-12
 100a658:	dc000015 	stw	r16,0(sp)
 100a65c:	04000044 	movi	r16,1
 100a660:	dc800115 	stw	r18,4(sp)
 100a664:	2825883a 	mov	r18,r5
 100a668:	800b883a 	mov	r5,r16
 100a66c:	dfc00215 	stw	ra,8(sp)
 100a670:	1009ef00 	call	1009ef0 <_Balloc>
 100a674:	14000415 	stw	r16,16(r2)
 100a678:	14800515 	stw	r18,20(r2)
 100a67c:	dfc00217 	ldw	ra,8(sp)
 100a680:	dc800117 	ldw	r18,4(sp)
 100a684:	dc000017 	ldw	r16,0(sp)
 100a688:	dec00304 	addi	sp,sp,12
 100a68c:	f800283a 	ret

0100a690 <__multadd>:
 100a690:	defff604 	addi	sp,sp,-40
 100a694:	dd800615 	stw	r22,24(sp)
 100a698:	2d800417 	ldw	r22,16(r5)
 100a69c:	df000815 	stw	fp,32(sp)
 100a6a0:	ddc00715 	stw	r23,28(sp)
 100a6a4:	dd400515 	stw	r21,20(sp)
 100a6a8:	dd000415 	stw	r20,16(sp)
 100a6ac:	dcc00315 	stw	r19,12(sp)
 100a6b0:	dc800215 	stw	r18,8(sp)
 100a6b4:	dfc00915 	stw	ra,36(sp)
 100a6b8:	dc400115 	stw	r17,4(sp)
 100a6bc:	dc000015 	stw	r16,0(sp)
 100a6c0:	282f883a 	mov	r23,r5
 100a6c4:	2039883a 	mov	fp,r4
 100a6c8:	302b883a 	mov	r21,r6
 100a6cc:	3829883a 	mov	r20,r7
 100a6d0:	2c800504 	addi	r18,r5,20
 100a6d4:	0027883a 	mov	r19,zero
 100a6d8:	94400017 	ldw	r17,0(r18)
 100a6dc:	a80b883a 	mov	r5,r21
 100a6e0:	9cc00044 	addi	r19,r19,1
 100a6e4:	893fffcc 	andi	r4,r17,65535
 100a6e8:	10026440 	call	1002644 <__mulsi3>
 100a6ec:	8808d43a 	srli	r4,r17,16
 100a6f0:	1521883a 	add	r16,r2,r20
 100a6f4:	a80b883a 	mov	r5,r21
 100a6f8:	10026440 	call	1002644 <__mulsi3>
 100a6fc:	8008d43a 	srli	r4,r16,16
 100a700:	843fffcc 	andi	r16,r16,65535
 100a704:	1105883a 	add	r2,r2,r4
 100a708:	1006943a 	slli	r3,r2,16
 100a70c:	1028d43a 	srli	r20,r2,16
 100a710:	1c07883a 	add	r3,r3,r16
 100a714:	90c00015 	stw	r3,0(r18)
 100a718:	94800104 	addi	r18,r18,4
 100a71c:	9dbfee16 	blt	r19,r22,100a6d8 <__multadd+0x48>
 100a720:	a0000826 	beq	r20,zero,100a744 <__multadd+0xb4>
 100a724:	b8800217 	ldw	r2,8(r23)
 100a728:	b080130e 	bge	r22,r2,100a778 <__multadd+0xe8>
 100a72c:	b585883a 	add	r2,r22,r22
 100a730:	1085883a 	add	r2,r2,r2
 100a734:	15c5883a 	add	r2,r2,r23
 100a738:	b0c00044 	addi	r3,r22,1
 100a73c:	15000515 	stw	r20,20(r2)
 100a740:	b8c00415 	stw	r3,16(r23)
 100a744:	b805883a 	mov	r2,r23
 100a748:	dfc00917 	ldw	ra,36(sp)
 100a74c:	df000817 	ldw	fp,32(sp)
 100a750:	ddc00717 	ldw	r23,28(sp)
 100a754:	dd800617 	ldw	r22,24(sp)
 100a758:	dd400517 	ldw	r21,20(sp)
 100a75c:	dd000417 	ldw	r20,16(sp)
 100a760:	dcc00317 	ldw	r19,12(sp)
 100a764:	dc800217 	ldw	r18,8(sp)
 100a768:	dc400117 	ldw	r17,4(sp)
 100a76c:	dc000017 	ldw	r16,0(sp)
 100a770:	dec00a04 	addi	sp,sp,40
 100a774:	f800283a 	ret
 100a778:	b9400117 	ldw	r5,4(r23)
 100a77c:	e009883a 	mov	r4,fp
 100a780:	29400044 	addi	r5,r5,1
 100a784:	1009ef00 	call	1009ef0 <_Balloc>
 100a788:	b9800417 	ldw	r6,16(r23)
 100a78c:	b9400304 	addi	r5,r23,12
 100a790:	11000304 	addi	r4,r2,12
 100a794:	318d883a 	add	r6,r6,r6
 100a798:	318d883a 	add	r6,r6,r6
 100a79c:	31800204 	addi	r6,r6,8
 100a7a0:	1023883a 	mov	r17,r2
 100a7a4:	10097580 	call	1009758 <memcpy>
 100a7a8:	b80b883a 	mov	r5,r23
 100a7ac:	e009883a 	mov	r4,fp
 100a7b0:	10099700 	call	1009970 <_Bfree>
 100a7b4:	882f883a 	mov	r23,r17
 100a7b8:	003fdc06 	br	100a72c <__multadd+0x9c>

0100a7bc <__pow5mult>:
 100a7bc:	defffa04 	addi	sp,sp,-24
 100a7c0:	308000cc 	andi	r2,r6,3
 100a7c4:	dd000415 	stw	r20,16(sp)
 100a7c8:	dcc00315 	stw	r19,12(sp)
 100a7cc:	dc000015 	stw	r16,0(sp)
 100a7d0:	dfc00515 	stw	ra,20(sp)
 100a7d4:	dc800215 	stw	r18,8(sp)
 100a7d8:	dc400115 	stw	r17,4(sp)
 100a7dc:	3021883a 	mov	r16,r6
 100a7e0:	2027883a 	mov	r19,r4
 100a7e4:	2829883a 	mov	r20,r5
 100a7e8:	10002b1e 	bne	r2,zero,100a898 <__pow5mult+0xdc>
 100a7ec:	8025d0ba 	srai	r18,r16,2
 100a7f0:	90001b26 	beq	r18,zero,100a860 <__pow5mult+0xa4>
 100a7f4:	9c001217 	ldw	r16,72(r19)
 100a7f8:	8000081e 	bne	r16,zero,100a81c <__pow5mult+0x60>
 100a7fc:	00003006 	br	100a8c0 <__pow5mult+0x104>
 100a800:	800b883a 	mov	r5,r16
 100a804:	800d883a 	mov	r6,r16
 100a808:	9809883a 	mov	r4,r19
 100a80c:	90001426 	beq	r18,zero,100a860 <__pow5mult+0xa4>
 100a810:	80800017 	ldw	r2,0(r16)
 100a814:	10001b26 	beq	r2,zero,100a884 <__pow5mult+0xc8>
 100a818:	1021883a 	mov	r16,r2
 100a81c:	9080004c 	andi	r2,r18,1
 100a820:	1005003a 	cmpeq	r2,r2,zero
 100a824:	9025d07a 	srai	r18,r18,1
 100a828:	800d883a 	mov	r6,r16
 100a82c:	9809883a 	mov	r4,r19
 100a830:	a00b883a 	mov	r5,r20
 100a834:	103ff21e 	bne	r2,zero,100a800 <__pow5mult+0x44>
 100a838:	100a4000 	call	100a400 <__multiply>
 100a83c:	a00b883a 	mov	r5,r20
 100a840:	9809883a 	mov	r4,r19
 100a844:	1023883a 	mov	r17,r2
 100a848:	10099700 	call	1009970 <_Bfree>
 100a84c:	8829883a 	mov	r20,r17
 100a850:	800b883a 	mov	r5,r16
 100a854:	800d883a 	mov	r6,r16
 100a858:	9809883a 	mov	r4,r19
 100a85c:	903fec1e 	bne	r18,zero,100a810 <__pow5mult+0x54>
 100a860:	a005883a 	mov	r2,r20
 100a864:	dfc00517 	ldw	ra,20(sp)
 100a868:	dd000417 	ldw	r20,16(sp)
 100a86c:	dcc00317 	ldw	r19,12(sp)
 100a870:	dc800217 	ldw	r18,8(sp)
 100a874:	dc400117 	ldw	r17,4(sp)
 100a878:	dc000017 	ldw	r16,0(sp)
 100a87c:	dec00604 	addi	sp,sp,24
 100a880:	f800283a 	ret
 100a884:	100a4000 	call	100a400 <__multiply>
 100a888:	80800015 	stw	r2,0(r16)
 100a88c:	1021883a 	mov	r16,r2
 100a890:	10000015 	stw	zero,0(r2)
 100a894:	003fe106 	br	100a81c <__pow5mult+0x60>
 100a898:	1085883a 	add	r2,r2,r2
 100a89c:	00c040b4 	movhi	r3,258
 100a8a0:	18f2a404 	addi	r3,r3,-13680
 100a8a4:	1085883a 	add	r2,r2,r2
 100a8a8:	10c5883a 	add	r2,r2,r3
 100a8ac:	11bfff17 	ldw	r6,-4(r2)
 100a8b0:	000f883a 	mov	r7,zero
 100a8b4:	100a6900 	call	100a690 <__multadd>
 100a8b8:	1029883a 	mov	r20,r2
 100a8bc:	003fcb06 	br	100a7ec <__pow5mult+0x30>
 100a8c0:	9809883a 	mov	r4,r19
 100a8c4:	01409c44 	movi	r5,625
 100a8c8:	100a6540 	call	100a654 <__i2b>
 100a8cc:	98801215 	stw	r2,72(r19)
 100a8d0:	1021883a 	mov	r16,r2
 100a8d4:	10000015 	stw	zero,0(r2)
 100a8d8:	003fd006 	br	100a81c <__pow5mult+0x60>

0100a8dc <__s2b>:
 100a8dc:	defff904 	addi	sp,sp,-28
 100a8e0:	dcc00315 	stw	r19,12(sp)
 100a8e4:	dc800215 	stw	r18,8(sp)
 100a8e8:	2827883a 	mov	r19,r5
 100a8ec:	2025883a 	mov	r18,r4
 100a8f0:	01400244 	movi	r5,9
 100a8f4:	39000204 	addi	r4,r7,8
 100a8f8:	dd000415 	stw	r20,16(sp)
 100a8fc:	dc400115 	stw	r17,4(sp)
 100a900:	dfc00615 	stw	ra,24(sp)
 100a904:	dd400515 	stw	r21,20(sp)
 100a908:	dc000015 	stw	r16,0(sp)
 100a90c:	3829883a 	mov	r20,r7
 100a910:	3023883a 	mov	r17,r6
 100a914:	10025740 	call	1002574 <__divsi3>
 100a918:	00c00044 	movi	r3,1
 100a91c:	1880350e 	bge	r3,r2,100a9f4 <__s2b+0x118>
 100a920:	000b883a 	mov	r5,zero
 100a924:	18c7883a 	add	r3,r3,r3
 100a928:	29400044 	addi	r5,r5,1
 100a92c:	18bffd16 	blt	r3,r2,100a924 <__s2b+0x48>
 100a930:	9009883a 	mov	r4,r18
 100a934:	1009ef00 	call	1009ef0 <_Balloc>
 100a938:	1011883a 	mov	r8,r2
 100a93c:	d8800717 	ldw	r2,28(sp)
 100a940:	00c00044 	movi	r3,1
 100a944:	01800244 	movi	r6,9
 100a948:	40800515 	stw	r2,20(r8)
 100a94c:	40c00415 	stw	r3,16(r8)
 100a950:	3440260e 	bge	r6,r17,100a9ec <__s2b+0x110>
 100a954:	3021883a 	mov	r16,r6
 100a958:	99ab883a 	add	r21,r19,r6
 100a95c:	9c05883a 	add	r2,r19,r16
 100a960:	11c00007 	ldb	r7,0(r2)
 100a964:	400b883a 	mov	r5,r8
 100a968:	9009883a 	mov	r4,r18
 100a96c:	39fff404 	addi	r7,r7,-48
 100a970:	01800284 	movi	r6,10
 100a974:	100a6900 	call	100a690 <__multadd>
 100a978:	84000044 	addi	r16,r16,1
 100a97c:	1011883a 	mov	r8,r2
 100a980:	8c3ff61e 	bne	r17,r16,100a95c <__s2b+0x80>
 100a984:	ac45883a 	add	r2,r21,r17
 100a988:	117ffe04 	addi	r5,r2,-8
 100a98c:	880d883a 	mov	r6,r17
 100a990:	35000c0e 	bge	r6,r20,100a9c4 <__s2b+0xe8>
 100a994:	a185c83a 	sub	r2,r20,r6
 100a998:	2821883a 	mov	r16,r5
 100a99c:	28a3883a 	add	r17,r5,r2
 100a9a0:	81c00007 	ldb	r7,0(r16)
 100a9a4:	400b883a 	mov	r5,r8
 100a9a8:	9009883a 	mov	r4,r18
 100a9ac:	39fff404 	addi	r7,r7,-48
 100a9b0:	01800284 	movi	r6,10
 100a9b4:	100a6900 	call	100a690 <__multadd>
 100a9b8:	84000044 	addi	r16,r16,1
 100a9bc:	1011883a 	mov	r8,r2
 100a9c0:	847ff71e 	bne	r16,r17,100a9a0 <__s2b+0xc4>
 100a9c4:	4005883a 	mov	r2,r8
 100a9c8:	dfc00617 	ldw	ra,24(sp)
 100a9cc:	dd400517 	ldw	r21,20(sp)
 100a9d0:	dd000417 	ldw	r20,16(sp)
 100a9d4:	dcc00317 	ldw	r19,12(sp)
 100a9d8:	dc800217 	ldw	r18,8(sp)
 100a9dc:	dc400117 	ldw	r17,4(sp)
 100a9e0:	dc000017 	ldw	r16,0(sp)
 100a9e4:	dec00704 	addi	sp,sp,28
 100a9e8:	f800283a 	ret
 100a9ec:	99400284 	addi	r5,r19,10
 100a9f0:	003fe706 	br	100a990 <__s2b+0xb4>
 100a9f4:	000b883a 	mov	r5,zero
 100a9f8:	003fcd06 	br	100a930 <__s2b+0x54>

0100a9fc <putc>:
 100a9fc:	defffc04 	addi	sp,sp,-16
 100aa00:	dc800215 	stw	r18,8(sp)
 100aa04:	048040b4 	movhi	r18,258
 100aa08:	94ba3e04 	addi	r18,r18,-5896
 100aa0c:	90c00017 	ldw	r3,0(r18)
 100aa10:	dc400115 	stw	r17,4(sp)
 100aa14:	dc000015 	stw	r16,0(sp)
 100aa18:	dfc00315 	stw	ra,12(sp)
 100aa1c:	2023883a 	mov	r17,r4
 100aa20:	2821883a 	mov	r16,r5
 100aa24:	18000226 	beq	r3,zero,100aa30 <putc+0x34>
 100aa28:	18800e17 	ldw	r2,56(r3)
 100aa2c:	10001126 	beq	r2,zero,100aa74 <putc+0x78>
 100aa30:	80800217 	ldw	r2,8(r16)
 100aa34:	10ffffc4 	addi	r3,r2,-1
 100aa38:	80c00215 	stw	r3,8(r16)
 100aa3c:	18001316 	blt	r3,zero,100aa8c <putc+0x90>
 100aa40:	80800017 	ldw	r2,0(r16)
 100aa44:	14400005 	stb	r17,0(r2)
 100aa48:	80c00017 	ldw	r3,0(r16)
 100aa4c:	18800044 	addi	r2,r3,1
 100aa50:	18c00003 	ldbu	r3,0(r3)
 100aa54:	80800015 	stw	r2,0(r16)
 100aa58:	1805883a 	mov	r2,r3
 100aa5c:	dfc00317 	ldw	ra,12(sp)
 100aa60:	dc800217 	ldw	r18,8(sp)
 100aa64:	dc400117 	ldw	r17,4(sp)
 100aa68:	dc000017 	ldw	r16,0(sp)
 100aa6c:	dec00404 	addi	sp,sp,16
 100aa70:	f800283a 	ret
 100aa74:	1809883a 	mov	r4,r3
 100aa78:	10083bc0 	call	10083bc <__sinit>
 100aa7c:	80800217 	ldw	r2,8(r16)
 100aa80:	10ffffc4 	addi	r3,r2,-1
 100aa84:	80c00215 	stw	r3,8(r16)
 100aa88:	183fed0e 	bge	r3,zero,100aa40 <putc+0x44>
 100aa8c:	80800617 	ldw	r2,24(r16)
 100aa90:	18800f16 	blt	r3,r2,100aad0 <putc+0xd4>
 100aa94:	80800017 	ldw	r2,0(r16)
 100aa98:	14400005 	stb	r17,0(r2)
 100aa9c:	81000017 	ldw	r4,0(r16)
 100aaa0:	00800284 	movi	r2,10
 100aaa4:	20c00003 	ldbu	r3,0(r4)
 100aaa8:	18801226 	beq	r3,r2,100aaf4 <putc+0xf8>
 100aaac:	20800044 	addi	r2,r4,1
 100aab0:	80800015 	stw	r2,0(r16)
 100aab4:	1805883a 	mov	r2,r3
 100aab8:	dfc00317 	ldw	ra,12(sp)
 100aabc:	dc800217 	ldw	r18,8(sp)
 100aac0:	dc400117 	ldw	r17,4(sp)
 100aac4:	dc000017 	ldw	r16,0(sp)
 100aac8:	dec00404 	addi	sp,sp,16
 100aacc:	f800283a 	ret
 100aad0:	91000017 	ldw	r4,0(r18)
 100aad4:	880b883a 	mov	r5,r17
 100aad8:	800d883a 	mov	r6,r16
 100aadc:	dfc00317 	ldw	ra,12(sp)
 100aae0:	dc800217 	ldw	r18,8(sp)
 100aae4:	dc400117 	ldw	r17,4(sp)
 100aae8:	dc000017 	ldw	r16,0(sp)
 100aaec:	dec00404 	addi	sp,sp,16
 100aaf0:	100dc981 	jmpi	100dc98 <__swbuf_r>
 100aaf4:	91000017 	ldw	r4,0(r18)
 100aaf8:	180b883a 	mov	r5,r3
 100aafc:	003ff606 	br	100aad8 <putc+0xdc>

0100ab00 <_putc_r>:
 100ab00:	defffc04 	addi	sp,sp,-16
 100ab04:	dc400215 	stw	r17,8(sp)
 100ab08:	dc000115 	stw	r16,4(sp)
 100ab0c:	dfc00315 	stw	ra,12(sp)
 100ab10:	2021883a 	mov	r16,r4
 100ab14:	2823883a 	mov	r17,r5
 100ab18:	20000226 	beq	r4,zero,100ab24 <_putc_r+0x24>
 100ab1c:	20800e17 	ldw	r2,56(r4)
 100ab20:	10001026 	beq	r2,zero,100ab64 <_putc_r+0x64>
 100ab24:	30800217 	ldw	r2,8(r6)
 100ab28:	10ffffc4 	addi	r3,r2,-1
 100ab2c:	30c00215 	stw	r3,8(r6)
 100ab30:	18001316 	blt	r3,zero,100ab80 <_putc_r+0x80>
 100ab34:	30800017 	ldw	r2,0(r6)
 100ab38:	14400005 	stb	r17,0(r2)
 100ab3c:	30c00017 	ldw	r3,0(r6)
 100ab40:	18800044 	addi	r2,r3,1
 100ab44:	18c00003 	ldbu	r3,0(r3)
 100ab48:	30800015 	stw	r2,0(r6)
 100ab4c:	1805883a 	mov	r2,r3
 100ab50:	dfc00317 	ldw	ra,12(sp)
 100ab54:	dc400217 	ldw	r17,8(sp)
 100ab58:	dc000117 	ldw	r16,4(sp)
 100ab5c:	dec00404 	addi	sp,sp,16
 100ab60:	f800283a 	ret
 100ab64:	d9800015 	stw	r6,0(sp)
 100ab68:	10083bc0 	call	10083bc <__sinit>
 100ab6c:	d9800017 	ldw	r6,0(sp)
 100ab70:	30800217 	ldw	r2,8(r6)
 100ab74:	10ffffc4 	addi	r3,r2,-1
 100ab78:	30c00215 	stw	r3,8(r6)
 100ab7c:	183fed0e 	bge	r3,zero,100ab34 <_putc_r+0x34>
 100ab80:	30800617 	ldw	r2,24(r6)
 100ab84:	18800e16 	blt	r3,r2,100abc0 <_putc_r+0xc0>
 100ab88:	30800017 	ldw	r2,0(r6)
 100ab8c:	14400005 	stb	r17,0(r2)
 100ab90:	31000017 	ldw	r4,0(r6)
 100ab94:	00800284 	movi	r2,10
 100ab98:	20c00003 	ldbu	r3,0(r4)
 100ab9c:	18800f26 	beq	r3,r2,100abdc <_putc_r+0xdc>
 100aba0:	20800044 	addi	r2,r4,1
 100aba4:	30800015 	stw	r2,0(r6)
 100aba8:	1805883a 	mov	r2,r3
 100abac:	dfc00317 	ldw	ra,12(sp)
 100abb0:	dc400217 	ldw	r17,8(sp)
 100abb4:	dc000117 	ldw	r16,4(sp)
 100abb8:	dec00404 	addi	sp,sp,16
 100abbc:	f800283a 	ret
 100abc0:	8009883a 	mov	r4,r16
 100abc4:	880b883a 	mov	r5,r17
 100abc8:	dfc00317 	ldw	ra,12(sp)
 100abcc:	dc400217 	ldw	r17,8(sp)
 100abd0:	dc000117 	ldw	r16,4(sp)
 100abd4:	dec00404 	addi	sp,sp,16
 100abd8:	100dc981 	jmpi	100dc98 <__swbuf_r>
 100abdc:	8009883a 	mov	r4,r16
 100abe0:	180b883a 	mov	r5,r3
 100abe4:	003ff806 	br	100abc8 <_putc_r+0xc8>

0100abe8 <_realloc_r>:
 100abe8:	defff404 	addi	sp,sp,-48
 100abec:	dd800815 	stw	r22,32(sp)
 100abf0:	dc800415 	stw	r18,16(sp)
 100abf4:	dc400315 	stw	r17,12(sp)
 100abf8:	dfc00b15 	stw	ra,44(sp)
 100abfc:	df000a15 	stw	fp,40(sp)
 100ac00:	ddc00915 	stw	r23,36(sp)
 100ac04:	dd400715 	stw	r21,28(sp)
 100ac08:	dd000615 	stw	r20,24(sp)
 100ac0c:	dcc00515 	stw	r19,20(sp)
 100ac10:	dc000215 	stw	r16,8(sp)
 100ac14:	2825883a 	mov	r18,r5
 100ac18:	3023883a 	mov	r17,r6
 100ac1c:	202d883a 	mov	r22,r4
 100ac20:	2800c926 	beq	r5,zero,100af48 <_realloc_r+0x360>
 100ac24:	10120f40 	call	10120f4 <__malloc_lock>
 100ac28:	943ffe04 	addi	r16,r18,-8
 100ac2c:	88c002c4 	addi	r3,r17,11
 100ac30:	00800584 	movi	r2,22
 100ac34:	82000117 	ldw	r8,4(r16)
 100ac38:	10c01b2e 	bgeu	r2,r3,100aca8 <_realloc_r+0xc0>
 100ac3c:	00bffe04 	movi	r2,-8
 100ac40:	188e703a 	and	r7,r3,r2
 100ac44:	3839883a 	mov	fp,r7
 100ac48:	38001a16 	blt	r7,zero,100acb4 <_realloc_r+0xcc>
 100ac4c:	e4401936 	bltu	fp,r17,100acb4 <_realloc_r+0xcc>
 100ac50:	013fff04 	movi	r4,-4
 100ac54:	4126703a 	and	r19,r8,r4
 100ac58:	99c02616 	blt	r19,r7,100acf4 <_realloc_r+0x10c>
 100ac5c:	802b883a 	mov	r21,r16
 100ac60:	9829883a 	mov	r20,r19
 100ac64:	84000204 	addi	r16,r16,8
 100ac68:	a80f883a 	mov	r7,r21
 100ac6c:	a70dc83a 	sub	r6,r20,fp
 100ac70:	008003c4 	movi	r2,15
 100ac74:	1180c136 	bltu	r2,r6,100af7c <_realloc_r+0x394>
 100ac78:	38800117 	ldw	r2,4(r7)
 100ac7c:	a549883a 	add	r4,r20,r21
 100ac80:	1080004c 	andi	r2,r2,1
 100ac84:	a084b03a 	or	r2,r20,r2
 100ac88:	38800115 	stw	r2,4(r7)
 100ac8c:	20c00117 	ldw	r3,4(r4)
 100ac90:	18c00054 	ori	r3,r3,1
 100ac94:	20c00115 	stw	r3,4(r4)
 100ac98:	b009883a 	mov	r4,r22
 100ac9c:	10121140 	call	1012114 <__malloc_unlock>
 100aca0:	8023883a 	mov	r17,r16
 100aca4:	00000606 	br	100acc0 <_realloc_r+0xd8>
 100aca8:	01c00404 	movi	r7,16
 100acac:	3839883a 	mov	fp,r7
 100acb0:	e47fe72e 	bgeu	fp,r17,100ac50 <_realloc_r+0x68>
 100acb4:	00800304 	movi	r2,12
 100acb8:	0023883a 	mov	r17,zero
 100acbc:	b0800015 	stw	r2,0(r22)
 100acc0:	8805883a 	mov	r2,r17
 100acc4:	dfc00b17 	ldw	ra,44(sp)
 100acc8:	df000a17 	ldw	fp,40(sp)
 100accc:	ddc00917 	ldw	r23,36(sp)
 100acd0:	dd800817 	ldw	r22,32(sp)
 100acd4:	dd400717 	ldw	r21,28(sp)
 100acd8:	dd000617 	ldw	r20,24(sp)
 100acdc:	dcc00517 	ldw	r19,20(sp)
 100ace0:	dc800417 	ldw	r18,16(sp)
 100ace4:	dc400317 	ldw	r17,12(sp)
 100ace8:	dc000217 	ldw	r16,8(sp)
 100acec:	dec00c04 	addi	sp,sp,48
 100acf0:	f800283a 	ret
 100acf4:	008040b4 	movhi	r2,258
 100acf8:	10b33d04 	addi	r2,r2,-13068
 100acfc:	12400217 	ldw	r9,8(r2)
 100ad00:	84cd883a 	add	r6,r16,r19
 100ad04:	802b883a 	mov	r21,r16
 100ad08:	3240b926 	beq	r6,r9,100aff0 <_realloc_r+0x408>
 100ad0c:	31400117 	ldw	r5,4(r6)
 100ad10:	00bfff84 	movi	r2,-2
 100ad14:	2884703a 	and	r2,r5,r2
 100ad18:	1185883a 	add	r2,r2,r6
 100ad1c:	10c00117 	ldw	r3,4(r2)
 100ad20:	18c0004c 	andi	r3,r3,1
 100ad24:	1807003a 	cmpeq	r3,r3,zero
 100ad28:	1800a326 	beq	r3,zero,100afb8 <_realloc_r+0x3d0>
 100ad2c:	2908703a 	and	r4,r5,r4
 100ad30:	9929883a 	add	r20,r19,r4
 100ad34:	a1c0a30e 	bge	r20,r7,100afc4 <_realloc_r+0x3dc>
 100ad38:	4080004c 	andi	r2,r8,1
 100ad3c:	1000551e 	bne	r2,zero,100ae94 <_realloc_r+0x2ac>
 100ad40:	80800017 	ldw	r2,0(r16)
 100ad44:	80afc83a 	sub	r23,r16,r2
 100ad48:	b8c00117 	ldw	r3,4(r23)
 100ad4c:	00bfff04 	movi	r2,-4
 100ad50:	1884703a 	and	r2,r3,r2
 100ad54:	30002e26 	beq	r6,zero,100ae10 <_realloc_r+0x228>
 100ad58:	3240b926 	beq	r6,r9,100b040 <_realloc_r+0x458>
 100ad5c:	98a9883a 	add	r20,r19,r2
 100ad60:	2509883a 	add	r4,r4,r20
 100ad64:	d9000015 	stw	r4,0(sp)
 100ad68:	21c02a16 	blt	r4,r7,100ae14 <_realloc_r+0x22c>
 100ad6c:	30800317 	ldw	r2,12(r6)
 100ad70:	30c00217 	ldw	r3,8(r6)
 100ad74:	01400904 	movi	r5,36
 100ad78:	99bfff04 	addi	r6,r19,-4
 100ad7c:	18800315 	stw	r2,12(r3)
 100ad80:	10c00215 	stw	r3,8(r2)
 100ad84:	b9000317 	ldw	r4,12(r23)
 100ad88:	b8800217 	ldw	r2,8(r23)
 100ad8c:	b82b883a 	mov	r21,r23
 100ad90:	bc000204 	addi	r16,r23,8
 100ad94:	20800215 	stw	r2,8(r4)
 100ad98:	11000315 	stw	r4,12(r2)
 100ad9c:	2980e436 	bltu	r5,r6,100b130 <_realloc_r+0x548>
 100ada0:	008004c4 	movi	r2,19
 100ada4:	9009883a 	mov	r4,r18
 100ada8:	8011883a 	mov	r8,r16
 100adac:	11800f2e 	bgeu	r2,r6,100adec <_realloc_r+0x204>
 100adb0:	90800017 	ldw	r2,0(r18)
 100adb4:	ba000404 	addi	r8,r23,16
 100adb8:	91000204 	addi	r4,r18,8
 100adbc:	b8800215 	stw	r2,8(r23)
 100adc0:	90c00117 	ldw	r3,4(r18)
 100adc4:	008006c4 	movi	r2,27
 100adc8:	b8c00315 	stw	r3,12(r23)
 100adcc:	1180072e 	bgeu	r2,r6,100adec <_realloc_r+0x204>
 100add0:	90c00217 	ldw	r3,8(r18)
 100add4:	ba000604 	addi	r8,r23,24
 100add8:	91000404 	addi	r4,r18,16
 100addc:	b8c00415 	stw	r3,16(r23)
 100ade0:	90800317 	ldw	r2,12(r18)
 100ade4:	b8800515 	stw	r2,20(r23)
 100ade8:	3140e726 	beq	r6,r5,100b188 <_realloc_r+0x5a0>
 100adec:	20800017 	ldw	r2,0(r4)
 100adf0:	dd000017 	ldw	r20,0(sp)
 100adf4:	b80f883a 	mov	r7,r23
 100adf8:	40800015 	stw	r2,0(r8)
 100adfc:	20c00117 	ldw	r3,4(r4)
 100ae00:	40c00115 	stw	r3,4(r8)
 100ae04:	20800217 	ldw	r2,8(r4)
 100ae08:	40800215 	stw	r2,8(r8)
 100ae0c:	003f9706 	br	100ac6c <_realloc_r+0x84>
 100ae10:	98a9883a 	add	r20,r19,r2
 100ae14:	a1c01f16 	blt	r20,r7,100ae94 <_realloc_r+0x2ac>
 100ae18:	b8c00317 	ldw	r3,12(r23)
 100ae1c:	b8800217 	ldw	r2,8(r23)
 100ae20:	99bfff04 	addi	r6,r19,-4
 100ae24:	01400904 	movi	r5,36
 100ae28:	b82b883a 	mov	r21,r23
 100ae2c:	18800215 	stw	r2,8(r3)
 100ae30:	10c00315 	stw	r3,12(r2)
 100ae34:	bc000204 	addi	r16,r23,8
 100ae38:	2980c336 	bltu	r5,r6,100b148 <_realloc_r+0x560>
 100ae3c:	008004c4 	movi	r2,19
 100ae40:	9009883a 	mov	r4,r18
 100ae44:	8011883a 	mov	r8,r16
 100ae48:	11800f2e 	bgeu	r2,r6,100ae88 <_realloc_r+0x2a0>
 100ae4c:	90800017 	ldw	r2,0(r18)
 100ae50:	ba000404 	addi	r8,r23,16
 100ae54:	91000204 	addi	r4,r18,8
 100ae58:	b8800215 	stw	r2,8(r23)
 100ae5c:	90c00117 	ldw	r3,4(r18)
 100ae60:	008006c4 	movi	r2,27
 100ae64:	b8c00315 	stw	r3,12(r23)
 100ae68:	1180072e 	bgeu	r2,r6,100ae88 <_realloc_r+0x2a0>
 100ae6c:	90c00217 	ldw	r3,8(r18)
 100ae70:	ba000604 	addi	r8,r23,24
 100ae74:	91000404 	addi	r4,r18,16
 100ae78:	b8c00415 	stw	r3,16(r23)
 100ae7c:	90800317 	ldw	r2,12(r18)
 100ae80:	b8800515 	stw	r2,20(r23)
 100ae84:	3140c726 	beq	r6,r5,100b1a4 <_realloc_r+0x5bc>
 100ae88:	20800017 	ldw	r2,0(r4)
 100ae8c:	b80f883a 	mov	r7,r23
 100ae90:	003fd906 	br	100adf8 <_realloc_r+0x210>
 100ae94:	880b883a 	mov	r5,r17
 100ae98:	b009883a 	mov	r4,r22
 100ae9c:	10026a40 	call	10026a4 <_malloc_r>
 100aea0:	1023883a 	mov	r17,r2
 100aea4:	10002526 	beq	r2,zero,100af3c <_realloc_r+0x354>
 100aea8:	80800117 	ldw	r2,4(r16)
 100aeac:	00ffff84 	movi	r3,-2
 100aeb0:	893ffe04 	addi	r4,r17,-8
 100aeb4:	10c4703a 	and	r2,r2,r3
 100aeb8:	8085883a 	add	r2,r16,r2
 100aebc:	20809526 	beq	r4,r2,100b114 <_realloc_r+0x52c>
 100aec0:	99bfff04 	addi	r6,r19,-4
 100aec4:	01c00904 	movi	r7,36
 100aec8:	39804536 	bltu	r7,r6,100afe0 <_realloc_r+0x3f8>
 100aecc:	008004c4 	movi	r2,19
 100aed0:	9009883a 	mov	r4,r18
 100aed4:	880b883a 	mov	r5,r17
 100aed8:	11800f2e 	bgeu	r2,r6,100af18 <_realloc_r+0x330>
 100aedc:	90800017 	ldw	r2,0(r18)
 100aee0:	89400204 	addi	r5,r17,8
 100aee4:	91000204 	addi	r4,r18,8
 100aee8:	88800015 	stw	r2,0(r17)
 100aeec:	90c00117 	ldw	r3,4(r18)
 100aef0:	008006c4 	movi	r2,27
 100aef4:	88c00115 	stw	r3,4(r17)
 100aef8:	1180072e 	bgeu	r2,r6,100af18 <_realloc_r+0x330>
 100aefc:	90c00217 	ldw	r3,8(r18)
 100af00:	89400404 	addi	r5,r17,16
 100af04:	91000404 	addi	r4,r18,16
 100af08:	88c00215 	stw	r3,8(r17)
 100af0c:	90800317 	ldw	r2,12(r18)
 100af10:	88800315 	stw	r2,12(r17)
 100af14:	31c09126 	beq	r6,r7,100b15c <_realloc_r+0x574>
 100af18:	20800017 	ldw	r2,0(r4)
 100af1c:	28800015 	stw	r2,0(r5)
 100af20:	20c00117 	ldw	r3,4(r4)
 100af24:	28c00115 	stw	r3,4(r5)
 100af28:	20800217 	ldw	r2,8(r4)
 100af2c:	28800215 	stw	r2,8(r5)
 100af30:	900b883a 	mov	r5,r18
 100af34:	b009883a 	mov	r4,r22
 100af38:	10089c00 	call	10089c0 <_free_r>
 100af3c:	b009883a 	mov	r4,r22
 100af40:	10121140 	call	1012114 <__malloc_unlock>
 100af44:	003f5e06 	br	100acc0 <_realloc_r+0xd8>
 100af48:	300b883a 	mov	r5,r6
 100af4c:	dfc00b17 	ldw	ra,44(sp)
 100af50:	df000a17 	ldw	fp,40(sp)
 100af54:	ddc00917 	ldw	r23,36(sp)
 100af58:	dd800817 	ldw	r22,32(sp)
 100af5c:	dd400717 	ldw	r21,28(sp)
 100af60:	dd000617 	ldw	r20,24(sp)
 100af64:	dcc00517 	ldw	r19,20(sp)
 100af68:	dc800417 	ldw	r18,16(sp)
 100af6c:	dc400317 	ldw	r17,12(sp)
 100af70:	dc000217 	ldw	r16,8(sp)
 100af74:	dec00c04 	addi	sp,sp,48
 100af78:	10026a41 	jmpi	10026a4 <_malloc_r>
 100af7c:	38800117 	ldw	r2,4(r7)
 100af80:	e54b883a 	add	r5,fp,r21
 100af84:	31000054 	ori	r4,r6,1
 100af88:	1080004c 	andi	r2,r2,1
 100af8c:	1704b03a 	or	r2,r2,fp
 100af90:	38800115 	stw	r2,4(r7)
 100af94:	29000115 	stw	r4,4(r5)
 100af98:	2987883a 	add	r3,r5,r6
 100af9c:	18800117 	ldw	r2,4(r3)
 100afa0:	29400204 	addi	r5,r5,8
 100afa4:	b009883a 	mov	r4,r22
 100afa8:	10800054 	ori	r2,r2,1
 100afac:	18800115 	stw	r2,4(r3)
 100afb0:	10089c00 	call	10089c0 <_free_r>
 100afb4:	003f3806 	br	100ac98 <_realloc_r+0xb0>
 100afb8:	000d883a 	mov	r6,zero
 100afbc:	0009883a 	mov	r4,zero
 100afc0:	003f5d06 	br	100ad38 <_realloc_r+0x150>
 100afc4:	30c00217 	ldw	r3,8(r6)
 100afc8:	30800317 	ldw	r2,12(r6)
 100afcc:	800f883a 	mov	r7,r16
 100afd0:	84000204 	addi	r16,r16,8
 100afd4:	10c00215 	stw	r3,8(r2)
 100afd8:	18800315 	stw	r2,12(r3)
 100afdc:	003f2306 	br	100ac6c <_realloc_r+0x84>
 100afe0:	8809883a 	mov	r4,r17
 100afe4:	900b883a 	mov	r5,r18
 100afe8:	10097f80 	call	10097f8 <memmove>
 100afec:	003fd006 	br	100af30 <_realloc_r+0x348>
 100aff0:	30800117 	ldw	r2,4(r6)
 100aff4:	e0c00404 	addi	r3,fp,16
 100aff8:	1108703a 	and	r4,r2,r4
 100affc:	9905883a 	add	r2,r19,r4
 100b000:	10ff4d16 	blt	r2,r3,100ad38 <_realloc_r+0x150>
 100b004:	1705c83a 	sub	r2,r2,fp
 100b008:	870b883a 	add	r5,r16,fp
 100b00c:	10800054 	ori	r2,r2,1
 100b010:	28800115 	stw	r2,4(r5)
 100b014:	80c00117 	ldw	r3,4(r16)
 100b018:	008040b4 	movhi	r2,258
 100b01c:	10b33d04 	addi	r2,r2,-13068
 100b020:	b009883a 	mov	r4,r22
 100b024:	18c0004c 	andi	r3,r3,1
 100b028:	e0c6b03a 	or	r3,fp,r3
 100b02c:	11400215 	stw	r5,8(r2)
 100b030:	80c00115 	stw	r3,4(r16)
 100b034:	10121140 	call	1012114 <__malloc_unlock>
 100b038:	84400204 	addi	r17,r16,8
 100b03c:	003f2006 	br	100acc0 <_realloc_r+0xd8>
 100b040:	98a9883a 	add	r20,r19,r2
 100b044:	2509883a 	add	r4,r4,r20
 100b048:	e0800404 	addi	r2,fp,16
 100b04c:	d9000115 	stw	r4,4(sp)
 100b050:	20bf7016 	blt	r4,r2,100ae14 <_realloc_r+0x22c>
 100b054:	b8c00317 	ldw	r3,12(r23)
 100b058:	b8800217 	ldw	r2,8(r23)
 100b05c:	99bfff04 	addi	r6,r19,-4
 100b060:	01400904 	movi	r5,36
 100b064:	18800215 	stw	r2,8(r3)
 100b068:	10c00315 	stw	r3,12(r2)
 100b06c:	bc400204 	addi	r17,r23,8
 100b070:	29804136 	bltu	r5,r6,100b178 <_realloc_r+0x590>
 100b074:	008004c4 	movi	r2,19
 100b078:	9009883a 	mov	r4,r18
 100b07c:	880f883a 	mov	r7,r17
 100b080:	11800f2e 	bgeu	r2,r6,100b0c0 <_realloc_r+0x4d8>
 100b084:	90800017 	ldw	r2,0(r18)
 100b088:	b9c00404 	addi	r7,r23,16
 100b08c:	91000204 	addi	r4,r18,8
 100b090:	b8800215 	stw	r2,8(r23)
 100b094:	90c00117 	ldw	r3,4(r18)
 100b098:	008006c4 	movi	r2,27
 100b09c:	b8c00315 	stw	r3,12(r23)
 100b0a0:	1180072e 	bgeu	r2,r6,100b0c0 <_realloc_r+0x4d8>
 100b0a4:	90c00217 	ldw	r3,8(r18)
 100b0a8:	b9c00604 	addi	r7,r23,24
 100b0ac:	91000404 	addi	r4,r18,16
 100b0b0:	b8c00415 	stw	r3,16(r23)
 100b0b4:	90800317 	ldw	r2,12(r18)
 100b0b8:	b8800515 	stw	r2,20(r23)
 100b0bc:	31404026 	beq	r6,r5,100b1c0 <_realloc_r+0x5d8>
 100b0c0:	20800017 	ldw	r2,0(r4)
 100b0c4:	38800015 	stw	r2,0(r7)
 100b0c8:	20c00117 	ldw	r3,4(r4)
 100b0cc:	38c00115 	stw	r3,4(r7)
 100b0d0:	20800217 	ldw	r2,8(r4)
 100b0d4:	38800215 	stw	r2,8(r7)
 100b0d8:	d8c00117 	ldw	r3,4(sp)
 100b0dc:	bf0b883a 	add	r5,r23,fp
 100b0e0:	b009883a 	mov	r4,r22
 100b0e4:	1f05c83a 	sub	r2,r3,fp
 100b0e8:	10800054 	ori	r2,r2,1
 100b0ec:	28800115 	stw	r2,4(r5)
 100b0f0:	b8c00117 	ldw	r3,4(r23)
 100b0f4:	008040b4 	movhi	r2,258
 100b0f8:	10b33d04 	addi	r2,r2,-13068
 100b0fc:	11400215 	stw	r5,8(r2)
 100b100:	18c0004c 	andi	r3,r3,1
 100b104:	e0c6b03a 	or	r3,fp,r3
 100b108:	b8c00115 	stw	r3,4(r23)
 100b10c:	10121140 	call	1012114 <__malloc_unlock>
 100b110:	003eeb06 	br	100acc0 <_realloc_r+0xd8>
 100b114:	20800117 	ldw	r2,4(r4)
 100b118:	00ffff04 	movi	r3,-4
 100b11c:	800f883a 	mov	r7,r16
 100b120:	10c4703a 	and	r2,r2,r3
 100b124:	98a9883a 	add	r20,r19,r2
 100b128:	84000204 	addi	r16,r16,8
 100b12c:	003ecf06 	br	100ac6c <_realloc_r+0x84>
 100b130:	900b883a 	mov	r5,r18
 100b134:	8009883a 	mov	r4,r16
 100b138:	10097f80 	call	10097f8 <memmove>
 100b13c:	dd000017 	ldw	r20,0(sp)
 100b140:	b80f883a 	mov	r7,r23
 100b144:	003ec906 	br	100ac6c <_realloc_r+0x84>
 100b148:	900b883a 	mov	r5,r18
 100b14c:	8009883a 	mov	r4,r16
 100b150:	10097f80 	call	10097f8 <memmove>
 100b154:	b80f883a 	mov	r7,r23
 100b158:	003ec406 	br	100ac6c <_realloc_r+0x84>
 100b15c:	90c00417 	ldw	r3,16(r18)
 100b160:	89400604 	addi	r5,r17,24
 100b164:	91000604 	addi	r4,r18,24
 100b168:	88c00415 	stw	r3,16(r17)
 100b16c:	90800517 	ldw	r2,20(r18)
 100b170:	88800515 	stw	r2,20(r17)
 100b174:	003f6806 	br	100af18 <_realloc_r+0x330>
 100b178:	900b883a 	mov	r5,r18
 100b17c:	8809883a 	mov	r4,r17
 100b180:	10097f80 	call	10097f8 <memmove>
 100b184:	003fd406 	br	100b0d8 <_realloc_r+0x4f0>
 100b188:	90c00417 	ldw	r3,16(r18)
 100b18c:	91000604 	addi	r4,r18,24
 100b190:	ba000804 	addi	r8,r23,32
 100b194:	b8c00615 	stw	r3,24(r23)
 100b198:	90800517 	ldw	r2,20(r18)
 100b19c:	b8800715 	stw	r2,28(r23)
 100b1a0:	003f1206 	br	100adec <_realloc_r+0x204>
 100b1a4:	90c00417 	ldw	r3,16(r18)
 100b1a8:	91000604 	addi	r4,r18,24
 100b1ac:	ba000804 	addi	r8,r23,32
 100b1b0:	b8c00615 	stw	r3,24(r23)
 100b1b4:	90800517 	ldw	r2,20(r18)
 100b1b8:	b8800715 	stw	r2,28(r23)
 100b1bc:	003f3206 	br	100ae88 <_realloc_r+0x2a0>
 100b1c0:	90c00417 	ldw	r3,16(r18)
 100b1c4:	91000604 	addi	r4,r18,24
 100b1c8:	b9c00804 	addi	r7,r23,32
 100b1cc:	b8c00615 	stw	r3,24(r23)
 100b1d0:	90800517 	ldw	r2,20(r18)
 100b1d4:	b8800715 	stw	r2,28(r23)
 100b1d8:	003fb906 	br	100b0c0 <_realloc_r+0x4d8>

0100b1dc <__srefill_r>:
 100b1dc:	defffd04 	addi	sp,sp,-12
 100b1e0:	dc400115 	stw	r17,4(sp)
 100b1e4:	dc000015 	stw	r16,0(sp)
 100b1e8:	dfc00215 	stw	ra,8(sp)
 100b1ec:	2023883a 	mov	r17,r4
 100b1f0:	2821883a 	mov	r16,r5
 100b1f4:	20000226 	beq	r4,zero,100b200 <__srefill_r+0x24>
 100b1f8:	20800e17 	ldw	r2,56(r4)
 100b1fc:	10004126 	beq	r2,zero,100b304 <__srefill_r+0x128>
 100b200:	80c0030b 	ldhu	r3,12(r16)
 100b204:	80000115 	stw	zero,4(r16)
 100b208:	1880080c 	andi	r2,r3,32
 100b20c:	1000361e 	bne	r2,zero,100b2e8 <__srefill_r+0x10c>
 100b210:	1880010c 	andi	r2,r3,4
 100b214:	1000211e 	bne	r2,zero,100b29c <__srefill_r+0xc0>
 100b218:	1880040c 	andi	r2,r3,16
 100b21c:	10005026 	beq	r2,zero,100b360 <__srefill_r+0x184>
 100b220:	1880020c 	andi	r2,r3,8
 100b224:	1000541e 	bne	r2,zero,100b378 <__srefill_r+0x19c>
 100b228:	8080030b 	ldhu	r2,12(r16)
 100b22c:	10800114 	ori	r2,r2,4
 100b230:	8080030d 	sth	r2,12(r16)
 100b234:	80800417 	ldw	r2,16(r16)
 100b238:	10004526 	beq	r2,zero,100b350 <__srefill_r+0x174>
 100b23c:	8080030b 	ldhu	r2,12(r16)
 100b240:	108000cc 	andi	r2,r2,3
 100b244:	1000361e 	bne	r2,zero,100b320 <__srefill_r+0x144>
 100b248:	81800417 	ldw	r6,16(r16)
 100b24c:	80c00817 	ldw	r3,32(r16)
 100b250:	81400717 	ldw	r5,28(r16)
 100b254:	81c00517 	ldw	r7,20(r16)
 100b258:	8809883a 	mov	r4,r17
 100b25c:	81800015 	stw	r6,0(r16)
 100b260:	183ee83a 	callr	r3
 100b264:	80c0030b 	ldhu	r3,12(r16)
 100b268:	1009883a 	mov	r4,r2
 100b26c:	80800115 	stw	r2,4(r16)
 100b270:	00b7ffc4 	movi	r2,-8193
 100b274:	1884703a 	and	r2,r3,r2
 100b278:	8080030d 	sth	r2,12(r16)
 100b27c:	0100230e 	bge	zero,r4,100b30c <__srefill_r+0x130>
 100b280:	0009883a 	mov	r4,zero
 100b284:	2005883a 	mov	r2,r4
 100b288:	dfc00217 	ldw	ra,8(sp)
 100b28c:	dc400117 	ldw	r17,4(sp)
 100b290:	dc000017 	ldw	r16,0(sp)
 100b294:	dec00304 	addi	sp,sp,12
 100b298:	f800283a 	ret
 100b29c:	81400c17 	ldw	r5,48(r16)
 100b2a0:	283fe426 	beq	r5,zero,100b234 <__srefill_r+0x58>
 100b2a4:	80801004 	addi	r2,r16,64
 100b2a8:	28800226 	beq	r5,r2,100b2b4 <__srefill_r+0xd8>
 100b2ac:	8809883a 	mov	r4,r17
 100b2b0:	10089c00 	call	10089c0 <_free_r>
 100b2b4:	80800f17 	ldw	r2,60(r16)
 100b2b8:	80000c15 	stw	zero,48(r16)
 100b2bc:	80800115 	stw	r2,4(r16)
 100b2c0:	103fdc26 	beq	r2,zero,100b234 <__srefill_r+0x58>
 100b2c4:	80800e17 	ldw	r2,56(r16)
 100b2c8:	0009883a 	mov	r4,zero
 100b2cc:	80800015 	stw	r2,0(r16)
 100b2d0:	2005883a 	mov	r2,r4
 100b2d4:	dfc00217 	ldw	ra,8(sp)
 100b2d8:	dc400117 	ldw	r17,4(sp)
 100b2dc:	dc000017 	ldw	r16,0(sp)
 100b2e0:	dec00304 	addi	sp,sp,12
 100b2e4:	f800283a 	ret
 100b2e8:	013fffc4 	movi	r4,-1
 100b2ec:	2005883a 	mov	r2,r4
 100b2f0:	dfc00217 	ldw	ra,8(sp)
 100b2f4:	dc400117 	ldw	r17,4(sp)
 100b2f8:	dc000017 	ldw	r16,0(sp)
 100b2fc:	dec00304 	addi	sp,sp,12
 100b300:	f800283a 	ret
 100b304:	10083bc0 	call	10083bc <__sinit>
 100b308:	003fbd06 	br	100b200 <__srefill_r+0x24>
 100b30c:	20000b1e 	bne	r4,zero,100b33c <__srefill_r+0x160>
 100b310:	10800814 	ori	r2,r2,32
 100b314:	013fffc4 	movi	r4,-1
 100b318:	8080030d 	sth	r2,12(r16)
 100b31c:	003fd906 	br	100b284 <__srefill_r+0xa8>
 100b320:	008040b4 	movhi	r2,258
 100b324:	10ba3f04 	addi	r2,r2,-5892
 100b328:	11000017 	ldw	r4,0(r2)
 100b32c:	01404074 	movhi	r5,257
 100b330:	296ce804 	addi	r5,r5,-19552
 100b334:	10092380 	call	1009238 <_fwalk>
 100b338:	003fc306 	br	100b248 <__srefill_r+0x6c>
 100b33c:	10801014 	ori	r2,r2,64
 100b340:	013fffc4 	movi	r4,-1
 100b344:	8080030d 	sth	r2,12(r16)
 100b348:	80000115 	stw	zero,4(r16)
 100b34c:	003fcd06 	br	100b284 <__srefill_r+0xa8>
 100b350:	8809883a 	mov	r4,r17
 100b354:	800b883a 	mov	r5,r16
 100b358:	10093e00 	call	10093e0 <__smakebuf_r>
 100b35c:	003fb706 	br	100b23c <__srefill_r+0x60>
 100b360:	18c01014 	ori	r3,r3,64
 100b364:	00800244 	movi	r2,9
 100b368:	013fffc4 	movi	r4,-1
 100b36c:	88800015 	stw	r2,0(r17)
 100b370:	80c0030d 	sth	r3,12(r16)
 100b374:	003fc306 	br	100b284 <__srefill_r+0xa8>
 100b378:	8809883a 	mov	r4,r17
 100b37c:	800b883a 	mov	r5,r16
 100b380:	10081240 	call	1008124 <_fflush_r>
 100b384:	103fd81e 	bne	r2,zero,100b2e8 <__srefill_r+0x10c>
 100b388:	8080030b 	ldhu	r2,12(r16)
 100b38c:	80000215 	stw	zero,8(r16)
 100b390:	80000615 	stw	zero,24(r16)
 100b394:	10bffdcc 	andi	r2,r2,65527
 100b398:	8080030d 	sth	r2,12(r16)
 100b39c:	003fa206 	br	100b228 <__srefill_r+0x4c>

0100b3a0 <lflush>:
 100b3a0:	20c0030b 	ldhu	r3,12(r4)
 100b3a4:	01400244 	movi	r5,9
 100b3a8:	0005883a 	mov	r2,zero
 100b3ac:	18c0024c 	andi	r3,r3,9
 100b3b0:	19400126 	beq	r3,r5,100b3b8 <lflush+0x18>
 100b3b4:	f800283a 	ret
 100b3b8:	10083201 	jmpi	1008320 <fflush>

0100b3bc <__isinfd>:
 100b3bc:	200d883a 	mov	r6,r4
 100b3c0:	0109c83a 	sub	r4,zero,r4
 100b3c4:	2188b03a 	or	r4,r4,r6
 100b3c8:	2008d7fa 	srli	r4,r4,31
 100b3cc:	00a00034 	movhi	r2,32768
 100b3d0:	10bfffc4 	addi	r2,r2,-1
 100b3d4:	1144703a 	and	r2,r2,r5
 100b3d8:	2088b03a 	or	r4,r4,r2
 100b3dc:	009ffc34 	movhi	r2,32752
 100b3e0:	1105c83a 	sub	r2,r2,r4
 100b3e4:	0087c83a 	sub	r3,zero,r2
 100b3e8:	10c4b03a 	or	r2,r2,r3
 100b3ec:	1004d7fa 	srli	r2,r2,31
 100b3f0:	00c00044 	movi	r3,1
 100b3f4:	1885c83a 	sub	r2,r3,r2
 100b3f8:	f800283a 	ret

0100b3fc <__isnand>:
 100b3fc:	200d883a 	mov	r6,r4
 100b400:	0109c83a 	sub	r4,zero,r4
 100b404:	2188b03a 	or	r4,r4,r6
 100b408:	2008d7fa 	srli	r4,r4,31
 100b40c:	00a00034 	movhi	r2,32768
 100b410:	10bfffc4 	addi	r2,r2,-1
 100b414:	1144703a 	and	r2,r2,r5
 100b418:	2088b03a 	or	r4,r4,r2
 100b41c:	009ffc34 	movhi	r2,32752
 100b420:	1105c83a 	sub	r2,r2,r4
 100b424:	1004d7fa 	srli	r2,r2,31
 100b428:	f800283a 	ret

0100b42c <__sccl>:
 100b42c:	28c00003 	ldbu	r3,0(r5)
 100b430:	00801784 	movi	r2,94
 100b434:	2a000044 	addi	r8,r5,1
 100b438:	18802526 	beq	r3,r2,100b4d0 <__sccl+0xa4>
 100b43c:	180f883a 	mov	r7,r3
 100b440:	0013883a 	mov	r9,zero
 100b444:	000d883a 	mov	r6,zero
 100b448:	0007883a 	mov	r3,zero
 100b44c:	01404004 	movi	r5,256
 100b450:	1905883a 	add	r2,r3,r4
 100b454:	18c00044 	addi	r3,r3,1
 100b458:	11800005 	stb	r6,0(r2)
 100b45c:	197ffc1e 	bne	r3,r5,100b450 <__sccl+0x24>
 100b460:	38000c26 	beq	r7,zero,100b494 <__sccl+0x68>
 100b464:	00800044 	movi	r2,1
 100b468:	124dc83a 	sub	r6,r2,r9
 100b46c:	3905883a 	add	r2,r7,r4
 100b470:	11800005 	stb	r6,0(r2)
 100b474:	41400044 	addi	r5,r8,1
 100b478:	02400b44 	movi	r9,45
 100b47c:	02801744 	movi	r10,93
 100b480:	28bfffc3 	ldbu	r2,-1(r5)
 100b484:	2811883a 	mov	r8,r5
 100b488:	12400726 	beq	r2,r9,100b4a8 <__sccl+0x7c>
 100b48c:	12800226 	beq	r2,r10,100b498 <__sccl+0x6c>
 100b490:	1000031e 	bne	r2,zero,100b4a0 <__sccl+0x74>
 100b494:	423fffc4 	addi	r8,r8,-1
 100b498:	4005883a 	mov	r2,r8
 100b49c:	f800283a 	ret
 100b4a0:	100f883a 	mov	r7,r2
 100b4a4:	003ff106 	br	100b46c <__sccl+0x40>
 100b4a8:	28c00003 	ldbu	r3,0(r5)
 100b4ac:	1a800d26 	beq	r3,r10,100b4e4 <__sccl+0xb8>
 100b4b0:	19c00c16 	blt	r3,r7,100b4e4 <__sccl+0xb8>
 100b4b4:	21c5883a 	add	r2,r4,r7
 100b4b8:	39c00044 	addi	r7,r7,1
 100b4bc:	11800045 	stb	r6,1(r2)
 100b4c0:	10800044 	addi	r2,r2,1
 100b4c4:	38fffc16 	blt	r7,r3,100b4b8 <__sccl+0x8c>
 100b4c8:	29400084 	addi	r5,r5,2
 100b4cc:	003fec06 	br	100b480 <__sccl+0x54>
 100b4d0:	29c00043 	ldbu	r7,1(r5)
 100b4d4:	02400044 	movi	r9,1
 100b4d8:	2a000084 	addi	r8,r5,2
 100b4dc:	480d883a 	mov	r6,r9
 100b4e0:	003fd906 	br	100b448 <__sccl+0x1c>
 100b4e4:	01c00b44 	movi	r7,45
 100b4e8:	003fe006 	br	100b46c <__sccl+0x40>

0100b4ec <nanf>:
 100b4ec:	009ff034 	movhi	r2,32704
 100b4f0:	f800283a 	ret

0100b4f4 <sprintf>:
 100b4f4:	deffe504 	addi	sp,sp,-108
 100b4f8:	2013883a 	mov	r9,r4
 100b4fc:	dfc01815 	stw	ra,96(sp)
 100b500:	d9801915 	stw	r6,100(sp)
 100b504:	d9c01a15 	stw	r7,104(sp)
 100b508:	d8801904 	addi	r2,sp,100
 100b50c:	d8800015 	stw	r2,0(sp)
 100b510:	008040b4 	movhi	r2,258
 100b514:	10ba3e04 	addi	r2,r2,-5896
 100b518:	11000017 	ldw	r4,0(r2)
 100b51c:	d9c00017 	ldw	r7,0(sp)
 100b520:	00808204 	movi	r2,520
 100b524:	00e00034 	movhi	r3,32768
 100b528:	18ffffc4 	addi	r3,r3,-1
 100b52c:	280d883a 	mov	r6,r5
 100b530:	d880040d 	sth	r2,16(sp)
 100b534:	d9400104 	addi	r5,sp,4
 100b538:	00bfffc4 	movi	r2,-1
 100b53c:	d8c00615 	stw	r3,24(sp)
 100b540:	d8c00315 	stw	r3,12(sp)
 100b544:	da400515 	stw	r9,20(sp)
 100b548:	d880048d 	sth	r2,18(sp)
 100b54c:	da400115 	stw	r9,4(sp)
 100b550:	10031800 	call	1003180 <___vfprintf_internal_r>
 100b554:	d8c00117 	ldw	r3,4(sp)
 100b558:	18000005 	stb	zero,0(r3)
 100b55c:	dfc01817 	ldw	ra,96(sp)
 100b560:	dec01b04 	addi	sp,sp,108
 100b564:	f800283a 	ret

0100b568 <_sprintf_r>:
 100b568:	deffe604 	addi	sp,sp,-104
 100b56c:	2813883a 	mov	r9,r5
 100b570:	dfc01815 	stw	ra,96(sp)
 100b574:	d9c01915 	stw	r7,100(sp)
 100b578:	d8801904 	addi	r2,sp,100
 100b57c:	d8800015 	stw	r2,0(sp)
 100b580:	100f883a 	mov	r7,r2
 100b584:	00808204 	movi	r2,520
 100b588:	00e00034 	movhi	r3,32768
 100b58c:	18ffffc4 	addi	r3,r3,-1
 100b590:	d880040d 	sth	r2,16(sp)
 100b594:	d9400104 	addi	r5,sp,4
 100b598:	00bfffc4 	movi	r2,-1
 100b59c:	d8c00615 	stw	r3,24(sp)
 100b5a0:	d8c00315 	stw	r3,12(sp)
 100b5a4:	da400515 	stw	r9,20(sp)
 100b5a8:	d880048d 	sth	r2,18(sp)
 100b5ac:	da400115 	stw	r9,4(sp)
 100b5b0:	10031800 	call	1003180 <___vfprintf_internal_r>
 100b5b4:	d8c00117 	ldw	r3,4(sp)
 100b5b8:	18000005 	stb	zero,0(r3)
 100b5bc:	dfc01817 	ldw	ra,96(sp)
 100b5c0:	dec01a04 	addi	sp,sp,104
 100b5c4:	f800283a 	ret

0100b5c8 <__sclose>:
 100b5c8:	2940038f 	ldh	r5,14(r5)
 100b5cc:	100df241 	jmpi	100df24 <_close_r>

0100b5d0 <__sseek>:
 100b5d0:	defffe04 	addi	sp,sp,-8
 100b5d4:	dc000015 	stw	r16,0(sp)
 100b5d8:	2821883a 	mov	r16,r5
 100b5dc:	2940038f 	ldh	r5,14(r5)
 100b5e0:	dfc00115 	stw	ra,4(sp)
 100b5e4:	100ed680 	call	100ed68 <_lseek_r>
 100b5e8:	1007883a 	mov	r3,r2
 100b5ec:	00bfffc4 	movi	r2,-1
 100b5f0:	18800926 	beq	r3,r2,100b618 <__sseek+0x48>
 100b5f4:	8080030b 	ldhu	r2,12(r16)
 100b5f8:	80c01415 	stw	r3,80(r16)
 100b5fc:	10840014 	ori	r2,r2,4096
 100b600:	8080030d 	sth	r2,12(r16)
 100b604:	1805883a 	mov	r2,r3
 100b608:	dfc00117 	ldw	ra,4(sp)
 100b60c:	dc000017 	ldw	r16,0(sp)
 100b610:	dec00204 	addi	sp,sp,8
 100b614:	f800283a 	ret
 100b618:	8080030b 	ldhu	r2,12(r16)
 100b61c:	10bbffcc 	andi	r2,r2,61439
 100b620:	8080030d 	sth	r2,12(r16)
 100b624:	1805883a 	mov	r2,r3
 100b628:	dfc00117 	ldw	ra,4(sp)
 100b62c:	dc000017 	ldw	r16,0(sp)
 100b630:	dec00204 	addi	sp,sp,8
 100b634:	f800283a 	ret

0100b638 <__swrite>:
 100b638:	2880030b 	ldhu	r2,12(r5)
 100b63c:	defffb04 	addi	sp,sp,-20
 100b640:	dcc00315 	stw	r19,12(sp)
 100b644:	1080400c 	andi	r2,r2,256
 100b648:	dc800215 	stw	r18,8(sp)
 100b64c:	dc400115 	stw	r17,4(sp)
 100b650:	dc000015 	stw	r16,0(sp)
 100b654:	3027883a 	mov	r19,r6
 100b658:	3825883a 	mov	r18,r7
 100b65c:	dfc00415 	stw	ra,16(sp)
 100b660:	2821883a 	mov	r16,r5
 100b664:	000d883a 	mov	r6,zero
 100b668:	01c00084 	movi	r7,2
 100b66c:	2023883a 	mov	r17,r4
 100b670:	10000226 	beq	r2,zero,100b67c <__swrite+0x44>
 100b674:	2940038f 	ldh	r5,14(r5)
 100b678:	100ed680 	call	100ed68 <_lseek_r>
 100b67c:	8080030b 	ldhu	r2,12(r16)
 100b680:	8140038f 	ldh	r5,14(r16)
 100b684:	8809883a 	mov	r4,r17
 100b688:	10bbffcc 	andi	r2,r2,61439
 100b68c:	980d883a 	mov	r6,r19
 100b690:	900f883a 	mov	r7,r18
 100b694:	8080030d 	sth	r2,12(r16)
 100b698:	dfc00417 	ldw	ra,16(sp)
 100b69c:	dcc00317 	ldw	r19,12(sp)
 100b6a0:	dc800217 	ldw	r18,8(sp)
 100b6a4:	dc400117 	ldw	r17,4(sp)
 100b6a8:	dc000017 	ldw	r16,0(sp)
 100b6ac:	dec00504 	addi	sp,sp,20
 100b6b0:	100dde41 	jmpi	100dde4 <_write_r>

0100b6b4 <__sread>:
 100b6b4:	defffe04 	addi	sp,sp,-8
 100b6b8:	dc000015 	stw	r16,0(sp)
 100b6bc:	2821883a 	mov	r16,r5
 100b6c0:	2940038f 	ldh	r5,14(r5)
 100b6c4:	dfc00115 	stw	ra,4(sp)
 100b6c8:	100ede00 	call	100ede0 <_read_r>
 100b6cc:	1007883a 	mov	r3,r2
 100b6d0:	10000816 	blt	r2,zero,100b6f4 <__sread+0x40>
 100b6d4:	80801417 	ldw	r2,80(r16)
 100b6d8:	10c5883a 	add	r2,r2,r3
 100b6dc:	80801415 	stw	r2,80(r16)
 100b6e0:	1805883a 	mov	r2,r3
 100b6e4:	dfc00117 	ldw	ra,4(sp)
 100b6e8:	dc000017 	ldw	r16,0(sp)
 100b6ec:	dec00204 	addi	sp,sp,8
 100b6f0:	f800283a 	ret
 100b6f4:	8080030b 	ldhu	r2,12(r16)
 100b6f8:	10bbffcc 	andi	r2,r2,61439
 100b6fc:	8080030d 	sth	r2,12(r16)
 100b700:	1805883a 	mov	r2,r3
 100b704:	dfc00117 	ldw	ra,4(sp)
 100b708:	dc000017 	ldw	r16,0(sp)
 100b70c:	dec00204 	addi	sp,sp,8
 100b710:	f800283a 	ret

0100b714 <strcmp>:
 100b714:	2144b03a 	or	r2,r4,r5
 100b718:	108000cc 	andi	r2,r2,3
 100b71c:	10001d1e 	bne	r2,zero,100b794 <strcmp+0x80>
 100b720:	200f883a 	mov	r7,r4
 100b724:	28800017 	ldw	r2,0(r5)
 100b728:	21000017 	ldw	r4,0(r4)
 100b72c:	280d883a 	mov	r6,r5
 100b730:	2080161e 	bne	r4,r2,100b78c <strcmp+0x78>
 100b734:	023fbff4 	movhi	r8,65279
 100b738:	423fbfc4 	addi	r8,r8,-257
 100b73c:	2207883a 	add	r3,r4,r8
 100b740:	01602074 	movhi	r5,32897
 100b744:	29602004 	addi	r5,r5,-32640
 100b748:	1946703a 	and	r3,r3,r5
 100b74c:	0104303a 	nor	r2,zero,r4
 100b750:	10c4703a 	and	r2,r2,r3
 100b754:	10001c1e 	bne	r2,zero,100b7c8 <strcmp+0xb4>
 100b758:	4013883a 	mov	r9,r8
 100b75c:	2811883a 	mov	r8,r5
 100b760:	00000106 	br	100b768 <strcmp+0x54>
 100b764:	1800181e 	bne	r3,zero,100b7c8 <strcmp+0xb4>
 100b768:	39c00104 	addi	r7,r7,4
 100b76c:	39000017 	ldw	r4,0(r7)
 100b770:	31800104 	addi	r6,r6,4
 100b774:	31400017 	ldw	r5,0(r6)
 100b778:	2245883a 	add	r2,r4,r9
 100b77c:	1204703a 	and	r2,r2,r8
 100b780:	0106303a 	nor	r3,zero,r4
 100b784:	1886703a 	and	r3,r3,r2
 100b788:	217ff626 	beq	r4,r5,100b764 <strcmp+0x50>
 100b78c:	3809883a 	mov	r4,r7
 100b790:	300b883a 	mov	r5,r6
 100b794:	20c00007 	ldb	r3,0(r4)
 100b798:	1800051e 	bne	r3,zero,100b7b0 <strcmp+0x9c>
 100b79c:	00000606 	br	100b7b8 <strcmp+0xa4>
 100b7a0:	21000044 	addi	r4,r4,1
 100b7a4:	20c00007 	ldb	r3,0(r4)
 100b7a8:	29400044 	addi	r5,r5,1
 100b7ac:	18000226 	beq	r3,zero,100b7b8 <strcmp+0xa4>
 100b7b0:	28800007 	ldb	r2,0(r5)
 100b7b4:	18bffa26 	beq	r3,r2,100b7a0 <strcmp+0x8c>
 100b7b8:	20c00003 	ldbu	r3,0(r4)
 100b7bc:	28800003 	ldbu	r2,0(r5)
 100b7c0:	1885c83a 	sub	r2,r3,r2
 100b7c4:	f800283a 	ret
 100b7c8:	0005883a 	mov	r2,zero
 100b7cc:	f800283a 	ret

0100b7d0 <match>:
 100b7d0:	21800017 	ldw	r6,0(r4)
 100b7d4:	01c01004 	movi	r7,64
 100b7d8:	02001684 	movi	r8,90
 100b7dc:	28800007 	ldb	r2,0(r5)
 100b7e0:	29400044 	addi	r5,r5,1
 100b7e4:	10000826 	beq	r2,zero,100b808 <match+0x38>
 100b7e8:	31800044 	addi	r6,r6,1
 100b7ec:	30c00007 	ldb	r3,0(r6)
 100b7f0:	38c0020e 	bge	r7,r3,100b7fc <match+0x2c>
 100b7f4:	40c00116 	blt	r8,r3,100b7fc <match+0x2c>
 100b7f8:	18c00804 	addi	r3,r3,32
 100b7fc:	18bff726 	beq	r3,r2,100b7dc <match+0xc>
 100b800:	0005883a 	mov	r2,zero
 100b804:	f800283a 	ret
 100b808:	30800044 	addi	r2,r6,1
 100b80c:	20800015 	stw	r2,0(r4)
 100b810:	00800044 	movi	r2,1
 100b814:	f800283a 	ret

0100b818 <_strtod_r>:
 100b818:	deffd504 	addi	sp,sp,-172
 100b81c:	df002915 	stw	fp,164(sp)
 100b820:	dd402615 	stw	r21,152(sp)
 100b824:	dd002515 	stw	r20,148(sp)
 100b828:	dfc02a15 	stw	ra,168(sp)
 100b82c:	ddc02815 	stw	r23,160(sp)
 100b830:	dd802715 	stw	r22,156(sp)
 100b834:	dcc02415 	stw	r19,144(sp)
 100b838:	dc802315 	stw	r18,140(sp)
 100b83c:	dc402215 	stw	r17,136(sp)
 100b840:	dc002115 	stw	r16,132(sp)
 100b844:	2829883a 	mov	r20,r5
 100b848:	202b883a 	mov	r21,r4
 100b84c:	d9801d15 	stw	r6,116(sp)
 100b850:	d8000915 	stw	zero,36(sp)
 100b854:	d8000a15 	stw	zero,40(sp)
 100b858:	d9400415 	stw	r5,16(sp)
 100b85c:	df000904 	addi	fp,sp,36
 100b860:	dc000417 	ldw	r16,16(sp)
 100b864:	00800b44 	movi	r2,45
 100b868:	80c00003 	ldbu	r3,0(r16)
 100b86c:	10c03536 	bltu	r2,r3,100b944 <_strtod_r+0x12c>
 100b870:	18c5883a 	add	r2,r3,r3
 100b874:	1085883a 	add	r2,r2,r2
 100b878:	00c04074 	movhi	r3,257
 100b87c:	18ee2304 	addi	r3,r3,-18292
 100b880:	10c5883a 	add	r2,r2,r3
 100b884:	11000017 	ldw	r4,0(r2)
 100b888:	2000683a 	jmp	r4
 100b88c:	0100bac4 	movi	r4,747
 100b890:	0100b944 	movi	r4,741
 100b894:	0100b944 	movi	r4,741
 100b898:	0100b944 	movi	r4,741
 100b89c:	0100b944 	movi	r4,741
 100b8a0:	0100b944 	movi	r4,741
 100b8a4:	0100b944 	movi	r4,741
 100b8a8:	0100b944 	movi	r4,741
 100b8ac:	0100b944 	movi	r4,741
 100b8b0:	0100be0c 	andi	r4,zero,760
 100b8b4:	0100be0c 	andi	r4,zero,760
 100b8b8:	0100be0c 	andi	r4,zero,760
 100b8bc:	0100be0c 	andi	r4,zero,760
 100b8c0:	0100be0c 	andi	r4,zero,760
 100b8c4:	0100b944 	movi	r4,741
 100b8c8:	0100b944 	movi	r4,741
 100b8cc:	0100b944 	movi	r4,741
 100b8d0:	0100b944 	movi	r4,741
 100b8d4:	0100b944 	movi	r4,741
 100b8d8:	0100b944 	movi	r4,741
 100b8dc:	0100b944 	movi	r4,741
 100b8e0:	0100b944 	movi	r4,741
 100b8e4:	0100b944 	movi	r4,741
 100b8e8:	0100b944 	movi	r4,741
 100b8ec:	0100b944 	movi	r4,741
 100b8f0:	0100b944 	movi	r4,741
 100b8f4:	0100b944 	movi	r4,741
 100b8f8:	0100b944 	movi	r4,741
 100b8fc:	0100b944 	movi	r4,741
 100b900:	0100b944 	movi	r4,741
 100b904:	0100b944 	movi	r4,741
 100b908:	0100b944 	movi	r4,741
 100b90c:	0100be0c 	andi	r4,zero,760
 100b910:	0100b944 	movi	r4,741
 100b914:	0100b944 	movi	r4,741
 100b918:	0100b944 	movi	r4,741
 100b91c:	0100b944 	movi	r4,741
 100b920:	0100b944 	movi	r4,741
 100b924:	0100b944 	movi	r4,741
 100b928:	0100b944 	movi	r4,741
 100b92c:	0100b944 	movi	r4,741
 100b930:	0100b944 	movi	r4,741
 100b934:	0100b944 	movi	r4,741
 100b938:	0100bdec 	andhi	r4,zero,759
 100b93c:	0100b944 	movi	r4,741
 100b940:	0100be18 	cmpnei	r4,zero,760
 100b944:	d8001515 	stw	zero,84(sp)
 100b948:	80c00007 	ldb	r3,0(r16)
 100b94c:	00800c04 	movi	r2,48
 100b950:	1880e926 	beq	r3,r2,100bcf8 <_strtod_r+0x4e0>
 100b954:	d8001615 	stw	zero,88(sp)
 100b958:	dc001415 	stw	r16,80(sp)
 100b95c:	84400007 	ldb	r17,0(r16)
 100b960:	00800bc4 	movi	r2,47
 100b964:	1443760e 	bge	r2,r17,100c740 <_strtod_r+0xf28>
 100b968:	00800e44 	movi	r2,57
 100b96c:	14437416 	blt	r2,r17,100c740 <_strtod_r+0xf28>
 100b970:	8025883a 	mov	r18,r16
 100b974:	0027883a 	mov	r19,zero
 100b978:	d8001215 	stw	zero,72(sp)
 100b97c:	d8001115 	stw	zero,68(sp)
 100b980:	00000f06 	br	100b9c0 <_strtod_r+0x1a8>
 100b984:	d9001217 	ldw	r4,72(sp)
 100b988:	01400284 	movi	r5,10
 100b98c:	10026440 	call	1002644 <__mulsi3>
 100b990:	1445883a 	add	r2,r2,r17
 100b994:	10bff404 	addi	r2,r2,-48
 100b998:	d8801215 	stw	r2,72(sp)
 100b99c:	94000044 	addi	r16,r18,1
 100b9a0:	dc000415 	stw	r16,16(sp)
 100b9a4:	84400007 	ldb	r17,0(r16)
 100b9a8:	00800bc4 	movi	r2,47
 100b9ac:	9cc00044 	addi	r19,r19,1
 100b9b0:	8025883a 	mov	r18,r16
 100b9b4:	1440130e 	bge	r2,r17,100ba04 <_strtod_r+0x1ec>
 100b9b8:	00800e44 	movi	r2,57
 100b9bc:	14401116 	blt	r2,r17,100ba04 <_strtod_r+0x1ec>
 100b9c0:	00800204 	movi	r2,8
 100b9c4:	14ffef0e 	bge	r2,r19,100b984 <_strtod_r+0x16c>
 100b9c8:	008003c4 	movi	r2,15
 100b9cc:	14fff316 	blt	r2,r19,100b99c <_strtod_r+0x184>
 100b9d0:	d9001117 	ldw	r4,68(sp)
 100b9d4:	01400284 	movi	r5,10
 100b9d8:	94000044 	addi	r16,r18,1
 100b9dc:	10026440 	call	1002644 <__mulsi3>
 100b9e0:	1445883a 	add	r2,r2,r17
 100b9e4:	10bff404 	addi	r2,r2,-48
 100b9e8:	d8801115 	stw	r2,68(sp)
 100b9ec:	dc000415 	stw	r16,16(sp)
 100b9f0:	84400007 	ldb	r17,0(r16)
 100b9f4:	00800bc4 	movi	r2,47
 100b9f8:	9cc00044 	addi	r19,r19,1
 100b9fc:	8025883a 	mov	r18,r16
 100ba00:	147fed16 	blt	r2,r17,100b9b8 <_strtod_r+0x1a0>
 100ba04:	00800b84 	movi	r2,46
 100ba08:	8880c926 	beq	r17,r2,100bd30 <_strtod_r+0x518>
 100ba0c:	dcc01815 	stw	r19,96(sp)
 100ba10:	d8001b15 	stw	zero,108(sp)
 100ba14:	d8001715 	stw	zero,92(sp)
 100ba18:	000d883a 	mov	r6,zero
 100ba1c:	00801944 	movi	r2,101
 100ba20:	88802126 	beq	r17,r2,100baa8 <_strtod_r+0x290>
 100ba24:	00801144 	movi	r2,69
 100ba28:	88801f26 	beq	r17,r2,100baa8 <_strtod_r+0x290>
 100ba2c:	d9001817 	ldw	r4,96(sp)
 100ba30:	2024c03a 	cmpne	r18,r4,zero
 100ba34:	0009883a 	mov	r4,zero
 100ba38:	9000651e 	bne	r18,zero,100bbd0 <_strtod_r+0x3b8>
 100ba3c:	3000c926 	beq	r6,zero,100bd64 <_strtod_r+0x54c>
 100ba40:	d8801d17 	ldw	r2,116(sp)
 100ba44:	10000326 	beq	r2,zero,100ba54 <_strtod_r+0x23c>
 100ba48:	d8800417 	ldw	r2,16(sp)
 100ba4c:	d8c01d17 	ldw	r3,116(sp)
 100ba50:	18800015 	stw	r2,0(r3)
 100ba54:	d9001517 	ldw	r4,84(sp)
 100ba58:	2005003a 	cmpeq	r2,r4,zero
 100ba5c:	10001c1e 	bne	r2,zero,100bad0 <_strtod_r+0x2b8>
 100ba60:	e0800017 	ldw	r2,0(fp)
 100ba64:	e0c00117 	ldw	r3,4(fp)
 100ba68:	1009883a 	mov	r4,r2
 100ba6c:	1960003c 	xorhi	r5,r3,32768
 100ba70:	2005883a 	mov	r2,r4
 100ba74:	2807883a 	mov	r3,r5
 100ba78:	dfc02a17 	ldw	ra,168(sp)
 100ba7c:	df002917 	ldw	fp,164(sp)
 100ba80:	ddc02817 	ldw	r23,160(sp)
 100ba84:	dd802717 	ldw	r22,156(sp)
 100ba88:	dd402617 	ldw	r21,152(sp)
 100ba8c:	dd002517 	ldw	r20,148(sp)
 100ba90:	dcc02417 	ldw	r19,144(sp)
 100ba94:	dc802317 	ldw	r18,140(sp)
 100ba98:	dc402217 	ldw	r17,136(sp)
 100ba9c:	dc002117 	ldw	r16,132(sp)
 100baa0:	dec02b04 	addi	sp,sp,172
 100baa4:	f800283a 	ret
 100baa8:	d8801817 	ldw	r2,96(sp)
 100baac:	1024c03a 	cmpne	r18,r2,zero
 100bab0:	90000a1e 	bne	r18,zero,100badc <_strtod_r+0x2c4>
 100bab4:	3000091e 	bne	r6,zero,100badc <_strtod_r+0x2c4>
 100bab8:	d8c01617 	ldw	r3,88(sp)
 100babc:	1805003a 	cmpeq	r2,r3,zero
 100bac0:	10000626 	beq	r2,zero,100badc <_strtod_r+0x2c4>
 100bac4:	d8001515 	stw	zero,84(sp)
 100bac8:	dd000415 	stw	r20,16(sp)
 100bacc:	003fdc06 	br	100ba40 <_strtod_r+0x228>
 100bad0:	e1000017 	ldw	r4,0(fp)
 100bad4:	e1400117 	ldw	r5,4(fp)
 100bad8:	003fe506 	br	100ba70 <_strtod_r+0x258>
 100badc:	dd000417 	ldw	r20,16(sp)
 100bae0:	00800ac4 	movi	r2,43
 100bae4:	a4000044 	addi	r16,r20,1
 100bae8:	dc000415 	stw	r16,16(sp)
 100baec:	a0c00047 	ldb	r3,1(r20)
 100baf0:	8009883a 	mov	r4,r16
 100baf4:	1880cb26 	beq	r3,r2,100be24 <_strtod_r+0x60c>
 100baf8:	00800b44 	movi	r2,45
 100bafc:	18838326 	beq	r3,r2,100c90c <_strtod_r+0x10f4>
 100bb00:	1823883a 	mov	r17,r3
 100bb04:	88fff404 	addi	r3,r17,-48
 100bb08:	00800244 	movi	r2,9
 100bb0c:	d8001915 	stw	zero,100(sp)
 100bb10:	10c0cb36 	bltu	r2,r3,100be40 <_strtod_r+0x628>
 100bb14:	00800c04 	movi	r2,48
 100bb18:	8880061e 	bne	r17,r2,100bb34 <_strtod_r+0x31c>
 100bb1c:	dc000417 	ldw	r16,16(sp)
 100bb20:	8805883a 	mov	r2,r17
 100bb24:	84000044 	addi	r16,r16,1
 100bb28:	dc000415 	stw	r16,16(sp)
 100bb2c:	84400007 	ldb	r17,0(r16)
 100bb30:	88bffc26 	beq	r17,r2,100bb24 <_strtod_r+0x30c>
 100bb34:	88fff3c4 	addi	r3,r17,-49
 100bb38:	00800204 	movi	r2,8
 100bb3c:	10ffbd36 	bltu	r2,r3,100ba34 <_strtod_r+0x21c>
 100bb40:	dc000417 	ldw	r16,16(sp)
 100bb44:	893ff404 	addi	r4,r17,-48
 100bb48:	00c00bc4 	movi	r3,47
 100bb4c:	dc001315 	stw	r16,76(sp)
 100bb50:	84000044 	addi	r16,r16,1
 100bb54:	dc000415 	stw	r16,16(sp)
 100bb58:	84400007 	ldb	r17,0(r16)
 100bb5c:	1c40100e 	bge	r3,r17,100bba0 <_strtod_r+0x388>
 100bb60:	00800e44 	movi	r2,57
 100bb64:	14400e16 	blt	r2,r17,100bba0 <_strtod_r+0x388>
 100bb68:	182f883a 	mov	r23,r3
 100bb6c:	102d883a 	mov	r22,r2
 100bb70:	00000106 	br	100bb78 <_strtod_r+0x360>
 100bb74:	b4400a16 	blt	r22,r17,100bba0 <_strtod_r+0x388>
 100bb78:	84000044 	addi	r16,r16,1
 100bb7c:	01400284 	movi	r5,10
 100bb80:	d9802015 	stw	r6,128(sp)
 100bb84:	10026440 	call	1002644 <__mulsi3>
 100bb88:	dc000415 	stw	r16,16(sp)
 100bb8c:	8885883a 	add	r2,r17,r2
 100bb90:	84400007 	ldb	r17,0(r16)
 100bb94:	113ff404 	addi	r4,r2,-48
 100bb98:	d9802017 	ldw	r6,128(sp)
 100bb9c:	bc7ff516 	blt	r23,r17,100bb74 <_strtod_r+0x35c>
 100bba0:	d8801317 	ldw	r2,76(sp)
 100bba4:	8087c83a 	sub	r3,r16,r2
 100bba8:	00800204 	movi	r2,8
 100bbac:	10c2ff16 	blt	r2,r3,100c7ac <_strtod_r+0xf94>
 100bbb0:	009387c4 	movi	r2,19999
 100bbb4:	1100010e 	bge	r2,r4,100bbbc <_strtod_r+0x3a4>
 100bbb8:	1009883a 	mov	r4,r2
 100bbbc:	d8c01917 	ldw	r3,100(sp)
 100bbc0:	1805003a 	cmpeq	r2,r3,zero
 100bbc4:	103f9c1e 	bne	r2,zero,100ba38 <_strtod_r+0x220>
 100bbc8:	0109c83a 	sub	r4,zero,r4
 100bbcc:	903f9b26 	beq	r18,zero,100ba3c <_strtod_r+0x224>
 100bbd0:	d8801717 	ldw	r2,92(sp)
 100bbd4:	2089c83a 	sub	r4,r4,r2
 100bbd8:	d9000f15 	stw	r4,60(sp)
 100bbdc:	9800811e 	bne	r19,zero,100bde4 <_strtod_r+0x5cc>
 100bbe0:	dd001817 	ldw	r20,96(sp)
 100bbe4:	dc801817 	ldw	r18,96(sp)
 100bbe8:	00800404 	movi	r2,16
 100bbec:	1480010e 	bge	r2,r18,100bbf4 <_strtod_r+0x3dc>
 100bbf0:	1025883a 	mov	r18,r2
 100bbf4:	d9001217 	ldw	r4,72(sp)
 100bbf8:	1010ee80 	call	1010ee8 <__floatunsidf>
 100bbfc:	100f883a 	mov	r7,r2
 100bc00:	e0800015 	stw	r2,0(fp)
 100bc04:	00800244 	movi	r2,9
 100bc08:	e0c00115 	stw	r3,4(fp)
 100bc0c:	1480160e 	bge	r2,r18,100bc68 <_strtod_r+0x450>
 100bc10:	900c90fa 	slli	r6,r18,3
 100bc14:	010040b4 	movhi	r4,258
 100bc18:	21325e04 	addi	r4,r4,-13960
 100bc1c:	180b883a 	mov	r5,r3
 100bc20:	310d883a 	add	r6,r6,r4
 100bc24:	30ffef17 	ldw	r3,-68(r6)
 100bc28:	30bfee17 	ldw	r2,-72(r6)
 100bc2c:	3809883a 	mov	r4,r7
 100bc30:	180f883a 	mov	r7,r3
 100bc34:	100d883a 	mov	r6,r2
 100bc38:	10103580 	call	1010358 <__muldf3>
 100bc3c:	d9001117 	ldw	r4,68(sp)
 100bc40:	1021883a 	mov	r16,r2
 100bc44:	1823883a 	mov	r17,r3
 100bc48:	1010ee80 	call	1010ee8 <__floatunsidf>
 100bc4c:	880b883a 	mov	r5,r17
 100bc50:	180f883a 	mov	r7,r3
 100bc54:	8009883a 	mov	r4,r16
 100bc58:	100d883a 	mov	r6,r2
 100bc5c:	10102e40 	call	10102e4 <__adddf3>
 100bc60:	e0c00115 	stw	r3,4(fp)
 100bc64:	e0800015 	stw	r2,0(fp)
 100bc68:	d8c01817 	ldw	r3,96(sp)
 100bc6c:	010003c4 	movi	r4,15
 100bc70:	20c09e16 	blt	r4,r3,100beec <_strtod_r+0x6d4>
 100bc74:	d8800f17 	ldw	r2,60(sp)
 100bc78:	103f7126 	beq	r2,zero,100ba40 <_strtod_r+0x228>
 100bc7c:	0083d90e 	bge	zero,r2,100cbe4 <_strtod_r+0x13cc>
 100bc80:	d8c00f17 	ldw	r3,60(sp)
 100bc84:	00800584 	movi	r2,22
 100bc88:	10c2ca0e 	bge	r2,r3,100c7b4 <_strtod_r+0xf9c>
 100bc8c:	d8801817 	ldw	r2,96(sp)
 100bc90:	d8c00f17 	ldw	r3,60(sp)
 100bc94:	20a3c83a 	sub	r17,r4,r2
 100bc98:	88800584 	addi	r2,r17,22
 100bc9c:	10c09316 	blt	r2,r3,100beec <_strtod_r+0x6d4>
 100bca0:	880890fa 	slli	r4,r17,3
 100bca4:	040040b4 	movhi	r16,258
 100bca8:	84325e04 	addi	r16,r16,-13960
 100bcac:	e0800017 	ldw	r2,0(fp)
 100bcb0:	2409883a 	add	r4,r4,r16
 100bcb4:	22000017 	ldw	r8,0(r4)
 100bcb8:	22400117 	ldw	r9,4(r4)
 100bcbc:	e0c00117 	ldw	r3,4(fp)
 100bcc0:	1009883a 	mov	r4,r2
 100bcc4:	480f883a 	mov	r7,r9
 100bcc8:	180b883a 	mov	r5,r3
 100bccc:	400d883a 	mov	r6,r8
 100bcd0:	10103580 	call	1010358 <__muldf3>
 100bcd4:	d9000f17 	ldw	r4,60(sp)
 100bcd8:	180b883a 	mov	r5,r3
 100bcdc:	2455c83a 	sub	r10,r4,r17
 100bce0:	501490fa 	slli	r10,r10,3
 100bce4:	1009883a 	mov	r4,r2
 100bce8:	5415883a 	add	r10,r10,r16
 100bcec:	52000017 	ldw	r8,0(r10)
 100bcf0:	52400117 	ldw	r9,4(r10)
 100bcf4:	0002b906 	br	100c7dc <_strtod_r+0xfc4>
 100bcf8:	80c00047 	ldb	r3,1(r16)
 100bcfc:	00801604 	movi	r2,88
 100bd00:	18805226 	beq	r3,r2,100be4c <_strtod_r+0x634>
 100bd04:	00801e04 	movi	r2,120
 100bd08:	18805026 	beq	r3,r2,100be4c <_strtod_r+0x634>
 100bd0c:	84000044 	addi	r16,r16,1
 100bd10:	dc000415 	stw	r16,16(sp)
 100bd14:	80c00007 	ldb	r3,0(r16)
 100bd18:	00800c04 	movi	r2,48
 100bd1c:	18bffb26 	beq	r3,r2,100bd0c <_strtod_r+0x4f4>
 100bd20:	183f4726 	beq	r3,zero,100ba40 <_strtod_r+0x228>
 100bd24:	01000044 	movi	r4,1
 100bd28:	d9001615 	stw	r4,88(sp)
 100bd2c:	003f0a06 	br	100b958 <_strtod_r+0x140>
 100bd30:	84000044 	addi	r16,r16,1
 100bd34:	dc000415 	stw	r16,16(sp)
 100bd38:	94400047 	ldb	r17,1(r18)
 100bd3c:	9800ba26 	beq	r19,zero,100c028 <_strtod_r+0x810>
 100bd40:	dcc01815 	stw	r19,96(sp)
 100bd44:	d8001715 	stw	zero,92(sp)
 100bd48:	000d883a 	mov	r6,zero
 100bd4c:	8dbff404 	addi	r22,r17,-48
 100bd50:	00800244 	movi	r2,9
 100bd54:	15826e2e 	bgeu	r2,r22,100c710 <_strtod_r+0xef8>
 100bd58:	01000044 	movi	r4,1
 100bd5c:	d9001b15 	stw	r4,108(sp)
 100bd60:	003f2e06 	br	100ba1c <_strtod_r+0x204>
 100bd64:	d8c01617 	ldw	r3,88(sp)
 100bd68:	1804c03a 	cmpne	r2,r3,zero
 100bd6c:	103f341e 	bne	r2,zero,100ba40 <_strtod_r+0x228>
 100bd70:	d9001b17 	ldw	r4,108(sp)
 100bd74:	2004c03a 	cmpne	r2,r4,zero
 100bd78:	103f521e 	bne	r2,zero,100bac4 <_strtod_r+0x2ac>
 100bd7c:	00801384 	movi	r2,78
 100bd80:	8883b526 	beq	r17,r2,100cc58 <_strtod_r+0x1440>
 100bd84:	1443b016 	blt	r2,r17,100cc48 <_strtod_r+0x1430>
 100bd88:	00801244 	movi	r2,73
 100bd8c:	88bf4d1e 	bne	r17,r2,100bac4 <_strtod_r+0x2ac>
 100bd90:	dc000404 	addi	r16,sp,16
 100bd94:	8009883a 	mov	r4,r16
 100bd98:	014040b4 	movhi	r5,258
 100bd9c:	2972a704 	addi	r5,r5,-13668
 100bda0:	100b7d00 	call	100b7d0 <match>
 100bda4:	103f4726 	beq	r2,zero,100bac4 <_strtod_r+0x2ac>
 100bda8:	d8800417 	ldw	r2,16(sp)
 100bdac:	8009883a 	mov	r4,r16
 100bdb0:	014040b4 	movhi	r5,258
 100bdb4:	2972a804 	addi	r5,r5,-13664
 100bdb8:	143fffc4 	addi	r16,r2,-1
 100bdbc:	dc000415 	stw	r16,16(sp)
 100bdc0:	100b7d00 	call	100b7d0 <match>
 100bdc4:	1000031e 	bne	r2,zero,100bdd4 <_strtod_r+0x5bc>
 100bdc8:	d8800417 	ldw	r2,16(sp)
 100bdcc:	14000044 	addi	r16,r2,1
 100bdd0:	dc000415 	stw	r16,16(sp)
 100bdd4:	019ffc34 	movhi	r6,32752
 100bdd8:	e1800115 	stw	r6,4(fp)
 100bddc:	e0000015 	stw	zero,0(fp)
 100bde0:	003f1706 	br	100ba40 <_strtod_r+0x228>
 100bde4:	9829883a 	mov	r20,r19
 100bde8:	003f7e06 	br	100bbe4 <_strtod_r+0x3cc>
 100bdec:	d8001515 	stw	zero,84(sp)
 100bdf0:	84000044 	addi	r16,r16,1
 100bdf4:	dc000415 	stw	r16,16(sp)
 100bdf8:	80800007 	ldb	r2,0(r16)
 100bdfc:	103ed21e 	bne	r2,zero,100b948 <_strtod_r+0x130>
 100be00:	d8001515 	stw	zero,84(sp)
 100be04:	dd000415 	stw	r20,16(sp)
 100be08:	003f0d06 	br	100ba40 <_strtod_r+0x228>
 100be0c:	84000044 	addi	r16,r16,1
 100be10:	dc000415 	stw	r16,16(sp)
 100be14:	003e9206 	br	100b860 <_strtod_r+0x48>
 100be18:	00800044 	movi	r2,1
 100be1c:	d8801515 	stw	r2,84(sp)
 100be20:	003ff306 	br	100bdf0 <_strtod_r+0x5d8>
 100be24:	d8001915 	stw	zero,100(sp)
 100be28:	84000044 	addi	r16,r16,1
 100be2c:	dc000415 	stw	r16,16(sp)
 100be30:	24400047 	ldb	r17,1(r4)
 100be34:	00800244 	movi	r2,9
 100be38:	88fff404 	addi	r3,r17,-48
 100be3c:	10ff352e 	bgeu	r2,r3,100bb14 <_strtod_r+0x2fc>
 100be40:	0009883a 	mov	r4,zero
 100be44:	dd000415 	stw	r20,16(sp)
 100be48:	003efb06 	br	100ba38 <_strtod_r+0x220>
 100be4c:	d8c01517 	ldw	r3,84(sp)
 100be50:	044040b4 	movhi	r17,258
 100be54:	8c754704 	addi	r17,r17,-10980
 100be58:	d8800504 	addi	r2,sp,20
 100be5c:	a809883a 	mov	r4,r21
 100be60:	d9400404 	addi	r5,sp,16
 100be64:	880d883a 	mov	r6,r17
 100be68:	d9c00604 	addi	r7,sp,24
 100be6c:	d8800015 	stw	r2,0(sp)
 100be70:	d8c00115 	stw	r3,4(sp)
 100be74:	100e2680 	call	100e268 <__gethex>
 100be78:	140001cc 	andi	r16,r2,7
 100be7c:	1025883a 	mov	r18,r2
 100be80:	803eef26 	beq	r16,zero,100ba40 <_strtod_r+0x228>
 100be84:	04c00184 	movi	r19,6
 100be88:	84ff0e26 	beq	r16,r19,100bac4 <_strtod_r+0x2ac>
 100be8c:	d9800517 	ldw	r6,20(sp)
 100be90:	30000626 	beq	r6,zero,100beac <_strtod_r+0x694>
 100be94:	89400017 	ldw	r5,0(r17)
 100be98:	d9000d04 	addi	r4,sp,52
 100be9c:	1009e100 	call	1009e10 <__copybits>
 100bea0:	d9400517 	ldw	r5,20(sp)
 100bea4:	a809883a 	mov	r4,r21
 100bea8:	10099700 	call	1009970 <_Bfree>
 100beac:	d9400617 	ldw	r5,24(sp)
 100beb0:	9c025436 	bltu	r19,r16,100c804 <_strtod_r+0xfec>
 100beb4:	8405883a 	add	r2,r16,r16
 100beb8:	1085883a 	add	r2,r2,r2
 100bebc:	00c04074 	movhi	r3,257
 100bec0:	18efb404 	addi	r3,r3,-16688
 100bec4:	10c5883a 	add	r2,r2,r3
 100bec8:	11000017 	ldw	r4,0(r2)
 100becc:	2000683a 	jmp	r4
 100bed0:	0100c844 	movi	r4,801
 100bed4:	0100c850 	cmplti	r4,zero,801
 100bed8:	0100c7f4 	movhi	r4,799
 100bedc:	0100c81c 	xori	r4,zero,800
 100bee0:	0100c82c 	andhi	r4,zero,800
 100bee4:	0100c850 	cmplti	r4,zero,801
 100bee8:	0100c844 	movi	r4,801
 100beec:	d9001817 	ldw	r4,96(sp)
 100bef0:	d8c00f17 	ldw	r3,60(sp)
 100bef4:	2485c83a 	sub	r2,r4,r18
 100bef8:	18a1883a 	add	r16,r3,r2
 100befc:	0402e80e 	bge	zero,r16,100caa0 <_strtod_r+0x1288>
 100bf00:	814003cc 	andi	r5,r16,15
 100bf04:	28000f26 	beq	r5,zero,100bf44 <_strtod_r+0x72c>
 100bf08:	280a90fa 	slli	r5,r5,3
 100bf0c:	010040b4 	movhi	r4,258
 100bf10:	21325e04 	addi	r4,r4,-13960
 100bf14:	e0800017 	ldw	r2,0(fp)
 100bf18:	290b883a 	add	r5,r5,r4
 100bf1c:	2a000017 	ldw	r8,0(r5)
 100bf20:	e0c00117 	ldw	r3,4(fp)
 100bf24:	2a400117 	ldw	r9,4(r5)
 100bf28:	1009883a 	mov	r4,r2
 100bf2c:	180b883a 	mov	r5,r3
 100bf30:	480f883a 	mov	r7,r9
 100bf34:	400d883a 	mov	r6,r8
 100bf38:	10103580 	call	1010358 <__muldf3>
 100bf3c:	e0c00115 	stw	r3,4(fp)
 100bf40:	e0800015 	stw	r2,0(fp)
 100bf44:	00bffc04 	movi	r2,-16
 100bf48:	808c703a 	and	r6,r16,r2
 100bf4c:	30006726 	beq	r6,zero,100c0ec <_strtod_r+0x8d4>
 100bf50:	00804d04 	movi	r2,308
 100bf54:	11820f16 	blt	r2,r6,100c794 <_strtod_r+0xf7c>
 100bf58:	3021d13a 	srai	r16,r6,4
 100bf5c:	00800044 	movi	r2,1
 100bf60:	14037f0e 	bge	r2,r16,100cd60 <_strtod_r+0x1548>
 100bf64:	058040b4 	movhi	r22,258
 100bf68:	b5b29004 	addi	r22,r22,-13760
 100bf6c:	1027883a 	mov	r19,r2
 100bf70:	0025883a 	mov	r18,zero
 100bf74:	b023883a 	mov	r17,r22
 100bf78:	8080004c 	andi	r2,r16,1
 100bf7c:	1005003a 	cmpeq	r2,r2,zero
 100bf80:	1000091e 	bne	r2,zero,100bfa8 <_strtod_r+0x790>
 100bf84:	e0800017 	ldw	r2,0(fp)
 100bf88:	e0c00117 	ldw	r3,4(fp)
 100bf8c:	89800017 	ldw	r6,0(r17)
 100bf90:	89c00117 	ldw	r7,4(r17)
 100bf94:	180b883a 	mov	r5,r3
 100bf98:	1009883a 	mov	r4,r2
 100bf9c:	10103580 	call	1010358 <__muldf3>
 100bfa0:	e0c00115 	stw	r3,4(fp)
 100bfa4:	e0800015 	stw	r2,0(fp)
 100bfa8:	8021d07a 	srai	r16,r16,1
 100bfac:	94800044 	addi	r18,r18,1
 100bfb0:	8c400204 	addi	r17,r17,8
 100bfb4:	9c3ff016 	blt	r19,r16,100bf78 <_strtod_r+0x760>
 100bfb8:	900e90fa 	slli	r7,r18,3
 100bfbc:	e2000117 	ldw	r8,4(fp)
 100bfc0:	e1000017 	ldw	r4,0(fp)
 100bfc4:	3d8f883a 	add	r7,r7,r22
 100bfc8:	38800017 	ldw	r2,0(r7)
 100bfcc:	38c00117 	ldw	r3,4(r7)
 100bfd0:	01bf2c34 	movhi	r6,64688
 100bfd4:	418d883a 	add	r6,r8,r6
 100bfd8:	300b883a 	mov	r5,r6
 100bfdc:	180f883a 	mov	r7,r3
 100bfe0:	100d883a 	mov	r6,r2
 100bfe4:	10103580 	call	1010358 <__muldf3>
 100bfe8:	1009883a 	mov	r4,r2
 100bfec:	180b883a 	mov	r5,r3
 100bff0:	199ffc2c 	andhi	r6,r3,32752
 100bff4:	009f2834 	movhi	r2,31904
 100bff8:	e1000015 	stw	r4,0(fp)
 100bffc:	e1400115 	stw	r5,4(fp)
 100c000:	1181e436 	bltu	r2,r6,100c794 <_strtod_r+0xf7c>
 100c004:	009f2434 	movhi	r2,31888
 100c008:	11833f2e 	bgeu	r2,r6,100cd08 <_strtod_r+0x14f0>
 100c00c:	d8001c15 	stw	zero,112(sp)
 100c010:	019ffc34 	movhi	r6,32752
 100c014:	31bfffc4 	addi	r6,r6,-1
 100c018:	01ffffc4 	movi	r7,-1
 100c01c:	e1800115 	stw	r6,4(fp)
 100c020:	e1c00015 	stw	r7,0(fp)
 100c024:	00003206 	br	100c0f0 <_strtod_r+0x8d8>
 100c028:	00800c04 	movi	r2,48
 100c02c:	8883221e 	bne	r17,r2,100ccb8 <_strtod_r+0x14a0>
 100c030:	8805883a 	mov	r2,r17
 100c034:	000d883a 	mov	r6,zero
 100c038:	84000044 	addi	r16,r16,1
 100c03c:	dc000415 	stw	r16,16(sp)
 100c040:	84400007 	ldb	r17,0(r16)
 100c044:	31800044 	addi	r6,r6,1
 100c048:	88bffb26 	beq	r17,r2,100c038 <_strtod_r+0x820>
 100c04c:	88fff3c4 	addi	r3,r17,-49
 100c050:	00800204 	movi	r2,8
 100c054:	10c1ca36 	bltu	r2,r3,100c780 <_strtod_r+0xf68>
 100c058:	d8c00417 	ldw	r3,16(sp)
 100c05c:	d9801715 	stw	r6,92(sp)
 100c060:	8dbff404 	addi	r22,r17,-48
 100c064:	d8c01415 	stw	r3,80(sp)
 100c068:	1821883a 	mov	r16,r3
 100c06c:	d8001815 	stw	zero,96(sp)
 100c070:	01800044 	movi	r6,1
 100c074:	b0023526 	beq	r22,zero,100c94c <_strtod_r+0x1134>
 100c078:	d9001717 	ldw	r4,92(sp)
 100c07c:	00800044 	movi	r2,1
 100c080:	2189883a 	add	r4,r4,r6
 100c084:	d9001715 	stw	r4,92(sp)
 100c088:	1183390e 	bge	r2,r6,100cd70 <_strtod_r+0x1558>
 100c08c:	dc401817 	ldw	r17,96(sp)
 100c090:	1025883a 	mov	r18,r2
 100c094:	05c00204 	movi	r23,8
 100c098:	00000806 	br	100c0bc <_strtod_r+0x8a4>
 100c09c:	d9001217 	ldw	r4,72(sp)
 100c0a0:	01400284 	movi	r5,10
 100c0a4:	d9802015 	stw	r6,128(sp)
 100c0a8:	10026440 	call	1002644 <__mulsi3>
 100c0ac:	d9802017 	ldw	r6,128(sp)
 100c0b0:	d8801215 	stw	r2,72(sp)
 100c0b4:	94800044 	addi	r18,r18,1
 100c0b8:	91821726 	beq	r18,r6,100c918 <_strtod_r+0x1100>
 100c0bc:	8c400044 	addi	r17,r17,1
 100c0c0:	88bfffc4 	addi	r2,r17,-1
 100c0c4:	b8bff50e 	bge	r23,r2,100c09c <_strtod_r+0x884>
 100c0c8:	00800404 	movi	r2,16
 100c0cc:	147ff916 	blt	r2,r17,100c0b4 <_strtod_r+0x89c>
 100c0d0:	d9001117 	ldw	r4,68(sp)
 100c0d4:	01400284 	movi	r5,10
 100c0d8:	d9802015 	stw	r6,128(sp)
 100c0dc:	10026440 	call	1002644 <__mulsi3>
 100c0e0:	d9802017 	ldw	r6,128(sp)
 100c0e4:	d8801115 	stw	r2,68(sp)
 100c0e8:	003ff206 	br	100c0b4 <_strtod_r+0x89c>
 100c0ec:	d8001c15 	stw	zero,112(sp)
 100c0f0:	d8c01217 	ldw	r3,72(sp)
 100c0f4:	d9401417 	ldw	r5,80(sp)
 100c0f8:	d9c01817 	ldw	r7,96(sp)
 100c0fc:	a809883a 	mov	r4,r21
 100c100:	a00d883a 	mov	r6,r20
 100c104:	d8c00015 	stw	r3,0(sp)
 100c108:	100a8dc0 	call	100a8dc <__s2b>
 100c10c:	11000304 	addi	r4,r2,12
 100c110:	d8801015 	stw	r2,64(sp)
 100c114:	d8800f17 	ldw	r2,60(sp)
 100c118:	d9001f15 	stw	r4,124(sp)
 100c11c:	1004803a 	cmplt	r2,r2,zero
 100c120:	d8801e15 	stw	r2,120(sp)
 100c124:	d8c01017 	ldw	r3,64(sp)
 100c128:	a809883a 	mov	r4,r21
 100c12c:	19400117 	ldw	r5,4(r3)
 100c130:	1009ef00 	call	1009ef0 <_Balloc>
 100c134:	d9001017 	ldw	r4,64(sp)
 100c138:	d9401f17 	ldw	r5,124(sp)
 100c13c:	102f883a 	mov	r23,r2
 100c140:	21800417 	ldw	r6,16(r4)
 100c144:	11000304 	addi	r4,r2,12
 100c148:	318d883a 	add	r6,r6,r6
 100c14c:	318d883a 	add	r6,r6,r6
 100c150:	31800204 	addi	r6,r6,8
 100c154:	10097580 	call	1009758 <memcpy>
 100c158:	e2000017 	ldw	r8,0(fp)
 100c15c:	e2400117 	ldw	r9,4(fp)
 100c160:	a809883a 	mov	r4,r21
 100c164:	400b883a 	mov	r5,r8
 100c168:	d9c00204 	addi	r7,sp,8
 100c16c:	d8800304 	addi	r2,sp,12
 100c170:	480d883a 	mov	r6,r9
 100c174:	d8800015 	stw	r2,0(sp)
 100c178:	1009fac0 	call	1009fac <__d2b>
 100c17c:	a809883a 	mov	r4,r21
 100c180:	01400044 	movi	r5,1
 100c184:	d8800515 	stw	r2,20(sp)
 100c188:	100a6540 	call	100a654 <__i2b>
 100c18c:	d8c01e17 	ldw	r3,120(sp)
 100c190:	102d883a 	mov	r22,r2
 100c194:	1801091e 	bne	r3,zero,100c5bc <_strtod_r+0xda4>
 100c198:	dd000f17 	ldw	r20,60(sp)
 100c19c:	000f883a 	mov	r7,zero
 100c1a0:	0013883a 	mov	r9,zero
 100c1a4:	a011883a 	mov	r8,r20
 100c1a8:	d8800217 	ldw	r2,8(sp)
 100c1ac:	10010116 	blt	r2,zero,100c5b4 <_strtod_r+0xd9c>
 100c1b0:	388f883a 	add	r7,r7,r2
 100c1b4:	d8c01c17 	ldw	r3,112(sp)
 100c1b8:	d9400317 	ldw	r5,12(sp)
 100c1bc:	10c9c83a 	sub	r4,r2,r3
 100c1c0:	2145883a 	add	r2,r4,r5
 100c1c4:	10bfffc4 	addi	r2,r2,-1
 100c1c8:	00ff0084 	movi	r3,-1022
 100c1cc:	10c09f0e 	bge	r2,r3,100c44c <_strtod_r+0xc34>
 100c1d0:	21810cc4 	addi	r6,r4,1075
 100c1d4:	d9001c17 	ldw	r4,112(sp)
 100c1d8:	4185883a 	add	r2,r8,r6
 100c1dc:	39a1883a 	add	r16,r7,r6
 100c1e0:	20a5883a 	add	r18,r4,r2
 100c1e4:	3807883a 	mov	r3,r7
 100c1e8:	81c0010e 	bge	r16,r7,100c1f0 <_strtod_r+0x9d8>
 100c1ec:	8007883a 	mov	r3,r16
 100c1f0:	9005883a 	mov	r2,r18
 100c1f4:	1c80010e 	bge	r3,r18,100c1fc <_strtod_r+0x9e4>
 100c1f8:	1805883a 	mov	r2,r3
 100c1fc:	0080eb0e 	bge	zero,r2,100c5ac <_strtod_r+0xd94>
 100c200:	38a7c83a 	sub	r19,r7,r2
 100c204:	80a1c83a 	sub	r16,r16,r2
 100c208:	90a5c83a 	sub	r18,r18,r2
 100c20c:	02400e0e 	bge	zero,r9,100c248 <_strtod_r+0xa30>
 100c210:	480d883a 	mov	r6,r9
 100c214:	b00b883a 	mov	r5,r22
 100c218:	a809883a 	mov	r4,r21
 100c21c:	100a7bc0 	call	100a7bc <__pow5mult>
 100c220:	d9800517 	ldw	r6,20(sp)
 100c224:	a809883a 	mov	r4,r21
 100c228:	100b883a 	mov	r5,r2
 100c22c:	102d883a 	mov	r22,r2
 100c230:	100a4000 	call	100a400 <__multiply>
 100c234:	d9400517 	ldw	r5,20(sp)
 100c238:	1023883a 	mov	r17,r2
 100c23c:	a809883a 	mov	r4,r21
 100c240:	10099700 	call	1009970 <_Bfree>
 100c244:	dc400515 	stw	r17,20(sp)
 100c248:	0400050e 	bge	zero,r16,100c260 <_strtod_r+0xa48>
 100c24c:	d9400517 	ldw	r5,20(sp)
 100c250:	800d883a 	mov	r6,r16
 100c254:	a809883a 	mov	r4,r21
 100c258:	100a2b40 	call	100a2b4 <__lshift>
 100c25c:	d8800515 	stw	r2,20(sp)
 100c260:	a000741e 	bne	r20,zero,100c434 <_strtod_r+0xc1c>
 100c264:	0480050e 	bge	zero,r18,100c27c <_strtod_r+0xa64>
 100c268:	b80b883a 	mov	r5,r23
 100c26c:	900d883a 	mov	r6,r18
 100c270:	a809883a 	mov	r4,r21
 100c274:	100a2b40 	call	100a2b4 <__lshift>
 100c278:	102f883a 	mov	r23,r2
 100c27c:	04c0050e 	bge	zero,r19,100c294 <_strtod_r+0xa7c>
 100c280:	b00b883a 	mov	r5,r22
 100c284:	980d883a 	mov	r6,r19
 100c288:	a809883a 	mov	r4,r21
 100c28c:	100a2b40 	call	100a2b4 <__lshift>
 100c290:	102d883a 	mov	r22,r2
 100c294:	d9400517 	ldw	r5,20(sp)
 100c298:	a809883a 	mov	r4,r21
 100c29c:	b80d883a 	mov	r6,r23
 100c2a0:	100a1280 	call	100a128 <__mdiff>
 100c2a4:	1029883a 	mov	r20,r2
 100c2a8:	10800317 	ldw	r2,12(r2)
 100c2ac:	a009883a 	mov	r4,r20
 100c2b0:	a0000315 	stw	zero,12(r20)
 100c2b4:	b00b883a 	mov	r5,r22
 100c2b8:	d8801a15 	stw	r2,104(sp)
 100c2bc:	1009acc0 	call	1009acc <__mcmp>
 100c2c0:	1001a616 	blt	r2,zero,100c95c <_strtod_r+0x1144>
 100c2c4:	10016d26 	beq	r2,zero,100c87c <_strtod_r+0x1064>
 100c2c8:	a009883a 	mov	r4,r20
 100c2cc:	b00b883a 	mov	r5,r22
 100c2d0:	1009ccc0 	call	1009ccc <__ratio>
 100c2d4:	0011883a 	mov	r8,zero
 100c2d8:	02500034 	movhi	r9,16384
 100c2dc:	480f883a 	mov	r7,r9
 100c2e0:	1009883a 	mov	r4,r2
 100c2e4:	180b883a 	mov	r5,r3
 100c2e8:	400d883a 	mov	r6,r8
 100c2ec:	1021883a 	mov	r16,r2
 100c2f0:	1823883a 	mov	r17,r3
 100c2f4:	1010c1c0 	call	1010c1c <__ledf2>
 100c2f8:	00805716 	blt	zero,r2,100c458 <_strtod_r+0xc40>
 100c2fc:	d8801a17 	ldw	r2,104(sp)
 100c300:	1025003a 	cmpeq	r18,r2,zero
 100c304:	90008c1e 	bne	r18,zero,100c538 <_strtod_r+0xd20>
 100c308:	008ffc34 	movhi	r2,16368
 100c30c:	0021883a 	mov	r16,zero
 100c310:	1023883a 	mov	r17,r2
 100c314:	d8000715 	stw	zero,28(sp)
 100c318:	d8800815 	stw	r2,32(sp)
 100c31c:	e1c00117 	ldw	r7,4(fp)
 100c320:	009ff834 	movhi	r2,32736
 100c324:	3cdffc2c 	andhi	r19,r7,32752
 100c328:	98805f26 	beq	r19,r2,100c4a8 <_strtod_r+0xc90>
 100c32c:	d8c01c17 	ldw	r3,112(sp)
 100c330:	18001b26 	beq	r3,zero,100c3a0 <_strtod_r+0xb88>
 100c334:	0081a834 	movhi	r2,1696
 100c338:	14c01936 	bltu	r2,r19,100c3a0 <_strtod_r+0xb88>
 100c33c:	00bff034 	movhi	r2,65472
 100c340:	00d07834 	movhi	r3,16864
 100c344:	18ffffc4 	addi	r3,r3,-1
 100c348:	180f883a 	mov	r7,r3
 100c34c:	8009883a 	mov	r4,r16
 100c350:	880b883a 	mov	r5,r17
 100c354:	100d883a 	mov	r6,r2
 100c358:	1010c1c0 	call	1010c1c <__ledf2>
 100c35c:	00800b16 	blt	zero,r2,100c38c <_strtod_r+0xb74>
 100c360:	880b883a 	mov	r5,r17
 100c364:	8009883a 	mov	r4,r16
 100c368:	100ef7c0 	call	100ef7c <__fixunsdfsi>
 100c36c:	1000e31e 	bne	r2,zero,100c6fc <_strtod_r+0xee4>
 100c370:	0021883a 	mov	r16,zero
 100c374:	044ffc34 	movhi	r17,16368
 100c378:	9000dd1e 	bne	r18,zero,100c6f0 <_strtod_r+0xed8>
 100c37c:	8005883a 	mov	r2,r16
 100c380:	8807883a 	mov	r3,r17
 100c384:	d8c00815 	stw	r3,32(sp)
 100c388:	d8800715 	stw	r2,28(sp)
 100c38c:	d8800817 	ldw	r2,32(sp)
 100c390:	00c1ac34 	movhi	r3,1712
 100c394:	14c5c83a 	sub	r2,r2,r19
 100c398:	10c5883a 	add	r2,r2,r3
 100c39c:	d8800815 	stw	r2,32(sp)
 100c3a0:	e0800017 	ldw	r2,0(fp)
 100c3a4:	e0c00117 	ldw	r3,4(fp)
 100c3a8:	1009883a 	mov	r4,r2
 100c3ac:	180b883a 	mov	r5,r3
 100c3b0:	1009b2c0 	call	1009b2c <__ulp>
 100c3b4:	d9800717 	ldw	r6,28(sp)
 100c3b8:	d9c00817 	ldw	r7,32(sp)
 100c3bc:	180b883a 	mov	r5,r3
 100c3c0:	1009883a 	mov	r4,r2
 100c3c4:	10103580 	call	1010358 <__muldf3>
 100c3c8:	e2000017 	ldw	r8,0(fp)
 100c3cc:	e2400117 	ldw	r9,4(fp)
 100c3d0:	180b883a 	mov	r5,r3
 100c3d4:	1009883a 	mov	r4,r2
 100c3d8:	480f883a 	mov	r7,r9
 100c3dc:	400d883a 	mov	r6,r8
 100c3e0:	10102e40 	call	10102e4 <__adddf3>
 100c3e4:	e0c00115 	stw	r3,4(fp)
 100c3e8:	e0800015 	stw	r2,0(fp)
 100c3ec:	d9001c17 	ldw	r4,112(sp)
 100c3f0:	e4800117 	ldw	r18,4(fp)
 100c3f4:	2000021e 	bne	r4,zero,100c400 <_strtod_r+0xbe8>
 100c3f8:	909ffc2c 	andhi	r2,r18,32752
 100c3fc:	98807f26 	beq	r19,r2,100c5fc <_strtod_r+0xde4>
 100c400:	d9400517 	ldw	r5,20(sp)
 100c404:	a809883a 	mov	r4,r21
 100c408:	10099700 	call	1009970 <_Bfree>
 100c40c:	a809883a 	mov	r4,r21
 100c410:	b80b883a 	mov	r5,r23
 100c414:	10099700 	call	1009970 <_Bfree>
 100c418:	a809883a 	mov	r4,r21
 100c41c:	b00b883a 	mov	r5,r22
 100c420:	10099700 	call	1009970 <_Bfree>
 100c424:	a809883a 	mov	r4,r21
 100c428:	a00b883a 	mov	r5,r20
 100c42c:	10099700 	call	1009970 <_Bfree>
 100c430:	003f3c06 	br	100c124 <_strtod_r+0x90c>
 100c434:	b80b883a 	mov	r5,r23
 100c438:	a00d883a 	mov	r6,r20
 100c43c:	a809883a 	mov	r4,r21
 100c440:	100a7bc0 	call	100a7bc <__pow5mult>
 100c444:	102f883a 	mov	r23,r2
 100c448:	003f8606 	br	100c264 <_strtod_r+0xa4c>
 100c44c:	00800d84 	movi	r2,54
 100c450:	114dc83a 	sub	r6,r2,r5
 100c454:	003f5f06 	br	100c1d4 <_strtod_r+0x9bc>
 100c458:	0005883a 	mov	r2,zero
 100c45c:	00cff834 	movhi	r3,16352
 100c460:	8009883a 	mov	r4,r16
 100c464:	880b883a 	mov	r5,r17
 100c468:	180f883a 	mov	r7,r3
 100c46c:	100d883a 	mov	r6,r2
 100c470:	10103580 	call	1010358 <__muldf3>
 100c474:	1009883a 	mov	r4,r2
 100c478:	d8801a17 	ldw	r2,104(sp)
 100c47c:	2021883a 	mov	r16,r4
 100c480:	1823883a 	mov	r17,r3
 100c484:	1025003a 	cmpeq	r18,r2,zero
 100c488:	9000451e 	bne	r18,zero,100c5a0 <_strtod_r+0xd88>
 100c48c:	2005883a 	mov	r2,r4
 100c490:	d8800715 	stw	r2,28(sp)
 100c494:	d8c00815 	stw	r3,32(sp)
 100c498:	e1c00117 	ldw	r7,4(fp)
 100c49c:	009ff834 	movhi	r2,32736
 100c4a0:	3cdffc2c 	andhi	r19,r7,32752
 100c4a4:	98bfa11e 	bne	r19,r2,100c32c <_strtod_r+0xb14>
 100c4a8:	e1000017 	ldw	r4,0(fp)
 100c4ac:	01bf2c34 	movhi	r6,64688
 100c4b0:	398d883a 	add	r6,r7,r6
 100c4b4:	d9000b15 	stw	r4,44(sp)
 100c4b8:	d9c00c15 	stw	r7,48(sp)
 100c4bc:	300b883a 	mov	r5,r6
 100c4c0:	e1800115 	stw	r6,4(fp)
 100c4c4:	1009b2c0 	call	1009b2c <__ulp>
 100c4c8:	d9800717 	ldw	r6,28(sp)
 100c4cc:	d9c00817 	ldw	r7,32(sp)
 100c4d0:	180b883a 	mov	r5,r3
 100c4d4:	1009883a 	mov	r4,r2
 100c4d8:	10103580 	call	1010358 <__muldf3>
 100c4dc:	e2000017 	ldw	r8,0(fp)
 100c4e0:	e2400117 	ldw	r9,4(fp)
 100c4e4:	180b883a 	mov	r5,r3
 100c4e8:	1009883a 	mov	r4,r2
 100c4ec:	480f883a 	mov	r7,r9
 100c4f0:	400d883a 	mov	r6,r8
 100c4f4:	10102e40 	call	10102e4 <__adddf3>
 100c4f8:	1009883a 	mov	r4,r2
 100c4fc:	180b883a 	mov	r5,r3
 100c500:	009f2834 	movhi	r2,31904
 100c504:	10bfffc4 	addi	r2,r2,-1
 100c508:	18dffc2c 	andhi	r3,r3,32752
 100c50c:	e1000015 	stw	r4,0(fp)
 100c510:	e1400115 	stw	r5,4(fp)
 100c514:	10c0722e 	bgeu	r2,r3,100c6e0 <_strtod_r+0xec8>
 100c518:	d8800c17 	ldw	r2,48(sp)
 100c51c:	011ffc34 	movhi	r4,32752
 100c520:	213fffc4 	addi	r4,r4,-1
 100c524:	11007d26 	beq	r2,r4,100c71c <_strtod_r+0xf04>
 100c528:	01ffffc4 	movi	r7,-1
 100c52c:	e1000115 	stw	r4,4(fp)
 100c530:	e1c00015 	stw	r7,0(fp)
 100c534:	003fb206 	br	100c400 <_strtod_r+0xbe8>
 100c538:	e0c00017 	ldw	r3,0(fp)
 100c53c:	1800251e 	bne	r3,zero,100c5d4 <_strtod_r+0xdbc>
 100c540:	e0800117 	ldw	r2,4(fp)
 100c544:	00c00434 	movhi	r3,16
 100c548:	18ffffc4 	addi	r3,r3,-1
 100c54c:	10c4703a 	and	r2,r2,r3
 100c550:	1000241e 	bne	r2,zero,100c5e4 <_strtod_r+0xdcc>
 100c554:	0005883a 	mov	r2,zero
 100c558:	00cffc34 	movhi	r3,16368
 100c55c:	180f883a 	mov	r7,r3
 100c560:	8009883a 	mov	r4,r16
 100c564:	880b883a 	mov	r5,r17
 100c568:	100d883a 	mov	r6,r2
 100c56c:	1010b940 	call	1010b94 <__ltdf2>
 100c570:	10014616 	blt	r2,zero,100ca8c <_strtod_r+0x1274>
 100c574:	0005883a 	mov	r2,zero
 100c578:	00cff834 	movhi	r3,16352
 100c57c:	880b883a 	mov	r5,r17
 100c580:	8009883a 	mov	r4,r16
 100c584:	180f883a 	mov	r7,r3
 100c588:	100d883a 	mov	r6,r2
 100c58c:	10103580 	call	1010358 <__muldf3>
 100c590:	1823883a 	mov	r17,r3
 100c594:	1021883a 	mov	r16,r2
 100c598:	18e0003c 	xorhi	r3,r3,32768
 100c59c:	003fbc06 	br	100c490 <_strtod_r+0xc78>
 100c5a0:	2005883a 	mov	r2,r4
 100c5a4:	18e0003c 	xorhi	r3,r3,32768
 100c5a8:	003fb906 	br	100c490 <_strtod_r+0xc78>
 100c5ac:	3827883a 	mov	r19,r7
 100c5b0:	003f1606 	br	100c20c <_strtod_r+0x9f4>
 100c5b4:	4091c83a 	sub	r8,r8,r2
 100c5b8:	003efe06 	br	100c1b4 <_strtod_r+0x99c>
 100c5bc:	d9000f17 	ldw	r4,60(sp)
 100c5c0:	0011883a 	mov	r8,zero
 100c5c4:	0029883a 	mov	r20,zero
 100c5c8:	0113c83a 	sub	r9,zero,r4
 100c5cc:	480f883a 	mov	r7,r9
 100c5d0:	003ef506 	br	100c1a8 <_strtod_r+0x990>
 100c5d4:	00800044 	movi	r2,1
 100c5d8:	1880021e 	bne	r3,r2,100c5e4 <_strtod_r+0xdcc>
 100c5dc:	e0800117 	ldw	r2,4(fp)
 100c5e0:	1000c526 	beq	r2,zero,100c8f8 <_strtod_r+0x10e0>
 100c5e4:	00affc34 	movhi	r2,49136
 100c5e8:	0021883a 	mov	r16,zero
 100c5ec:	044ffc34 	movhi	r17,16368
 100c5f0:	d8800815 	stw	r2,32(sp)
 100c5f4:	d8000715 	stw	zero,28(sp)
 100c5f8:	003f4806 	br	100c31c <_strtod_r+0xb04>
 100c5fc:	880b883a 	mov	r5,r17
 100c600:	8009883a 	mov	r4,r16
 100c604:	1010d9c0 	call	1010d9c <__fixdfsi>
 100c608:	1009883a 	mov	r4,r2
 100c60c:	1010ca40 	call	1010ca4 <__floatsidf>
 100c610:	880b883a 	mov	r5,r17
 100c614:	8009883a 	mov	r4,r16
 100c618:	100d883a 	mov	r6,r2
 100c61c:	180f883a 	mov	r7,r3
 100c620:	10102640 	call	1010264 <__subdf3>
 100c624:	100b883a 	mov	r5,r2
 100c628:	1021883a 	mov	r16,r2
 100c62c:	d8801a17 	ldw	r2,104(sp)
 100c630:	180d883a 	mov	r6,r3
 100c634:	1823883a 	mov	r17,r3
 100c638:	1000061e 	bne	r2,zero,100c654 <_strtod_r+0xe3c>
 100c63c:	e0800017 	ldw	r2,0(fp)
 100c640:	1000041e 	bne	r2,zero,100c654 <_strtod_r+0xe3c>
 100c644:	00c00434 	movhi	r3,16
 100c648:	18ffffc4 	addi	r3,r3,-1
 100c64c:	90c4703a 	and	r2,r18,r3
 100c650:	10004026 	beq	r2,zero,100c754 <_strtod_r+0xf3c>
 100c654:	00a52834 	movhi	r2,38048
 100c658:	108d6544 	addi	r2,r2,13717
 100c65c:	00cff834 	movhi	r3,16352
 100c660:	18ffffc4 	addi	r3,r3,-1
 100c664:	180f883a 	mov	r7,r3
 100c668:	8009883a 	mov	r4,r16
 100c66c:	880b883a 	mov	r5,r17
 100c670:	100d883a 	mov	r6,r2
 100c674:	1010b940 	call	1010b94 <__ltdf2>
 100c678:	10000916 	blt	r2,zero,100c6a0 <_strtod_r+0xe88>
 100c67c:	008d6c34 	movhi	r2,13744
 100c680:	10b94d44 	addi	r2,r2,-6859
 100c684:	00cff834 	movhi	r3,16352
 100c688:	880b883a 	mov	r5,r17
 100c68c:	180f883a 	mov	r7,r3
 100c690:	8009883a 	mov	r4,r16
 100c694:	100d883a 	mov	r6,r2
 100c698:	1010a840 	call	1010a84 <__gtdf2>
 100c69c:	00bf580e 	bge	zero,r2,100c400 <_strtod_r+0xbe8>
 100c6a0:	d9400517 	ldw	r5,20(sp)
 100c6a4:	a809883a 	mov	r4,r21
 100c6a8:	10099700 	call	1009970 <_Bfree>
 100c6ac:	a809883a 	mov	r4,r21
 100c6b0:	b80b883a 	mov	r5,r23
 100c6b4:	10099700 	call	1009970 <_Bfree>
 100c6b8:	a809883a 	mov	r4,r21
 100c6bc:	b00b883a 	mov	r5,r22
 100c6c0:	10099700 	call	1009970 <_Bfree>
 100c6c4:	d9401017 	ldw	r5,64(sp)
 100c6c8:	a809883a 	mov	r4,r21
 100c6cc:	10099700 	call	1009970 <_Bfree>
 100c6d0:	a809883a 	mov	r4,r21
 100c6d4:	a00b883a 	mov	r5,r20
 100c6d8:	10099700 	call	1009970 <_Bfree>
 100c6dc:	003cd806 	br	100ba40 <_strtod_r+0x228>
 100c6e0:	0080d434 	movhi	r2,848
 100c6e4:	288d883a 	add	r6,r5,r2
 100c6e8:	e1800115 	stw	r6,4(fp)
 100c6ec:	003f3f06 	br	100c3ec <_strtod_r+0xbd4>
 100c6f0:	8005883a 	mov	r2,r16
 100c6f4:	88e0003c 	xorhi	r3,r17,32768
 100c6f8:	003f2206 	br	100c384 <_strtod_r+0xb6c>
 100c6fc:	1009883a 	mov	r4,r2
 100c700:	1010ee80 	call	1010ee8 <__floatunsidf>
 100c704:	1021883a 	mov	r16,r2
 100c708:	1823883a 	mov	r17,r3
 100c70c:	003f1a06 	br	100c378 <_strtod_r+0xb60>
 100c710:	dc000417 	ldw	r16,16(sp)
 100c714:	31800044 	addi	r6,r6,1
 100c718:	003e5606 	br	100c074 <_strtod_r+0x85c>
 100c71c:	d8c00b17 	ldw	r3,44(sp)
 100c720:	00bfffc4 	movi	r2,-1
 100c724:	18bf801e 	bne	r3,r2,100c528 <_strtod_r+0xd10>
 100c728:	00c00884 	movi	r3,34
 100c72c:	a8c00015 	stw	r3,0(r21)
 100c730:	009ffc34 	movhi	r2,32752
 100c734:	e0800115 	stw	r2,4(fp)
 100c738:	e0000015 	stw	zero,0(fp)
 100c73c:	003fd806 	br	100c6a0 <_strtod_r+0xe88>
 100c740:	8025883a 	mov	r18,r16
 100c744:	0027883a 	mov	r19,zero
 100c748:	d8001215 	stw	zero,72(sp)
 100c74c:	d8001115 	stw	zero,68(sp)
 100c750:	003cac06 	br	100ba04 <_strtod_r+0x1ec>
 100c754:	00a52834 	movhi	r2,38048
 100c758:	108d6544 	addi	r2,r2,13717
 100c75c:	00cff434 	movhi	r3,16336
 100c760:	18ffffc4 	addi	r3,r3,-1
 100c764:	2809883a 	mov	r4,r5
 100c768:	180f883a 	mov	r7,r3
 100c76c:	300b883a 	mov	r5,r6
 100c770:	100d883a 	mov	r6,r2
 100c774:	1010b940 	call	1010b94 <__ltdf2>
 100c778:	103f210e 	bge	r2,zero,100c400 <_strtod_r+0xbe8>
 100c77c:	003fc806 	br	100c6a0 <_strtod_r+0xe88>
 100c780:	00800044 	movi	r2,1
 100c784:	d8001815 	stw	zero,96(sp)
 100c788:	d8801b15 	stw	r2,108(sp)
 100c78c:	d8001715 	stw	zero,92(sp)
 100c790:	003ca206 	br	100ba1c <_strtod_r+0x204>
 100c794:	00800884 	movi	r2,34
 100c798:	a8800015 	stw	r2,0(r21)
 100c79c:	019ffc34 	movhi	r6,32752
 100c7a0:	e1800115 	stw	r6,4(fp)
 100c7a4:	e0000015 	stw	zero,0(fp)
 100c7a8:	003ca506 	br	100ba40 <_strtod_r+0x228>
 100c7ac:	011387c4 	movi	r4,19999
 100c7b0:	003d0206 	br	100bbbc <_strtod_r+0x3a4>
 100c7b4:	180a90fa 	slli	r5,r3,3
 100c7b8:	e0800017 	ldw	r2,0(fp)
 100c7bc:	e0c00117 	ldw	r3,4(fp)
 100c7c0:	010040b4 	movhi	r4,258
 100c7c4:	21325e04 	addi	r4,r4,-13960
 100c7c8:	290b883a 	add	r5,r5,r4
 100c7cc:	2a000017 	ldw	r8,0(r5)
 100c7d0:	2a400117 	ldw	r9,4(r5)
 100c7d4:	1009883a 	mov	r4,r2
 100c7d8:	180b883a 	mov	r5,r3
 100c7dc:	480f883a 	mov	r7,r9
 100c7e0:	400d883a 	mov	r6,r8
 100c7e4:	10103580 	call	1010358 <__muldf3>
 100c7e8:	e0c00115 	stw	r3,4(fp)
 100c7ec:	e0800015 	stw	r2,0(fp)
 100c7f0:	003c9306 	br	100ba40 <_strtod_r+0x228>
 100c7f4:	d8800d17 	ldw	r2,52(sp)
 100c7f8:	e0800015 	stw	r2,0(fp)
 100c7fc:	d8c00e17 	ldw	r3,56(sp)
 100c800:	e0c00115 	stw	r3,4(fp)
 100c804:	9080020c 	andi	r2,r18,8
 100c808:	103c8d26 	beq	r2,zero,100ba40 <_strtod_r+0x228>
 100c80c:	e0800117 	ldw	r2,4(fp)
 100c810:	10a00034 	orhi	r2,r2,32768
 100c814:	e0800115 	stw	r2,4(fp)
 100c818:	003c8906 	br	100ba40 <_strtod_r+0x228>
 100c81c:	009ffc34 	movhi	r2,32752
 100c820:	e0800115 	stw	r2,4(fp)
 100c824:	e0000015 	stw	zero,0(fp)
 100c828:	003ff606 	br	100c804 <_strtod_r+0xfec>
 100c82c:	00a00034 	movhi	r2,32768
 100c830:	10bfffc4 	addi	r2,r2,-1
 100c834:	00ffffc4 	movi	r3,-1
 100c838:	e0800115 	stw	r2,4(fp)
 100c83c:	e0c00015 	stw	r3,0(fp)
 100c840:	003ff006 	br	100c804 <_strtod_r+0xfec>
 100c844:	e0000115 	stw	zero,4(fp)
 100c848:	e0000015 	stw	zero,0(fp)
 100c84c:	003fed06 	br	100c804 <_strtod_r+0xfec>
 100c850:	d8800e17 	ldw	r2,56(sp)
 100c854:	29010cc4 	addi	r4,r5,1075
 100c858:	00fffc34 	movhi	r3,65520
 100c85c:	18ffffc4 	addi	r3,r3,-1
 100c860:	2008953a 	slli	r4,r4,20
 100c864:	10c4703a 	and	r2,r2,r3
 100c868:	d8c00d17 	ldw	r3,52(sp)
 100c86c:	1104b03a 	or	r2,r2,r4
 100c870:	e0800115 	stw	r2,4(fp)
 100c874:	e0c00015 	stw	r3,0(fp)
 100c878:	003fe206 	br	100c804 <_strtod_r+0xfec>
 100c87c:	d8c01a17 	ldw	r3,104(sp)
 100c880:	1825003a 	cmpeq	r18,r3,zero
 100c884:	9000cf1e 	bne	r18,zero,100cbc4 <_strtod_r+0x13ac>
 100c888:	e1400117 	ldw	r5,4(fp)
 100c88c:	01000434 	movhi	r4,16
 100c890:	213fffc4 	addi	r4,r4,-1
 100c894:	2904703a 	and	r2,r5,r4
 100c898:	11006826 	beq	r2,r4,100ca3c <_strtod_r+0x1224>
 100c89c:	e1c00017 	ldw	r7,0(fp)
 100c8a0:	3880004c 	andi	r2,r7,1
 100c8a4:	1005003a 	cmpeq	r2,r2,zero
 100c8a8:	1000601e 	bne	r2,zero,100ca2c <_strtod_r+0x1214>
 100c8ac:	90010426 	beq	r18,zero,100ccc0 <_strtod_r+0x14a8>
 100c8b0:	e4400117 	ldw	r17,4(fp)
 100c8b4:	3809883a 	mov	r4,r7
 100c8b8:	3821883a 	mov	r16,r7
 100c8bc:	880b883a 	mov	r5,r17
 100c8c0:	1009b2c0 	call	1009b2c <__ulp>
 100c8c4:	180f883a 	mov	r7,r3
 100c8c8:	880b883a 	mov	r5,r17
 100c8cc:	8009883a 	mov	r4,r16
 100c8d0:	100d883a 	mov	r6,r2
 100c8d4:	10102640 	call	1010264 <__subdf3>
 100c8d8:	1009883a 	mov	r4,r2
 100c8dc:	000d883a 	mov	r6,zero
 100c8e0:	000f883a 	mov	r7,zero
 100c8e4:	180b883a 	mov	r5,r3
 100c8e8:	e0800015 	stw	r2,0(fp)
 100c8ec:	e0c00115 	stw	r3,4(fp)
 100c8f0:	10109fc0 	call	10109fc <__nedf2>
 100c8f4:	10004d1e 	bne	r2,zero,100ca2c <_strtod_r+0x1214>
 100c8f8:	00800884 	movi	r2,34
 100c8fc:	a8800015 	stw	r2,0(r21)
 100c900:	e0000015 	stw	zero,0(fp)
 100c904:	e0000115 	stw	zero,4(fp)
 100c908:	003f6506 	br	100c6a0 <_strtod_r+0xe88>
 100c90c:	00800044 	movi	r2,1
 100c910:	d8801915 	stw	r2,100(sp)
 100c914:	003d4406 	br	100be28 <_strtod_r+0x610>
 100c918:	d8c01817 	ldw	r3,96(sp)
 100c91c:	1985883a 	add	r2,r3,r6
 100c920:	11ffffc4 	addi	r7,r2,-1
 100c924:	39000044 	addi	r4,r7,1
 100c928:	00800204 	movi	r2,8
 100c92c:	d9001815 	stw	r4,96(sp)
 100c930:	11c0d716 	blt	r2,r7,100cc90 <_strtod_r+0x1478>
 100c934:	d9001217 	ldw	r4,72(sp)
 100c938:	01400284 	movi	r5,10
 100c93c:	10026440 	call	1002644 <__mulsi3>
 100c940:	1585883a 	add	r2,r2,r22
 100c944:	d8801215 	stw	r2,72(sp)
 100c948:	000d883a 	mov	r6,zero
 100c94c:	84000044 	addi	r16,r16,1
 100c950:	dc000415 	stw	r16,16(sp)
 100c954:	84400007 	ldb	r17,0(r16)
 100c958:	003cfc06 	br	100bd4c <_strtod_r+0x534>
 100c95c:	d8c01a17 	ldw	r3,104(sp)
 100c960:	1800321e 	bne	r3,zero,100ca2c <_strtod_r+0x1214>
 100c964:	e0800017 	ldw	r2,0(fp)
 100c968:	1000b31e 	bne	r2,zero,100cc38 <_strtod_r+0x1420>
 100c96c:	e0c00117 	ldw	r3,4(fp)
 100c970:	01000434 	movhi	r4,16
 100c974:	213fffc4 	addi	r4,r4,-1
 100c978:	1904703a 	and	r2,r3,r4
 100c97c:	1000e71e 	bne	r2,zero,100cd1c <_strtod_r+0x1504>
 100c980:	18dffc2c 	andhi	r3,r3,32752
 100c984:	0081ac34 	movhi	r2,1712
 100c988:	10c0282e 	bgeu	r2,r3,100ca2c <_strtod_r+0x1214>
 100c98c:	a0800517 	ldw	r2,20(r20)
 100c990:	1000031e 	bne	r2,zero,100c9a0 <_strtod_r+0x1188>
 100c994:	a0c00417 	ldw	r3,16(r20)
 100c998:	00800044 	movi	r2,1
 100c99c:	10c0a60e 	bge	r2,r3,100cc38 <_strtod_r+0x1420>
 100c9a0:	a00b883a 	mov	r5,r20
 100c9a4:	a809883a 	mov	r4,r21
 100c9a8:	01800044 	movi	r6,1
 100c9ac:	100a2b40 	call	100a2b4 <__lshift>
 100c9b0:	1009883a 	mov	r4,r2
 100c9b4:	b00b883a 	mov	r5,r22
 100c9b8:	1029883a 	mov	r20,r2
 100c9bc:	1009acc0 	call	1009acc <__mcmp>
 100c9c0:	00809d0e 	bge	zero,r2,100cc38 <_strtod_r+0x1420>
 100c9c4:	e1800117 	ldw	r6,4(fp)
 100c9c8:	d9001c17 	ldw	r4,112(sp)
 100c9cc:	2013003a 	cmpeq	r9,r4,zero
 100c9d0:	4800d61e 	bne	r9,zero,100cd2c <_strtod_r+0x1514>
 100c9d4:	30dffc2c 	andhi	r3,r6,32752
 100c9d8:	0081ac34 	movhi	r2,1712
 100c9dc:	10c0d336 	bltu	r2,r3,100cd2c <_strtod_r+0x1514>
 100c9e0:	0080dc34 	movhi	r2,880
 100c9e4:	10ffc42e 	bgeu	r2,r3,100c8f8 <_strtod_r+0x10e0>
 100c9e8:	e0800017 	ldw	r2,0(fp)
 100c9ec:	e0c00117 	ldw	r3,4(fp)
 100c9f0:	020e5434 	movhi	r8,14672
 100c9f4:	000d883a 	mov	r6,zero
 100c9f8:	400f883a 	mov	r7,r8
 100c9fc:	180b883a 	mov	r5,r3
 100ca00:	1009883a 	mov	r4,r2
 100ca04:	da000c15 	stw	r8,48(sp)
 100ca08:	d8000b15 	stw	zero,44(sp)
 100ca0c:	10103580 	call	1010358 <__muldf3>
 100ca10:	e0800015 	stw	r2,0(fp)
 100ca14:	e0c00115 	stw	r3,4(fp)
 100ca18:	183f211e 	bne	r3,zero,100c6a0 <_strtod_r+0xe88>
 100ca1c:	103f201e 	bne	r2,zero,100c6a0 <_strtod_r+0xe88>
 100ca20:	00800884 	movi	r2,34
 100ca24:	a8800015 	stw	r2,0(r21)
 100ca28:	003f1d06 	br	100c6a0 <_strtod_r+0xe88>
 100ca2c:	d9001c17 	ldw	r4,112(sp)
 100ca30:	2013003a 	cmpeq	r9,r4,zero
 100ca34:	483f1a1e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100ca38:	003feb06 	br	100c9e8 <_strtod_r+0x11d0>
 100ca3c:	d8801c17 	ldw	r2,112(sp)
 100ca40:	e1c00017 	ldw	r7,0(fp)
 100ca44:	1013003a 	cmpeq	r9,r2,zero
 100ca48:	4800c31e 	bne	r9,zero,100cd58 <_strtod_r+0x1540>
 100ca4c:	28dffc2c 	andhi	r3,r5,32752
 100ca50:	0081a834 	movhi	r2,1696
 100ca54:	10c0c036 	bltu	r2,r3,100cd58 <_strtod_r+0x1540>
 100ca58:	1804d53a 	srli	r2,r3,20
 100ca5c:	00c01ac4 	movi	r3,107
 100ca60:	013fffc4 	movi	r4,-1
 100ca64:	1887c83a 	sub	r3,r3,r2
 100ca68:	20c4983a 	sll	r2,r4,r3
 100ca6c:	11ff8c1e 	bne	r2,r7,100c8a0 <_strtod_r+0x1088>
 100ca70:	28dffc2c 	andhi	r3,r5,32752
 100ca74:	00800434 	movhi	r2,16
 100ca78:	188d883a 	add	r6,r3,r2
 100ca7c:	e1800115 	stw	r6,4(fp)
 100ca80:	e0000015 	stw	zero,0(fp)
 100ca84:	483f061e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100ca88:	003fd706 	br	100c9e8 <_strtod_r+0x11d0>
 100ca8c:	0021883a 	mov	r16,zero
 100ca90:	0005883a 	mov	r2,zero
 100ca94:	044ff834 	movhi	r17,16352
 100ca98:	00eff834 	movhi	r3,49120
 100ca9c:	003e7c06 	br	100c490 <_strtod_r+0xc78>
 100caa0:	803d9226 	beq	r16,zero,100c0ec <_strtod_r+0x8d4>
 100caa4:	0421c83a 	sub	r16,zero,r16
 100caa8:	814003cc 	andi	r5,r16,15
 100caac:	28000f26 	beq	r5,zero,100caec <_strtod_r+0x12d4>
 100cab0:	280a90fa 	slli	r5,r5,3
 100cab4:	010040b4 	movhi	r4,258
 100cab8:	21325e04 	addi	r4,r4,-13960
 100cabc:	e0800017 	ldw	r2,0(fp)
 100cac0:	290b883a 	add	r5,r5,r4
 100cac4:	2a000017 	ldw	r8,0(r5)
 100cac8:	e0c00117 	ldw	r3,4(fp)
 100cacc:	2a400117 	ldw	r9,4(r5)
 100cad0:	1009883a 	mov	r4,r2
 100cad4:	180b883a 	mov	r5,r3
 100cad8:	480f883a 	mov	r7,r9
 100cadc:	400d883a 	mov	r6,r8
 100cae0:	101071c0 	call	101071c <__divdf3>
 100cae4:	e0c00115 	stw	r3,4(fp)
 100cae8:	e0800015 	stw	r2,0(fp)
 100caec:	8021d13a 	srai	r16,r16,4
 100caf0:	803d7e26 	beq	r16,zero,100c0ec <_strtod_r+0x8d4>
 100caf4:	008007c4 	movi	r2,31
 100caf8:	14002d16 	blt	r2,r16,100cbb0 <_strtod_r+0x1398>
 100cafc:	8080040c 	andi	r2,r16,16
 100cb00:	10009d26 	beq	r2,zero,100cd78 <_strtod_r+0x1560>
 100cb04:	01001a84 	movi	r4,106
 100cb08:	d9001c15 	stw	r4,112(sp)
 100cb0c:	0400110e 	bge	zero,r16,100cb54 <_strtod_r+0x133c>
 100cb10:	044040b4 	movhi	r17,258
 100cb14:	8c72ab04 	addi	r17,r17,-13652
 100cb18:	8080004c 	andi	r2,r16,1
 100cb1c:	1005003a 	cmpeq	r2,r2,zero
 100cb20:	1000091e 	bne	r2,zero,100cb48 <_strtod_r+0x1330>
 100cb24:	e0800017 	ldw	r2,0(fp)
 100cb28:	e0c00117 	ldw	r3,4(fp)
 100cb2c:	89800017 	ldw	r6,0(r17)
 100cb30:	89c00117 	ldw	r7,4(r17)
 100cb34:	180b883a 	mov	r5,r3
 100cb38:	1009883a 	mov	r4,r2
 100cb3c:	10103580 	call	1010358 <__muldf3>
 100cb40:	e0c00115 	stw	r3,4(fp)
 100cb44:	e0800015 	stw	r2,0(fp)
 100cb48:	8021d07a 	srai	r16,r16,1
 100cb4c:	8c400204 	addi	r17,r17,8
 100cb50:	043ff116 	blt	zero,r16,100cb18 <_strtod_r+0x1300>
 100cb54:	d8801c17 	ldw	r2,112(sp)
 100cb58:	10000d26 	beq	r2,zero,100cb90 <_strtod_r+0x1378>
 100cb5c:	e1000117 	ldw	r4,4(fp)
 100cb60:	00c01ac4 	movi	r3,107
 100cb64:	209ffc2c 	andhi	r2,r4,32752
 100cb68:	1004d53a 	srli	r2,r2,20
 100cb6c:	1887c83a 	sub	r3,r3,r2
 100cb70:	00c0070e 	bge	zero,r3,100cb90 <_strtod_r+0x1378>
 100cb74:	008007c4 	movi	r2,31
 100cb78:	10c0940e 	bge	r2,r3,100cdcc <_strtod_r+0x15b4>
 100cb7c:	00800d04 	movi	r2,52
 100cb80:	e0000015 	stw	zero,0(fp)
 100cb84:	10c08b0e 	bge	r2,r3,100cdb4 <_strtod_r+0x159c>
 100cb88:	0180dc34 	movhi	r6,880
 100cb8c:	e1800115 	stw	r6,4(fp)
 100cb90:	e0800017 	ldw	r2,0(fp)
 100cb94:	e0c00117 	ldw	r3,4(fp)
 100cb98:	000d883a 	mov	r6,zero
 100cb9c:	000f883a 	mov	r7,zero
 100cba0:	180b883a 	mov	r5,r3
 100cba4:	1009883a 	mov	r4,r2
 100cba8:	10109fc0 	call	10109fc <__nedf2>
 100cbac:	103d501e 	bne	r2,zero,100c0f0 <_strtod_r+0x8d8>
 100cbb0:	00800884 	movi	r2,34
 100cbb4:	a8800015 	stw	r2,0(r21)
 100cbb8:	e0000015 	stw	zero,0(fp)
 100cbbc:	e0000115 	stw	zero,4(fp)
 100cbc0:	003b9f06 	br	100ba40 <_strtod_r+0x228>
 100cbc4:	e1800117 	ldw	r6,4(fp)
 100cbc8:	00c00434 	movhi	r3,16
 100cbcc:	18ffffc4 	addi	r3,r3,-1
 100cbd0:	30c4703a 	and	r2,r6,r3
 100cbd4:	103f311e 	bne	r2,zero,100c89c <_strtod_r+0x1084>
 100cbd8:	e1c00017 	ldw	r7,0(fp)
 100cbdc:	383f301e 	bne	r7,zero,100c8a0 <_strtod_r+0x1088>
 100cbe0:	003f7906 	br	100c9c8 <_strtod_r+0x11b0>
 100cbe4:	d8c00f17 	ldw	r3,60(sp)
 100cbe8:	00bffa84 	movi	r2,-22
 100cbec:	18bcbf16 	blt	r3,r2,100beec <_strtod_r+0x6d4>
 100cbf0:	1809883a 	mov	r4,r3
 100cbf4:	017ffe04 	movi	r5,-8
 100cbf8:	10026440 	call	1002644 <__mulsi3>
 100cbfc:	00c040b4 	movhi	r3,258
 100cc00:	18f25e04 	addi	r3,r3,-13960
 100cc04:	10c5883a 	add	r2,r2,r3
 100cc08:	e2000017 	ldw	r8,0(fp)
 100cc0c:	e2400117 	ldw	r9,4(fp)
 100cc10:	12800017 	ldw	r10,0(r2)
 100cc14:	12c00117 	ldw	r11,4(r2)
 100cc18:	480b883a 	mov	r5,r9
 100cc1c:	4009883a 	mov	r4,r8
 100cc20:	580f883a 	mov	r7,r11
 100cc24:	500d883a 	mov	r6,r10
 100cc28:	101071c0 	call	101071c <__divdf3>
 100cc2c:	e0c00115 	stw	r3,4(fp)
 100cc30:	e0800015 	stw	r2,0(fp)
 100cc34:	003b8206 	br	100ba40 <_strtod_r+0x228>
 100cc38:	d8801c17 	ldw	r2,112(sp)
 100cc3c:	1013003a 	cmpeq	r9,r2,zero
 100cc40:	483e971e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100cc44:	003f6806 	br	100c9e8 <_strtod_r+0x11d0>
 100cc48:	00801a44 	movi	r2,105
 100cc4c:	88bc5026 	beq	r17,r2,100bd90 <_strtod_r+0x578>
 100cc50:	00801b84 	movi	r2,110
 100cc54:	88bb9b1e 	bne	r17,r2,100bac4 <_strtod_r+0x2ac>
 100cc58:	dc000404 	addi	r16,sp,16
 100cc5c:	8009883a 	mov	r4,r16
 100cc60:	014040b4 	movhi	r5,258
 100cc64:	2972aa04 	addi	r5,r5,-13656
 100cc68:	100b7d00 	call	100b7d0 <match>
 100cc6c:	103b9526 	beq	r2,zero,100bac4 <_strtod_r+0x2ac>
 100cc70:	d8800417 	ldw	r2,16(sp)
 100cc74:	00c00a04 	movi	r3,40
 100cc78:	11000007 	ldb	r4,0(r2)
 100cc7c:	20c04026 	beq	r4,r3,100cd80 <_strtod_r+0x1568>
 100cc80:	01bffe34 	movhi	r6,65528
 100cc84:	e1800115 	stw	r6,4(fp)
 100cc88:	e0000015 	stw	zero,0(fp)
 100cc8c:	003b6c06 	br	100ba40 <_strtod_r+0x228>
 100cc90:	d8c01817 	ldw	r3,96(sp)
 100cc94:	00800404 	movi	r2,16
 100cc98:	10c00516 	blt	r2,r3,100ccb0 <_strtod_r+0x1498>
 100cc9c:	d9001117 	ldw	r4,68(sp)
 100cca0:	01400284 	movi	r5,10
 100cca4:	10026440 	call	1002644 <__mulsi3>
 100cca8:	1585883a 	add	r2,r2,r22
 100ccac:	d8801115 	stw	r2,68(sp)
 100ccb0:	000d883a 	mov	r6,zero
 100ccb4:	003f2506 	br	100c94c <_strtod_r+0x1134>
 100ccb8:	000d883a 	mov	r6,zero
 100ccbc:	003ce306 	br	100c04c <_strtod_r+0x834>
 100ccc0:	e4400117 	ldw	r17,4(fp)
 100ccc4:	3809883a 	mov	r4,r7
 100ccc8:	3821883a 	mov	r16,r7
 100cccc:	880b883a 	mov	r5,r17
 100ccd0:	1009b2c0 	call	1009b2c <__ulp>
 100ccd4:	180f883a 	mov	r7,r3
 100ccd8:	880b883a 	mov	r5,r17
 100ccdc:	8009883a 	mov	r4,r16
 100cce0:	100d883a 	mov	r6,r2
 100cce4:	10102e40 	call	10102e4 <__adddf3>
 100cce8:	180b883a 	mov	r5,r3
 100ccec:	d8c01c17 	ldw	r3,112(sp)
 100ccf0:	1009883a 	mov	r4,r2
 100ccf4:	e1400115 	stw	r5,4(fp)
 100ccf8:	1813003a 	cmpeq	r9,r3,zero
 100ccfc:	e1000015 	stw	r4,0(fp)
 100cd00:	483e671e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100cd04:	003f3806 	br	100c9e8 <_strtod_r+0x11d0>
 100cd08:	0080d434 	movhi	r2,848
 100cd0c:	188d883a 	add	r6,r3,r2
 100cd10:	d8001c15 	stw	zero,112(sp)
 100cd14:	e1800115 	stw	r6,4(fp)
 100cd18:	003cf506 	br	100c0f0 <_strtod_r+0x8d8>
 100cd1c:	d8c01c17 	ldw	r3,112(sp)
 100cd20:	1813003a 	cmpeq	r9,r3,zero
 100cd24:	483e5e1e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100cd28:	003f2f06 	br	100c9e8 <_strtod_r+0x11d0>
 100cd2c:	309ffc2c 	andhi	r2,r6,32752
 100cd30:	00fffc34 	movhi	r3,65520
 100cd34:	10c5883a 	add	r2,r2,r3
 100cd38:	00c00434 	movhi	r3,16
 100cd3c:	18ffffc4 	addi	r3,r3,-1
 100cd40:	10ccb03a 	or	r6,r2,r3
 100cd44:	01ffffc4 	movi	r7,-1
 100cd48:	e1800115 	stw	r6,4(fp)
 100cd4c:	e1c00015 	stw	r7,0(fp)
 100cd50:	483e531e 	bne	r9,zero,100c6a0 <_strtod_r+0xe88>
 100cd54:	003f2406 	br	100c9e8 <_strtod_r+0x11d0>
 100cd58:	00bfffc4 	movi	r2,-1
 100cd5c:	003f4306 	br	100ca6c <_strtod_r+0x1254>
 100cd60:	0025883a 	mov	r18,zero
 100cd64:	058040b4 	movhi	r22,258
 100cd68:	b5b29004 	addi	r22,r22,-13760
 100cd6c:	003c9206 	br	100bfb8 <_strtod_r+0x7a0>
 100cd70:	d9c01817 	ldw	r7,96(sp)
 100cd74:	003eeb06 	br	100c924 <_strtod_r+0x110c>
 100cd78:	d8001c15 	stw	zero,112(sp)
 100cd7c:	003f6306 	br	100cb0c <_strtod_r+0x12f4>
 100cd80:	8009883a 	mov	r4,r16
 100cd84:	014040b4 	movhi	r5,258
 100cd88:	29754204 	addi	r5,r5,-11000
 100cd8c:	d9800d04 	addi	r6,sp,52
 100cd90:	100eab00 	call	100eab0 <__hexnan>
 100cd94:	00c00144 	movi	r3,5
 100cd98:	10ffb91e 	bne	r2,r3,100cc80 <_strtod_r+0x1468>
 100cd9c:	d8800e17 	ldw	r2,56(sp)
 100cda0:	d9c00d17 	ldw	r7,52(sp)
 100cda4:	119ffc34 	orhi	r6,r2,32752
 100cda8:	e1800115 	stw	r6,4(fp)
 100cdac:	e1c00015 	stw	r7,0(fp)
 100cdb0:	003b2306 	br	100ba40 <_strtod_r+0x228>
 100cdb4:	18fff804 	addi	r3,r3,-32
 100cdb8:	00bfffc4 	movi	r2,-1
 100cdbc:	10c4983a 	sll	r2,r2,r3
 100cdc0:	208c703a 	and	r6,r4,r2
 100cdc4:	e1800115 	stw	r6,4(fp)
 100cdc8:	003f7106 	br	100cb90 <_strtod_r+0x1378>
 100cdcc:	00bfffc4 	movi	r2,-1
 100cdd0:	10c4983a 	sll	r2,r2,r3
 100cdd4:	e0c00017 	ldw	r3,0(fp)
 100cdd8:	188e703a 	and	r7,r3,r2
 100cddc:	e1c00015 	stw	r7,0(fp)
 100cde0:	003f6b06 	br	100cb90 <_strtod_r+0x1378>

0100cde4 <strtof>:
 100cde4:	defffa04 	addi	sp,sp,-24
 100cde8:	dd000415 	stw	r20,16(sp)
 100cdec:	050040b4 	movhi	r20,258
 100cdf0:	a53a3e04 	addi	r20,r20,-5896
 100cdf4:	2007883a 	mov	r3,r4
 100cdf8:	a1000017 	ldw	r4,0(r20)
 100cdfc:	280d883a 	mov	r6,r5
 100ce00:	180b883a 	mov	r5,r3
 100ce04:	dfc00515 	stw	ra,20(sp)
 100ce08:	dcc00315 	stw	r19,12(sp)
 100ce0c:	dc800215 	stw	r18,8(sp)
 100ce10:	dc400115 	stw	r17,4(sp)
 100ce14:	dc000015 	stw	r16,0(sp)
 100ce18:	100b8180 	call	100b818 <_strtod_r>
 100ce1c:	180b883a 	mov	r5,r3
 100ce20:	1009883a 	mov	r4,r2
 100ce24:	1823883a 	mov	r17,r3
 100ce28:	1021883a 	mov	r16,r2
 100ce2c:	1010e740 	call	1010e74 <__truncdfsf2>
 100ce30:	1009883a 	mov	r4,r2
 100ce34:	000b883a 	mov	r5,zero
 100ce38:	1025883a 	mov	r18,r2
 100ce3c:	1027883a 	mov	r19,r2
 100ce40:	100fcec0 	call	100fcec <__nesf2>
 100ce44:	000d883a 	mov	r6,zero
 100ce48:	000f883a 	mov	r7,zero
 100ce4c:	8009883a 	mov	r4,r16
 100ce50:	880b883a 	mov	r5,r17
 100ce54:	10000e1e 	bne	r2,zero,100ce90 <strtof+0xac>
 100ce58:	10109fc0 	call	10109fc <__nedf2>
 100ce5c:	10000c26 	beq	r2,zero,100ce90 <strtof+0xac>
 100ce60:	a0c00017 	ldw	r3,0(r20)
 100ce64:	00800884 	movi	r2,34
 100ce68:	18800015 	stw	r2,0(r3)
 100ce6c:	9805883a 	mov	r2,r19
 100ce70:	dfc00517 	ldw	ra,20(sp)
 100ce74:	dd000417 	ldw	r20,16(sp)
 100ce78:	dcc00317 	ldw	r19,12(sp)
 100ce7c:	dc800217 	ldw	r18,8(sp)
 100ce80:	dc400117 	ldw	r17,4(sp)
 100ce84:	dc000017 	ldw	r16,0(sp)
 100ce88:	dec00604 	addi	sp,sp,24
 100ce8c:	f800283a 	ret
 100ce90:	9009883a 	mov	r4,r18
 100ce94:	015fe034 	movhi	r5,32640
 100ce98:	297fffc4 	addi	r5,r5,-1
 100ce9c:	100fd640 	call	100fd64 <__gtsf2>
 100cea0:	00ffffc4 	movi	r3,-1
 100cea4:	011ffc34 	movhi	r4,32752
 100cea8:	213fffc4 	addi	r4,r4,-1
 100ceac:	200f883a 	mov	r7,r4
 100ceb0:	180d883a 	mov	r6,r3
 100ceb4:	8009883a 	mov	r4,r16
 100ceb8:	880b883a 	mov	r5,r17
 100cebc:	00800f16 	blt	zero,r2,100cefc <strtof+0x118>
 100cec0:	9009883a 	mov	r4,r18
 100cec4:	017fe034 	movhi	r5,65408
 100cec8:	297fffc4 	addi	r5,r5,-1
 100cecc:	100fddc0 	call	100fddc <__ltsf2>
 100ced0:	023fffc4 	movi	r8,-1
 100ced4:	027ffc34 	movhi	r9,65520
 100ced8:	4a7fffc4 	addi	r9,r9,-1
 100cedc:	880b883a 	mov	r5,r17
 100cee0:	480f883a 	mov	r7,r9
 100cee4:	8009883a 	mov	r4,r16
 100cee8:	400d883a 	mov	r6,r8
 100ceec:	103fdf0e 	bge	r2,zero,100ce6c <strtof+0x88>
 100cef0:	1010b940 	call	1010b94 <__ltdf2>
 100cef4:	103fda0e 	bge	r2,zero,100ce60 <strtof+0x7c>
 100cef8:	003fdc06 	br	100ce6c <strtof+0x88>
 100cefc:	1010a840 	call	1010a84 <__gtdf2>
 100cf00:	00bfd70e 	bge	zero,r2,100ce60 <strtof+0x7c>
 100cf04:	003fee06 	br	100cec0 <strtof+0xdc>

0100cf08 <strtod>:
 100cf08:	018040b4 	movhi	r6,258
 100cf0c:	31ba3e04 	addi	r6,r6,-5896
 100cf10:	2007883a 	mov	r3,r4
 100cf14:	31000017 	ldw	r4,0(r6)
 100cf18:	280d883a 	mov	r6,r5
 100cf1c:	180b883a 	mov	r5,r3
 100cf20:	100b8181 	jmpi	100b818 <_strtod_r>

0100cf24 <_strtol_r>:
 100cf24:	defff304 	addi	sp,sp,-52
 100cf28:	008040b4 	movhi	r2,258
 100cf2c:	10ba3d04 	addi	r2,r2,-5900
 100cf30:	dd000715 	stw	r20,28(sp)
 100cf34:	15000017 	ldw	r20,0(r2)
 100cf38:	ddc00a15 	stw	r23,40(sp)
 100cf3c:	dc800515 	stw	r18,20(sp)
 100cf40:	dc400415 	stw	r17,16(sp)
 100cf44:	dfc00c15 	stw	ra,48(sp)
 100cf48:	df000b15 	stw	fp,44(sp)
 100cf4c:	dd800915 	stw	r22,36(sp)
 100cf50:	dd400815 	stw	r21,32(sp)
 100cf54:	dcc00615 	stw	r19,24(sp)
 100cf58:	dc000315 	stw	r16,12(sp)
 100cf5c:	282f883a 	mov	r23,r5
 100cf60:	d9000115 	stw	r4,4(sp)
 100cf64:	d9800215 	stw	r6,8(sp)
 100cf68:	3825883a 	mov	r18,r7
 100cf6c:	2823883a 	mov	r17,r5
 100cf70:	8c000007 	ldb	r16,0(r17)
 100cf74:	8c400044 	addi	r17,r17,1
 100cf78:	a407883a 	add	r3,r20,r16
 100cf7c:	18800003 	ldbu	r2,0(r3)
 100cf80:	1080020c 	andi	r2,r2,8
 100cf84:	103ffa1e 	bne	r2,zero,100cf70 <_strtol_r+0x4c>
 100cf88:	00800b44 	movi	r2,45
 100cf8c:	80805c26 	beq	r16,r2,100d100 <_strtol_r+0x1dc>
 100cf90:	00800ac4 	movi	r2,43
 100cf94:	80805726 	beq	r16,r2,100d0f4 <_strtol_r+0x1d0>
 100cf98:	d8000015 	stw	zero,0(sp)
 100cf9c:	9007003a 	cmpeq	r3,r18,zero
 100cfa0:	1800431e 	bne	r3,zero,100d0b0 <_strtol_r+0x18c>
 100cfa4:	00800404 	movi	r2,16
 100cfa8:	90804126 	beq	r18,r2,100d0b0 <_strtol_r+0x18c>
 100cfac:	902b883a 	mov	r21,r18
 100cfb0:	d8c00017 	ldw	r3,0(sp)
 100cfb4:	1838c03a 	cmpne	fp,r3,zero
 100cfb8:	e0004a1e 	bne	fp,zero,100d0e4 <_strtol_r+0x1c0>
 100cfbc:	04e00034 	movhi	r19,32768
 100cfc0:	9cffffc4 	addi	r19,r19,-1
 100cfc4:	9809883a 	mov	r4,r19
 100cfc8:	a80b883a 	mov	r5,r21
 100cfcc:	100263c0 	call	100263c <__umodsi3>
 100cfd0:	9809883a 	mov	r4,r19
 100cfd4:	a80b883a 	mov	r5,r21
 100cfd8:	102d883a 	mov	r22,r2
 100cfdc:	10026340 	call	1002634 <__udivsi3>
 100cfe0:	1027883a 	mov	r19,r2
 100cfe4:	a405883a 	add	r2,r20,r16
 100cfe8:	11400003 	ldbu	r5,0(r2)
 100cfec:	0009883a 	mov	r4,zero
 100cff0:	000d883a 	mov	r6,zero
 100cff4:	28c0010c 	andi	r3,r5,4
 100cff8:	18000f26 	beq	r3,zero,100d038 <_strtol_r+0x114>
 100cffc:	843ff404 	addi	r16,r16,-48
 100d000:	8480150e 	bge	r16,r18,100d058 <_strtol_r+0x134>
 100d004:	30003216 	blt	r6,zero,100d0d0 <_strtol_r+0x1ac>
 100d008:	99003136 	bltu	r19,r4,100d0d0 <_strtol_r+0x1ac>
 100d00c:	24c02f26 	beq	r4,r19,100d0cc <_strtol_r+0x1a8>
 100d010:	a80b883a 	mov	r5,r21
 100d014:	10026440 	call	1002644 <__mulsi3>
 100d018:	1409883a 	add	r4,r2,r16
 100d01c:	01800044 	movi	r6,1
 100d020:	8c000007 	ldb	r16,0(r17)
 100d024:	8c400044 	addi	r17,r17,1
 100d028:	a405883a 	add	r2,r20,r16
 100d02c:	11400003 	ldbu	r5,0(r2)
 100d030:	28c0010c 	andi	r3,r5,4
 100d034:	183ff11e 	bne	r3,zero,100cffc <_strtol_r+0xd8>
 100d038:	288000cc 	andi	r2,r5,3
 100d03c:	10000626 	beq	r2,zero,100d058 <_strtol_r+0x134>
 100d040:	2880004c 	andi	r2,r5,1
 100d044:	1005003a 	cmpeq	r2,r2,zero
 100d048:	1000231e 	bne	r2,zero,100d0d8 <_strtol_r+0x1b4>
 100d04c:	00800dc4 	movi	r2,55
 100d050:	80a1c83a 	sub	r16,r16,r2
 100d054:	84bfeb16 	blt	r16,r18,100d004 <_strtol_r+0xe0>
 100d058:	30002e16 	blt	r6,zero,100d114 <_strtol_r+0x1f0>
 100d05c:	e000231e 	bne	fp,zero,100d0ec <_strtol_r+0x1c8>
 100d060:	2007883a 	mov	r3,r4
 100d064:	d8800217 	ldw	r2,8(sp)
 100d068:	10000426 	beq	r2,zero,100d07c <_strtol_r+0x158>
 100d06c:	30000126 	beq	r6,zero,100d074 <_strtol_r+0x150>
 100d070:	8dffffc4 	addi	r23,r17,-1
 100d074:	d9000217 	ldw	r4,8(sp)
 100d078:	25c00015 	stw	r23,0(r4)
 100d07c:	1805883a 	mov	r2,r3
 100d080:	dfc00c17 	ldw	ra,48(sp)
 100d084:	df000b17 	ldw	fp,44(sp)
 100d088:	ddc00a17 	ldw	r23,40(sp)
 100d08c:	dd800917 	ldw	r22,36(sp)
 100d090:	dd400817 	ldw	r21,32(sp)
 100d094:	dd000717 	ldw	r20,28(sp)
 100d098:	dcc00617 	ldw	r19,24(sp)
 100d09c:	dc800517 	ldw	r18,20(sp)
 100d0a0:	dc400417 	ldw	r17,16(sp)
 100d0a4:	dc000317 	ldw	r16,12(sp)
 100d0a8:	dec00d04 	addi	sp,sp,52
 100d0ac:	f800283a 	ret
 100d0b0:	00800c04 	movi	r2,48
 100d0b4:	80801f26 	beq	r16,r2,100d134 <_strtol_r+0x210>
 100d0b8:	183fbc26 	beq	r3,zero,100cfac <_strtol_r+0x88>
 100d0bc:	00800c04 	movi	r2,48
 100d0c0:	80802926 	beq	r16,r2,100d168 <_strtol_r+0x244>
 100d0c4:	04800284 	movi	r18,10
 100d0c8:	003fb806 	br	100cfac <_strtol_r+0x88>
 100d0cc:	b43fd00e 	bge	r22,r16,100d010 <_strtol_r+0xec>
 100d0d0:	01bfffc4 	movi	r6,-1
 100d0d4:	003fd206 	br	100d020 <_strtol_r+0xfc>
 100d0d8:	008015c4 	movi	r2,87
 100d0dc:	80a1c83a 	sub	r16,r16,r2
 100d0e0:	003fdc06 	br	100d054 <_strtol_r+0x130>
 100d0e4:	04e00034 	movhi	r19,32768
 100d0e8:	003fb606 	br	100cfc4 <_strtol_r+0xa0>
 100d0ec:	0107c83a 	sub	r3,zero,r4
 100d0f0:	003fdc06 	br	100d064 <_strtol_r+0x140>
 100d0f4:	8c000007 	ldb	r16,0(r17)
 100d0f8:	8c400044 	addi	r17,r17,1
 100d0fc:	003fa606 	br	100cf98 <_strtol_r+0x74>
 100d100:	8c000007 	ldb	r16,0(r17)
 100d104:	00800044 	movi	r2,1
 100d108:	8c400044 	addi	r17,r17,1
 100d10c:	d8800015 	stw	r2,0(sp)
 100d110:	003fa206 	br	100cf9c <_strtol_r+0x78>
 100d114:	d9000017 	ldw	r4,0(sp)
 100d118:	2005003a 	cmpeq	r2,r4,zero
 100d11c:	10000f1e 	bne	r2,zero,100d15c <_strtol_r+0x238>
 100d120:	00e00034 	movhi	r3,32768
 100d124:	d9000117 	ldw	r4,4(sp)
 100d128:	00800884 	movi	r2,34
 100d12c:	20800015 	stw	r2,0(r4)
 100d130:	003fcc06 	br	100d064 <_strtol_r+0x140>
 100d134:	89000007 	ldb	r4,0(r17)
 100d138:	00801e04 	movi	r2,120
 100d13c:	20800226 	beq	r4,r2,100d148 <_strtol_r+0x224>
 100d140:	00801604 	movi	r2,88
 100d144:	20bfdc1e 	bne	r4,r2,100d0b8 <_strtol_r+0x194>
 100d148:	8c000047 	ldb	r16,1(r17)
 100d14c:	04800404 	movi	r18,16
 100d150:	8c400084 	addi	r17,r17,2
 100d154:	902b883a 	mov	r21,r18
 100d158:	003f9506 	br	100cfb0 <_strtol_r+0x8c>
 100d15c:	00e00034 	movhi	r3,32768
 100d160:	18ffffc4 	addi	r3,r3,-1
 100d164:	003fef06 	br	100d124 <_strtol_r+0x200>
 100d168:	04800204 	movi	r18,8
 100d16c:	902b883a 	mov	r21,r18
 100d170:	003f8f06 	br	100cfb0 <_strtol_r+0x8c>

0100d174 <strtol>:
 100d174:	008040b4 	movhi	r2,258
 100d178:	10ba3e04 	addi	r2,r2,-5896
 100d17c:	2013883a 	mov	r9,r4
 100d180:	11000017 	ldw	r4,0(r2)
 100d184:	2805883a 	mov	r2,r5
 100d188:	300f883a 	mov	r7,r6
 100d18c:	480b883a 	mov	r5,r9
 100d190:	100d883a 	mov	r6,r2
 100d194:	100cf241 	jmpi	100cf24 <_strtol_r>

0100d198 <_strtoll_r>:
 100d198:	defff004 	addi	sp,sp,-64
 100d19c:	008040b4 	movhi	r2,258
 100d1a0:	10ba3d04 	addi	r2,r2,-5900
 100d1a4:	df000e15 	stw	fp,56(sp)
 100d1a8:	17000017 	ldw	fp,0(r2)
 100d1ac:	ddc00d15 	stw	r23,52(sp)
 100d1b0:	dd000a15 	stw	r20,40(sp)
 100d1b4:	dfc00f15 	stw	ra,60(sp)
 100d1b8:	dd800c15 	stw	r22,48(sp)
 100d1bc:	dd400b15 	stw	r21,44(sp)
 100d1c0:	dcc00915 	stw	r19,36(sp)
 100d1c4:	dc800815 	stw	r18,32(sp)
 100d1c8:	dc400715 	stw	r17,28(sp)
 100d1cc:	dc000615 	stw	r16,24(sp)
 100d1d0:	d9400315 	stw	r5,12(sp)
 100d1d4:	d9000215 	stw	r4,8(sp)
 100d1d8:	d9800415 	stw	r6,16(sp)
 100d1dc:	382f883a 	mov	r23,r7
 100d1e0:	2829883a 	mov	r20,r5
 100d1e4:	a4c00007 	ldb	r19,0(r20)
 100d1e8:	a5000044 	addi	r20,r20,1
 100d1ec:	e4c7883a 	add	r3,fp,r19
 100d1f0:	18800003 	ldbu	r2,0(r3)
 100d1f4:	1080020c 	andi	r2,r2,8
 100d1f8:	103ffa1e 	bne	r2,zero,100d1e4 <_strtoll_r+0x4c>
 100d1fc:	00800b44 	movi	r2,45
 100d200:	98808826 	beq	r19,r2,100d424 <_strtoll_r+0x28c>
 100d204:	00800ac4 	movi	r2,43
 100d208:	98808326 	beq	r19,r2,100d418 <_strtoll_r+0x280>
 100d20c:	d8000115 	stw	zero,4(sp)
 100d210:	b807003a 	cmpeq	r3,r23,zero
 100d214:	18005f1e 	bne	r3,zero,100d394 <_strtoll_r+0x1fc>
 100d218:	00800404 	movi	r2,16
 100d21c:	b8805d26 	beq	r23,r2,100d394 <_strtoll_r+0x1fc>
 100d220:	b82dd7fa 	srai	r22,r23,31
 100d224:	b82b883a 	mov	r21,r23
 100d228:	d8c00117 	ldw	r3,4(sp)
 100d22c:	1806c03a 	cmpne	r3,r3,zero
 100d230:	d8c00515 	stw	r3,20(sp)
 100d234:	1800631e 	bne	r3,zero,100d3c4 <_strtoll_r+0x22c>
 100d238:	043fffc4 	movi	r16,-1
 100d23c:	04600034 	movhi	r17,32768
 100d240:	8c7fffc4 	addi	r17,r17,-1
 100d244:	880b883a 	mov	r5,r17
 100d248:	8009883a 	mov	r4,r16
 100d24c:	a80d883a 	mov	r6,r21
 100d250:	b00f883a 	mov	r7,r22
 100d254:	100f68c0 	call	100f68c <__umoddi3>
 100d258:	880b883a 	mov	r5,r17
 100d25c:	8009883a 	mov	r4,r16
 100d260:	b00f883a 	mov	r7,r22
 100d264:	a80d883a 	mov	r6,r21
 100d268:	d8800015 	stw	r2,0(sp)
 100d26c:	100f0200 	call	100f020 <__udivdi3>
 100d270:	1023883a 	mov	r17,r2
 100d274:	e4c5883a 	add	r2,fp,r19
 100d278:	11000003 	ldbu	r4,0(r2)
 100d27c:	1825883a 	mov	r18,r3
 100d280:	0015883a 	mov	r10,zero
 100d284:	20c0010c 	andi	r3,r4,4
 100d288:	0017883a 	mov	r11,zero
 100d28c:	000f883a 	mov	r7,zero
 100d290:	18001a26 	beq	r3,zero,100d2fc <_strtoll_r+0x164>
 100d294:	9c3ff404 	addi	r16,r19,-48
 100d298:	85c0200e 	bge	r16,r23,100d31c <_strtoll_r+0x184>
 100d29c:	38003b16 	blt	r7,zero,100d38c <_strtoll_r+0x1f4>
 100d2a0:	92c03a36 	bltu	r18,r11,100d38c <_strtoll_r+0x1f4>
 100d2a4:	5c803826 	beq	r11,r18,100d388 <_strtoll_r+0x1f0>
 100d2a8:	54404c26 	beq	r10,r17,100d3dc <_strtoll_r+0x244>
 100d2ac:	580b883a 	mov	r5,r11
 100d2b0:	5009883a 	mov	r4,r10
 100d2b4:	a80d883a 	mov	r6,r21
 100d2b8:	b00f883a 	mov	r7,r22
 100d2bc:	100ee580 	call	100ee58 <__muldi3>
 100d2c0:	8013d7fa 	srai	r9,r16,31
 100d2c4:	100d883a 	mov	r6,r2
 100d2c8:	1405883a 	add	r2,r2,r16
 100d2cc:	118d803a 	cmpltu	r6,r2,r6
 100d2d0:	1a47883a 	add	r3,r3,r9
 100d2d4:	30cd883a 	add	r6,r6,r3
 100d2d8:	1015883a 	mov	r10,r2
 100d2dc:	3017883a 	mov	r11,r6
 100d2e0:	01c00044 	movi	r7,1
 100d2e4:	a4c00007 	ldb	r19,0(r20)
 100d2e8:	a5000044 	addi	r20,r20,1
 100d2ec:	e4c5883a 	add	r2,fp,r19
 100d2f0:	11000003 	ldbu	r4,0(r2)
 100d2f4:	20c0010c 	andi	r3,r4,4
 100d2f8:	183fe61e 	bne	r3,zero,100d294 <_strtoll_r+0xfc>
 100d2fc:	208000cc 	andi	r2,r4,3
 100d300:	10000626 	beq	r2,zero,100d31c <_strtoll_r+0x184>
 100d304:	2080004c 	andi	r2,r4,1
 100d308:	1005003a 	cmpeq	r2,r2,zero
 100d30c:	1000301e 	bne	r2,zero,100d3d0 <_strtoll_r+0x238>
 100d310:	02000dc4 	movi	r8,55
 100d314:	9a21c83a 	sub	r16,r19,r8
 100d318:	85ffe016 	blt	r16,r23,100d29c <_strtoll_r+0x104>
 100d31c:	38004616 	blt	r7,zero,100d438 <_strtoll_r+0x2a0>
 100d320:	d8800517 	ldw	r2,20(sp)
 100d324:	1000341e 	bne	r2,zero,100d3f8 <_strtoll_r+0x260>
 100d328:	500b883a 	mov	r5,r10
 100d32c:	580d883a 	mov	r6,r11
 100d330:	d8c00417 	ldw	r3,16(sp)
 100d334:	18000626 	beq	r3,zero,100d350 <_strtoll_r+0x1b8>
 100d338:	38000226 	beq	r7,zero,100d344 <_strtoll_r+0x1ac>
 100d33c:	a53fffc4 	addi	r20,r20,-1
 100d340:	dd000315 	stw	r20,12(sp)
 100d344:	d8c00317 	ldw	r3,12(sp)
 100d348:	d8800417 	ldw	r2,16(sp)
 100d34c:	10c00015 	stw	r3,0(r2)
 100d350:	2805883a 	mov	r2,r5
 100d354:	3007883a 	mov	r3,r6
 100d358:	dfc00f17 	ldw	ra,60(sp)
 100d35c:	df000e17 	ldw	fp,56(sp)
 100d360:	ddc00d17 	ldw	r23,52(sp)
 100d364:	dd800c17 	ldw	r22,48(sp)
 100d368:	dd400b17 	ldw	r21,44(sp)
 100d36c:	dd000a17 	ldw	r20,40(sp)
 100d370:	dcc00917 	ldw	r19,36(sp)
 100d374:	dc800817 	ldw	r18,32(sp)
 100d378:	dc400717 	ldw	r17,28(sp)
 100d37c:	dc000617 	ldw	r16,24(sp)
 100d380:	dec01004 	addi	sp,sp,64
 100d384:	f800283a 	ret
 100d388:	8abfc72e 	bgeu	r17,r10,100d2a8 <_strtoll_r+0x110>
 100d38c:	01ffffc4 	movi	r7,-1
 100d390:	003fd406 	br	100d2e4 <_strtoll_r+0x14c>
 100d394:	00800c04 	movi	r2,48
 100d398:	98803226 	beq	r19,r2,100d464 <_strtoll_r+0x2cc>
 100d39c:	183fa026 	beq	r3,zero,100d220 <_strtoll_r+0x88>
 100d3a0:	00800c04 	movi	r2,48
 100d3a4:	98803e26 	beq	r19,r2,100d4a0 <_strtoll_r+0x308>
 100d3a8:	d8c00117 	ldw	r3,4(sp)
 100d3ac:	05c00284 	movi	r23,10
 100d3b0:	b82b883a 	mov	r21,r23
 100d3b4:	1806c03a 	cmpne	r3,r3,zero
 100d3b8:	002d883a 	mov	r22,zero
 100d3bc:	d8c00515 	stw	r3,20(sp)
 100d3c0:	183f9d26 	beq	r3,zero,100d238 <_strtoll_r+0xa0>
 100d3c4:	0021883a 	mov	r16,zero
 100d3c8:	04600034 	movhi	r17,32768
 100d3cc:	003f9d06 	br	100d244 <_strtoll_r+0xac>
 100d3d0:	020015c4 	movi	r8,87
 100d3d4:	9a21c83a 	sub	r16,r19,r8
 100d3d8:	003fcf06 	br	100d318 <_strtoll_r+0x180>
 100d3dc:	5cbfb31e 	bne	r11,r18,100d2ac <_strtoll_r+0x114>
 100d3e0:	d8800017 	ldw	r2,0(sp)
 100d3e4:	143fb10e 	bge	r2,r16,100d2ac <_strtoll_r+0x114>
 100d3e8:	8815883a 	mov	r10,r17
 100d3ec:	9017883a 	mov	r11,r18
 100d3f0:	01ffffc4 	movi	r7,-1
 100d3f4:	003fbb06 	br	100d2e4 <_strtoll_r+0x14c>
 100d3f8:	0009883a 	mov	r4,zero
 100d3fc:	2285c83a 	sub	r2,r4,r10
 100d400:	2089803a 	cmpltu	r4,r4,r2
 100d404:	02c7c83a 	sub	r3,zero,r11
 100d408:	1909c83a 	sub	r4,r3,r4
 100d40c:	100b883a 	mov	r5,r2
 100d410:	200d883a 	mov	r6,r4
 100d414:	003fc606 	br	100d330 <_strtoll_r+0x198>
 100d418:	a4c00007 	ldb	r19,0(r20)
 100d41c:	a5000044 	addi	r20,r20,1
 100d420:	003f7a06 	br	100d20c <_strtoll_r+0x74>
 100d424:	a4c00007 	ldb	r19,0(r20)
 100d428:	00800044 	movi	r2,1
 100d42c:	a5000044 	addi	r20,r20,1
 100d430:	d8800115 	stw	r2,4(sp)
 100d434:	003f7606 	br	100d210 <_strtoll_r+0x78>
 100d438:	d8c00117 	ldw	r3,4(sp)
 100d43c:	1805003a 	cmpeq	r2,r3,zero
 100d440:	1000131e 	bne	r2,zero,100d490 <_strtoll_r+0x2f8>
 100d444:	0005883a 	mov	r2,zero
 100d448:	00e00034 	movhi	r3,32768
 100d44c:	100b883a 	mov	r5,r2
 100d450:	180d883a 	mov	r6,r3
 100d454:	d8c00217 	ldw	r3,8(sp)
 100d458:	00800884 	movi	r2,34
 100d45c:	18800015 	stw	r2,0(r3)
 100d460:	003fb306 	br	100d330 <_strtoll_r+0x198>
 100d464:	a1000007 	ldb	r4,0(r20)
 100d468:	00801e04 	movi	r2,120
 100d46c:	20800226 	beq	r4,r2,100d478 <_strtoll_r+0x2e0>
 100d470:	00801604 	movi	r2,88
 100d474:	20bfc91e 	bne	r4,r2,100d39c <_strtoll_r+0x204>
 100d478:	a4c00047 	ldb	r19,1(r20)
 100d47c:	05c00404 	movi	r23,16
 100d480:	b82b883a 	mov	r21,r23
 100d484:	a5000084 	addi	r20,r20,2
 100d488:	002d883a 	mov	r22,zero
 100d48c:	003f6606 	br	100d228 <_strtoll_r+0x90>
 100d490:	017fffc4 	movi	r5,-1
 100d494:	01a00034 	movhi	r6,32768
 100d498:	31bfffc4 	addi	r6,r6,-1
 100d49c:	003fed06 	br	100d454 <_strtoll_r+0x2bc>
 100d4a0:	05c00204 	movi	r23,8
 100d4a4:	b82b883a 	mov	r21,r23
 100d4a8:	002d883a 	mov	r22,zero
 100d4ac:	003f5e06 	br	100d228 <_strtoll_r+0x90>

0100d4b0 <_strtoul_r>:
 100d4b0:	defff404 	addi	sp,sp,-48
 100d4b4:	008040b4 	movhi	r2,258
 100d4b8:	10ba3d04 	addi	r2,r2,-5900
 100d4bc:	dd000615 	stw	r20,24(sp)
 100d4c0:	15000017 	ldw	r20,0(r2)
 100d4c4:	df000a15 	stw	fp,40(sp)
 100d4c8:	ddc00915 	stw	r23,36(sp)
 100d4cc:	dc800415 	stw	r18,16(sp)
 100d4d0:	dc400315 	stw	r17,12(sp)
 100d4d4:	dfc00b15 	stw	ra,44(sp)
 100d4d8:	dd800815 	stw	r22,32(sp)
 100d4dc:	dd400715 	stw	r21,28(sp)
 100d4e0:	dcc00515 	stw	r19,20(sp)
 100d4e4:	dc000215 	stw	r16,8(sp)
 100d4e8:	282f883a 	mov	r23,r5
 100d4ec:	d9000115 	stw	r4,4(sp)
 100d4f0:	3039883a 	mov	fp,r6
 100d4f4:	3825883a 	mov	r18,r7
 100d4f8:	2823883a 	mov	r17,r5
 100d4fc:	8c000007 	ldb	r16,0(r17)
 100d500:	8c400044 	addi	r17,r17,1
 100d504:	a407883a 	add	r3,r20,r16
 100d508:	18800003 	ldbu	r2,0(r3)
 100d50c:	1080020c 	andi	r2,r2,8
 100d510:	103ffa1e 	bne	r2,zero,100d4fc <_strtoul_r+0x4c>
 100d514:	00800b44 	movi	r2,45
 100d518:	80805826 	beq	r16,r2,100d67c <_strtoul_r+0x1cc>
 100d51c:	00800ac4 	movi	r2,43
 100d520:	80805326 	beq	r16,r2,100d670 <_strtoul_r+0x1c0>
 100d524:	d8000015 	stw	zero,0(sp)
 100d528:	9007003a 	cmpeq	r3,r18,zero
 100d52c:	18003d1e 	bne	r3,zero,100d624 <_strtoul_r+0x174>
 100d530:	00800404 	movi	r2,16
 100d534:	90803b26 	beq	r18,r2,100d624 <_strtoul_r+0x174>
 100d538:	013fffc4 	movi	r4,-1
 100d53c:	900b883a 	mov	r5,r18
 100d540:	10026340 	call	1002634 <__udivsi3>
 100d544:	013fffc4 	movi	r4,-1
 100d548:	900b883a 	mov	r5,r18
 100d54c:	1027883a 	mov	r19,r2
 100d550:	100263c0 	call	100263c <__umodsi3>
 100d554:	102d883a 	mov	r22,r2
 100d558:	902b883a 	mov	r21,r18
 100d55c:	a405883a 	add	r2,r20,r16
 100d560:	11400003 	ldbu	r5,0(r2)
 100d564:	0009883a 	mov	r4,zero
 100d568:	000d883a 	mov	r6,zero
 100d56c:	28c0010c 	andi	r3,r5,4
 100d570:	18000f26 	beq	r3,zero,100d5b0 <_strtoul_r+0x100>
 100d574:	843ff404 	addi	r16,r16,-48
 100d578:	8480150e 	bge	r16,r18,100d5d0 <_strtoul_r+0x120>
 100d57c:	30003516 	blt	r6,zero,100d654 <_strtoul_r+0x1a4>
 100d580:	99003436 	bltu	r19,r4,100d654 <_strtoul_r+0x1a4>
 100d584:	24c03226 	beq	r4,r19,100d650 <_strtoul_r+0x1a0>
 100d588:	a80b883a 	mov	r5,r21
 100d58c:	10026440 	call	1002644 <__mulsi3>
 100d590:	1409883a 	add	r4,r2,r16
 100d594:	01800044 	movi	r6,1
 100d598:	8c000007 	ldb	r16,0(r17)
 100d59c:	8c400044 	addi	r17,r17,1
 100d5a0:	a405883a 	add	r2,r20,r16
 100d5a4:	11400003 	ldbu	r5,0(r2)
 100d5a8:	28c0010c 	andi	r3,r5,4
 100d5ac:	183ff11e 	bne	r3,zero,100d574 <_strtoul_r+0xc4>
 100d5b0:	288000cc 	andi	r2,r5,3
 100d5b4:	10000626 	beq	r2,zero,100d5d0 <_strtoul_r+0x120>
 100d5b8:	2880004c 	andi	r2,r5,1
 100d5bc:	1005003a 	cmpeq	r2,r2,zero
 100d5c0:	1000261e 	bne	r2,zero,100d65c <_strtoul_r+0x1ac>
 100d5c4:	00800dc4 	movi	r2,55
 100d5c8:	80a1c83a 	sub	r16,r16,r2
 100d5cc:	84bfeb16 	blt	r16,r18,100d57c <_strtoul_r+0xcc>
 100d5d0:	3000420e 	bge	r6,zero,100d6dc <_strtoul_r+0x22c>
 100d5d4:	d8c00117 	ldw	r3,4(sp)
 100d5d8:	00800884 	movi	r2,34
 100d5dc:	013fffc4 	movi	r4,-1
 100d5e0:	18800015 	stw	r2,0(r3)
 100d5e4:	e0000226 	beq	fp,zero,100d5f0 <_strtoul_r+0x140>
 100d5e8:	30001f1e 	bne	r6,zero,100d668 <_strtoul_r+0x1b8>
 100d5ec:	e5c00015 	stw	r23,0(fp)
 100d5f0:	2005883a 	mov	r2,r4
 100d5f4:	dfc00b17 	ldw	ra,44(sp)
 100d5f8:	df000a17 	ldw	fp,40(sp)
 100d5fc:	ddc00917 	ldw	r23,36(sp)
 100d600:	dd800817 	ldw	r22,32(sp)
 100d604:	dd400717 	ldw	r21,28(sp)
 100d608:	dd000617 	ldw	r20,24(sp)
 100d60c:	dcc00517 	ldw	r19,20(sp)
 100d610:	dc800417 	ldw	r18,16(sp)
 100d614:	dc400317 	ldw	r17,12(sp)
 100d618:	dc000217 	ldw	r16,8(sp)
 100d61c:	dec00c04 	addi	sp,sp,48
 100d620:	f800283a 	ret
 100d624:	00800c04 	movi	r2,48
 100d628:	80801926 	beq	r16,r2,100d690 <_strtoul_r+0x1e0>
 100d62c:	183fc226 	beq	r3,zero,100d538 <_strtoul_r+0x88>
 100d630:	00800c04 	movi	r2,48
 100d634:	80802326 	beq	r16,r2,100d6c4 <_strtoul_r+0x214>
 100d638:	04800284 	movi	r18,10
 100d63c:	902b883a 	mov	r21,r18
 100d640:	04c666b4 	movhi	r19,6554
 100d644:	9ce66644 	addi	r19,r19,-26215
 100d648:	05800144 	movi	r22,5
 100d64c:	003fc306 	br	100d55c <_strtoul_r+0xac>
 100d650:	b43fcd0e 	bge	r22,r16,100d588 <_strtoul_r+0xd8>
 100d654:	01bfffc4 	movi	r6,-1
 100d658:	003fcf06 	br	100d598 <_strtoul_r+0xe8>
 100d65c:	008015c4 	movi	r2,87
 100d660:	80a1c83a 	sub	r16,r16,r2
 100d664:	003fd906 	br	100d5cc <_strtoul_r+0x11c>
 100d668:	8dffffc4 	addi	r23,r17,-1
 100d66c:	003fdf06 	br	100d5ec <_strtoul_r+0x13c>
 100d670:	8c000007 	ldb	r16,0(r17)
 100d674:	8c400044 	addi	r17,r17,1
 100d678:	003faa06 	br	100d524 <_strtoul_r+0x74>
 100d67c:	8c000007 	ldb	r16,0(r17)
 100d680:	00800044 	movi	r2,1
 100d684:	8c400044 	addi	r17,r17,1
 100d688:	d8800015 	stw	r2,0(sp)
 100d68c:	003fa606 	br	100d528 <_strtoul_r+0x78>
 100d690:	89000007 	ldb	r4,0(r17)
 100d694:	00801e04 	movi	r2,120
 100d698:	20800226 	beq	r4,r2,100d6a4 <_strtoul_r+0x1f4>
 100d69c:	00801604 	movi	r2,88
 100d6a0:	20bfe21e 	bne	r4,r2,100d62c <_strtoul_r+0x17c>
 100d6a4:	8c000047 	ldb	r16,1(r17)
 100d6a8:	04800404 	movi	r18,16
 100d6ac:	8c400084 	addi	r17,r17,2
 100d6b0:	902b883a 	mov	r21,r18
 100d6b4:	04c40034 	movhi	r19,4096
 100d6b8:	9cffffc4 	addi	r19,r19,-1
 100d6bc:	058003c4 	movi	r22,15
 100d6c0:	003fa606 	br	100d55c <_strtoul_r+0xac>
 100d6c4:	04800204 	movi	r18,8
 100d6c8:	902b883a 	mov	r21,r18
 100d6cc:	04c80034 	movhi	r19,8192
 100d6d0:	9cffffc4 	addi	r19,r19,-1
 100d6d4:	058001c4 	movi	r22,7
 100d6d8:	003fa006 	br	100d55c <_strtoul_r+0xac>
 100d6dc:	d8c00017 	ldw	r3,0(sp)
 100d6e0:	1805003a 	cmpeq	r2,r3,zero
 100d6e4:	103fbf1e 	bne	r2,zero,100d5e4 <_strtoul_r+0x134>
 100d6e8:	0109c83a 	sub	r4,zero,r4
 100d6ec:	003fbd06 	br	100d5e4 <_strtoul_r+0x134>

0100d6f0 <strtoul>:
 100d6f0:	008040b4 	movhi	r2,258
 100d6f4:	10ba3e04 	addi	r2,r2,-5896
 100d6f8:	2013883a 	mov	r9,r4
 100d6fc:	11000017 	ldw	r4,0(r2)
 100d700:	2805883a 	mov	r2,r5
 100d704:	300f883a 	mov	r7,r6
 100d708:	480b883a 	mov	r5,r9
 100d70c:	100d883a 	mov	r6,r2
 100d710:	100d4b01 	jmpi	100d4b0 <_strtoul_r>

0100d714 <_strtoull_r>:
 100d714:	defff104 	addi	sp,sp,-60
 100d718:	008040b4 	movhi	r2,258
 100d71c:	10ba3d04 	addi	r2,r2,-5900
 100d720:	df000d15 	stw	fp,52(sp)
 100d724:	17000017 	ldw	fp,0(r2)
 100d728:	ddc00c15 	stw	r23,48(sp)
 100d72c:	dcc00815 	stw	r19,32(sp)
 100d730:	dfc00e15 	stw	ra,56(sp)
 100d734:	dd800b15 	stw	r22,44(sp)
 100d738:	dd400a15 	stw	r21,40(sp)
 100d73c:	dd000915 	stw	r20,36(sp)
 100d740:	dc800715 	stw	r18,28(sp)
 100d744:	dc400615 	stw	r17,24(sp)
 100d748:	dc000515 	stw	r16,20(sp)
 100d74c:	d9400215 	stw	r5,8(sp)
 100d750:	d9000115 	stw	r4,4(sp)
 100d754:	d9800315 	stw	r6,12(sp)
 100d758:	382f883a 	mov	r23,r7
 100d75c:	2827883a 	mov	r19,r5
 100d760:	9d000007 	ldb	r20,0(r19)
 100d764:	9cc00044 	addi	r19,r19,1
 100d768:	e507883a 	add	r3,fp,r20
 100d76c:	18800003 	ldbu	r2,0(r3)
 100d770:	1080020c 	andi	r2,r2,8
 100d774:	103ffa1e 	bne	r2,zero,100d760 <_strtoull_r+0x4c>
 100d778:	00800b44 	movi	r2,45
 100d77c:	a0807a26 	beq	r20,r2,100d968 <_strtoull_r+0x254>
 100d780:	00800ac4 	movi	r2,43
 100d784:	a0807526 	beq	r20,r2,100d95c <_strtoull_r+0x248>
 100d788:	d8000015 	stw	zero,0(sp)
 100d78c:	b807003a 	cmpeq	r3,r23,zero
 100d790:	18005a1e 	bne	r3,zero,100d8fc <_strtoull_r+0x1e8>
 100d794:	00800404 	movi	r2,16
 100d798:	b8805826 	beq	r23,r2,100d8fc <_strtoull_r+0x1e8>
 100d79c:	b82dd7fa 	srai	r22,r23,31
 100d7a0:	043fffc4 	movi	r16,-1
 100d7a4:	8009883a 	mov	r4,r16
 100d7a8:	800b883a 	mov	r5,r16
 100d7ac:	b80d883a 	mov	r6,r23
 100d7b0:	b00f883a 	mov	r7,r22
 100d7b4:	100f0200 	call	100f020 <__udivdi3>
 100d7b8:	8009883a 	mov	r4,r16
 100d7bc:	800b883a 	mov	r5,r16
 100d7c0:	b80d883a 	mov	r6,r23
 100d7c4:	b00f883a 	mov	r7,r22
 100d7c8:	1023883a 	mov	r17,r2
 100d7cc:	1825883a 	mov	r18,r3
 100d7d0:	100f68c0 	call	100f68c <__umoddi3>
 100d7d4:	b82b883a 	mov	r21,r23
 100d7d8:	1019883a 	mov	r12,r2
 100d7dc:	e505883a 	add	r2,fp,r20
 100d7e0:	11000003 	ldbu	r4,0(r2)
 100d7e4:	0015883a 	mov	r10,zero
 100d7e8:	0017883a 	mov	r11,zero
 100d7ec:	20c0010c 	andi	r3,r4,4
 100d7f0:	000d883a 	mov	r6,zero
 100d7f4:	18001c26 	beq	r3,zero,100d868 <_strtoull_r+0x154>
 100d7f8:	a43ff404 	addi	r16,r20,-48
 100d7fc:	85c0220e 	bge	r16,r23,100d888 <_strtoull_r+0x174>
 100d800:	30003c16 	blt	r6,zero,100d8f4 <_strtoull_r+0x1e0>
 100d804:	92c03b36 	bltu	r18,r11,100d8f4 <_strtoull_r+0x1e0>
 100d808:	5c803926 	beq	r11,r18,100d8f0 <_strtoull_r+0x1dc>
 100d80c:	54404c26 	beq	r10,r17,100d940 <_strtoull_r+0x22c>
 100d810:	580b883a 	mov	r5,r11
 100d814:	5009883a 	mov	r4,r10
 100d818:	a80d883a 	mov	r6,r21
 100d81c:	b00f883a 	mov	r7,r22
 100d820:	db000415 	stw	r12,16(sp)
 100d824:	100ee580 	call	100ee58 <__muldi3>
 100d828:	8013d7fa 	srai	r9,r16,31
 100d82c:	100d883a 	mov	r6,r2
 100d830:	1405883a 	add	r2,r2,r16
 100d834:	118d803a 	cmpltu	r6,r2,r6
 100d838:	1a47883a 	add	r3,r3,r9
 100d83c:	db000417 	ldw	r12,16(sp)
 100d840:	30cd883a 	add	r6,r6,r3
 100d844:	3017883a 	mov	r11,r6
 100d848:	1015883a 	mov	r10,r2
 100d84c:	01800044 	movi	r6,1
 100d850:	9d000007 	ldb	r20,0(r19)
 100d854:	9cc00044 	addi	r19,r19,1
 100d858:	e505883a 	add	r2,fp,r20
 100d85c:	11000003 	ldbu	r4,0(r2)
 100d860:	20c0010c 	andi	r3,r4,4
 100d864:	183fe41e 	bne	r3,zero,100d7f8 <_strtoull_r+0xe4>
 100d868:	208000cc 	andi	r2,r4,3
 100d86c:	10000626 	beq	r2,zero,100d888 <_strtoull_r+0x174>
 100d870:	2080004c 	andi	r2,r4,1
 100d874:	1005003a 	cmpeq	r2,r2,zero
 100d878:	10002e1e 	bne	r2,zero,100d934 <_strtoull_r+0x220>
 100d87c:	02000dc4 	movi	r8,55
 100d880:	a221c83a 	sub	r16,r20,r8
 100d884:	85ffde16 	blt	r16,r23,100d800 <_strtoull_r+0xec>
 100d888:	3000530e 	bge	r6,zero,100d9d8 <_strtoull_r+0x2c4>
 100d88c:	d8c00117 	ldw	r3,4(sp)
 100d890:	02bfffc4 	movi	r10,-1
 100d894:	00800884 	movi	r2,34
 100d898:	5017883a 	mov	r11,r10
 100d89c:	18800015 	stw	r2,0(r3)
 100d8a0:	d8800317 	ldw	r2,12(sp)
 100d8a4:	10000426 	beq	r2,zero,100d8b8 <_strtoull_r+0x1a4>
 100d8a8:	3000291e 	bne	r6,zero,100d950 <_strtoull_r+0x23c>
 100d8ac:	d8800217 	ldw	r2,8(sp)
 100d8b0:	d8c00317 	ldw	r3,12(sp)
 100d8b4:	18800015 	stw	r2,0(r3)
 100d8b8:	5005883a 	mov	r2,r10
 100d8bc:	5807883a 	mov	r3,r11
 100d8c0:	dfc00e17 	ldw	ra,56(sp)
 100d8c4:	df000d17 	ldw	fp,52(sp)
 100d8c8:	ddc00c17 	ldw	r23,48(sp)
 100d8cc:	dd800b17 	ldw	r22,44(sp)
 100d8d0:	dd400a17 	ldw	r21,40(sp)
 100d8d4:	dd000917 	ldw	r20,36(sp)
 100d8d8:	dcc00817 	ldw	r19,32(sp)
 100d8dc:	dc800717 	ldw	r18,28(sp)
 100d8e0:	dc400617 	ldw	r17,24(sp)
 100d8e4:	dc000517 	ldw	r16,20(sp)
 100d8e8:	dec00f04 	addi	sp,sp,60
 100d8ec:	f800283a 	ret
 100d8f0:	8abfc62e 	bgeu	r17,r10,100d80c <_strtoull_r+0xf8>
 100d8f4:	01bfffc4 	movi	r6,-1
 100d8f8:	003fd506 	br	100d850 <_strtoull_r+0x13c>
 100d8fc:	00800c04 	movi	r2,48
 100d900:	a0801e26 	beq	r20,r2,100d97c <_strtoull_r+0x268>
 100d904:	183fa526 	beq	r3,zero,100d79c <_strtoull_r+0x88>
 100d908:	00800c04 	movi	r2,48
 100d90c:	a0802a26 	beq	r20,r2,100d9b8 <_strtoull_r+0x2a4>
 100d910:	05c00284 	movi	r23,10
 100d914:	b82b883a 	mov	r21,r23
 100d918:	046666b4 	movhi	r17,39322
 100d91c:	8c666644 	addi	r17,r17,-26215
 100d920:	002d883a 	mov	r22,zero
 100d924:	048666b4 	movhi	r18,6554
 100d928:	94a66644 	addi	r18,r18,-26215
 100d92c:	03000144 	movi	r12,5
 100d930:	003faa06 	br	100d7dc <_strtoull_r+0xc8>
 100d934:	020015c4 	movi	r8,87
 100d938:	a221c83a 	sub	r16,r20,r8
 100d93c:	003fd106 	br	100d884 <_strtoull_r+0x170>
 100d940:	5cbfb31e 	bne	r11,r18,100d810 <_strtoull_r+0xfc>
 100d944:	643fb20e 	bge	r12,r16,100d810 <_strtoull_r+0xfc>
 100d948:	01bfffc4 	movi	r6,-1
 100d94c:	003fc006 	br	100d850 <_strtoull_r+0x13c>
 100d950:	9cffffc4 	addi	r19,r19,-1
 100d954:	dcc00215 	stw	r19,8(sp)
 100d958:	003fd406 	br	100d8ac <_strtoull_r+0x198>
 100d95c:	9d000007 	ldb	r20,0(r19)
 100d960:	9cc00044 	addi	r19,r19,1
 100d964:	003f8806 	br	100d788 <_strtoull_r+0x74>
 100d968:	9d000007 	ldb	r20,0(r19)
 100d96c:	00800044 	movi	r2,1
 100d970:	9cc00044 	addi	r19,r19,1
 100d974:	d8800015 	stw	r2,0(sp)
 100d978:	003f8406 	br	100d78c <_strtoull_r+0x78>
 100d97c:	99000007 	ldb	r4,0(r19)
 100d980:	00801e04 	movi	r2,120
 100d984:	20800226 	beq	r4,r2,100d990 <_strtoull_r+0x27c>
 100d988:	00801604 	movi	r2,88
 100d98c:	20bfdd1e 	bne	r4,r2,100d904 <_strtoull_r+0x1f0>
 100d990:	9d000047 	ldb	r20,1(r19)
 100d994:	05c00404 	movi	r23,16
 100d998:	b82b883a 	mov	r21,r23
 100d99c:	047fffc4 	movi	r17,-1
 100d9a0:	9cc00084 	addi	r19,r19,2
 100d9a4:	002d883a 	mov	r22,zero
 100d9a8:	04840034 	movhi	r18,4096
 100d9ac:	94bfffc4 	addi	r18,r18,-1
 100d9b0:	030003c4 	movi	r12,15
 100d9b4:	003f8906 	br	100d7dc <_strtoull_r+0xc8>
 100d9b8:	05c00204 	movi	r23,8
 100d9bc:	b82b883a 	mov	r21,r23
 100d9c0:	047fffc4 	movi	r17,-1
 100d9c4:	002d883a 	mov	r22,zero
 100d9c8:	04880034 	movhi	r18,8192
 100d9cc:	94bfffc4 	addi	r18,r18,-1
 100d9d0:	030001c4 	movi	r12,7
 100d9d4:	003f8106 	br	100d7dc <_strtoull_r+0xc8>
 100d9d8:	d8c00017 	ldw	r3,0(sp)
 100d9dc:	1805003a 	cmpeq	r2,r3,zero
 100d9e0:	103faf1e 	bne	r2,zero,100d8a0 <_strtoull_r+0x18c>
 100d9e4:	0009883a 	mov	r4,zero
 100d9e8:	2285c83a 	sub	r2,r4,r10
 100d9ec:	02c7c83a 	sub	r3,zero,r11
 100d9f0:	2089803a 	cmpltu	r4,r4,r2
 100d9f4:	1909c83a 	sub	r4,r3,r4
 100d9f8:	1015883a 	mov	r10,r2
 100d9fc:	2017883a 	mov	r11,r4
 100da00:	003fa706 	br	100d8a0 <_strtoull_r+0x18c>

0100da04 <__submore>:
 100da04:	defffa04 	addi	sp,sp,-24
 100da08:	28c00c17 	ldw	r3,48(r5)
 100da0c:	dc800215 	stw	r18,8(sp)
 100da10:	2825883a 	mov	r18,r5
 100da14:	dc000015 	stw	r16,0(sp)
 100da18:	90801004 	addi	r2,r18,64
 100da1c:	04010004 	movi	r16,1024
 100da20:	dfc00515 	stw	ra,20(sp)
 100da24:	dd000415 	stw	r20,16(sp)
 100da28:	dcc00315 	stw	r19,12(sp)
 100da2c:	dc400115 	stw	r17,4(sp)
 100da30:	800b883a 	mov	r5,r16
 100da34:	18801b26 	beq	r3,r2,100daa4 <__submore+0xa0>
 100da38:	94400d17 	ldw	r17,52(r18)
 100da3c:	180b883a 	mov	r5,r3
 100da40:	8c69883a 	add	r20,r17,r17
 100da44:	a00d883a 	mov	r6,r20
 100da48:	100abe80 	call	100abe8 <_realloc_r>
 100da4c:	1467883a 	add	r19,r2,r17
 100da50:	1021883a 	mov	r16,r2
 100da54:	880d883a 	mov	r6,r17
 100da58:	9809883a 	mov	r4,r19
 100da5c:	100b883a 	mov	r5,r2
 100da60:	10000e26 	beq	r2,zero,100da9c <__submore+0x98>
 100da64:	10097580 	call	1009758 <memcpy>
 100da68:	000d883a 	mov	r6,zero
 100da6c:	95000d15 	stw	r20,52(r18)
 100da70:	94c00015 	stw	r19,0(r18)
 100da74:	94000c15 	stw	r16,48(r18)
 100da78:	3005883a 	mov	r2,r6
 100da7c:	dfc00517 	ldw	ra,20(sp)
 100da80:	dd000417 	ldw	r20,16(sp)
 100da84:	dcc00317 	ldw	r19,12(sp)
 100da88:	dc800217 	ldw	r18,8(sp)
 100da8c:	dc400117 	ldw	r17,4(sp)
 100da90:	dc000017 	ldw	r16,0(sp)
 100da94:	dec00604 	addi	sp,sp,24
 100da98:	f800283a 	ret
 100da9c:	01bfffc4 	movi	r6,-1
 100daa0:	003ff506 	br	100da78 <__submore+0x74>
 100daa4:	10026a40 	call	10026a4 <_malloc_r>
 100daa8:	1009883a 	mov	r4,r2
 100daac:	1140ff44 	addi	r5,r2,1021
 100dab0:	000d883a 	mov	r6,zero
 100dab4:	103ff926 	beq	r2,zero,100da9c <__submore+0x98>
 100dab8:	90801083 	ldbu	r2,66(r18)
 100dabc:	94000d15 	stw	r16,52(r18)
 100dac0:	91000c15 	stw	r4,48(r18)
 100dac4:	28800085 	stb	r2,2(r5)
 100dac8:	90c01043 	ldbu	r3,65(r18)
 100dacc:	28c00045 	stb	r3,1(r5)
 100dad0:	90801003 	ldbu	r2,64(r18)
 100dad4:	2080ff45 	stb	r2,1021(r4)
 100dad8:	91400015 	stw	r5,0(r18)
 100dadc:	003fe606 	br	100da78 <__submore+0x74>

0100dae0 <_ungetc_r>:
 100dae0:	defffc04 	addi	sp,sp,-16
 100dae4:	00bfffc4 	movi	r2,-1
 100dae8:	dc400215 	stw	r17,8(sp)
 100daec:	dc000115 	stw	r16,4(sp)
 100daf0:	dfc00315 	stw	ra,12(sp)
 100daf4:	2821883a 	mov	r16,r5
 100daf8:	2023883a 	mov	r17,r4
 100dafc:	28801826 	beq	r5,r2,100db60 <_ungetc_r+0x80>
 100db00:	20000226 	beq	r4,zero,100db0c <_ungetc_r+0x2c>
 100db04:	20800e17 	ldw	r2,56(r4)
 100db08:	10001b26 	beq	r2,zero,100db78 <_ungetc_r+0x98>
 100db0c:	3100030b 	ldhu	r4,12(r6)
 100db10:	00bff7c4 	movi	r2,-33
 100db14:	2084703a 	and	r2,r4,r2
 100db18:	117fffcc 	andi	r5,r2,65535
 100db1c:	28c0010c 	andi	r3,r5,4
 100db20:	1009883a 	mov	r4,r2
 100db24:	3080030d 	sth	r2,12(r6)
 100db28:	18003526 	beq	r3,zero,100dc00 <_ungetc_r+0x120>
 100db2c:	30800c17 	ldw	r2,48(r6)
 100db30:	84003fcc 	andi	r16,r16,255
 100db34:	10001426 	beq	r2,zero,100db88 <_ungetc_r+0xa8>
 100db38:	30c00117 	ldw	r3,4(r6)
 100db3c:	30800d17 	ldw	r2,52(r6)
 100db40:	1880380e 	bge	r3,r2,100dc24 <_ungetc_r+0x144>
 100db44:	30c00017 	ldw	r3,0(r6)
 100db48:	19ffffc4 	addi	r7,r3,-1
 100db4c:	31c00015 	stw	r7,0(r6)
 100db50:	1c3fffc5 	stb	r16,-1(r3)
 100db54:	30800117 	ldw	r2,4(r6)
 100db58:	10800044 	addi	r2,r2,1
 100db5c:	30800115 	stw	r2,4(r6)
 100db60:	8005883a 	mov	r2,r16
 100db64:	dfc00317 	ldw	ra,12(sp)
 100db68:	dc400217 	ldw	r17,8(sp)
 100db6c:	dc000117 	ldw	r16,4(sp)
 100db70:	dec00404 	addi	sp,sp,16
 100db74:	f800283a 	ret
 100db78:	d9800015 	stw	r6,0(sp)
 100db7c:	10083bc0 	call	10083bc <__sinit>
 100db80:	d9800017 	ldw	r6,0(sp)
 100db84:	003fe106 	br	100db0c <_ungetc_r+0x2c>
 100db88:	30800417 	ldw	r2,16(r6)
 100db8c:	10002326 	beq	r2,zero,100dc1c <_ungetc_r+0x13c>
 100db90:	31c00017 	ldw	r7,0(r6)
 100db94:	11c0022e 	bgeu	r2,r7,100dba0 <_ungetc_r+0xc0>
 100db98:	38bfffc3 	ldbu	r2,-1(r7)
 100db9c:	80801226 	beq	r16,r2,100dbe8 <_ungetc_r+0x108>
 100dba0:	30c00117 	ldw	r3,4(r6)
 100dba4:	00800044 	movi	r2,1
 100dba8:	30800115 	stw	r2,4(r6)
 100dbac:	008000c4 	movi	r2,3
 100dbb0:	31001004 	addi	r4,r6,64
 100dbb4:	31401084 	addi	r5,r6,66
 100dbb8:	30800d15 	stw	r2,52(r6)
 100dbbc:	8005883a 	mov	r2,r16
 100dbc0:	30c00f15 	stw	r3,60(r6)
 100dbc4:	31c00e15 	stw	r7,56(r6)
 100dbc8:	31000c15 	stw	r4,48(r6)
 100dbcc:	31400015 	stw	r5,0(r6)
 100dbd0:	34001085 	stb	r16,66(r6)
 100dbd4:	dfc00317 	ldw	ra,12(sp)
 100dbd8:	dc400217 	ldw	r17,8(sp)
 100dbdc:	dc000117 	ldw	r16,4(sp)
 100dbe0:	dec00404 	addi	sp,sp,16
 100dbe4:	f800283a 	ret
 100dbe8:	30800117 	ldw	r2,4(r6)
 100dbec:	39ffffc4 	addi	r7,r7,-1
 100dbf0:	31c00015 	stw	r7,0(r6)
 100dbf4:	10800044 	addi	r2,r2,1
 100dbf8:	30800115 	stw	r2,4(r6)
 100dbfc:	003fd806 	br	100db60 <_ungetc_r+0x80>
 100dc00:	2880040c 	andi	r2,r5,16
 100dc04:	10000d26 	beq	r2,zero,100dc3c <_ungetc_r+0x15c>
 100dc08:	2880020c 	andi	r2,r5,8
 100dc0c:	10000d1e 	bne	r2,zero,100dc44 <_ungetc_r+0x164>
 100dc10:	20800114 	ori	r2,r4,4
 100dc14:	3080030d 	sth	r2,12(r6)
 100dc18:	003fc406 	br	100db2c <_ungetc_r+0x4c>
 100dc1c:	31c00017 	ldw	r7,0(r6)
 100dc20:	003fdf06 	br	100dba0 <_ungetc_r+0xc0>
 100dc24:	300b883a 	mov	r5,r6
 100dc28:	8809883a 	mov	r4,r17
 100dc2c:	d9800015 	stw	r6,0(sp)
 100dc30:	100da040 	call	100da04 <__submore>
 100dc34:	d9800017 	ldw	r6,0(sp)
 100dc38:	103fc226 	beq	r2,zero,100db44 <_ungetc_r+0x64>
 100dc3c:	043fffc4 	movi	r16,-1
 100dc40:	003fc706 	br	100db60 <_ungetc_r+0x80>
 100dc44:	300b883a 	mov	r5,r6
 100dc48:	8809883a 	mov	r4,r17
 100dc4c:	d9800015 	stw	r6,0(sp)
 100dc50:	10081240 	call	1008124 <_fflush_r>
 100dc54:	d9800017 	ldw	r6,0(sp)
 100dc58:	103ff81e 	bne	r2,zero,100dc3c <_ungetc_r+0x15c>
 100dc5c:	3100030b 	ldhu	r4,12(r6)
 100dc60:	00bffdc4 	movi	r2,-9
 100dc64:	30000215 	stw	zero,8(r6)
 100dc68:	2084703a 	and	r2,r4,r2
 100dc6c:	1009883a 	mov	r4,r2
 100dc70:	3080030d 	sth	r2,12(r6)
 100dc74:	30000615 	stw	zero,24(r6)
 100dc78:	003fe506 	br	100dc10 <_ungetc_r+0x130>

0100dc7c <ungetc>:
 100dc7c:	018040b4 	movhi	r6,258
 100dc80:	31ba3e04 	addi	r6,r6,-5896
 100dc84:	2007883a 	mov	r3,r4
 100dc88:	31000017 	ldw	r4,0(r6)
 100dc8c:	280d883a 	mov	r6,r5
 100dc90:	180b883a 	mov	r5,r3
 100dc94:	100dae01 	jmpi	100dae0 <_ungetc_r>

0100dc98 <__swbuf_r>:
 100dc98:	defffc04 	addi	sp,sp,-16
 100dc9c:	dc400215 	stw	r17,8(sp)
 100dca0:	dc000115 	stw	r16,4(sp)
 100dca4:	dfc00315 	stw	ra,12(sp)
 100dca8:	2023883a 	mov	r17,r4
 100dcac:	2821883a 	mov	r16,r5
 100dcb0:	20000226 	beq	r4,zero,100dcbc <__swbuf_r+0x24>
 100dcb4:	20800e17 	ldw	r2,56(r4)
 100dcb8:	10002f26 	beq	r2,zero,100dd78 <__swbuf_r+0xe0>
 100dcbc:	3080030b 	ldhu	r2,12(r6)
 100dcc0:	30c00617 	ldw	r3,24(r6)
 100dcc4:	1080020c 	andi	r2,r2,8
 100dcc8:	30c00215 	stw	r3,8(r6)
 100dccc:	10002226 	beq	r2,zero,100dd58 <__swbuf_r+0xc0>
 100dcd0:	30c00417 	ldw	r3,16(r6)
 100dcd4:	18002026 	beq	r3,zero,100dd58 <__swbuf_r+0xc0>
 100dcd8:	31000017 	ldw	r4,0(r6)
 100dcdc:	30800517 	ldw	r2,20(r6)
 100dce0:	20c7c83a 	sub	r3,r4,r3
 100dce4:	18802f0e 	bge	r3,r2,100dda4 <__swbuf_r+0x10c>
 100dce8:	19400044 	addi	r5,r3,1
 100dcec:	30800217 	ldw	r2,8(r6)
 100dcf0:	84003fcc 	andi	r16,r16,255
 100dcf4:	20c00044 	addi	r3,r4,1
 100dcf8:	10bfffc4 	addi	r2,r2,-1
 100dcfc:	30800215 	stw	r2,8(r6)
 100dd00:	24000005 	stb	r16,0(r4)
 100dd04:	30800517 	ldw	r2,20(r6)
 100dd08:	30c00015 	stw	r3,0(r6)
 100dd0c:	11400c26 	beq	r2,r5,100dd40 <__swbuf_r+0xa8>
 100dd10:	3080030b 	ldhu	r2,12(r6)
 100dd14:	1080004c 	andi	r2,r2,1
 100dd18:	1005003a 	cmpeq	r2,r2,zero
 100dd1c:	10000626 	beq	r2,zero,100dd38 <__swbuf_r+0xa0>
 100dd20:	8005883a 	mov	r2,r16
 100dd24:	dfc00317 	ldw	ra,12(sp)
 100dd28:	dc400217 	ldw	r17,8(sp)
 100dd2c:	dc000117 	ldw	r16,4(sp)
 100dd30:	dec00404 	addi	sp,sp,16
 100dd34:	f800283a 	ret
 100dd38:	00800284 	movi	r2,10
 100dd3c:	80bff81e 	bne	r16,r2,100dd20 <__swbuf_r+0x88>
 100dd40:	8809883a 	mov	r4,r17
 100dd44:	300b883a 	mov	r5,r6
 100dd48:	10081240 	call	1008124 <_fflush_r>
 100dd4c:	103ff426 	beq	r2,zero,100dd20 <__swbuf_r+0x88>
 100dd50:	043fffc4 	movi	r16,-1
 100dd54:	003ff206 	br	100dd20 <__swbuf_r+0x88>
 100dd58:	300b883a 	mov	r5,r6
 100dd5c:	8809883a 	mov	r4,r17
 100dd60:	d9800015 	stw	r6,0(sp)
 100dd64:	10067f00 	call	10067f0 <__swsetup_r>
 100dd68:	d9800017 	ldw	r6,0(sp)
 100dd6c:	1000061e 	bne	r2,zero,100dd88 <__swbuf_r+0xf0>
 100dd70:	30c00417 	ldw	r3,16(r6)
 100dd74:	003fd806 	br	100dcd8 <__swbuf_r+0x40>
 100dd78:	d9800015 	stw	r6,0(sp)
 100dd7c:	10083bc0 	call	10083bc <__sinit>
 100dd80:	d9800017 	ldw	r6,0(sp)
 100dd84:	003fcd06 	br	100dcbc <__swbuf_r+0x24>
 100dd88:	3080030b 	ldhu	r2,12(r6)
 100dd8c:	00c00244 	movi	r3,9
 100dd90:	043fffc4 	movi	r16,-1
 100dd94:	10801014 	ori	r2,r2,64
 100dd98:	3080030d 	sth	r2,12(r6)
 100dd9c:	88c00015 	stw	r3,0(r17)
 100dda0:	003fdf06 	br	100dd20 <__swbuf_r+0x88>
 100dda4:	300b883a 	mov	r5,r6
 100dda8:	8809883a 	mov	r4,r17
 100ddac:	d9800015 	stw	r6,0(sp)
 100ddb0:	10081240 	call	1008124 <_fflush_r>
 100ddb4:	d9800017 	ldw	r6,0(sp)
 100ddb8:	103fe51e 	bne	r2,zero,100dd50 <__swbuf_r+0xb8>
 100ddbc:	31000017 	ldw	r4,0(r6)
 100ddc0:	01400044 	movi	r5,1
 100ddc4:	003fc906 	br	100dcec <__swbuf_r+0x54>

0100ddc8 <__swbuf>:
 100ddc8:	018040b4 	movhi	r6,258
 100ddcc:	31ba3e04 	addi	r6,r6,-5896
 100ddd0:	2007883a 	mov	r3,r4
 100ddd4:	31000017 	ldw	r4,0(r6)
 100ddd8:	280d883a 	mov	r6,r5
 100dddc:	180b883a 	mov	r5,r3
 100dde0:	100dc981 	jmpi	100dc98 <__swbuf_r>

0100dde4 <_write_r>:
 100dde4:	defffd04 	addi	sp,sp,-12
 100dde8:	dc000015 	stw	r16,0(sp)
 100ddec:	040040b4 	movhi	r16,258
 100ddf0:	84016704 	addi	r16,r16,1436
 100ddf4:	dc400115 	stw	r17,4(sp)
 100ddf8:	80000015 	stw	zero,0(r16)
 100ddfc:	2023883a 	mov	r17,r4
 100de00:	2809883a 	mov	r4,r5
 100de04:	300b883a 	mov	r5,r6
 100de08:	380d883a 	mov	r6,r7
 100de0c:	dfc00215 	stw	ra,8(sp)
 100de10:	10128280 	call	1012828 <write>
 100de14:	1007883a 	mov	r3,r2
 100de18:	00bfffc4 	movi	r2,-1
 100de1c:	18800626 	beq	r3,r2,100de38 <_write_r+0x54>
 100de20:	1805883a 	mov	r2,r3
 100de24:	dfc00217 	ldw	ra,8(sp)
 100de28:	dc400117 	ldw	r17,4(sp)
 100de2c:	dc000017 	ldw	r16,0(sp)
 100de30:	dec00304 	addi	sp,sp,12
 100de34:	f800283a 	ret
 100de38:	80800017 	ldw	r2,0(r16)
 100de3c:	103ff826 	beq	r2,zero,100de20 <_write_r+0x3c>
 100de40:	88800015 	stw	r2,0(r17)
 100de44:	1805883a 	mov	r2,r3
 100de48:	dfc00217 	ldw	ra,8(sp)
 100de4c:	dc400117 	ldw	r17,4(sp)
 100de50:	dc000017 	ldw	r16,0(sp)
 100de54:	dec00304 	addi	sp,sp,12
 100de58:	f800283a 	ret

0100de5c <_calloc_r>:
 100de5c:	defffe04 	addi	sp,sp,-8
 100de60:	dc400015 	stw	r17,0(sp)
 100de64:	2023883a 	mov	r17,r4
 100de68:	2809883a 	mov	r4,r5
 100de6c:	300b883a 	mov	r5,r6
 100de70:	dfc00115 	stw	ra,4(sp)
 100de74:	10026440 	call	1002644 <__mulsi3>
 100de78:	100b883a 	mov	r5,r2
 100de7c:	8809883a 	mov	r4,r17
 100de80:	10026a40 	call	10026a4 <_malloc_r>
 100de84:	1023883a 	mov	r17,r2
 100de88:	01c00904 	movi	r7,36
 100de8c:	10000d26 	beq	r2,zero,100dec4 <_calloc_r+0x68>
 100de90:	10ffff17 	ldw	r3,-4(r2)
 100de94:	1009883a 	mov	r4,r2
 100de98:	00bfff04 	movi	r2,-4
 100de9c:	1886703a 	and	r3,r3,r2
 100dea0:	1887883a 	add	r3,r3,r2
 100dea4:	180d883a 	mov	r6,r3
 100dea8:	000b883a 	mov	r5,zero
 100deac:	38c01736 	bltu	r7,r3,100df0c <_calloc_r+0xb0>
 100deb0:	008004c4 	movi	r2,19
 100deb4:	10c00836 	bltu	r2,r3,100ded8 <_calloc_r+0x7c>
 100deb8:	20000215 	stw	zero,8(r4)
 100debc:	20000015 	stw	zero,0(r4)
 100dec0:	20000115 	stw	zero,4(r4)
 100dec4:	8805883a 	mov	r2,r17
 100dec8:	dfc00117 	ldw	ra,4(sp)
 100decc:	dc400017 	ldw	r17,0(sp)
 100ded0:	dec00204 	addi	sp,sp,8
 100ded4:	f800283a 	ret
 100ded8:	008006c4 	movi	r2,27
 100dedc:	88000015 	stw	zero,0(r17)
 100dee0:	88000115 	stw	zero,4(r17)
 100dee4:	89000204 	addi	r4,r17,8
 100dee8:	10fff32e 	bgeu	r2,r3,100deb8 <_calloc_r+0x5c>
 100deec:	88000215 	stw	zero,8(r17)
 100def0:	88000315 	stw	zero,12(r17)
 100def4:	89000404 	addi	r4,r17,16
 100def8:	19ffef1e 	bne	r3,r7,100deb8 <_calloc_r+0x5c>
 100defc:	89000604 	addi	r4,r17,24
 100df00:	88000415 	stw	zero,16(r17)
 100df04:	88000515 	stw	zero,20(r17)
 100df08:	003feb06 	br	100deb8 <_calloc_r+0x5c>
 100df0c:	10098d80 	call	10098d8 <memset>
 100df10:	8805883a 	mov	r2,r17
 100df14:	dfc00117 	ldw	ra,4(sp)
 100df18:	dc400017 	ldw	r17,0(sp)
 100df1c:	dec00204 	addi	sp,sp,8
 100df20:	f800283a 	ret

0100df24 <_close_r>:
 100df24:	defffd04 	addi	sp,sp,-12
 100df28:	dc000015 	stw	r16,0(sp)
 100df2c:	040040b4 	movhi	r16,258
 100df30:	84016704 	addi	r16,r16,1436
 100df34:	dc400115 	stw	r17,4(sp)
 100df38:	80000015 	stw	zero,0(r16)
 100df3c:	2023883a 	mov	r17,r4
 100df40:	2809883a 	mov	r4,r5
 100df44:	dfc00215 	stw	ra,8(sp)
 100df48:	1011a600 	call	1011a60 <close>
 100df4c:	1007883a 	mov	r3,r2
 100df50:	00bfffc4 	movi	r2,-1
 100df54:	18800626 	beq	r3,r2,100df70 <_close_r+0x4c>
 100df58:	1805883a 	mov	r2,r3
 100df5c:	dfc00217 	ldw	ra,8(sp)
 100df60:	dc400117 	ldw	r17,4(sp)
 100df64:	dc000017 	ldw	r16,0(sp)
 100df68:	dec00304 	addi	sp,sp,12
 100df6c:	f800283a 	ret
 100df70:	80800017 	ldw	r2,0(r16)
 100df74:	103ff826 	beq	r2,zero,100df58 <_close_r+0x34>
 100df78:	88800015 	stw	r2,0(r17)
 100df7c:	1805883a 	mov	r2,r3
 100df80:	dfc00217 	ldw	ra,8(sp)
 100df84:	dc400117 	ldw	r17,4(sp)
 100df88:	dc000017 	ldw	r16,0(sp)
 100df8c:	dec00304 	addi	sp,sp,12
 100df90:	f800283a 	ret

0100df94 <_fclose_r>:
 100df94:	defffc04 	addi	sp,sp,-16
 100df98:	dc400115 	stw	r17,4(sp)
 100df9c:	dc000015 	stw	r16,0(sp)
 100dfa0:	dfc00315 	stw	ra,12(sp)
 100dfa4:	dc800215 	stw	r18,8(sp)
 100dfa8:	2821883a 	mov	r16,r5
 100dfac:	2023883a 	mov	r17,r4
 100dfb0:	28002926 	beq	r5,zero,100e058 <_fclose_r+0xc4>
 100dfb4:	10083ac0 	call	10083ac <__sfp_lock_acquire>
 100dfb8:	88000226 	beq	r17,zero,100dfc4 <_fclose_r+0x30>
 100dfbc:	88800e17 	ldw	r2,56(r17)
 100dfc0:	10002d26 	beq	r2,zero,100e078 <_fclose_r+0xe4>
 100dfc4:	8080030f 	ldh	r2,12(r16)
 100dfc8:	10002226 	beq	r2,zero,100e054 <_fclose_r+0xc0>
 100dfcc:	8809883a 	mov	r4,r17
 100dfd0:	800b883a 	mov	r5,r16
 100dfd4:	10081240 	call	1008124 <_fflush_r>
 100dfd8:	1025883a 	mov	r18,r2
 100dfdc:	80800b17 	ldw	r2,44(r16)
 100dfe0:	10000426 	beq	r2,zero,100dff4 <_fclose_r+0x60>
 100dfe4:	81400717 	ldw	r5,28(r16)
 100dfe8:	8809883a 	mov	r4,r17
 100dfec:	103ee83a 	callr	r2
 100dff0:	10002a16 	blt	r2,zero,100e09c <_fclose_r+0x108>
 100dff4:	8080030b 	ldhu	r2,12(r16)
 100dff8:	1080200c 	andi	r2,r2,128
 100dffc:	1000231e 	bne	r2,zero,100e08c <_fclose_r+0xf8>
 100e000:	81400c17 	ldw	r5,48(r16)
 100e004:	28000526 	beq	r5,zero,100e01c <_fclose_r+0x88>
 100e008:	80801004 	addi	r2,r16,64
 100e00c:	28800226 	beq	r5,r2,100e018 <_fclose_r+0x84>
 100e010:	8809883a 	mov	r4,r17
 100e014:	10089c00 	call	10089c0 <_free_r>
 100e018:	80000c15 	stw	zero,48(r16)
 100e01c:	81401117 	ldw	r5,68(r16)
 100e020:	28000326 	beq	r5,zero,100e030 <_fclose_r+0x9c>
 100e024:	8809883a 	mov	r4,r17
 100e028:	10089c00 	call	10089c0 <_free_r>
 100e02c:	80001115 	stw	zero,68(r16)
 100e030:	8000030d 	sth	zero,12(r16)
 100e034:	10083b00 	call	10083b0 <__sfp_lock_release>
 100e038:	9005883a 	mov	r2,r18
 100e03c:	dfc00317 	ldw	ra,12(sp)
 100e040:	dc800217 	ldw	r18,8(sp)
 100e044:	dc400117 	ldw	r17,4(sp)
 100e048:	dc000017 	ldw	r16,0(sp)
 100e04c:	dec00404 	addi	sp,sp,16
 100e050:	f800283a 	ret
 100e054:	10083b00 	call	10083b0 <__sfp_lock_release>
 100e058:	0025883a 	mov	r18,zero
 100e05c:	9005883a 	mov	r2,r18
 100e060:	dfc00317 	ldw	ra,12(sp)
 100e064:	dc800217 	ldw	r18,8(sp)
 100e068:	dc400117 	ldw	r17,4(sp)
 100e06c:	dc000017 	ldw	r16,0(sp)
 100e070:	dec00404 	addi	sp,sp,16
 100e074:	f800283a 	ret
 100e078:	8809883a 	mov	r4,r17
 100e07c:	10083bc0 	call	10083bc <__sinit>
 100e080:	8080030f 	ldh	r2,12(r16)
 100e084:	103fd11e 	bne	r2,zero,100dfcc <_fclose_r+0x38>
 100e088:	003ff206 	br	100e054 <_fclose_r+0xc0>
 100e08c:	81400417 	ldw	r5,16(r16)
 100e090:	8809883a 	mov	r4,r17
 100e094:	10089c00 	call	10089c0 <_free_r>
 100e098:	003fd906 	br	100e000 <_fclose_r+0x6c>
 100e09c:	04bfffc4 	movi	r18,-1
 100e0a0:	003fd406 	br	100dff4 <_fclose_r+0x60>

0100e0a4 <fclose>:
 100e0a4:	008040b4 	movhi	r2,258
 100e0a8:	10ba3e04 	addi	r2,r2,-5896
 100e0ac:	200b883a 	mov	r5,r4
 100e0b0:	11000017 	ldw	r4,0(r2)
 100e0b4:	100df941 	jmpi	100df94 <_fclose_r>

0100e0b8 <_fstat_r>:
 100e0b8:	defffd04 	addi	sp,sp,-12
 100e0bc:	dc000015 	stw	r16,0(sp)
 100e0c0:	040040b4 	movhi	r16,258
 100e0c4:	84016704 	addi	r16,r16,1436
 100e0c8:	dc400115 	stw	r17,4(sp)
 100e0cc:	80000015 	stw	zero,0(r16)
 100e0d0:	2023883a 	mov	r17,r4
 100e0d4:	2809883a 	mov	r4,r5
 100e0d8:	300b883a 	mov	r5,r6
 100e0dc:	dfc00215 	stw	ra,8(sp)
 100e0e0:	1011bec0 	call	1011bec <fstat>
 100e0e4:	1007883a 	mov	r3,r2
 100e0e8:	00bfffc4 	movi	r2,-1
 100e0ec:	18800626 	beq	r3,r2,100e108 <_fstat_r+0x50>
 100e0f0:	1805883a 	mov	r2,r3
 100e0f4:	dfc00217 	ldw	ra,8(sp)
 100e0f8:	dc400117 	ldw	r17,4(sp)
 100e0fc:	dc000017 	ldw	r16,0(sp)
 100e100:	dec00304 	addi	sp,sp,12
 100e104:	f800283a 	ret
 100e108:	80800017 	ldw	r2,0(r16)
 100e10c:	103ff826 	beq	r2,zero,100e0f0 <_fstat_r+0x38>
 100e110:	88800015 	stw	r2,0(r17)
 100e114:	1805883a 	mov	r2,r3
 100e118:	dfc00217 	ldw	ra,8(sp)
 100e11c:	dc400117 	ldw	r17,4(sp)
 100e120:	dc000017 	ldw	r16,0(sp)
 100e124:	dec00304 	addi	sp,sp,12
 100e128:	f800283a 	ret

0100e12c <htinit>:
 100e12c:	28800003 	ldbu	r2,0(r5)
 100e130:	10000626 	beq	r2,zero,100e14c <htinit+0x20>
 100e134:	1105883a 	add	r2,r2,r4
 100e138:	11800005 	stb	r6,0(r2)
 100e13c:	28800043 	ldbu	r2,1(r5)
 100e140:	31800044 	addi	r6,r6,1
 100e144:	29400044 	addi	r5,r5,1
 100e148:	103ffa1e 	bne	r2,zero,100e134 <htinit+0x8>
 100e14c:	f800283a 	ret

0100e150 <__hexdig_init>:
 100e150:	defffd04 	addi	sp,sp,-12
 100e154:	dc400015 	stw	r17,0(sp)
 100e158:	04404434 	movhi	r17,272
 100e15c:	8c459004 	addi	r17,r17,5696
 100e160:	dcc00115 	stw	r19,4(sp)
 100e164:	8809883a 	mov	r4,r17
 100e168:	04c00684 	movi	r19,26
 100e16c:	014040b4 	movhi	r5,258
 100e170:	2972b504 	addi	r5,r5,-13612
 100e174:	01800404 	movi	r6,16
 100e178:	dfc00215 	stw	ra,8(sp)
 100e17c:	100e12c0 	call	100e12c <htinit>
 100e180:	980d883a 	mov	r6,r19
 100e184:	8809883a 	mov	r4,r17
 100e188:	014040b4 	movhi	r5,258
 100e18c:	2972b804 	addi	r5,r5,-13600
 100e190:	100e12c0 	call	100e12c <htinit>
 100e194:	8809883a 	mov	r4,r17
 100e198:	980d883a 	mov	r6,r19
 100e19c:	014040b4 	movhi	r5,258
 100e1a0:	2972ba04 	addi	r5,r5,-13592
 100e1a4:	dfc00217 	ldw	ra,8(sp)
 100e1a8:	dcc00117 	ldw	r19,4(sp)
 100e1ac:	dc400017 	ldw	r17,0(sp)
 100e1b0:	dec00304 	addi	sp,sp,12
 100e1b4:	100e12c1 	jmpi	100e12c <htinit>

0100e1b8 <rshift>:
 100e1b8:	2807d17a 	srai	r3,r5,5
 100e1bc:	20800417 	ldw	r2,16(r4)
 100e1c0:	22400504 	addi	r9,r4,20
 100e1c4:	480f883a 	mov	r7,r9
 100e1c8:	1880190e 	bge	r3,r2,100e230 <rshift+0x78>
 100e1cc:	1085883a 	add	r2,r2,r2
 100e1d0:	18c7883a 	add	r3,r3,r3
 100e1d4:	1085883a 	add	r2,r2,r2
 100e1d8:	18c7883a 	add	r3,r3,r3
 100e1dc:	294007cc 	andi	r5,r5,31
 100e1e0:	4891883a 	add	r8,r9,r2
 100e1e4:	48cd883a 	add	r6,r9,r3
 100e1e8:	28001726 	beq	r5,zero,100e248 <rshift+0x90>
 100e1ec:	30c00017 	ldw	r3,0(r6)
 100e1f0:	00800804 	movi	r2,32
 100e1f4:	31800104 	addi	r6,r6,4
 100e1f8:	1155c83a 	sub	r10,r2,r5
 100e1fc:	1946d83a 	srl	r3,r3,r5
 100e200:	3200092e 	bgeu	r6,r8,100e228 <rshift+0x70>
 100e204:	30800017 	ldw	r2,0(r6)
 100e208:	1284983a 	sll	r2,r2,r10
 100e20c:	10c4b03a 	or	r2,r2,r3
 100e210:	38800015 	stw	r2,0(r7)
 100e214:	30c00017 	ldw	r3,0(r6)
 100e218:	31800104 	addi	r6,r6,4
 100e21c:	39c00104 	addi	r7,r7,4
 100e220:	1946d83a 	srl	r3,r3,r5
 100e224:	323ff736 	bltu	r6,r8,100e204 <rshift+0x4c>
 100e228:	38c00015 	stw	r3,0(r7)
 100e22c:	18000c1e 	bne	r3,zero,100e260 <rshift+0xa8>
 100e230:	3a45c83a 	sub	r2,r7,r9
 100e234:	1005d0ba 	srai	r2,r2,2
 100e238:	20800415 	stw	r2,16(r4)
 100e23c:	1000011e 	bne	r2,zero,100e244 <rshift+0x8c>
 100e240:	20000515 	stw	zero,20(r4)
 100e244:	f800283a 	ret
 100e248:	323ff92e 	bgeu	r6,r8,100e230 <rshift+0x78>
 100e24c:	30800017 	ldw	r2,0(r6)
 100e250:	31800104 	addi	r6,r6,4
 100e254:	38800015 	stw	r2,0(r7)
 100e258:	39c00104 	addi	r7,r7,4
 100e25c:	003ffa06 	br	100e248 <rshift+0x90>
 100e260:	39c00104 	addi	r7,r7,4
 100e264:	003ff206 	br	100e230 <rshift+0x78>

0100e268 <__gethex>:
 100e268:	defff104 	addi	sp,sp,-60
 100e26c:	df000d15 	stw	fp,52(sp)
 100e270:	dcc00815 	stw	r19,32(sp)
 100e274:	dfc00e15 	stw	ra,56(sp)
 100e278:	ddc00c15 	stw	r23,48(sp)
 100e27c:	dd800b15 	stw	r22,44(sp)
 100e280:	dd400a15 	stw	r21,40(sp)
 100e284:	dd000915 	stw	r20,36(sp)
 100e288:	dc800715 	stw	r18,28(sp)
 100e28c:	dc400615 	stw	r17,24(sp)
 100e290:	dc000515 	stw	r16,20(sp)
 100e294:	04c04434 	movhi	r19,272
 100e298:	9cc59004 	addi	r19,r19,5696
 100e29c:	98800c03 	ldbu	r2,48(r19)
 100e2a0:	d9000115 	stw	r4,4(sp)
 100e2a4:	2839883a 	mov	fp,r5
 100e2a8:	d9800215 	stw	r6,8(sp)
 100e2ac:	d9c00315 	stw	r7,12(sp)
 100e2b0:	10007526 	beq	r2,zero,100e488 <__gethex+0x220>
 100e2b4:	e1800017 	ldw	r6,0(fp)
 100e2b8:	00800c04 	movi	r2,48
 100e2bc:	31000083 	ldbu	r4,2(r6)
 100e2c0:	30c00084 	addi	r3,r6,2
 100e2c4:	2080761e 	bne	r4,r2,100e4a0 <__gethex+0x238>
 100e2c8:	200b883a 	mov	r5,r4
 100e2cc:	3007883a 	mov	r3,r6
 100e2d0:	188000c3 	ldbu	r2,3(r3)
 100e2d4:	18c00044 	addi	r3,r3,1
 100e2d8:	1009883a 	mov	r4,r2
 100e2dc:	117ffc26 	beq	r2,r5,100e2d0 <__gethex+0x68>
 100e2e0:	198fc83a 	sub	r7,r3,r6
 100e2e4:	19400084 	addi	r5,r3,2
 100e2e8:	24c5883a 	add	r2,r4,r19
 100e2ec:	10c00003 	ldbu	r3,0(r2)
 100e2f0:	18002e26 	beq	r3,zero,100e3ac <__gethex+0x144>
 100e2f4:	29000003 	ldbu	r4,0(r5)
 100e2f8:	282b883a 	mov	r21,r5
 100e2fc:	000d883a 	mov	r6,zero
 100e300:	002d883a 	mov	r22,zero
 100e304:	21003fcc 	andi	r4,r4,255
 100e308:	24c5883a 	add	r2,r4,r19
 100e30c:	10c00003 	ldbu	r3,0(r2)
 100e310:	18000526 	beq	r3,zero,100e328 <__gethex+0xc0>
 100e314:	29400044 	addi	r5,r5,1
 100e318:	29000003 	ldbu	r4,0(r5)
 100e31c:	24c5883a 	add	r2,r4,r19
 100e320:	10c00003 	ldbu	r3,0(r2)
 100e324:	183ffb1e 	bne	r3,zero,100e314 <__gethex+0xac>
 100e328:	00800b84 	movi	r2,46
 100e32c:	20805f26 	beq	r4,r2,100e4ac <__gethex+0x244>
 100e330:	30008226 	beq	r6,zero,100e53c <__gethex+0x2d4>
 100e334:	2985c83a 	sub	r2,r5,r6
 100e338:	1085883a 	add	r2,r2,r2
 100e33c:	1085883a 	add	r2,r2,r2
 100e340:	0085c83a 	sub	r2,zero,r2
 100e344:	d8800015 	stw	r2,0(sp)
 100e348:	2825883a 	mov	r18,r5
 100e34c:	90c00003 	ldbu	r3,0(r18)
 100e350:	00801404 	movi	r2,80
 100e354:	18801e26 	beq	r3,r2,100e3d0 <__gethex+0x168>
 100e358:	00801c04 	movi	r2,112
 100e35c:	18801c26 	beq	r3,r2,100e3d0 <__gethex+0x168>
 100e360:	9023883a 	mov	r17,r18
 100e364:	b005003a 	cmpeq	r2,r22,zero
 100e368:	e4400015 	stw	r17,0(fp)
 100e36c:	10008d1e 	bne	r2,zero,100e5a4 <__gethex+0x33c>
 100e370:	38004326 	beq	r7,zero,100e480 <__gethex+0x218>
 100e374:	0025883a 	mov	r18,zero
 100e378:	9005883a 	mov	r2,r18
 100e37c:	dfc00e17 	ldw	ra,56(sp)
 100e380:	df000d17 	ldw	fp,52(sp)
 100e384:	ddc00c17 	ldw	r23,48(sp)
 100e388:	dd800b17 	ldw	r22,44(sp)
 100e38c:	dd400a17 	ldw	r21,40(sp)
 100e390:	dd000917 	ldw	r20,36(sp)
 100e394:	dcc00817 	ldw	r19,32(sp)
 100e398:	dc800717 	ldw	r18,28(sp)
 100e39c:	dc400617 	ldw	r17,24(sp)
 100e3a0:	dc000517 	ldw	r16,20(sp)
 100e3a4:	dec00f04 	addi	sp,sp,60
 100e3a8:	f800283a 	ret
 100e3ac:	00800b84 	movi	r2,46
 100e3b0:	20805126 	beq	r4,r2,100e4f8 <__gethex+0x290>
 100e3b4:	2825883a 	mov	r18,r5
 100e3b8:	d8000015 	stw	zero,0(sp)
 100e3bc:	90c00003 	ldbu	r3,0(r18)
 100e3c0:	00801404 	movi	r2,80
 100e3c4:	282b883a 	mov	r21,r5
 100e3c8:	05800044 	movi	r22,1
 100e3cc:	18bfe21e 	bne	r3,r2,100e358 <__gethex+0xf0>
 100e3d0:	90c00043 	ldbu	r3,1(r18)
 100e3d4:	00800ac4 	movi	r2,43
 100e3d8:	91400044 	addi	r5,r18,1
 100e3dc:	18805126 	beq	r3,r2,100e524 <__gethex+0x2bc>
 100e3e0:	00800b44 	movi	r2,45
 100e3e4:	18805326 	beq	r3,r2,100e534 <__gethex+0x2cc>
 100e3e8:	002f883a 	mov	r23,zero
 100e3ec:	1cc5883a 	add	r2,r3,r19
 100e3f0:	10800003 	ldbu	r2,0(r2)
 100e3f4:	103fda26 	beq	r2,zero,100e360 <__gethex+0xf8>
 100e3f8:	01800644 	movi	r6,25
 100e3fc:	30bfd816 	blt	r6,r2,100e360 <__gethex+0xf8>
 100e400:	28c00043 	ldbu	r3,1(r5)
 100e404:	113ffc04 	addi	r4,r2,-16
 100e408:	00804434 	movhi	r2,272
 100e40c:	10859004 	addi	r2,r2,5696
 100e410:	1887883a 	add	r3,r3,r2
 100e414:	18800003 	ldbu	r2,0(r3)
 100e418:	2c400044 	addi	r17,r5,1
 100e41c:	10001126 	beq	r2,zero,100e464 <__gethex+0x1fc>
 100e420:	1021883a 	mov	r16,r2
 100e424:	30800f16 	blt	r6,r2,100e464 <__gethex+0x1fc>
 100e428:	3029883a 	mov	r20,r6
 100e42c:	00000106 	br	100e434 <__gethex+0x1cc>
 100e430:	a0800c16 	blt	r20,r2,100e464 <__gethex+0x1fc>
 100e434:	8c400044 	addi	r17,r17,1
 100e438:	01400284 	movi	r5,10
 100e43c:	d9c00415 	stw	r7,16(sp)
 100e440:	10026440 	call	1002644 <__mulsi3>
 100e444:	88c00003 	ldbu	r3,0(r17)
 100e448:	1405883a 	add	r2,r2,r16
 100e44c:	113ffc04 	addi	r4,r2,-16
 100e450:	1cc7883a 	add	r3,r3,r19
 100e454:	18800003 	ldbu	r2,0(r3)
 100e458:	d9c00417 	ldw	r7,16(sp)
 100e45c:	1021883a 	mov	r16,r2
 100e460:	103ff31e 	bne	r2,zero,100e430 <__gethex+0x1c8>
 100e464:	b805003a 	cmpeq	r2,r23,zero
 100e468:	1000011e 	bne	r2,zero,100e470 <__gethex+0x208>
 100e46c:	0109c83a 	sub	r4,zero,r4
 100e470:	d8800017 	ldw	r2,0(sp)
 100e474:	1105883a 	add	r2,r2,r4
 100e478:	d8800015 	stw	r2,0(sp)
 100e47c:	003fb906 	br	100e364 <__gethex+0xfc>
 100e480:	04800184 	movi	r18,6
 100e484:	003fbc06 	br	100e378 <__gethex+0x110>
 100e488:	100e1500 	call	100e150 <__hexdig_init>
 100e48c:	e1800017 	ldw	r6,0(fp)
 100e490:	00800c04 	movi	r2,48
 100e494:	31000083 	ldbu	r4,2(r6)
 100e498:	30c00084 	addi	r3,r6,2
 100e49c:	20bf8a26 	beq	r4,r2,100e2c8 <__gethex+0x60>
 100e4a0:	180b883a 	mov	r5,r3
 100e4a4:	000f883a 	mov	r7,zero
 100e4a8:	003f8f06 	br	100e2e8 <__gethex+0x80>
 100e4ac:	303fa11e 	bne	r6,zero,100e334 <__gethex+0xcc>
 100e4b0:	29400044 	addi	r5,r5,1
 100e4b4:	28800003 	ldbu	r2,0(r5)
 100e4b8:	14c5883a 	add	r2,r2,r19
 100e4bc:	10c00003 	ldbu	r3,0(r2)
 100e4c0:	1800b526 	beq	r3,zero,100e798 <__gethex+0x530>
 100e4c4:	2809883a 	mov	r4,r5
 100e4c8:	21000044 	addi	r4,r4,1
 100e4cc:	20800003 	ldbu	r2,0(r4)
 100e4d0:	14c5883a 	add	r2,r2,r19
 100e4d4:	10c00003 	ldbu	r3,0(r2)
 100e4d8:	183ffb1e 	bne	r3,zero,100e4c8 <__gethex+0x260>
 100e4dc:	2145c83a 	sub	r2,r4,r5
 100e4e0:	1085883a 	add	r2,r2,r2
 100e4e4:	1085883a 	add	r2,r2,r2
 100e4e8:	0085c83a 	sub	r2,zero,r2
 100e4ec:	200b883a 	mov	r5,r4
 100e4f0:	d8800015 	stw	r2,0(sp)
 100e4f4:	003f9406 	br	100e348 <__gethex+0xe0>
 100e4f8:	29000043 	ldbu	r4,1(r5)
 100e4fc:	00804434 	movhi	r2,272
 100e500:	10859004 	addi	r2,r2,5696
 100e504:	2c800044 	addi	r18,r5,1
 100e508:	2085883a 	add	r2,r4,r2
 100e50c:	10c00003 	ldbu	r3,0(r2)
 100e510:	18000d1e 	bne	r3,zero,100e548 <__gethex+0x2e0>
 100e514:	282b883a 	mov	r21,r5
 100e518:	05800044 	movi	r22,1
 100e51c:	d8000015 	stw	zero,0(sp)
 100e520:	003f8a06 	br	100e34c <__gethex+0xe4>
 100e524:	002f883a 	mov	r23,zero
 100e528:	29400044 	addi	r5,r5,1
 100e52c:	28c00003 	ldbu	r3,0(r5)
 100e530:	003fae06 	br	100e3ec <__gethex+0x184>
 100e534:	05c00044 	movi	r23,1
 100e538:	003ffb06 	br	100e528 <__gethex+0x2c0>
 100e53c:	2825883a 	mov	r18,r5
 100e540:	d8000015 	stw	zero,0(sp)
 100e544:	003f8106 	br	100e34c <__gethex+0xe4>
 100e548:	00800c04 	movi	r2,48
 100e54c:	20800e1e 	bne	r4,r2,100e588 <__gethex+0x320>
 100e550:	2007883a 	mov	r3,r4
 100e554:	900b883a 	mov	r5,r18
 100e558:	29400044 	addi	r5,r5,1
 100e55c:	29000003 	ldbu	r4,0(r5)
 100e560:	20803fcc 	andi	r2,r4,255
 100e564:	10fffc26 	beq	r2,r3,100e558 <__gethex+0x2f0>
 100e568:	14c5883a 	add	r2,r2,r19
 100e56c:	10c00003 	ldbu	r3,0(r2)
 100e570:	1800071e 	bne	r3,zero,100e590 <__gethex+0x328>
 100e574:	01c00044 	movi	r7,1
 100e578:	900d883a 	mov	r6,r18
 100e57c:	282b883a 	mov	r21,r5
 100e580:	382d883a 	mov	r22,r7
 100e584:	003f5f06 	br	100e304 <__gethex+0x9c>
 100e588:	91000003 	ldbu	r4,0(r18)
 100e58c:	900b883a 	mov	r5,r18
 100e590:	900d883a 	mov	r6,r18
 100e594:	282b883a 	mov	r21,r5
 100e598:	01c00044 	movi	r7,1
 100e59c:	002d883a 	mov	r22,zero
 100e5a0:	003f5806 	br	100e304 <__gethex+0x9c>
 100e5a4:	9545c83a 	sub	r2,r18,r21
 100e5a8:	10bfffc4 	addi	r2,r2,-1
 100e5ac:	00c001c4 	movi	r3,7
 100e5b0:	1880770e 	bge	r3,r2,100e790 <__gethex+0x528>
 100e5b4:	000b883a 	mov	r5,zero
 100e5b8:	1005d07a 	srai	r2,r2,1
 100e5bc:	29400044 	addi	r5,r5,1
 100e5c0:	18bffd16 	blt	r3,r2,100e5b8 <__gethex+0x350>
 100e5c4:	d9000117 	ldw	r4,4(sp)
 100e5c8:	1009ef00 	call	1009ef0 <_Balloc>
 100e5cc:	1029883a 	mov	r20,r2
 100e5d0:	15800504 	addi	r22,r2,20
 100e5d4:	ac80562e 	bgeu	r21,r18,100e730 <__gethex+0x4c8>
 100e5d8:	900b883a 	mov	r5,r18
 100e5dc:	b011883a 	mov	r8,r22
 100e5e0:	000f883a 	mov	r7,zero
 100e5e4:	0009883a 	mov	r4,zero
 100e5e8:	02400b84 	movi	r9,46
 100e5ec:	02800804 	movi	r10,32
 100e5f0:	297fffc4 	addi	r5,r5,-1
 100e5f4:	28c00003 	ldbu	r3,0(r5)
 100e5f8:	1a400826 	beq	r3,r9,100e61c <__gethex+0x3b4>
 100e5fc:	380d883a 	mov	r6,r7
 100e600:	3a802a26 	beq	r7,r10,100e6ac <__gethex+0x444>
 100e604:	39c00104 	addi	r7,r7,4
 100e608:	1cc7883a 	add	r3,r3,r19
 100e60c:	18800003 	ldbu	r2,0(r3)
 100e610:	108003cc 	andi	r2,r2,15
 100e614:	1184983a 	sll	r2,r2,r6
 100e618:	2088b03a 	or	r4,r4,r2
 100e61c:	a97ff436 	bltu	r21,r5,100e5f0 <__gethex+0x388>
 100e620:	40800104 	addi	r2,r8,4
 100e624:	1585c83a 	sub	r2,r2,r22
 100e628:	1021d0ba 	srai	r16,r2,2
 100e62c:	41000015 	stw	r4,0(r8)
 100e630:	a4000415 	stw	r16,16(r20)
 100e634:	10099980 	call	1009998 <__hi0bits>
 100e638:	d9000217 	ldw	r4,8(sp)
 100e63c:	8006917a 	slli	r3,r16,5
 100e640:	24c00017 	ldw	r19,0(r4)
 100e644:	1885c83a 	sub	r2,r3,r2
 100e648:	98801f16 	blt	r19,r2,100e6c8 <__gethex+0x460>
 100e64c:	14c00c16 	blt	r2,r19,100e680 <__gethex+0x418>
 100e650:	002b883a 	mov	r21,zero
 100e654:	d9000217 	ldw	r4,8(sp)
 100e658:	d8c00017 	ldw	r3,0(sp)
 100e65c:	20800217 	ldw	r2,8(r4)
 100e660:	10c0360e 	bge	r2,r3,100e73c <__gethex+0x4d4>
 100e664:	d9000117 	ldw	r4,4(sp)
 100e668:	a00b883a 	mov	r5,r20
 100e66c:	048028c4 	movi	r18,163
 100e670:	10099700 	call	1009970 <_Bfree>
 100e674:	d9000f17 	ldw	r4,60(sp)
 100e678:	20000015 	stw	zero,0(r4)
 100e67c:	003f3e06 	br	100e378 <__gethex+0x110>
 100e680:	d9000117 	ldw	r4,4(sp)
 100e684:	98a1c83a 	sub	r16,r19,r2
 100e688:	a00b883a 	mov	r5,r20
 100e68c:	800d883a 	mov	r6,r16
 100e690:	100a2b40 	call	100a2b4 <__lshift>
 100e694:	d8c00017 	ldw	r3,0(sp)
 100e698:	1029883a 	mov	r20,r2
 100e69c:	15800504 	addi	r22,r2,20
 100e6a0:	1c07c83a 	sub	r3,r3,r16
 100e6a4:	d8c00015 	stw	r3,0(sp)
 100e6a8:	003fe906 	br	100e650 <__gethex+0x3e8>
 100e6ac:	41000015 	stw	r4,0(r8)
 100e6b0:	28c00003 	ldbu	r3,0(r5)
 100e6b4:	01c00104 	movi	r7,4
 100e6b8:	000d883a 	mov	r6,zero
 100e6bc:	41d1883a 	add	r8,r8,r7
 100e6c0:	0009883a 	mov	r4,zero
 100e6c4:	003fd006 	br	100e608 <__gethex+0x3a0>
 100e6c8:	14e1c83a 	sub	r16,r2,r19
 100e6cc:	a009883a 	mov	r4,r20
 100e6d0:	800b883a 	mov	r5,r16
 100e6d4:	1009e680 	call	1009e68 <__any_on>
 100e6d8:	1000081e 	bne	r2,zero,100e6fc <__gethex+0x494>
 100e6dc:	002b883a 	mov	r21,zero
 100e6e0:	a009883a 	mov	r4,r20
 100e6e4:	800b883a 	mov	r5,r16
 100e6e8:	100e1b80 	call	100e1b8 <rshift>
 100e6ec:	d8800017 	ldw	r2,0(sp)
 100e6f0:	1405883a 	add	r2,r2,r16
 100e6f4:	d8800015 	stw	r2,0(sp)
 100e6f8:	003fd606 	br	100e654 <__gethex+0x3ec>
 100e6fc:	817fffc4 	addi	r5,r16,-1
 100e700:	2805d17a 	srai	r2,r5,5
 100e704:	290007cc 	andi	r4,r5,31
 100e708:	01800044 	movi	r6,1
 100e70c:	1085883a 	add	r2,r2,r2
 100e710:	1085883a 	add	r2,r2,r2
 100e714:	1585883a 	add	r2,r2,r22
 100e718:	3108983a 	sll	r4,r6,r4
 100e71c:	10c00017 	ldw	r3,0(r2)
 100e720:	20c8703a 	and	r4,r4,r3
 100e724:	20001e1e 	bne	r4,zero,100e7a0 <__gethex+0x538>
 100e728:	302b883a 	mov	r21,r6
 100e72c:	003fec06 	br	100e6e0 <__gethex+0x478>
 100e730:	b011883a 	mov	r8,r22
 100e734:	0009883a 	mov	r4,zero
 100e738:	003fb906 	br	100e620 <__gethex+0x3b8>
 100e73c:	d8800217 	ldw	r2,8(sp)
 100e740:	d8c00017 	ldw	r3,0(sp)
 100e744:	11000117 	ldw	r4,4(r2)
 100e748:	19001c16 	blt	r3,r4,100e7bc <__gethex+0x554>
 100e74c:	04800044 	movi	r18,1
 100e750:	a8000926 	beq	r21,zero,100e778 <__gethex+0x510>
 100e754:	d8c00217 	ldw	r3,8(sp)
 100e758:	00800084 	movi	r2,2
 100e75c:	19000317 	ldw	r4,12(r3)
 100e760:	20809826 	beq	r4,r2,100e9c4 <__gethex+0x75c>
 100e764:	008000c4 	movi	r2,3
 100e768:	20805b26 	beq	r4,r2,100e8d8 <__gethex+0x670>
 100e76c:	00800044 	movi	r2,1
 100e770:	20804326 	beq	r4,r2,100e880 <__gethex+0x618>
 100e774:	94800414 	ori	r18,r18,16
 100e778:	d9000f17 	ldw	r4,60(sp)
 100e77c:	d8800017 	ldw	r2,0(sp)
 100e780:	d8c00317 	ldw	r3,12(sp)
 100e784:	25000015 	stw	r20,0(r4)
 100e788:	18800015 	stw	r2,0(r3)
 100e78c:	003efa06 	br	100e378 <__gethex+0x110>
 100e790:	000b883a 	mov	r5,zero
 100e794:	003f8b06 	br	100e5c4 <__gethex+0x35c>
 100e798:	d8000015 	stw	zero,0(sp)
 100e79c:	003eea06 	br	100e348 <__gethex+0xe0>
 100e7a0:	3140180e 	bge	r6,r5,100e804 <__gethex+0x59c>
 100e7a4:	a009883a 	mov	r4,r20
 100e7a8:	817fff84 	addi	r5,r16,-2
 100e7ac:	1009e680 	call	1009e68 <__any_on>
 100e7b0:	10001426 	beq	r2,zero,100e804 <__gethex+0x59c>
 100e7b4:	054000c4 	movi	r21,3
 100e7b8:	003fc906 	br	100e6e0 <__gethex+0x478>
 100e7bc:	d8800017 	ldw	r2,0(sp)
 100e7c0:	20a3c83a 	sub	r17,r4,r2
 100e7c4:	8cc01116 	blt	r17,r19,100e80c <__gethex+0x5a4>
 100e7c8:	d8800217 	ldw	r2,8(sp)
 100e7cc:	10c00317 	ldw	r3,12(r2)
 100e7d0:	00800084 	movi	r2,2
 100e7d4:	18809426 	beq	r3,r2,100ea28 <__gethex+0x7c0>
 100e7d8:	008000c4 	movi	r2,3
 100e7dc:	18808f26 	beq	r3,r2,100ea1c <__gethex+0x7b4>
 100e7e0:	00800044 	movi	r2,1
 100e7e4:	18807c26 	beq	r3,r2,100e9d8 <__gethex+0x770>
 100e7e8:	d9000117 	ldw	r4,4(sp)
 100e7ec:	a00b883a 	mov	r5,r20
 100e7f0:	04801404 	movi	r18,80
 100e7f4:	10099700 	call	1009970 <_Bfree>
 100e7f8:	d9000f17 	ldw	r4,60(sp)
 100e7fc:	20000015 	stw	zero,0(r4)
 100e800:	003edd06 	br	100e378 <__gethex+0x110>
 100e804:	05400084 	movi	r21,2
 100e808:	003fb506 	br	100e6e0 <__gethex+0x478>
 100e80c:	8c3fffc4 	addi	r16,r17,-1
 100e810:	a8001526 	beq	r21,zero,100e868 <__gethex+0x600>
 100e814:	05400044 	movi	r21,1
 100e818:	8005d17a 	srai	r2,r16,5
 100e81c:	814007cc 	andi	r5,r16,31
 100e820:	00c00044 	movi	r3,1
 100e824:	1085883a 	add	r2,r2,r2
 100e828:	1085883a 	add	r2,r2,r2
 100e82c:	1585883a 	add	r2,r2,r22
 100e830:	1946983a 	sll	r3,r3,r5
 100e834:	11000017 	ldw	r4,0(r2)
 100e838:	1906703a 	and	r3,r3,r4
 100e83c:	18000126 	beq	r3,zero,100e844 <__gethex+0x5dc>
 100e840:	ad400094 	ori	r21,r21,2
 100e844:	880b883a 	mov	r5,r17
 100e848:	a009883a 	mov	r4,r20
 100e84c:	100e1b80 	call	100e1b8 <rshift>
 100e850:	d8800217 	ldw	r2,8(sp)
 100e854:	9c67c83a 	sub	r19,r19,r17
 100e858:	04800084 	movi	r18,2
 100e85c:	10800117 	ldw	r2,4(r2)
 100e860:	d8800015 	stw	r2,0(sp)
 100e864:	003fba06 	br	100e750 <__gethex+0x4e8>
 100e868:	043feb0e 	bge	zero,r16,100e818 <__gethex+0x5b0>
 100e86c:	a009883a 	mov	r4,r20
 100e870:	800b883a 	mov	r5,r16
 100e874:	1009e680 	call	1009e68 <__any_on>
 100e878:	102b883a 	mov	r21,r2
 100e87c:	003fe606 	br	100e818 <__gethex+0x5b0>
 100e880:	a880008c 	andi	r2,r21,2
 100e884:	103fbb26 	beq	r2,zero,100e774 <__gethex+0x50c>
 100e888:	b0800017 	ldw	r2,0(r22)
 100e88c:	a884b03a 	or	r2,r21,r2
 100e890:	1104703a 	and	r2,r2,r4
 100e894:	103fb726 	beq	r2,zero,100e774 <__gethex+0x50c>
 100e898:	a4000417 	ldw	r16,16(r20)
 100e89c:	b007883a 	mov	r3,r22
 100e8a0:	017fffc4 	movi	r5,-1
 100e8a4:	8405883a 	add	r2,r16,r16
 100e8a8:	10ab883a 	add	r21,r2,r2
 100e8ac:	802f883a 	mov	r23,r16
 100e8b0:	b549883a 	add	r4,r22,r21
 100e8b4:	00000306 	br	100e8c4 <__gethex+0x65c>
 100e8b8:	18000015 	stw	zero,0(r3)
 100e8bc:	18c00104 	addi	r3,r3,4
 100e8c0:	1900082e 	bgeu	r3,r4,100e8e4 <__gethex+0x67c>
 100e8c4:	18800017 	ldw	r2,0(r3)
 100e8c8:	117ffb26 	beq	r2,r5,100e8b8 <__gethex+0x650>
 100e8cc:	10800044 	addi	r2,r2,1
 100e8d0:	18800015 	stw	r2,0(r3)
 100e8d4:	00001e06 	br	100e950 <__gethex+0x6e8>
 100e8d8:	d8801017 	ldw	r2,64(sp)
 100e8dc:	103fa526 	beq	r2,zero,100e774 <__gethex+0x50c>
 100e8e0:	003fed06 	br	100e898 <__gethex+0x630>
 100e8e4:	a0800217 	ldw	r2,8(r20)
 100e8e8:	80801216 	blt	r16,r2,100e934 <__gethex+0x6cc>
 100e8ec:	a1400117 	ldw	r5,4(r20)
 100e8f0:	d9000117 	ldw	r4,4(sp)
 100e8f4:	29400044 	addi	r5,r5,1
 100e8f8:	1009ef00 	call	1009ef0 <_Balloc>
 100e8fc:	a1800417 	ldw	r6,16(r20)
 100e900:	a1400304 	addi	r5,r20,12
 100e904:	11000304 	addi	r4,r2,12
 100e908:	318d883a 	add	r6,r6,r6
 100e90c:	318d883a 	add	r6,r6,r6
 100e910:	31800204 	addi	r6,r6,8
 100e914:	1023883a 	mov	r17,r2
 100e918:	10097580 	call	1009758 <memcpy>
 100e91c:	d9000117 	ldw	r4,4(sp)
 100e920:	a00b883a 	mov	r5,r20
 100e924:	8d800504 	addi	r22,r17,20
 100e928:	10099700 	call	1009970 <_Bfree>
 100e92c:	8c000417 	ldw	r16,16(r17)
 100e930:	8829883a 	mov	r20,r17
 100e934:	8405883a 	add	r2,r16,r16
 100e938:	1085883a 	add	r2,r2,r2
 100e93c:	1505883a 	add	r2,r2,r20
 100e940:	84000044 	addi	r16,r16,1
 100e944:	00c00044 	movi	r3,1
 100e948:	10c00515 	stw	r3,20(r2)
 100e94c:	a4000415 	stw	r16,16(r20)
 100e950:	00800084 	movi	r2,2
 100e954:	90801526 	beq	r18,r2,100e9ac <__gethex+0x744>
 100e958:	bc000a16 	blt	r23,r16,100e984 <__gethex+0x71c>
 100e95c:	9c0007cc 	andi	r16,r19,31
 100e960:	8000021e 	bne	r16,zero,100e96c <__gethex+0x704>
 100e964:	94800814 	ori	r18,r18,32
 100e968:	003f8306 	br	100e778 <__gethex+0x510>
 100e96c:	b545883a 	add	r2,r22,r21
 100e970:	113fff17 	ldw	r4,-4(r2)
 100e974:	10099980 	call	1009998 <__hi0bits>
 100e978:	00c00804 	movi	r3,32
 100e97c:	1c07c83a 	sub	r3,r3,r16
 100e980:	10fff80e 	bge	r2,r3,100e964 <__gethex+0x6fc>
 100e984:	a009883a 	mov	r4,r20
 100e988:	01400044 	movi	r5,1
 100e98c:	100e1b80 	call	100e1b8 <rshift>
 100e990:	d9000217 	ldw	r4,8(sp)
 100e994:	d8c00017 	ldw	r3,0(sp)
 100e998:	20800217 	ldw	r2,8(r4)
 100e99c:	18c00044 	addi	r3,r3,1
 100e9a0:	d8c00015 	stw	r3,0(sp)
 100e9a4:	10ff2f16 	blt	r2,r3,100e664 <__gethex+0x3fc>
 100e9a8:	003fee06 	br	100e964 <__gethex+0x6fc>
 100e9ac:	d8c00217 	ldw	r3,8(sp)
 100e9b0:	18800017 	ldw	r2,0(r3)
 100e9b4:	10bfffc4 	addi	r2,r2,-1
 100e9b8:	98801e26 	beq	r19,r2,100ea34 <__gethex+0x7cc>
 100e9bc:	04800884 	movi	r18,34
 100e9c0:	003f6d06 	br	100e778 <__gethex+0x510>
 100e9c4:	d9001017 	ldw	r4,64(sp)
 100e9c8:	00800044 	movi	r2,1
 100e9cc:	1105c83a 	sub	r2,r2,r4
 100e9d0:	103f6826 	beq	r2,zero,100e774 <__gethex+0x50c>
 100e9d4:	003fb006 	br	100e898 <__gethex+0x630>
 100e9d8:	9c7f831e 	bne	r19,r17,100e7e8 <__gethex+0x580>
 100e9dc:	1cc0060e 	bge	r3,r19,100e9f8 <__gethex+0x790>
 100e9e0:	98cbc83a 	sub	r5,r19,r3
 100e9e4:	a009883a 	mov	r4,r20
 100e9e8:	1009e680 	call	1009e68 <__any_on>
 100e9ec:	103f7e26 	beq	r2,zero,100e7e8 <__gethex+0x580>
 100e9f0:	d8c00217 	ldw	r3,8(sp)
 100e9f4:	19000117 	ldw	r4,4(r3)
 100e9f8:	d8800317 	ldw	r2,12(sp)
 100e9fc:	d8c00f17 	ldw	r3,60(sp)
 100ea00:	04000044 	movi	r16,1
 100ea04:	11000015 	stw	r4,0(r2)
 100ea08:	04801884 	movi	r18,98
 100ea0c:	b4000015 	stw	r16,0(r22)
 100ea10:	1d000015 	stw	r20,0(r3)
 100ea14:	a4000415 	stw	r16,16(r20)
 100ea18:	003e5706 	br	100e378 <__gethex+0x110>
 100ea1c:	d8801017 	ldw	r2,64(sp)
 100ea20:	103f7126 	beq	r2,zero,100e7e8 <__gethex+0x580>
 100ea24:	003ff406 	br	100e9f8 <__gethex+0x790>
 100ea28:	d8c01017 	ldw	r3,64(sp)
 100ea2c:	183ff226 	beq	r3,zero,100e9f8 <__gethex+0x790>
 100ea30:	003f6d06 	br	100e7e8 <__gethex+0x580>
 100ea34:	9805d17a 	srai	r2,r19,5
 100ea38:	994007cc 	andi	r5,r19,31
 100ea3c:	00c00044 	movi	r3,1
 100ea40:	1085883a 	add	r2,r2,r2
 100ea44:	1085883a 	add	r2,r2,r2
 100ea48:	1585883a 	add	r2,r2,r22
 100ea4c:	1946983a 	sll	r3,r3,r5
 100ea50:	11000017 	ldw	r4,0(r2)
 100ea54:	1906703a 	and	r3,r3,r4
 100ea58:	183fd826 	beq	r3,zero,100e9bc <__gethex+0x754>
 100ea5c:	04800844 	movi	r18,33
 100ea60:	003f4506 	br	100e778 <__gethex+0x510>

0100ea64 <L_shift>:
 100ea64:	00800204 	movi	r2,8
 100ea68:	1185c83a 	sub	r2,r2,r6
 100ea6c:	1085883a 	add	r2,r2,r2
 100ea70:	21c00017 	ldw	r7,0(r4)
 100ea74:	1093883a 	add	r9,r2,r2
 100ea78:	00800804 	movi	r2,32
 100ea7c:	200d883a 	mov	r6,r4
 100ea80:	1251c83a 	sub	r8,r2,r9
 100ea84:	31800104 	addi	r6,r6,4
 100ea88:	3805883a 	mov	r2,r7
 100ea8c:	31c00017 	ldw	r7,0(r6)
 100ea90:	3a08983a 	sll	r4,r7,r8
 100ea94:	3a46d83a 	srl	r3,r7,r9
 100ea98:	1104b03a 	or	r2,r2,r4
 100ea9c:	180f883a 	mov	r7,r3
 100eaa0:	30bfff15 	stw	r2,-4(r6)
 100eaa4:	30c00015 	stw	r3,0(r6)
 100eaa8:	317ff636 	bltu	r6,r5,100ea84 <L_shift+0x20>
 100eaac:	f800283a 	ret

0100eab0 <__hexnan>:
 100eab0:	defff404 	addi	sp,sp,-48
 100eab4:	dd800815 	stw	r22,32(sp)
 100eab8:	05804434 	movhi	r22,272
 100eabc:	b5859004 	addi	r22,r22,5696
 100eac0:	b0800c03 	ldbu	r2,48(r22)
 100eac4:	dcc00515 	stw	r19,20(sp)
 100eac8:	dc000215 	stw	r16,8(sp)
 100eacc:	dfc00b15 	stw	ra,44(sp)
 100ead0:	df000a15 	stw	fp,40(sp)
 100ead4:	ddc00915 	stw	r23,36(sp)
 100ead8:	dd400715 	stw	r21,28(sp)
 100eadc:	dd000615 	stw	r20,24(sp)
 100eae0:	dc800415 	stw	r18,16(sp)
 100eae4:	dc400315 	stw	r17,12(sp)
 100eae8:	d9000115 	stw	r4,4(sp)
 100eaec:	2821883a 	mov	r16,r5
 100eaf0:	3027883a 	mov	r19,r6
 100eaf4:	10007426 	beq	r2,zero,100ecc8 <__hexnan+0x218>
 100eaf8:	80c00017 	ldw	r3,0(r16)
 100eafc:	1805d17a 	srai	r2,r3,5
 100eb00:	18c007cc 	andi	r3,r3,31
 100eb04:	1839003a 	cmpeq	fp,r3,zero
 100eb08:	1085883a 	add	r2,r2,r2
 100eb0c:	1085883a 	add	r2,r2,r2
 100eb10:	d8c00015 	stw	r3,0(sp)
 100eb14:	14c5883a 	add	r2,r2,r19
 100eb18:	e000011e 	bne	fp,zero,100eb20 <__hexnan+0x70>
 100eb1c:	10800104 	addi	r2,r2,4
 100eb20:	d8c00117 	ldw	r3,4(sp)
 100eb24:	153fff04 	addi	r20,r2,-4
 100eb28:	a021883a 	mov	r16,r20
 100eb2c:	1c400017 	ldw	r17,0(r3)
 100eb30:	a02b883a 	mov	r21,r20
 100eb34:	0025883a 	mov	r18,zero
 100eb38:	002f883a 	mov	r23,zero
 100eb3c:	000d883a 	mov	r6,zero
 100eb40:	103fff15 	stw	zero,-4(r2)
 100eb44:	8c400044 	addi	r17,r17,1
 100eb48:	89000003 	ldbu	r4,0(r17)
 100eb4c:	20000e26 	beq	r4,zero,100eb88 <__hexnan+0xd8>
 100eb50:	2585883a 	add	r2,r4,r22
 100eb54:	10c00003 	ldbu	r3,0(r2)
 100eb58:	18002e1e 	bne	r3,zero,100ec14 <__hexnan+0x164>
 100eb5c:	00800804 	movi	r2,32
 100eb60:	11005536 	bltu	r2,r4,100ecb8 <__hexnan+0x208>
 100eb64:	bcbff70e 	bge	r23,r18,100eb44 <__hexnan+0x94>
 100eb68:	8540022e 	bgeu	r16,r21,100eb74 <__hexnan+0xc4>
 100eb6c:	008001c4 	movi	r2,7
 100eb70:	11803c0e 	bge	r2,r6,100ec64 <__hexnan+0x1b4>
 100eb74:	9c003536 	bltu	r19,r16,100ec4c <__hexnan+0x19c>
 100eb78:	8c400044 	addi	r17,r17,1
 100eb7c:	89000003 	ldbu	r4,0(r17)
 100eb80:	01800204 	movi	r6,8
 100eb84:	203ff21e 	bne	r4,zero,100eb50 <__hexnan+0xa0>
 100eb88:	90004d26 	beq	r18,zero,100ecc0 <__hexnan+0x210>
 100eb8c:	85404336 	bltu	r16,r21,100ec9c <__hexnan+0x1ec>
 100eb90:	9c00382e 	bgeu	r19,r16,100ec74 <__hexnan+0x1c4>
 100eb94:	9807883a 	mov	r3,r19
 100eb98:	80800017 	ldw	r2,0(r16)
 100eb9c:	84000104 	addi	r16,r16,4
 100eba0:	18800015 	stw	r2,0(r3)
 100eba4:	18c00104 	addi	r3,r3,4
 100eba8:	a43ffb2e 	bgeu	r20,r16,100eb98 <__hexnan+0xe8>
 100ebac:	18000015 	stw	zero,0(r3)
 100ebb0:	18c00104 	addi	r3,r3,4
 100ebb4:	a0fffd2e 	bgeu	r20,r3,100ebac <__hexnan+0xfc>
 100ebb8:	a0800017 	ldw	r2,0(r20)
 100ebbc:	1000071e 	bne	r2,zero,100ebdc <__hexnan+0x12c>
 100ebc0:	9d004326 	beq	r19,r20,100ecd0 <__hexnan+0x220>
 100ebc4:	a007883a 	mov	r3,r20
 100ebc8:	00000106 	br	100ebd0 <__hexnan+0x120>
 100ebcc:	98c04026 	beq	r19,r3,100ecd0 <__hexnan+0x220>
 100ebd0:	18ffff04 	addi	r3,r3,-4
 100ebd4:	18800017 	ldw	r2,0(r3)
 100ebd8:	103ffc26 	beq	r2,zero,100ebcc <__hexnan+0x11c>
 100ebdc:	00c00144 	movi	r3,5
 100ebe0:	1805883a 	mov	r2,r3
 100ebe4:	dfc00b17 	ldw	ra,44(sp)
 100ebe8:	df000a17 	ldw	fp,40(sp)
 100ebec:	ddc00917 	ldw	r23,36(sp)
 100ebf0:	dd800817 	ldw	r22,32(sp)
 100ebf4:	dd400717 	ldw	r21,28(sp)
 100ebf8:	dd000617 	ldw	r20,24(sp)
 100ebfc:	dcc00517 	ldw	r19,20(sp)
 100ec00:	dc800417 	ldw	r18,16(sp)
 100ec04:	dc400317 	ldw	r17,12(sp)
 100ec08:	dc000217 	ldw	r16,8(sp)
 100ec0c:	dec00c04 	addi	sp,sp,48
 100ec10:	f800283a 	ret
 100ec14:	31800044 	addi	r6,r6,1
 100ec18:	00800204 	movi	r2,8
 100ec1c:	94800044 	addi	r18,r18,1
 100ec20:	1180040e 	bge	r2,r6,100ec34 <__hexnan+0x184>
 100ec24:	9c3fc72e 	bgeu	r19,r16,100eb44 <__hexnan+0x94>
 100ec28:	843fff04 	addi	r16,r16,-4
 100ec2c:	80000015 	stw	zero,0(r16)
 100ec30:	01800044 	movi	r6,1
 100ec34:	80800017 	ldw	r2,0(r16)
 100ec38:	18c003cc 	andi	r3,r3,15
 100ec3c:	1004913a 	slli	r2,r2,4
 100ec40:	10c4b03a 	or	r2,r2,r3
 100ec44:	80800015 	stw	r2,0(r16)
 100ec48:	003fbe06 	br	100eb44 <__hexnan+0x94>
 100ec4c:	843fff04 	addi	r16,r16,-4
 100ec50:	802b883a 	mov	r21,r16
 100ec54:	902f883a 	mov	r23,r18
 100ec58:	000d883a 	mov	r6,zero
 100ec5c:	80000015 	stw	zero,0(r16)
 100ec60:	003fb806 	br	100eb44 <__hexnan+0x94>
 100ec64:	8009883a 	mov	r4,r16
 100ec68:	a80b883a 	mov	r5,r21
 100ec6c:	100ea640 	call	100ea64 <L_shift>
 100ec70:	003fc006 	br	100eb74 <__hexnan+0xc4>
 100ec74:	e03fd01e 	bne	fp,zero,100ebb8 <__hexnan+0x108>
 100ec78:	d8c00017 	ldw	r3,0(sp)
 100ec7c:	00800804 	movi	r2,32
 100ec80:	10c5c83a 	sub	r2,r2,r3
 100ec84:	00ffffc4 	movi	r3,-1
 100ec88:	1886d83a 	srl	r3,r3,r2
 100ec8c:	a0800017 	ldw	r2,0(r20)
 100ec90:	10c4703a 	and	r2,r2,r3
 100ec94:	a0800015 	stw	r2,0(r20)
 100ec98:	003fc806 	br	100ebbc <__hexnan+0x10c>
 100ec9c:	008001c4 	movi	r2,7
 100eca0:	11bfbb16 	blt	r2,r6,100eb90 <__hexnan+0xe0>
 100eca4:	a80b883a 	mov	r5,r21
 100eca8:	8009883a 	mov	r4,r16
 100ecac:	100ea640 	call	100ea64 <L_shift>
 100ecb0:	9c3ff02e 	bgeu	r19,r16,100ec74 <__hexnan+0x1c4>
 100ecb4:	003fb706 	br	100eb94 <__hexnan+0xe4>
 100ecb8:	00800a44 	movi	r2,41
 100ecbc:	20800826 	beq	r4,r2,100ece0 <__hexnan+0x230>
 100ecc0:	00c00104 	movi	r3,4
 100ecc4:	003fc606 	br	100ebe0 <__hexnan+0x130>
 100ecc8:	100e1500 	call	100e150 <__hexdig_init>
 100eccc:	003f8a06 	br	100eaf8 <__hexnan+0x48>
 100ecd0:	00800044 	movi	r2,1
 100ecd4:	00c00144 	movi	r3,5
 100ecd8:	98800015 	stw	r2,0(r19)
 100ecdc:	003fc006 	br	100ebe0 <__hexnan+0x130>
 100ece0:	903ff726 	beq	r18,zero,100ecc0 <__hexnan+0x210>
 100ece4:	d8c00117 	ldw	r3,4(sp)
 100ece8:	88800044 	addi	r2,r17,1
 100ecec:	18800015 	stw	r2,0(r3)
 100ecf0:	857fa72e 	bgeu	r16,r21,100eb90 <__hexnan+0xe0>
 100ecf4:	003fe906 	br	100ec9c <__hexnan+0x1ec>

0100ecf8 <_isatty_r>:
 100ecf8:	defffd04 	addi	sp,sp,-12
 100ecfc:	dc000015 	stw	r16,0(sp)
 100ed00:	040040b4 	movhi	r16,258
 100ed04:	84016704 	addi	r16,r16,1436
 100ed08:	dc400115 	stw	r17,4(sp)
 100ed0c:	80000015 	stw	zero,0(r16)
 100ed10:	2023883a 	mov	r17,r4
 100ed14:	2809883a 	mov	r4,r5
 100ed18:	dfc00215 	stw	ra,8(sp)
 100ed1c:	1011d240 	call	1011d24 <isatty>
 100ed20:	1007883a 	mov	r3,r2
 100ed24:	00bfffc4 	movi	r2,-1
 100ed28:	18800626 	beq	r3,r2,100ed44 <_isatty_r+0x4c>
 100ed2c:	1805883a 	mov	r2,r3
 100ed30:	dfc00217 	ldw	ra,8(sp)
 100ed34:	dc400117 	ldw	r17,4(sp)
 100ed38:	dc000017 	ldw	r16,0(sp)
 100ed3c:	dec00304 	addi	sp,sp,12
 100ed40:	f800283a 	ret
 100ed44:	80800017 	ldw	r2,0(r16)
 100ed48:	103ff826 	beq	r2,zero,100ed2c <_isatty_r+0x34>
 100ed4c:	88800015 	stw	r2,0(r17)
 100ed50:	1805883a 	mov	r2,r3
 100ed54:	dfc00217 	ldw	ra,8(sp)
 100ed58:	dc400117 	ldw	r17,4(sp)
 100ed5c:	dc000017 	ldw	r16,0(sp)
 100ed60:	dec00304 	addi	sp,sp,12
 100ed64:	f800283a 	ret

0100ed68 <_lseek_r>:
 100ed68:	defffd04 	addi	sp,sp,-12
 100ed6c:	dc000015 	stw	r16,0(sp)
 100ed70:	040040b4 	movhi	r16,258
 100ed74:	84016704 	addi	r16,r16,1436
 100ed78:	dc400115 	stw	r17,4(sp)
 100ed7c:	80000015 	stw	zero,0(r16)
 100ed80:	2023883a 	mov	r17,r4
 100ed84:	2809883a 	mov	r4,r5
 100ed88:	300b883a 	mov	r5,r6
 100ed8c:	380d883a 	mov	r6,r7
 100ed90:	dfc00215 	stw	ra,8(sp)
 100ed94:	1011f340 	call	1011f34 <lseek>
 100ed98:	1007883a 	mov	r3,r2
 100ed9c:	00bfffc4 	movi	r2,-1
 100eda0:	18800626 	beq	r3,r2,100edbc <_lseek_r+0x54>
 100eda4:	1805883a 	mov	r2,r3
 100eda8:	dfc00217 	ldw	ra,8(sp)
 100edac:	dc400117 	ldw	r17,4(sp)
 100edb0:	dc000017 	ldw	r16,0(sp)
 100edb4:	dec00304 	addi	sp,sp,12
 100edb8:	f800283a 	ret
 100edbc:	80800017 	ldw	r2,0(r16)
 100edc0:	103ff826 	beq	r2,zero,100eda4 <_lseek_r+0x3c>
 100edc4:	88800015 	stw	r2,0(r17)
 100edc8:	1805883a 	mov	r2,r3
 100edcc:	dfc00217 	ldw	ra,8(sp)
 100edd0:	dc400117 	ldw	r17,4(sp)
 100edd4:	dc000017 	ldw	r16,0(sp)
 100edd8:	dec00304 	addi	sp,sp,12
 100eddc:	f800283a 	ret

0100ede0 <_read_r>:
 100ede0:	defffd04 	addi	sp,sp,-12
 100ede4:	dc000015 	stw	r16,0(sp)
 100ede8:	040040b4 	movhi	r16,258
 100edec:	84016704 	addi	r16,r16,1436
 100edf0:	dc400115 	stw	r17,4(sp)
 100edf4:	80000015 	stw	zero,0(r16)
 100edf8:	2023883a 	mov	r17,r4
 100edfc:	2809883a 	mov	r4,r5
 100ee00:	300b883a 	mov	r5,r6
 100ee04:	380d883a 	mov	r6,r7
 100ee08:	dfc00215 	stw	ra,8(sp)
 100ee0c:	10123cc0 	call	10123cc <read>
 100ee10:	1007883a 	mov	r3,r2
 100ee14:	00bfffc4 	movi	r2,-1
 100ee18:	18800626 	beq	r3,r2,100ee34 <_read_r+0x54>
 100ee1c:	1805883a 	mov	r2,r3
 100ee20:	dfc00217 	ldw	ra,8(sp)
 100ee24:	dc400117 	ldw	r17,4(sp)
 100ee28:	dc000017 	ldw	r16,0(sp)
 100ee2c:	dec00304 	addi	sp,sp,12
 100ee30:	f800283a 	ret
 100ee34:	80800017 	ldw	r2,0(r16)
 100ee38:	103ff826 	beq	r2,zero,100ee1c <_read_r+0x3c>
 100ee3c:	88800015 	stw	r2,0(r17)
 100ee40:	1805883a 	mov	r2,r3
 100ee44:	dfc00217 	ldw	ra,8(sp)
 100ee48:	dc400117 	ldw	r17,4(sp)
 100ee4c:	dc000017 	ldw	r16,0(sp)
 100ee50:	dec00304 	addi	sp,sp,12
 100ee54:	f800283a 	ret

0100ee58 <__muldi3>:
 100ee58:	defff204 	addi	sp,sp,-56
 100ee5c:	df000c15 	stw	fp,48(sp)
 100ee60:	3038d43a 	srli	fp,r6,16
 100ee64:	dd000815 	stw	r20,32(sp)
 100ee68:	dc400515 	stw	r17,20(sp)
 100ee6c:	2028d43a 	srli	r20,r4,16
 100ee70:	247fffcc 	andi	r17,r4,65535
 100ee74:	dc000415 	stw	r16,16(sp)
 100ee78:	343fffcc 	andi	r16,r6,65535
 100ee7c:	dcc00715 	stw	r19,28(sp)
 100ee80:	d9000015 	stw	r4,0(sp)
 100ee84:	2827883a 	mov	r19,r5
 100ee88:	8809883a 	mov	r4,r17
 100ee8c:	d9400115 	stw	r5,4(sp)
 100ee90:	800b883a 	mov	r5,r16
 100ee94:	d9800215 	stw	r6,8(sp)
 100ee98:	dfc00d15 	stw	ra,52(sp)
 100ee9c:	d9c00315 	stw	r7,12(sp)
 100eea0:	dd800a15 	stw	r22,40(sp)
 100eea4:	dd400915 	stw	r21,36(sp)
 100eea8:	302d883a 	mov	r22,r6
 100eeac:	ddc00b15 	stw	r23,44(sp)
 100eeb0:	dc800615 	stw	r18,24(sp)
 100eeb4:	10026440 	call	1002644 <__mulsi3>
 100eeb8:	8809883a 	mov	r4,r17
 100eebc:	e00b883a 	mov	r5,fp
 100eec0:	102b883a 	mov	r21,r2
 100eec4:	10026440 	call	1002644 <__mulsi3>
 100eec8:	800b883a 	mov	r5,r16
 100eecc:	a009883a 	mov	r4,r20
 100eed0:	1023883a 	mov	r17,r2
 100eed4:	10026440 	call	1002644 <__mulsi3>
 100eed8:	a009883a 	mov	r4,r20
 100eedc:	e00b883a 	mov	r5,fp
 100eee0:	1021883a 	mov	r16,r2
 100eee4:	10026440 	call	1002644 <__mulsi3>
 100eee8:	a8ffffcc 	andi	r3,r21,65535
 100eeec:	a82ad43a 	srli	r21,r21,16
 100eef0:	8c23883a 	add	r17,r17,r16
 100eef4:	1011883a 	mov	r8,r2
 100eef8:	ac6b883a 	add	r21,r21,r17
 100eefc:	a804943a 	slli	r2,r21,16
 100ef00:	b009883a 	mov	r4,r22
 100ef04:	980b883a 	mov	r5,r19
 100ef08:	10c7883a 	add	r3,r2,r3
 100ef0c:	a812d43a 	srli	r9,r21,16
 100ef10:	180d883a 	mov	r6,r3
 100ef14:	ac00022e 	bgeu	r21,r16,100ef20 <__muldi3+0xc8>
 100ef18:	00800074 	movhi	r2,1
 100ef1c:	4091883a 	add	r8,r8,r2
 100ef20:	4267883a 	add	r19,r8,r9
 100ef24:	302d883a 	mov	r22,r6
 100ef28:	10026440 	call	1002644 <__mulsi3>
 100ef2c:	d9400317 	ldw	r5,12(sp)
 100ef30:	d9000017 	ldw	r4,0(sp)
 100ef34:	1023883a 	mov	r17,r2
 100ef38:	10026440 	call	1002644 <__mulsi3>
 100ef3c:	14cb883a 	add	r5,r2,r19
 100ef40:	894b883a 	add	r5,r17,r5
 100ef44:	b005883a 	mov	r2,r22
 100ef48:	2807883a 	mov	r3,r5
 100ef4c:	dfc00d17 	ldw	ra,52(sp)
 100ef50:	df000c17 	ldw	fp,48(sp)
 100ef54:	ddc00b17 	ldw	r23,44(sp)
 100ef58:	dd800a17 	ldw	r22,40(sp)
 100ef5c:	dd400917 	ldw	r21,36(sp)
 100ef60:	dd000817 	ldw	r20,32(sp)
 100ef64:	dcc00717 	ldw	r19,28(sp)
 100ef68:	dc800617 	ldw	r18,24(sp)
 100ef6c:	dc400517 	ldw	r17,20(sp)
 100ef70:	dc000417 	ldw	r16,16(sp)
 100ef74:	dec00e04 	addi	sp,sp,56
 100ef78:	f800283a 	ret

0100ef7c <__fixunsdfsi>:
 100ef7c:	defffb04 	addi	sp,sp,-20
 100ef80:	dc400115 	stw	r17,4(sp)
 100ef84:	dc000015 	stw	r16,0(sp)
 100ef88:	04507834 	movhi	r17,16864
 100ef8c:	0021883a 	mov	r16,zero
 100ef90:	800d883a 	mov	r6,r16
 100ef94:	880f883a 	mov	r7,r17
 100ef98:	dcc00315 	stw	r19,12(sp)
 100ef9c:	dc800215 	stw	r18,8(sp)
 100efa0:	2827883a 	mov	r19,r5
 100efa4:	2025883a 	mov	r18,r4
 100efa8:	dfc00415 	stw	ra,16(sp)
 100efac:	1010b0c0 	call	1010b0c <__gedf2>
 100efb0:	000d883a 	mov	r6,zero
 100efb4:	880f883a 	mov	r7,r17
 100efb8:	980b883a 	mov	r5,r19
 100efbc:	9009883a 	mov	r4,r18
 100efc0:	10000d16 	blt	r2,zero,100eff8 <__fixunsdfsi+0x7c>
 100efc4:	10102640 	call	1010264 <__subdf3>
 100efc8:	180b883a 	mov	r5,r3
 100efcc:	1009883a 	mov	r4,r2
 100efd0:	1010d9c0 	call	1010d9c <__fixdfsi>
 100efd4:	00e00034 	movhi	r3,32768
 100efd8:	10c5883a 	add	r2,r2,r3
 100efdc:	dfc00417 	ldw	ra,16(sp)
 100efe0:	dcc00317 	ldw	r19,12(sp)
 100efe4:	dc800217 	ldw	r18,8(sp)
 100efe8:	dc400117 	ldw	r17,4(sp)
 100efec:	dc000017 	ldw	r16,0(sp)
 100eff0:	dec00504 	addi	sp,sp,20
 100eff4:	f800283a 	ret
 100eff8:	980b883a 	mov	r5,r19
 100effc:	9009883a 	mov	r4,r18
 100f000:	1010d9c0 	call	1010d9c <__fixdfsi>
 100f004:	dfc00417 	ldw	ra,16(sp)
 100f008:	dcc00317 	ldw	r19,12(sp)
 100f00c:	dc800217 	ldw	r18,8(sp)
 100f010:	dc400117 	ldw	r17,4(sp)
 100f014:	dc000017 	ldw	r16,0(sp)
 100f018:	dec00504 	addi	sp,sp,20
 100f01c:	f800283a 	ret

0100f020 <__udivdi3>:
 100f020:	defff104 	addi	sp,sp,-60
 100f024:	0015883a 	mov	r10,zero
 100f028:	2005883a 	mov	r2,r4
 100f02c:	3011883a 	mov	r8,r6
 100f030:	df000d15 	stw	fp,52(sp)
 100f034:	dd400a15 	stw	r21,40(sp)
 100f038:	dcc00815 	stw	r19,32(sp)
 100f03c:	dfc00e15 	stw	ra,56(sp)
 100f040:	ddc00c15 	stw	r23,48(sp)
 100f044:	dd800b15 	stw	r22,44(sp)
 100f048:	dd000915 	stw	r20,36(sp)
 100f04c:	dc800715 	stw	r18,28(sp)
 100f050:	dc400615 	stw	r17,24(sp)
 100f054:	dc000515 	stw	r16,20(sp)
 100f058:	da800315 	stw	r10,12(sp)
 100f05c:	4027883a 	mov	r19,r8
 100f060:	1039883a 	mov	fp,r2
 100f064:	282b883a 	mov	r21,r5
 100f068:	da800415 	stw	r10,16(sp)
 100f06c:	3800401e 	bne	r7,zero,100f170 <__udivdi3+0x150>
 100f070:	2a006536 	bltu	r5,r8,100f208 <__udivdi3+0x1e8>
 100f074:	4000b526 	beq	r8,zero,100f34c <__udivdi3+0x32c>
 100f078:	00bfffd4 	movui	r2,65535
 100f07c:	14c0ad36 	bltu	r2,r19,100f334 <__udivdi3+0x314>
 100f080:	00803fc4 	movi	r2,255
 100f084:	14c15e36 	bltu	r2,r19,100f600 <__udivdi3+0x5e0>
 100f088:	000b883a 	mov	r5,zero
 100f08c:	0005883a 	mov	r2,zero
 100f090:	9884d83a 	srl	r2,r19,r2
 100f094:	010040b4 	movhi	r4,258
 100f098:	2132c104 	addi	r4,r4,-13564
 100f09c:	01800804 	movi	r6,32
 100f0a0:	1105883a 	add	r2,r2,r4
 100f0a4:	10c00003 	ldbu	r3,0(r2)
 100f0a8:	28c7883a 	add	r3,r5,r3
 100f0ac:	30e9c83a 	sub	r20,r6,r3
 100f0b0:	a0010a1e 	bne	r20,zero,100f4dc <__udivdi3+0x4bc>
 100f0b4:	982ed43a 	srli	r23,r19,16
 100f0b8:	acebc83a 	sub	r21,r21,r19
 100f0bc:	9dbfffcc 	andi	r22,r19,65535
 100f0c0:	05000044 	movi	r20,1
 100f0c4:	a809883a 	mov	r4,r21
 100f0c8:	b80b883a 	mov	r5,r23
 100f0cc:	10026340 	call	1002634 <__udivsi3>
 100f0d0:	100b883a 	mov	r5,r2
 100f0d4:	b009883a 	mov	r4,r22
 100f0d8:	1021883a 	mov	r16,r2
 100f0dc:	10026440 	call	1002644 <__mulsi3>
 100f0e0:	a809883a 	mov	r4,r21
 100f0e4:	b80b883a 	mov	r5,r23
 100f0e8:	1023883a 	mov	r17,r2
 100f0ec:	100263c0 	call	100263c <__umodsi3>
 100f0f0:	1004943a 	slli	r2,r2,16
 100f0f4:	e006d43a 	srli	r3,fp,16
 100f0f8:	10c4b03a 	or	r2,r2,r3
 100f0fc:	1440042e 	bgeu	r2,r17,100f110 <__udivdi3+0xf0>
 100f100:	14c5883a 	add	r2,r2,r19
 100f104:	843fffc4 	addi	r16,r16,-1
 100f108:	14c00136 	bltu	r2,r19,100f110 <__udivdi3+0xf0>
 100f10c:	14415c36 	bltu	r2,r17,100f680 <__udivdi3+0x660>
 100f110:	1463c83a 	sub	r17,r2,r17
 100f114:	8809883a 	mov	r4,r17
 100f118:	b80b883a 	mov	r5,r23
 100f11c:	10026340 	call	1002634 <__udivsi3>
 100f120:	100b883a 	mov	r5,r2
 100f124:	b009883a 	mov	r4,r22
 100f128:	102b883a 	mov	r21,r2
 100f12c:	10026440 	call	1002644 <__mulsi3>
 100f130:	8809883a 	mov	r4,r17
 100f134:	b80b883a 	mov	r5,r23
 100f138:	1025883a 	mov	r18,r2
 100f13c:	100263c0 	call	100263c <__umodsi3>
 100f140:	1004943a 	slli	r2,r2,16
 100f144:	e0ffffcc 	andi	r3,fp,65535
 100f148:	10c4b03a 	or	r2,r2,r3
 100f14c:	1480042e 	bgeu	r2,r18,100f160 <__udivdi3+0x140>
 100f150:	9885883a 	add	r2,r19,r2
 100f154:	ad7fffc4 	addi	r21,r21,-1
 100f158:	14c00136 	bltu	r2,r19,100f160 <__udivdi3+0x140>
 100f15c:	14813c36 	bltu	r2,r18,100f650 <__udivdi3+0x630>
 100f160:	8004943a 	slli	r2,r16,16
 100f164:	a009883a 	mov	r4,r20
 100f168:	a884b03a 	or	r2,r21,r2
 100f16c:	00001506 	br	100f1c4 <__udivdi3+0x1a4>
 100f170:	380d883a 	mov	r6,r7
 100f174:	29c06c36 	bltu	r5,r7,100f328 <__udivdi3+0x308>
 100f178:	00bfffd4 	movui	r2,65535
 100f17c:	11c06436 	bltu	r2,r7,100f310 <__udivdi3+0x2f0>
 100f180:	00803fc4 	movi	r2,255
 100f184:	11c11836 	bltu	r2,r7,100f5e8 <__udivdi3+0x5c8>
 100f188:	000b883a 	mov	r5,zero
 100f18c:	0005883a 	mov	r2,zero
 100f190:	3084d83a 	srl	r2,r6,r2
 100f194:	010040b4 	movhi	r4,258
 100f198:	2132c104 	addi	r4,r4,-13564
 100f19c:	01c00804 	movi	r7,32
 100f1a0:	1105883a 	add	r2,r2,r4
 100f1a4:	10c00003 	ldbu	r3,0(r2)
 100f1a8:	28c7883a 	add	r3,r5,r3
 100f1ac:	38edc83a 	sub	r22,r7,r3
 100f1b0:	b000731e 	bne	r22,zero,100f380 <__udivdi3+0x360>
 100f1b4:	35400136 	bltu	r6,r21,100f1bc <__udivdi3+0x19c>
 100f1b8:	e4c05b36 	bltu	fp,r19,100f328 <__udivdi3+0x308>
 100f1bc:	00800044 	movi	r2,1
 100f1c0:	0009883a 	mov	r4,zero
 100f1c4:	d8800315 	stw	r2,12(sp)
 100f1c8:	d9400317 	ldw	r5,12(sp)
 100f1cc:	d9000415 	stw	r4,16(sp)
 100f1d0:	2007883a 	mov	r3,r4
 100f1d4:	2805883a 	mov	r2,r5
 100f1d8:	dfc00e17 	ldw	ra,56(sp)
 100f1dc:	df000d17 	ldw	fp,52(sp)
 100f1e0:	ddc00c17 	ldw	r23,48(sp)
 100f1e4:	dd800b17 	ldw	r22,44(sp)
 100f1e8:	dd400a17 	ldw	r21,40(sp)
 100f1ec:	dd000917 	ldw	r20,36(sp)
 100f1f0:	dcc00817 	ldw	r19,32(sp)
 100f1f4:	dc800717 	ldw	r18,28(sp)
 100f1f8:	dc400617 	ldw	r17,24(sp)
 100f1fc:	dc000517 	ldw	r16,20(sp)
 100f200:	dec00f04 	addi	sp,sp,60
 100f204:	f800283a 	ret
 100f208:	00bfffd4 	movui	r2,65535
 100f20c:	12005636 	bltu	r2,r8,100f368 <__udivdi3+0x348>
 100f210:	00803fc4 	movi	r2,255
 100f214:	12010036 	bltu	r2,r8,100f618 <__udivdi3+0x5f8>
 100f218:	000b883a 	mov	r5,zero
 100f21c:	0005883a 	mov	r2,zero
 100f220:	9884d83a 	srl	r2,r19,r2
 100f224:	010040b4 	movhi	r4,258
 100f228:	2132c104 	addi	r4,r4,-13564
 100f22c:	01800804 	movi	r6,32
 100f230:	1105883a 	add	r2,r2,r4
 100f234:	10c00003 	ldbu	r3,0(r2)
 100f238:	28c7883a 	add	r3,r5,r3
 100f23c:	30cbc83a 	sub	r5,r6,r3
 100f240:	28000626 	beq	r5,zero,100f25c <__udivdi3+0x23c>
 100f244:	3145c83a 	sub	r2,r6,r5
 100f248:	e084d83a 	srl	r2,fp,r2
 100f24c:	a946983a 	sll	r3,r21,r5
 100f250:	e178983a 	sll	fp,fp,r5
 100f254:	9966983a 	sll	r19,r19,r5
 100f258:	18aab03a 	or	r21,r3,r2
 100f25c:	982ed43a 	srli	r23,r19,16
 100f260:	a809883a 	mov	r4,r21
 100f264:	9cbfffcc 	andi	r18,r19,65535
 100f268:	b80b883a 	mov	r5,r23
 100f26c:	10026340 	call	1002634 <__udivsi3>
 100f270:	100b883a 	mov	r5,r2
 100f274:	9009883a 	mov	r4,r18
 100f278:	1021883a 	mov	r16,r2
 100f27c:	10026440 	call	1002644 <__mulsi3>
 100f280:	a809883a 	mov	r4,r21
 100f284:	b80b883a 	mov	r5,r23
 100f288:	1023883a 	mov	r17,r2
 100f28c:	100263c0 	call	100263c <__umodsi3>
 100f290:	1004943a 	slli	r2,r2,16
 100f294:	e006d43a 	srli	r3,fp,16
 100f298:	10c4b03a 	or	r2,r2,r3
 100f29c:	1440042e 	bgeu	r2,r17,100f2b0 <__udivdi3+0x290>
 100f2a0:	14c5883a 	add	r2,r2,r19
 100f2a4:	843fffc4 	addi	r16,r16,-1
 100f2a8:	14c00136 	bltu	r2,r19,100f2b0 <__udivdi3+0x290>
 100f2ac:	1440ea36 	bltu	r2,r17,100f658 <__udivdi3+0x638>
 100f2b0:	1463c83a 	sub	r17,r2,r17
 100f2b4:	8809883a 	mov	r4,r17
 100f2b8:	b80b883a 	mov	r5,r23
 100f2bc:	10026340 	call	1002634 <__udivsi3>
 100f2c0:	100b883a 	mov	r5,r2
 100f2c4:	9009883a 	mov	r4,r18
 100f2c8:	102b883a 	mov	r21,r2
 100f2cc:	10026440 	call	1002644 <__mulsi3>
 100f2d0:	8809883a 	mov	r4,r17
 100f2d4:	b80b883a 	mov	r5,r23
 100f2d8:	1025883a 	mov	r18,r2
 100f2dc:	100263c0 	call	100263c <__umodsi3>
 100f2e0:	1004943a 	slli	r2,r2,16
 100f2e4:	e0ffffcc 	andi	r3,fp,65535
 100f2e8:	10c4b03a 	or	r2,r2,r3
 100f2ec:	1480042e 	bgeu	r2,r18,100f300 <__udivdi3+0x2e0>
 100f2f0:	9885883a 	add	r2,r19,r2
 100f2f4:	ad7fffc4 	addi	r21,r21,-1
 100f2f8:	14c00136 	bltu	r2,r19,100f300 <__udivdi3+0x2e0>
 100f2fc:	1480d936 	bltu	r2,r18,100f664 <__udivdi3+0x644>
 100f300:	8004943a 	slli	r2,r16,16
 100f304:	0009883a 	mov	r4,zero
 100f308:	a884b03a 	or	r2,r21,r2
 100f30c:	003fad06 	br	100f1c4 <__udivdi3+0x1a4>
 100f310:	00804034 	movhi	r2,256
 100f314:	10bfffc4 	addi	r2,r2,-1
 100f318:	11c0b636 	bltu	r2,r7,100f5f4 <__udivdi3+0x5d4>
 100f31c:	01400404 	movi	r5,16
 100f320:	2805883a 	mov	r2,r5
 100f324:	003f9a06 	br	100f190 <__udivdi3+0x170>
 100f328:	0005883a 	mov	r2,zero
 100f32c:	0009883a 	mov	r4,zero
 100f330:	003fa406 	br	100f1c4 <__udivdi3+0x1a4>
 100f334:	00804034 	movhi	r2,256
 100f338:	10bfffc4 	addi	r2,r2,-1
 100f33c:	14c0b336 	bltu	r2,r19,100f60c <__udivdi3+0x5ec>
 100f340:	01400404 	movi	r5,16
 100f344:	2805883a 	mov	r2,r5
 100f348:	003f5106 	br	100f090 <__udivdi3+0x70>
 100f34c:	01000044 	movi	r4,1
 100f350:	000b883a 	mov	r5,zero
 100f354:	10026340 	call	1002634 <__udivsi3>
 100f358:	1027883a 	mov	r19,r2
 100f35c:	00bfffd4 	movui	r2,65535
 100f360:	14fff436 	bltu	r2,r19,100f334 <__udivdi3+0x314>
 100f364:	003f4606 	br	100f080 <__udivdi3+0x60>
 100f368:	00804034 	movhi	r2,256
 100f36c:	10bfffc4 	addi	r2,r2,-1
 100f370:	1200ac36 	bltu	r2,r8,100f624 <__udivdi3+0x604>
 100f374:	01400404 	movi	r5,16
 100f378:	2805883a 	mov	r2,r5
 100f37c:	003fa806 	br	100f220 <__udivdi3+0x200>
 100f380:	3d85c83a 	sub	r2,r7,r22
 100f384:	3588983a 	sll	r4,r6,r22
 100f388:	9886d83a 	srl	r3,r19,r2
 100f38c:	a8a2d83a 	srl	r17,r21,r2
 100f390:	e084d83a 	srl	r2,fp,r2
 100f394:	20eeb03a 	or	r23,r4,r3
 100f398:	b824d43a 	srli	r18,r23,16
 100f39c:	ad86983a 	sll	r3,r21,r22
 100f3a0:	8809883a 	mov	r4,r17
 100f3a4:	900b883a 	mov	r5,r18
 100f3a8:	1886b03a 	or	r3,r3,r2
 100f3ac:	d8c00115 	stw	r3,4(sp)
 100f3b0:	bc3fffcc 	andi	r16,r23,65535
 100f3b4:	10026340 	call	1002634 <__udivsi3>
 100f3b8:	100b883a 	mov	r5,r2
 100f3bc:	8009883a 	mov	r4,r16
 100f3c0:	1029883a 	mov	r20,r2
 100f3c4:	10026440 	call	1002644 <__mulsi3>
 100f3c8:	900b883a 	mov	r5,r18
 100f3cc:	8809883a 	mov	r4,r17
 100f3d0:	102b883a 	mov	r21,r2
 100f3d4:	100263c0 	call	100263c <__umodsi3>
 100f3d8:	d9400117 	ldw	r5,4(sp)
 100f3dc:	1004943a 	slli	r2,r2,16
 100f3e0:	9da6983a 	sll	r19,r19,r22
 100f3e4:	2806d43a 	srli	r3,r5,16
 100f3e8:	10c4b03a 	or	r2,r2,r3
 100f3ec:	1540032e 	bgeu	r2,r21,100f3fc <__udivdi3+0x3dc>
 100f3f0:	15c5883a 	add	r2,r2,r23
 100f3f4:	a53fffc4 	addi	r20,r20,-1
 100f3f8:	15c0912e 	bgeu	r2,r23,100f640 <__udivdi3+0x620>
 100f3fc:	1563c83a 	sub	r17,r2,r21
 100f400:	8809883a 	mov	r4,r17
 100f404:	900b883a 	mov	r5,r18
 100f408:	10026340 	call	1002634 <__udivsi3>
 100f40c:	100b883a 	mov	r5,r2
 100f410:	8009883a 	mov	r4,r16
 100f414:	102b883a 	mov	r21,r2
 100f418:	10026440 	call	1002644 <__mulsi3>
 100f41c:	8809883a 	mov	r4,r17
 100f420:	900b883a 	mov	r5,r18
 100f424:	1021883a 	mov	r16,r2
 100f428:	100263c0 	call	100263c <__umodsi3>
 100f42c:	da800117 	ldw	r10,4(sp)
 100f430:	1004943a 	slli	r2,r2,16
 100f434:	50ffffcc 	andi	r3,r10,65535
 100f438:	10c6b03a 	or	r3,r2,r3
 100f43c:	1c00032e 	bgeu	r3,r16,100f44c <__udivdi3+0x42c>
 100f440:	1dc7883a 	add	r3,r3,r23
 100f444:	ad7fffc4 	addi	r21,r21,-1
 100f448:	1dc0792e 	bgeu	r3,r23,100f630 <__udivdi3+0x610>
 100f44c:	a004943a 	slli	r2,r20,16
 100f450:	982ed43a 	srli	r23,r19,16
 100f454:	9cffffcc 	andi	r19,r19,65535
 100f458:	a8a4b03a 	or	r18,r21,r2
 100f45c:	947fffcc 	andi	r17,r18,65535
 100f460:	902ad43a 	srli	r21,r18,16
 100f464:	8809883a 	mov	r4,r17
 100f468:	980b883a 	mov	r5,r19
 100f46c:	1c21c83a 	sub	r16,r3,r16
 100f470:	10026440 	call	1002644 <__mulsi3>
 100f474:	8809883a 	mov	r4,r17
 100f478:	b80b883a 	mov	r5,r23
 100f47c:	1029883a 	mov	r20,r2
 100f480:	10026440 	call	1002644 <__mulsi3>
 100f484:	980b883a 	mov	r5,r19
 100f488:	a809883a 	mov	r4,r21
 100f48c:	1023883a 	mov	r17,r2
 100f490:	10026440 	call	1002644 <__mulsi3>
 100f494:	a809883a 	mov	r4,r21
 100f498:	b80b883a 	mov	r5,r23
 100f49c:	1027883a 	mov	r19,r2
 100f4a0:	10026440 	call	1002644 <__mulsi3>
 100f4a4:	1009883a 	mov	r4,r2
 100f4a8:	a004d43a 	srli	r2,r20,16
 100f4ac:	8ce3883a 	add	r17,r17,r19
 100f4b0:	1447883a 	add	r3,r2,r17
 100f4b4:	1cc0022e 	bgeu	r3,r19,100f4c0 <__udivdi3+0x4a0>
 100f4b8:	00800074 	movhi	r2,1
 100f4bc:	2089883a 	add	r4,r4,r2
 100f4c0:	1804d43a 	srli	r2,r3,16
 100f4c4:	2085883a 	add	r2,r4,r2
 100f4c8:	80804436 	bltu	r16,r2,100f5dc <__udivdi3+0x5bc>
 100f4cc:	80803e26 	beq	r16,r2,100f5c8 <__udivdi3+0x5a8>
 100f4d0:	9005883a 	mov	r2,r18
 100f4d4:	0009883a 	mov	r4,zero
 100f4d8:	003f3a06 	br	100f1c4 <__udivdi3+0x1a4>
 100f4dc:	9d26983a 	sll	r19,r19,r20
 100f4e0:	3505c83a 	sub	r2,r6,r20
 100f4e4:	a8a2d83a 	srl	r17,r21,r2
 100f4e8:	982ed43a 	srli	r23,r19,16
 100f4ec:	e084d83a 	srl	r2,fp,r2
 100f4f0:	ad06983a 	sll	r3,r21,r20
 100f4f4:	8809883a 	mov	r4,r17
 100f4f8:	b80b883a 	mov	r5,r23
 100f4fc:	1886b03a 	or	r3,r3,r2
 100f500:	d8c00015 	stw	r3,0(sp)
 100f504:	9dbfffcc 	andi	r22,r19,65535
 100f508:	10026340 	call	1002634 <__udivsi3>
 100f50c:	100b883a 	mov	r5,r2
 100f510:	b009883a 	mov	r4,r22
 100f514:	d8800215 	stw	r2,8(sp)
 100f518:	10026440 	call	1002644 <__mulsi3>
 100f51c:	8809883a 	mov	r4,r17
 100f520:	b80b883a 	mov	r5,r23
 100f524:	102b883a 	mov	r21,r2
 100f528:	100263c0 	call	100263c <__umodsi3>
 100f52c:	d9000017 	ldw	r4,0(sp)
 100f530:	1004943a 	slli	r2,r2,16
 100f534:	2006d43a 	srli	r3,r4,16
 100f538:	10c4b03a 	or	r2,r2,r3
 100f53c:	1540052e 	bgeu	r2,r21,100f554 <__udivdi3+0x534>
 100f540:	d9400217 	ldw	r5,8(sp)
 100f544:	14c5883a 	add	r2,r2,r19
 100f548:	297fffc4 	addi	r5,r5,-1
 100f54c:	d9400215 	stw	r5,8(sp)
 100f550:	14c0462e 	bgeu	r2,r19,100f66c <__udivdi3+0x64c>
 100f554:	1563c83a 	sub	r17,r2,r21
 100f558:	8809883a 	mov	r4,r17
 100f55c:	b80b883a 	mov	r5,r23
 100f560:	10026340 	call	1002634 <__udivsi3>
 100f564:	100b883a 	mov	r5,r2
 100f568:	b009883a 	mov	r4,r22
 100f56c:	1025883a 	mov	r18,r2
 100f570:	10026440 	call	1002644 <__mulsi3>
 100f574:	8809883a 	mov	r4,r17
 100f578:	b80b883a 	mov	r5,r23
 100f57c:	1021883a 	mov	r16,r2
 100f580:	100263c0 	call	100263c <__umodsi3>
 100f584:	da800017 	ldw	r10,0(sp)
 100f588:	1004943a 	slli	r2,r2,16
 100f58c:	50ffffcc 	andi	r3,r10,65535
 100f590:	10c6b03a 	or	r3,r2,r3
 100f594:	1c00062e 	bgeu	r3,r16,100f5b0 <__udivdi3+0x590>
 100f598:	1cc7883a 	add	r3,r3,r19
 100f59c:	94bfffc4 	addi	r18,r18,-1
 100f5a0:	1cc00336 	bltu	r3,r19,100f5b0 <__udivdi3+0x590>
 100f5a4:	1c00022e 	bgeu	r3,r16,100f5b0 <__udivdi3+0x590>
 100f5a8:	94bfffc4 	addi	r18,r18,-1
 100f5ac:	1cc7883a 	add	r3,r3,r19
 100f5b0:	d9000217 	ldw	r4,8(sp)
 100f5b4:	e538983a 	sll	fp,fp,r20
 100f5b8:	1c2bc83a 	sub	r21,r3,r16
 100f5bc:	2004943a 	slli	r2,r4,16
 100f5c0:	90a8b03a 	or	r20,r18,r2
 100f5c4:	003ebf06 	br	100f0c4 <__udivdi3+0xa4>
 100f5c8:	1804943a 	slli	r2,r3,16
 100f5cc:	e588983a 	sll	r4,fp,r22
 100f5d0:	a0ffffcc 	andi	r3,r20,65535
 100f5d4:	10c5883a 	add	r2,r2,r3
 100f5d8:	20bfbd2e 	bgeu	r4,r2,100f4d0 <__udivdi3+0x4b0>
 100f5dc:	90bfffc4 	addi	r2,r18,-1
 100f5e0:	0009883a 	mov	r4,zero
 100f5e4:	003ef706 	br	100f1c4 <__udivdi3+0x1a4>
 100f5e8:	01400204 	movi	r5,8
 100f5ec:	2805883a 	mov	r2,r5
 100f5f0:	003ee706 	br	100f190 <__udivdi3+0x170>
 100f5f4:	01400604 	movi	r5,24
 100f5f8:	2805883a 	mov	r2,r5
 100f5fc:	003ee406 	br	100f190 <__udivdi3+0x170>
 100f600:	01400204 	movi	r5,8
 100f604:	2805883a 	mov	r2,r5
 100f608:	003ea106 	br	100f090 <__udivdi3+0x70>
 100f60c:	01400604 	movi	r5,24
 100f610:	2805883a 	mov	r2,r5
 100f614:	003e9e06 	br	100f090 <__udivdi3+0x70>
 100f618:	01400204 	movi	r5,8
 100f61c:	2805883a 	mov	r2,r5
 100f620:	003eff06 	br	100f220 <__udivdi3+0x200>
 100f624:	01400604 	movi	r5,24
 100f628:	2805883a 	mov	r2,r5
 100f62c:	003efc06 	br	100f220 <__udivdi3+0x200>
 100f630:	1c3f862e 	bgeu	r3,r16,100f44c <__udivdi3+0x42c>
 100f634:	1dc7883a 	add	r3,r3,r23
 100f638:	ad7fffc4 	addi	r21,r21,-1
 100f63c:	003f8306 	br	100f44c <__udivdi3+0x42c>
 100f640:	157f6e2e 	bgeu	r2,r21,100f3fc <__udivdi3+0x3dc>
 100f644:	a53fffc4 	addi	r20,r20,-1
 100f648:	15c5883a 	add	r2,r2,r23
 100f64c:	003f6b06 	br	100f3fc <__udivdi3+0x3dc>
 100f650:	ad7fffc4 	addi	r21,r21,-1
 100f654:	003ec206 	br	100f160 <__udivdi3+0x140>
 100f658:	843fffc4 	addi	r16,r16,-1
 100f65c:	14c5883a 	add	r2,r2,r19
 100f660:	003f1306 	br	100f2b0 <__udivdi3+0x290>
 100f664:	ad7fffc4 	addi	r21,r21,-1
 100f668:	003f2506 	br	100f300 <__udivdi3+0x2e0>
 100f66c:	157fb92e 	bgeu	r2,r21,100f554 <__udivdi3+0x534>
 100f670:	297fffc4 	addi	r5,r5,-1
 100f674:	14c5883a 	add	r2,r2,r19
 100f678:	d9400215 	stw	r5,8(sp)
 100f67c:	003fb506 	br	100f554 <__udivdi3+0x534>
 100f680:	843fffc4 	addi	r16,r16,-1
 100f684:	14c5883a 	add	r2,r2,r19
 100f688:	003ea106 	br	100f110 <__udivdi3+0xf0>

0100f68c <__umoddi3>:
 100f68c:	defff004 	addi	sp,sp,-64
 100f690:	3011883a 	mov	r8,r6
 100f694:	000d883a 	mov	r6,zero
 100f698:	dd400b15 	stw	r21,44(sp)
 100f69c:	dcc00915 	stw	r19,36(sp)
 100f6a0:	dc000615 	stw	r16,24(sp)
 100f6a4:	dfc00f15 	stw	ra,60(sp)
 100f6a8:	df000e15 	stw	fp,56(sp)
 100f6ac:	ddc00d15 	stw	r23,52(sp)
 100f6b0:	dd800c15 	stw	r22,48(sp)
 100f6b4:	dd000a15 	stw	r20,40(sp)
 100f6b8:	dc800815 	stw	r18,32(sp)
 100f6bc:	dc400715 	stw	r17,28(sp)
 100f6c0:	2817883a 	mov	r11,r5
 100f6c4:	d9800415 	stw	r6,16(sp)
 100f6c8:	4027883a 	mov	r19,r8
 100f6cc:	d9800515 	stw	r6,20(sp)
 100f6d0:	2021883a 	mov	r16,r4
 100f6d4:	282b883a 	mov	r21,r5
 100f6d8:	38002c1e 	bne	r7,zero,100f78c <__umoddi3+0x100>
 100f6dc:	2a005636 	bltu	r5,r8,100f838 <__umoddi3+0x1ac>
 100f6e0:	40009a26 	beq	r8,zero,100f94c <__umoddi3+0x2c0>
 100f6e4:	00bfffd4 	movui	r2,65535
 100f6e8:	14c09236 	bltu	r2,r19,100f934 <__umoddi3+0x2a8>
 100f6ec:	00803fc4 	movi	r2,255
 100f6f0:	14c15c36 	bltu	r2,r19,100fc64 <__umoddi3+0x5d8>
 100f6f4:	000b883a 	mov	r5,zero
 100f6f8:	0005883a 	mov	r2,zero
 100f6fc:	9884d83a 	srl	r2,r19,r2
 100f700:	010040b4 	movhi	r4,258
 100f704:	2132c104 	addi	r4,r4,-13564
 100f708:	01800804 	movi	r6,32
 100f70c:	1105883a 	add	r2,r2,r4
 100f710:	10c00003 	ldbu	r3,0(r2)
 100f714:	28c7883a 	add	r3,r5,r3
 100f718:	30e5c83a 	sub	r18,r6,r3
 100f71c:	9000a41e 	bne	r18,zero,100f9b0 <__umoddi3+0x324>
 100f720:	982ed43a 	srli	r23,r19,16
 100f724:	acebc83a 	sub	r21,r21,r19
 100f728:	9d3fffcc 	andi	r20,r19,65535
 100f72c:	002d883a 	mov	r22,zero
 100f730:	a809883a 	mov	r4,r21
 100f734:	b80b883a 	mov	r5,r23
 100f738:	10026340 	call	1002634 <__udivsi3>
 100f73c:	100b883a 	mov	r5,r2
 100f740:	a009883a 	mov	r4,r20
 100f744:	10026440 	call	1002644 <__mulsi3>
 100f748:	a809883a 	mov	r4,r21
 100f74c:	b80b883a 	mov	r5,r23
 100f750:	1023883a 	mov	r17,r2
 100f754:	100263c0 	call	100263c <__umodsi3>
 100f758:	1004943a 	slli	r2,r2,16
 100f75c:	8006d43a 	srli	r3,r16,16
 100f760:	10c4b03a 	or	r2,r2,r3
 100f764:	1440032e 	bgeu	r2,r17,100f774 <__umoddi3+0xe8>
 100f768:	14c5883a 	add	r2,r2,r19
 100f76c:	14c00136 	bltu	r2,r19,100f774 <__umoddi3+0xe8>
 100f770:	14415836 	bltu	r2,r17,100fcd4 <__umoddi3+0x648>
 100f774:	1463c83a 	sub	r17,r2,r17
 100f778:	8809883a 	mov	r4,r17
 100f77c:	b80b883a 	mov	r5,r23
 100f780:	10026340 	call	1002634 <__udivsi3>
 100f784:	a009883a 	mov	r4,r20
 100f788:	00005306 	br	100f8d8 <__umoddi3+0x24c>
 100f78c:	380d883a 	mov	r6,r7
 100f790:	29c0132e 	bgeu	r5,r7,100f7e0 <__umoddi3+0x154>
 100f794:	d9000415 	stw	r4,16(sp)
 100f798:	d9400515 	stw	r5,20(sp)
 100f79c:	d9400417 	ldw	r5,16(sp)
 100f7a0:	5813883a 	mov	r9,r11
 100f7a4:	2811883a 	mov	r8,r5
 100f7a8:	4005883a 	mov	r2,r8
 100f7ac:	4807883a 	mov	r3,r9
 100f7b0:	dfc00f17 	ldw	ra,60(sp)
 100f7b4:	df000e17 	ldw	fp,56(sp)
 100f7b8:	ddc00d17 	ldw	r23,52(sp)
 100f7bc:	dd800c17 	ldw	r22,48(sp)
 100f7c0:	dd400b17 	ldw	r21,44(sp)
 100f7c4:	dd000a17 	ldw	r20,40(sp)
 100f7c8:	dcc00917 	ldw	r19,36(sp)
 100f7cc:	dc800817 	ldw	r18,32(sp)
 100f7d0:	dc400717 	ldw	r17,28(sp)
 100f7d4:	dc000617 	ldw	r16,24(sp)
 100f7d8:	dec01004 	addi	sp,sp,64
 100f7dc:	f800283a 	ret
 100f7e0:	00bfffd4 	movui	r2,65535
 100f7e4:	11c06636 	bltu	r2,r7,100f980 <__umoddi3+0x2f4>
 100f7e8:	00803fc4 	movi	r2,255
 100f7ec:	11c12036 	bltu	r2,r7,100fc70 <__umoddi3+0x5e4>
 100f7f0:	000b883a 	mov	r5,zero
 100f7f4:	0005883a 	mov	r2,zero
 100f7f8:	3084d83a 	srl	r2,r6,r2
 100f7fc:	010040b4 	movhi	r4,258
 100f800:	2132c104 	addi	r4,r4,-13564
 100f804:	01c00804 	movi	r7,32
 100f808:	1105883a 	add	r2,r2,r4
 100f80c:	10c00003 	ldbu	r3,0(r2)
 100f810:	28c7883a 	add	r3,r5,r3
 100f814:	38e5c83a 	sub	r18,r7,r3
 100f818:	9000941e 	bne	r18,zero,100fa6c <__umoddi3+0x3e0>
 100f81c:	35405e36 	bltu	r6,r21,100f998 <__umoddi3+0x30c>
 100f820:	84c05d2e 	bgeu	r16,r19,100f998 <__umoddi3+0x30c>
 100f824:	8011883a 	mov	r8,r16
 100f828:	a813883a 	mov	r9,r21
 100f82c:	dc000415 	stw	r16,16(sp)
 100f830:	dd400515 	stw	r21,20(sp)
 100f834:	003fdc06 	br	100f7a8 <__umoddi3+0x11c>
 100f838:	00bfffd4 	movui	r2,65535
 100f83c:	12004a36 	bltu	r2,r8,100f968 <__umoddi3+0x2dc>
 100f840:	00803fc4 	movi	r2,255
 100f844:	12010d36 	bltu	r2,r8,100fc7c <__umoddi3+0x5f0>
 100f848:	000b883a 	mov	r5,zero
 100f84c:	0005883a 	mov	r2,zero
 100f850:	9884d83a 	srl	r2,r19,r2
 100f854:	010040b4 	movhi	r4,258
 100f858:	2132c104 	addi	r4,r4,-13564
 100f85c:	01800804 	movi	r6,32
 100f860:	1105883a 	add	r2,r2,r4
 100f864:	10c00003 	ldbu	r3,0(r2)
 100f868:	28c7883a 	add	r3,r5,r3
 100f86c:	30c7c83a 	sub	r3,r6,r3
 100f870:	1800dc1e 	bne	r3,zero,100fbe4 <__umoddi3+0x558>
 100f874:	002d883a 	mov	r22,zero
 100f878:	982ed43a 	srli	r23,r19,16
 100f87c:	a809883a 	mov	r4,r21
 100f880:	9cbfffcc 	andi	r18,r19,65535
 100f884:	b80b883a 	mov	r5,r23
 100f888:	10026340 	call	1002634 <__udivsi3>
 100f88c:	100b883a 	mov	r5,r2
 100f890:	9009883a 	mov	r4,r18
 100f894:	10026440 	call	1002644 <__mulsi3>
 100f898:	a809883a 	mov	r4,r21
 100f89c:	b80b883a 	mov	r5,r23
 100f8a0:	1023883a 	mov	r17,r2
 100f8a4:	100263c0 	call	100263c <__umodsi3>
 100f8a8:	1004943a 	slli	r2,r2,16
 100f8ac:	8006d43a 	srli	r3,r16,16
 100f8b0:	10c4b03a 	or	r2,r2,r3
 100f8b4:	1440032e 	bgeu	r2,r17,100f8c4 <__umoddi3+0x238>
 100f8b8:	14c5883a 	add	r2,r2,r19
 100f8bc:	14c00136 	bltu	r2,r19,100f8c4 <__umoddi3+0x238>
 100f8c0:	14410236 	bltu	r2,r17,100fccc <__umoddi3+0x640>
 100f8c4:	1463c83a 	sub	r17,r2,r17
 100f8c8:	8809883a 	mov	r4,r17
 100f8cc:	b80b883a 	mov	r5,r23
 100f8d0:	10026340 	call	1002634 <__udivsi3>
 100f8d4:	9009883a 	mov	r4,r18
 100f8d8:	100b883a 	mov	r5,r2
 100f8dc:	10026440 	call	1002644 <__mulsi3>
 100f8e0:	8809883a 	mov	r4,r17
 100f8e4:	b80b883a 	mov	r5,r23
 100f8e8:	102b883a 	mov	r21,r2
 100f8ec:	100263c0 	call	100263c <__umodsi3>
 100f8f0:	1004943a 	slli	r2,r2,16
 100f8f4:	80ffffcc 	andi	r3,r16,65535
 100f8f8:	10c4b03a 	or	r2,r2,r3
 100f8fc:	1540042e 	bgeu	r2,r21,100f910 <__umoddi3+0x284>
 100f900:	14c5883a 	add	r2,r2,r19
 100f904:	14c00236 	bltu	r2,r19,100f910 <__umoddi3+0x284>
 100f908:	1540012e 	bgeu	r2,r21,100f910 <__umoddi3+0x284>
 100f90c:	14c5883a 	add	r2,r2,r19
 100f910:	1545c83a 	sub	r2,r2,r21
 100f914:	1584d83a 	srl	r2,r2,r22
 100f918:	0013883a 	mov	r9,zero
 100f91c:	d8800415 	stw	r2,16(sp)
 100f920:	d8c00417 	ldw	r3,16(sp)
 100f924:	0005883a 	mov	r2,zero
 100f928:	d8800515 	stw	r2,20(sp)
 100f92c:	1811883a 	mov	r8,r3
 100f930:	003f9d06 	br	100f7a8 <__umoddi3+0x11c>
 100f934:	00804034 	movhi	r2,256
 100f938:	10bfffc4 	addi	r2,r2,-1
 100f93c:	14c0c636 	bltu	r2,r19,100fc58 <__umoddi3+0x5cc>
 100f940:	01400404 	movi	r5,16
 100f944:	2805883a 	mov	r2,r5
 100f948:	003f6c06 	br	100f6fc <__umoddi3+0x70>
 100f94c:	01000044 	movi	r4,1
 100f950:	000b883a 	mov	r5,zero
 100f954:	10026340 	call	1002634 <__udivsi3>
 100f958:	1027883a 	mov	r19,r2
 100f95c:	00bfffd4 	movui	r2,65535
 100f960:	14fff436 	bltu	r2,r19,100f934 <__umoddi3+0x2a8>
 100f964:	003f6106 	br	100f6ec <__umoddi3+0x60>
 100f968:	00804034 	movhi	r2,256
 100f96c:	10bfffc4 	addi	r2,r2,-1
 100f970:	1200c536 	bltu	r2,r8,100fc88 <__umoddi3+0x5fc>
 100f974:	01400404 	movi	r5,16
 100f978:	2805883a 	mov	r2,r5
 100f97c:	003fb406 	br	100f850 <__umoddi3+0x1c4>
 100f980:	00804034 	movhi	r2,256
 100f984:	10bfffc4 	addi	r2,r2,-1
 100f988:	11c0c236 	bltu	r2,r7,100fc94 <__umoddi3+0x608>
 100f98c:	01400404 	movi	r5,16
 100f990:	2805883a 	mov	r2,r5
 100f994:	003f9806 	br	100f7f8 <__umoddi3+0x16c>
 100f998:	84c9c83a 	sub	r4,r16,r19
 100f99c:	8105803a 	cmpltu	r2,r16,r4
 100f9a0:	a987c83a 	sub	r3,r21,r6
 100f9a4:	18abc83a 	sub	r21,r3,r2
 100f9a8:	2021883a 	mov	r16,r4
 100f9ac:	003f9d06 	br	100f824 <__umoddi3+0x198>
 100f9b0:	9ca6983a 	sll	r19,r19,r18
 100f9b4:	3485c83a 	sub	r2,r6,r18
 100f9b8:	a8a2d83a 	srl	r17,r21,r2
 100f9bc:	982ed43a 	srli	r23,r19,16
 100f9c0:	ac86983a 	sll	r3,r21,r18
 100f9c4:	8084d83a 	srl	r2,r16,r2
 100f9c8:	8809883a 	mov	r4,r17
 100f9cc:	b80b883a 	mov	r5,r23
 100f9d0:	18b8b03a 	or	fp,r3,r2
 100f9d4:	9d3fffcc 	andi	r20,r19,65535
 100f9d8:	10026340 	call	1002634 <__udivsi3>
 100f9dc:	100b883a 	mov	r5,r2
 100f9e0:	a009883a 	mov	r4,r20
 100f9e4:	10026440 	call	1002644 <__mulsi3>
 100f9e8:	8809883a 	mov	r4,r17
 100f9ec:	b80b883a 	mov	r5,r23
 100f9f0:	102b883a 	mov	r21,r2
 100f9f4:	100263c0 	call	100263c <__umodsi3>
 100f9f8:	1004943a 	slli	r2,r2,16
 100f9fc:	e006d43a 	srli	r3,fp,16
 100fa00:	902d883a 	mov	r22,r18
 100fa04:	10c4b03a 	or	r2,r2,r3
 100fa08:	1540022e 	bgeu	r2,r21,100fa14 <__umoddi3+0x388>
 100fa0c:	14c5883a 	add	r2,r2,r19
 100fa10:	14c0ab2e 	bgeu	r2,r19,100fcc0 <__umoddi3+0x634>
 100fa14:	1563c83a 	sub	r17,r2,r21
 100fa18:	8809883a 	mov	r4,r17
 100fa1c:	b80b883a 	mov	r5,r23
 100fa20:	10026340 	call	1002634 <__udivsi3>
 100fa24:	100b883a 	mov	r5,r2
 100fa28:	a009883a 	mov	r4,r20
 100fa2c:	10026440 	call	1002644 <__mulsi3>
 100fa30:	8809883a 	mov	r4,r17
 100fa34:	b80b883a 	mov	r5,r23
 100fa38:	102b883a 	mov	r21,r2
 100fa3c:	100263c0 	call	100263c <__umodsi3>
 100fa40:	1004943a 	slli	r2,r2,16
 100fa44:	e0ffffcc 	andi	r3,fp,65535
 100fa48:	10c4b03a 	or	r2,r2,r3
 100fa4c:	1540042e 	bgeu	r2,r21,100fa60 <__umoddi3+0x3d4>
 100fa50:	14c5883a 	add	r2,r2,r19
 100fa54:	14c00236 	bltu	r2,r19,100fa60 <__umoddi3+0x3d4>
 100fa58:	1540012e 	bgeu	r2,r21,100fa60 <__umoddi3+0x3d4>
 100fa5c:	14c5883a 	add	r2,r2,r19
 100fa60:	84a0983a 	sll	r16,r16,r18
 100fa64:	156bc83a 	sub	r21,r2,r21
 100fa68:	003f3106 	br	100f730 <__umoddi3+0xa4>
 100fa6c:	3c8fc83a 	sub	r7,r7,r18
 100fa70:	3486983a 	sll	r3,r6,r18
 100fa74:	99c4d83a 	srl	r2,r19,r7
 100fa78:	a9e2d83a 	srl	r17,r21,r7
 100fa7c:	ac8c983a 	sll	r6,r21,r18
 100fa80:	18acb03a 	or	r22,r3,r2
 100fa84:	b02ed43a 	srli	r23,r22,16
 100fa88:	81c4d83a 	srl	r2,r16,r7
 100fa8c:	8809883a 	mov	r4,r17
 100fa90:	b80b883a 	mov	r5,r23
 100fa94:	308cb03a 	or	r6,r6,r2
 100fa98:	d9c00315 	stw	r7,12(sp)
 100fa9c:	d9800215 	stw	r6,8(sp)
 100faa0:	b53fffcc 	andi	r20,r22,65535
 100faa4:	10026340 	call	1002634 <__udivsi3>
 100faa8:	100b883a 	mov	r5,r2
 100faac:	a009883a 	mov	r4,r20
 100fab0:	1039883a 	mov	fp,r2
 100fab4:	10026440 	call	1002644 <__mulsi3>
 100fab8:	8809883a 	mov	r4,r17
 100fabc:	b80b883a 	mov	r5,r23
 100fac0:	102b883a 	mov	r21,r2
 100fac4:	100263c0 	call	100263c <__umodsi3>
 100fac8:	d9000217 	ldw	r4,8(sp)
 100facc:	1004943a 	slli	r2,r2,16
 100fad0:	9ca6983a 	sll	r19,r19,r18
 100fad4:	2006d43a 	srli	r3,r4,16
 100fad8:	84a0983a 	sll	r16,r16,r18
 100fadc:	dcc00015 	stw	r19,0(sp)
 100fae0:	10c4b03a 	or	r2,r2,r3
 100fae4:	dc000115 	stw	r16,4(sp)
 100fae8:	1540032e 	bgeu	r2,r21,100faf8 <__umoddi3+0x46c>
 100faec:	1585883a 	add	r2,r2,r22
 100faf0:	e73fffc4 	addi	fp,fp,-1
 100faf4:	15806e2e 	bgeu	r2,r22,100fcb0 <__umoddi3+0x624>
 100faf8:	1563c83a 	sub	r17,r2,r21
 100fafc:	8809883a 	mov	r4,r17
 100fb00:	b80b883a 	mov	r5,r23
 100fb04:	10026340 	call	1002634 <__udivsi3>
 100fb08:	100b883a 	mov	r5,r2
 100fb0c:	a009883a 	mov	r4,r20
 100fb10:	1021883a 	mov	r16,r2
 100fb14:	10026440 	call	1002644 <__mulsi3>
 100fb18:	b80b883a 	mov	r5,r23
 100fb1c:	8809883a 	mov	r4,r17
 100fb20:	1029883a 	mov	r20,r2
 100fb24:	100263c0 	call	100263c <__umodsi3>
 100fb28:	d9400217 	ldw	r5,8(sp)
 100fb2c:	1004943a 	slli	r2,r2,16
 100fb30:	28ffffcc 	andi	r3,r5,65535
 100fb34:	10c4b03a 	or	r2,r2,r3
 100fb38:	1500032e 	bgeu	r2,r20,100fb48 <__umoddi3+0x4bc>
 100fb3c:	1585883a 	add	r2,r2,r22
 100fb40:	843fffc4 	addi	r16,r16,-1
 100fb44:	1580562e 	bgeu	r2,r22,100fca0 <__umoddi3+0x614>
 100fb48:	d9800017 	ldw	r6,0(sp)
 100fb4c:	e022943a 	slli	r17,fp,16
 100fb50:	302ed43a 	srli	r23,r6,16
 100fb54:	8462b03a 	or	r17,r16,r17
 100fb58:	34ffffcc 	andi	r19,r6,65535
 100fb5c:	882ad43a 	srli	r21,r17,16
 100fb60:	8c7fffcc 	andi	r17,r17,65535
 100fb64:	8809883a 	mov	r4,r17
 100fb68:	980b883a 	mov	r5,r19
 100fb6c:	1521c83a 	sub	r16,r2,r20
 100fb70:	10026440 	call	1002644 <__mulsi3>
 100fb74:	8809883a 	mov	r4,r17
 100fb78:	b80b883a 	mov	r5,r23
 100fb7c:	1029883a 	mov	r20,r2
 100fb80:	10026440 	call	1002644 <__mulsi3>
 100fb84:	980b883a 	mov	r5,r19
 100fb88:	a809883a 	mov	r4,r21
 100fb8c:	1023883a 	mov	r17,r2
 100fb90:	10026440 	call	1002644 <__mulsi3>
 100fb94:	a809883a 	mov	r4,r21
 100fb98:	b80b883a 	mov	r5,r23
 100fb9c:	1027883a 	mov	r19,r2
 100fba0:	10026440 	call	1002644 <__mulsi3>
 100fba4:	100b883a 	mov	r5,r2
 100fba8:	a004d43a 	srli	r2,r20,16
 100fbac:	8ce3883a 	add	r17,r17,r19
 100fbb0:	1449883a 	add	r4,r2,r17
 100fbb4:	24c0022e 	bgeu	r4,r19,100fbc0 <__umoddi3+0x534>
 100fbb8:	00800074 	movhi	r2,1
 100fbbc:	288b883a 	add	r5,r5,r2
 100fbc0:	2004d43a 	srli	r2,r4,16
 100fbc4:	2008943a 	slli	r4,r4,16
 100fbc8:	a0ffffcc 	andi	r3,r20,65535
 100fbcc:	288d883a 	add	r6,r5,r2
 100fbd0:	20c9883a 	add	r4,r4,r3
 100fbd4:	81800b36 	bltu	r16,r6,100fc04 <__umoddi3+0x578>
 100fbd8:	81804026 	beq	r16,r6,100fcdc <__umoddi3+0x650>
 100fbdc:	818dc83a 	sub	r6,r16,r6
 100fbe0:	00000f06 	br	100fc20 <__umoddi3+0x594>
 100fbe4:	30c5c83a 	sub	r2,r6,r3
 100fbe8:	182d883a 	mov	r22,r3
 100fbec:	8084d83a 	srl	r2,r16,r2
 100fbf0:	a8c6983a 	sll	r3,r21,r3
 100fbf4:	9da6983a 	sll	r19,r19,r22
 100fbf8:	85a0983a 	sll	r16,r16,r22
 100fbfc:	18aab03a 	or	r21,r3,r2
 100fc00:	003f1d06 	br	100f878 <__umoddi3+0x1ec>
 100fc04:	d8c00017 	ldw	r3,0(sp)
 100fc08:	20c5c83a 	sub	r2,r4,r3
 100fc0c:	2089803a 	cmpltu	r4,r4,r2
 100fc10:	3587c83a 	sub	r3,r6,r22
 100fc14:	1907c83a 	sub	r3,r3,r4
 100fc18:	80cdc83a 	sub	r6,r16,r3
 100fc1c:	1009883a 	mov	r4,r2
 100fc20:	d9400117 	ldw	r5,4(sp)
 100fc24:	2905c83a 	sub	r2,r5,r4
 100fc28:	2887803a 	cmpltu	r3,r5,r2
 100fc2c:	30c7c83a 	sub	r3,r6,r3
 100fc30:	d9800317 	ldw	r6,12(sp)
 100fc34:	1484d83a 	srl	r2,r2,r18
 100fc38:	1988983a 	sll	r4,r3,r6
 100fc3c:	1c86d83a 	srl	r3,r3,r18
 100fc40:	2088b03a 	or	r4,r4,r2
 100fc44:	2011883a 	mov	r8,r4
 100fc48:	1813883a 	mov	r9,r3
 100fc4c:	d9000415 	stw	r4,16(sp)
 100fc50:	d8c00515 	stw	r3,20(sp)
 100fc54:	003ed406 	br	100f7a8 <__umoddi3+0x11c>
 100fc58:	01400604 	movi	r5,24
 100fc5c:	2805883a 	mov	r2,r5
 100fc60:	003ea606 	br	100f6fc <__umoddi3+0x70>
 100fc64:	01400204 	movi	r5,8
 100fc68:	2805883a 	mov	r2,r5
 100fc6c:	003ea306 	br	100f6fc <__umoddi3+0x70>
 100fc70:	01400204 	movi	r5,8
 100fc74:	2805883a 	mov	r2,r5
 100fc78:	003edf06 	br	100f7f8 <__umoddi3+0x16c>
 100fc7c:	01400204 	movi	r5,8
 100fc80:	2805883a 	mov	r2,r5
 100fc84:	003ef206 	br	100f850 <__umoddi3+0x1c4>
 100fc88:	01400604 	movi	r5,24
 100fc8c:	2805883a 	mov	r2,r5
 100fc90:	003eef06 	br	100f850 <__umoddi3+0x1c4>
 100fc94:	01400604 	movi	r5,24
 100fc98:	2805883a 	mov	r2,r5
 100fc9c:	003ed606 	br	100f7f8 <__umoddi3+0x16c>
 100fca0:	153fa92e 	bgeu	r2,r20,100fb48 <__umoddi3+0x4bc>
 100fca4:	843fffc4 	addi	r16,r16,-1
 100fca8:	1585883a 	add	r2,r2,r22
 100fcac:	003fa606 	br	100fb48 <__umoddi3+0x4bc>
 100fcb0:	157f912e 	bgeu	r2,r21,100faf8 <__umoddi3+0x46c>
 100fcb4:	e73fffc4 	addi	fp,fp,-1
 100fcb8:	1585883a 	add	r2,r2,r22
 100fcbc:	003f8e06 	br	100faf8 <__umoddi3+0x46c>
 100fcc0:	157f542e 	bgeu	r2,r21,100fa14 <__umoddi3+0x388>
 100fcc4:	14c5883a 	add	r2,r2,r19
 100fcc8:	003f5206 	br	100fa14 <__umoddi3+0x388>
 100fccc:	14c5883a 	add	r2,r2,r19
 100fcd0:	003efc06 	br	100f8c4 <__umoddi3+0x238>
 100fcd4:	14c5883a 	add	r2,r2,r19
 100fcd8:	003ea606 	br	100f774 <__umoddi3+0xe8>
 100fcdc:	d8800117 	ldw	r2,4(sp)
 100fce0:	113fc836 	bltu	r2,r4,100fc04 <__umoddi3+0x578>
 100fce4:	000d883a 	mov	r6,zero
 100fce8:	003fcd06 	br	100fc20 <__umoddi3+0x594>

0100fcec <__nesf2>:
 100fcec:	defff304 	addi	sp,sp,-52
 100fcf0:	dc400b15 	stw	r17,44(sp)
 100fcf4:	dc400204 	addi	r17,sp,8
 100fcf8:	dc000a15 	stw	r16,40(sp)
 100fcfc:	d9000015 	stw	r4,0(sp)
 100fd00:	d9400115 	stw	r5,4(sp)
 100fd04:	d809883a 	mov	r4,sp
 100fd08:	880b883a 	mov	r5,r17
 100fd0c:	dc000604 	addi	r16,sp,24
 100fd10:	dfc00c15 	stw	ra,48(sp)
 100fd14:	10110fc0 	call	10110fc <__unpack_f>
 100fd18:	d9000104 	addi	r4,sp,4
 100fd1c:	800b883a 	mov	r5,r16
 100fd20:	10110fc0 	call	10110fc <__unpack_f>
 100fd24:	d8800217 	ldw	r2,8(sp)
 100fd28:	00c00044 	movi	r3,1
 100fd2c:	180d883a 	mov	r6,r3
 100fd30:	1880062e 	bgeu	r3,r2,100fd4c <__nesf2+0x60>
 100fd34:	d8800617 	ldw	r2,24(sp)
 100fd38:	8809883a 	mov	r4,r17
 100fd3c:	800b883a 	mov	r5,r16
 100fd40:	1880022e 	bgeu	r3,r2,100fd4c <__nesf2+0x60>
 100fd44:	10111c40 	call	10111c4 <__fpcmp_parts_f>
 100fd48:	100d883a 	mov	r6,r2
 100fd4c:	3005883a 	mov	r2,r6
 100fd50:	dfc00c17 	ldw	ra,48(sp)
 100fd54:	dc400b17 	ldw	r17,44(sp)
 100fd58:	dc000a17 	ldw	r16,40(sp)
 100fd5c:	dec00d04 	addi	sp,sp,52
 100fd60:	f800283a 	ret

0100fd64 <__gtsf2>:
 100fd64:	defff304 	addi	sp,sp,-52
 100fd68:	dc400b15 	stw	r17,44(sp)
 100fd6c:	dc400204 	addi	r17,sp,8
 100fd70:	dc000a15 	stw	r16,40(sp)
 100fd74:	d9000015 	stw	r4,0(sp)
 100fd78:	d9400115 	stw	r5,4(sp)
 100fd7c:	d809883a 	mov	r4,sp
 100fd80:	880b883a 	mov	r5,r17
 100fd84:	dc000604 	addi	r16,sp,24
 100fd88:	dfc00c15 	stw	ra,48(sp)
 100fd8c:	10110fc0 	call	10110fc <__unpack_f>
 100fd90:	d9000104 	addi	r4,sp,4
 100fd94:	800b883a 	mov	r5,r16
 100fd98:	10110fc0 	call	10110fc <__unpack_f>
 100fd9c:	d8800217 	ldw	r2,8(sp)
 100fda0:	00c00044 	movi	r3,1
 100fda4:	01bfffc4 	movi	r6,-1
 100fda8:	1880062e 	bgeu	r3,r2,100fdc4 <__gtsf2+0x60>
 100fdac:	d8800617 	ldw	r2,24(sp)
 100fdb0:	8809883a 	mov	r4,r17
 100fdb4:	800b883a 	mov	r5,r16
 100fdb8:	1880022e 	bgeu	r3,r2,100fdc4 <__gtsf2+0x60>
 100fdbc:	10111c40 	call	10111c4 <__fpcmp_parts_f>
 100fdc0:	100d883a 	mov	r6,r2
 100fdc4:	3005883a 	mov	r2,r6
 100fdc8:	dfc00c17 	ldw	ra,48(sp)
 100fdcc:	dc400b17 	ldw	r17,44(sp)
 100fdd0:	dc000a17 	ldw	r16,40(sp)
 100fdd4:	dec00d04 	addi	sp,sp,52
 100fdd8:	f800283a 	ret

0100fddc <__ltsf2>:
 100fddc:	defff304 	addi	sp,sp,-52
 100fde0:	dc400b15 	stw	r17,44(sp)
 100fde4:	dc400204 	addi	r17,sp,8
 100fde8:	dc000a15 	stw	r16,40(sp)
 100fdec:	d9000015 	stw	r4,0(sp)
 100fdf0:	d9400115 	stw	r5,4(sp)
 100fdf4:	d809883a 	mov	r4,sp
 100fdf8:	880b883a 	mov	r5,r17
 100fdfc:	dc000604 	addi	r16,sp,24
 100fe00:	dfc00c15 	stw	ra,48(sp)
 100fe04:	10110fc0 	call	10110fc <__unpack_f>
 100fe08:	d9000104 	addi	r4,sp,4
 100fe0c:	800b883a 	mov	r5,r16
 100fe10:	10110fc0 	call	10110fc <__unpack_f>
 100fe14:	d8800217 	ldw	r2,8(sp)
 100fe18:	00c00044 	movi	r3,1
 100fe1c:	180d883a 	mov	r6,r3
 100fe20:	1880062e 	bgeu	r3,r2,100fe3c <__ltsf2+0x60>
 100fe24:	d8800617 	ldw	r2,24(sp)
 100fe28:	8809883a 	mov	r4,r17
 100fe2c:	800b883a 	mov	r5,r16
 100fe30:	1880022e 	bgeu	r3,r2,100fe3c <__ltsf2+0x60>
 100fe34:	10111c40 	call	10111c4 <__fpcmp_parts_f>
 100fe38:	100d883a 	mov	r6,r2
 100fe3c:	3005883a 	mov	r2,r6
 100fe40:	dfc00c17 	ldw	ra,48(sp)
 100fe44:	dc400b17 	ldw	r17,44(sp)
 100fe48:	dc000a17 	ldw	r16,40(sp)
 100fe4c:	dec00d04 	addi	sp,sp,52
 100fe50:	f800283a 	ret

0100fe54 <_fpadd_parts>:
 100fe54:	defff804 	addi	sp,sp,-32
 100fe58:	dcc00315 	stw	r19,12(sp)
 100fe5c:	2027883a 	mov	r19,r4
 100fe60:	21000017 	ldw	r4,0(r4)
 100fe64:	00c00044 	movi	r3,1
 100fe68:	dd400515 	stw	r21,20(sp)
 100fe6c:	dd000415 	stw	r20,16(sp)
 100fe70:	ddc00715 	stw	r23,28(sp)
 100fe74:	dd800615 	stw	r22,24(sp)
 100fe78:	dc800215 	stw	r18,8(sp)
 100fe7c:	dc400115 	stw	r17,4(sp)
 100fe80:	dc000015 	stw	r16,0(sp)
 100fe84:	282b883a 	mov	r21,r5
 100fe88:	3029883a 	mov	r20,r6
 100fe8c:	1900632e 	bgeu	r3,r4,101001c <_fpadd_parts+0x1c8>
 100fe90:	28800017 	ldw	r2,0(r5)
 100fe94:	1880812e 	bgeu	r3,r2,101009c <_fpadd_parts+0x248>
 100fe98:	00c00104 	movi	r3,4
 100fe9c:	20c0dc26 	beq	r4,r3,1010210 <_fpadd_parts+0x3bc>
 100fea0:	10c07e26 	beq	r2,r3,101009c <_fpadd_parts+0x248>
 100fea4:	00c00084 	movi	r3,2
 100fea8:	10c06726 	beq	r2,r3,1010048 <_fpadd_parts+0x1f4>
 100feac:	20c07b26 	beq	r4,r3,101009c <_fpadd_parts+0x248>
 100feb0:	9dc00217 	ldw	r23,8(r19)
 100feb4:	28c00217 	ldw	r3,8(r5)
 100feb8:	9c400317 	ldw	r17,12(r19)
 100febc:	2bc00317 	ldw	r15,12(r5)
 100fec0:	b8cdc83a 	sub	r6,r23,r3
 100fec4:	9c800417 	ldw	r18,16(r19)
 100fec8:	2c000417 	ldw	r16,16(r5)
 100fecc:	3009883a 	mov	r4,r6
 100fed0:	30009716 	blt	r6,zero,1010130 <_fpadd_parts+0x2dc>
 100fed4:	00800fc4 	movi	r2,63
 100fed8:	11806b16 	blt	r2,r6,1010088 <_fpadd_parts+0x234>
 100fedc:	0100a40e 	bge	zero,r4,1010170 <_fpadd_parts+0x31c>
 100fee0:	35bff804 	addi	r22,r6,-32
 100fee4:	b000bc16 	blt	r22,zero,10101d8 <_fpadd_parts+0x384>
 100fee8:	8596d83a 	srl	r11,r16,r22
 100feec:	0019883a 	mov	r12,zero
 100fef0:	0013883a 	mov	r9,zero
 100fef4:	01000044 	movi	r4,1
 100fef8:	0015883a 	mov	r10,zero
 100fefc:	b000be16 	blt	r22,zero,10101f8 <_fpadd_parts+0x3a4>
 100ff00:	2590983a 	sll	r8,r4,r22
 100ff04:	000f883a 	mov	r7,zero
 100ff08:	00bfffc4 	movi	r2,-1
 100ff0c:	3889883a 	add	r4,r7,r2
 100ff10:	408b883a 	add	r5,r8,r2
 100ff14:	21cd803a 	cmpltu	r6,r4,r7
 100ff18:	314b883a 	add	r5,r6,r5
 100ff1c:	7904703a 	and	r2,r15,r4
 100ff20:	8146703a 	and	r3,r16,r5
 100ff24:	10c4b03a 	or	r2,r2,r3
 100ff28:	10000226 	beq	r2,zero,100ff34 <_fpadd_parts+0xe0>
 100ff2c:	02400044 	movi	r9,1
 100ff30:	0015883a 	mov	r10,zero
 100ff34:	5a5eb03a 	or	r15,r11,r9
 100ff38:	62a0b03a 	or	r16,r12,r10
 100ff3c:	99400117 	ldw	r5,4(r19)
 100ff40:	a8800117 	ldw	r2,4(r21)
 100ff44:	28806e26 	beq	r5,r2,1010100 <_fpadd_parts+0x2ac>
 100ff48:	28006626 	beq	r5,zero,10100e4 <_fpadd_parts+0x290>
 100ff4c:	7c45c83a 	sub	r2,r15,r17
 100ff50:	7889803a 	cmpltu	r4,r15,r2
 100ff54:	8487c83a 	sub	r3,r16,r18
 100ff58:	1909c83a 	sub	r4,r3,r4
 100ff5c:	100d883a 	mov	r6,r2
 100ff60:	200f883a 	mov	r7,r4
 100ff64:	38007716 	blt	r7,zero,1010144 <_fpadd_parts+0x2f0>
 100ff68:	a5c00215 	stw	r23,8(r20)
 100ff6c:	a1c00415 	stw	r7,16(r20)
 100ff70:	a0000115 	stw	zero,4(r20)
 100ff74:	a1800315 	stw	r6,12(r20)
 100ff78:	a2000317 	ldw	r8,12(r20)
 100ff7c:	a2400417 	ldw	r9,16(r20)
 100ff80:	00bfffc4 	movi	r2,-1
 100ff84:	408b883a 	add	r5,r8,r2
 100ff88:	2a09803a 	cmpltu	r4,r5,r8
 100ff8c:	488d883a 	add	r6,r9,r2
 100ff90:	01c40034 	movhi	r7,4096
 100ff94:	39ffffc4 	addi	r7,r7,-1
 100ff98:	218d883a 	add	r6,r4,r6
 100ff9c:	39801736 	bltu	r7,r6,100fffc <_fpadd_parts+0x1a8>
 100ffa0:	31c06526 	beq	r6,r7,1010138 <_fpadd_parts+0x2e4>
 100ffa4:	a3000217 	ldw	r12,8(r20)
 100ffa8:	4209883a 	add	r4,r8,r8
 100ffac:	00bfffc4 	movi	r2,-1
 100ffb0:	220f803a 	cmpltu	r7,r4,r8
 100ffb4:	4a4b883a 	add	r5,r9,r9
 100ffb8:	394f883a 	add	r7,r7,r5
 100ffbc:	2095883a 	add	r10,r4,r2
 100ffc0:	3897883a 	add	r11,r7,r2
 100ffc4:	510d803a 	cmpltu	r6,r10,r4
 100ffc8:	6099883a 	add	r12,r12,r2
 100ffcc:	32d7883a 	add	r11,r6,r11
 100ffd0:	00840034 	movhi	r2,4096
 100ffd4:	10bfffc4 	addi	r2,r2,-1
 100ffd8:	2011883a 	mov	r8,r4
 100ffdc:	3813883a 	mov	r9,r7
 100ffe0:	a1000315 	stw	r4,12(r20)
 100ffe4:	a1c00415 	stw	r7,16(r20)
 100ffe8:	a3000215 	stw	r12,8(r20)
 100ffec:	12c00336 	bltu	r2,r11,100fffc <_fpadd_parts+0x1a8>
 100fff0:	58bfed1e 	bne	r11,r2,100ffa8 <_fpadd_parts+0x154>
 100fff4:	00bfff84 	movi	r2,-2
 100fff8:	12bfeb2e 	bgeu	r2,r10,100ffa8 <_fpadd_parts+0x154>
 100fffc:	a2800417 	ldw	r10,16(r20)
 1010000:	008000c4 	movi	r2,3
 1010004:	00c80034 	movhi	r3,8192
 1010008:	18ffffc4 	addi	r3,r3,-1
 101000c:	a2400317 	ldw	r9,12(r20)
 1010010:	a0800015 	stw	r2,0(r20)
 1010014:	1a802336 	bltu	r3,r10,10100a4 <_fpadd_parts+0x250>
 1010018:	a027883a 	mov	r19,r20
 101001c:	9805883a 	mov	r2,r19
 1010020:	ddc00717 	ldw	r23,28(sp)
 1010024:	dd800617 	ldw	r22,24(sp)
 1010028:	dd400517 	ldw	r21,20(sp)
 101002c:	dd000417 	ldw	r20,16(sp)
 1010030:	dcc00317 	ldw	r19,12(sp)
 1010034:	dc800217 	ldw	r18,8(sp)
 1010038:	dc400117 	ldw	r17,4(sp)
 101003c:	dc000017 	ldw	r16,0(sp)
 1010040:	dec00804 	addi	sp,sp,32
 1010044:	f800283a 	ret
 1010048:	20fff41e 	bne	r4,r3,101001c <_fpadd_parts+0x1c8>
 101004c:	31000015 	stw	r4,0(r6)
 1010050:	98800117 	ldw	r2,4(r19)
 1010054:	30800115 	stw	r2,4(r6)
 1010058:	98c00217 	ldw	r3,8(r19)
 101005c:	30c00215 	stw	r3,8(r6)
 1010060:	98800317 	ldw	r2,12(r19)
 1010064:	30800315 	stw	r2,12(r6)
 1010068:	98c00417 	ldw	r3,16(r19)
 101006c:	30c00415 	stw	r3,16(r6)
 1010070:	98800117 	ldw	r2,4(r19)
 1010074:	28c00117 	ldw	r3,4(r5)
 1010078:	3027883a 	mov	r19,r6
 101007c:	10c4703a 	and	r2,r2,r3
 1010080:	30800115 	stw	r2,4(r6)
 1010084:	003fe506 	br	101001c <_fpadd_parts+0x1c8>
 1010088:	1dc02616 	blt	r3,r23,1010124 <_fpadd_parts+0x2d0>
 101008c:	0023883a 	mov	r17,zero
 1010090:	182f883a 	mov	r23,r3
 1010094:	0025883a 	mov	r18,zero
 1010098:	003fa806 	br	100ff3c <_fpadd_parts+0xe8>
 101009c:	a827883a 	mov	r19,r21
 10100a0:	003fde06 	br	101001c <_fpadd_parts+0x1c8>
 10100a4:	01800044 	movi	r6,1
 10100a8:	500497fa 	slli	r2,r10,31
 10100ac:	4808d07a 	srli	r4,r9,1
 10100b0:	518ad83a 	srl	r5,r10,r6
 10100b4:	a2000217 	ldw	r8,8(r20)
 10100b8:	1108b03a 	or	r4,r2,r4
 10100bc:	0007883a 	mov	r3,zero
 10100c0:	4984703a 	and	r2,r9,r6
 10100c4:	208cb03a 	or	r6,r4,r2
 10100c8:	28ceb03a 	or	r7,r5,r3
 10100cc:	42000044 	addi	r8,r8,1
 10100d0:	a027883a 	mov	r19,r20
 10100d4:	a1c00415 	stw	r7,16(r20)
 10100d8:	a2000215 	stw	r8,8(r20)
 10100dc:	a1800315 	stw	r6,12(r20)
 10100e0:	003fce06 	br	101001c <_fpadd_parts+0x1c8>
 10100e4:	8bc5c83a 	sub	r2,r17,r15
 10100e8:	8889803a 	cmpltu	r4,r17,r2
 10100ec:	9407c83a 	sub	r3,r18,r16
 10100f0:	1909c83a 	sub	r4,r3,r4
 10100f4:	100d883a 	mov	r6,r2
 10100f8:	200f883a 	mov	r7,r4
 10100fc:	003f9906 	br	100ff64 <_fpadd_parts+0x110>
 1010100:	7c45883a 	add	r2,r15,r17
 1010104:	13c9803a 	cmpltu	r4,r2,r15
 1010108:	8487883a 	add	r3,r16,r18
 101010c:	20c9883a 	add	r4,r4,r3
 1010110:	a1400115 	stw	r5,4(r20)
 1010114:	a5c00215 	stw	r23,8(r20)
 1010118:	a0800315 	stw	r2,12(r20)
 101011c:	a1000415 	stw	r4,16(r20)
 1010120:	003fb606 	br	100fffc <_fpadd_parts+0x1a8>
 1010124:	001f883a 	mov	r15,zero
 1010128:	0021883a 	mov	r16,zero
 101012c:	003f8306 	br	100ff3c <_fpadd_parts+0xe8>
 1010130:	018dc83a 	sub	r6,zero,r6
 1010134:	003f6706 	br	100fed4 <_fpadd_parts+0x80>
 1010138:	00bfff84 	movi	r2,-2
 101013c:	117faf36 	bltu	r2,r5,100fffc <_fpadd_parts+0x1a8>
 1010140:	003f9806 	br	100ffa4 <_fpadd_parts+0x150>
 1010144:	0005883a 	mov	r2,zero
 1010148:	1189c83a 	sub	r4,r2,r6
 101014c:	1105803a 	cmpltu	r2,r2,r4
 1010150:	01cbc83a 	sub	r5,zero,r7
 1010154:	2885c83a 	sub	r2,r5,r2
 1010158:	01800044 	movi	r6,1
 101015c:	a1800115 	stw	r6,4(r20)
 1010160:	a5c00215 	stw	r23,8(r20)
 1010164:	a1000315 	stw	r4,12(r20)
 1010168:	a0800415 	stw	r2,16(r20)
 101016c:	003f8206 	br	100ff78 <_fpadd_parts+0x124>
 1010170:	203f7226 	beq	r4,zero,100ff3c <_fpadd_parts+0xe8>
 1010174:	35bff804 	addi	r22,r6,-32
 1010178:	b9af883a 	add	r23,r23,r6
 101017c:	b0003116 	blt	r22,zero,1010244 <_fpadd_parts+0x3f0>
 1010180:	959ad83a 	srl	r13,r18,r22
 1010184:	001d883a 	mov	r14,zero
 1010188:	000f883a 	mov	r7,zero
 101018c:	01000044 	movi	r4,1
 1010190:	0011883a 	mov	r8,zero
 1010194:	b0002516 	blt	r22,zero,101022c <_fpadd_parts+0x3d8>
 1010198:	2594983a 	sll	r10,r4,r22
 101019c:	0013883a 	mov	r9,zero
 10101a0:	00bfffc4 	movi	r2,-1
 10101a4:	4889883a 	add	r4,r9,r2
 10101a8:	508b883a 	add	r5,r10,r2
 10101ac:	224d803a 	cmpltu	r6,r4,r9
 10101b0:	314b883a 	add	r5,r6,r5
 10101b4:	8904703a 	and	r2,r17,r4
 10101b8:	9146703a 	and	r3,r18,r5
 10101bc:	10c4b03a 	or	r2,r2,r3
 10101c0:	10000226 	beq	r2,zero,10101cc <_fpadd_parts+0x378>
 10101c4:	01c00044 	movi	r7,1
 10101c8:	0011883a 	mov	r8,zero
 10101cc:	69e2b03a 	or	r17,r13,r7
 10101d0:	7224b03a 	or	r18,r14,r8
 10101d4:	003f5906 	br	100ff3c <_fpadd_parts+0xe8>
 10101d8:	8407883a 	add	r3,r16,r16
 10101dc:	008007c4 	movi	r2,31
 10101e0:	1185c83a 	sub	r2,r2,r6
 10101e4:	1886983a 	sll	r3,r3,r2
 10101e8:	7996d83a 	srl	r11,r15,r6
 10101ec:	8198d83a 	srl	r12,r16,r6
 10101f0:	1ad6b03a 	or	r11,r3,r11
 10101f4:	003f3e06 	br	100fef0 <_fpadd_parts+0x9c>
 10101f8:	2006d07a 	srli	r3,r4,1
 10101fc:	008007c4 	movi	r2,31
 1010200:	1185c83a 	sub	r2,r2,r6
 1010204:	1890d83a 	srl	r8,r3,r2
 1010208:	218e983a 	sll	r7,r4,r6
 101020c:	003f3e06 	br	100ff08 <_fpadd_parts+0xb4>
 1010210:	113f821e 	bne	r2,r4,101001c <_fpadd_parts+0x1c8>
 1010214:	28c00117 	ldw	r3,4(r5)
 1010218:	98800117 	ldw	r2,4(r19)
 101021c:	10ff7f26 	beq	r2,r3,101001c <_fpadd_parts+0x1c8>
 1010220:	04c040b4 	movhi	r19,258
 1010224:	9cf2bc04 	addi	r19,r19,-13584
 1010228:	003f7c06 	br	101001c <_fpadd_parts+0x1c8>
 101022c:	2006d07a 	srli	r3,r4,1
 1010230:	008007c4 	movi	r2,31
 1010234:	1185c83a 	sub	r2,r2,r6
 1010238:	1894d83a 	srl	r10,r3,r2
 101023c:	2192983a 	sll	r9,r4,r6
 1010240:	003fd706 	br	10101a0 <_fpadd_parts+0x34c>
 1010244:	9487883a 	add	r3,r18,r18
 1010248:	008007c4 	movi	r2,31
 101024c:	1185c83a 	sub	r2,r2,r6
 1010250:	1886983a 	sll	r3,r3,r2
 1010254:	899ad83a 	srl	r13,r17,r6
 1010258:	919cd83a 	srl	r14,r18,r6
 101025c:	1b5ab03a 	or	r13,r3,r13
 1010260:	003fc906 	br	1010188 <_fpadd_parts+0x334>

01010264 <__subdf3>:
 1010264:	deffea04 	addi	sp,sp,-88
 1010268:	dcc01415 	stw	r19,80(sp)
 101026c:	dcc00404 	addi	r19,sp,16
 1010270:	2011883a 	mov	r8,r4
 1010274:	2813883a 	mov	r9,r5
 1010278:	dc401315 	stw	r17,76(sp)
 101027c:	d809883a 	mov	r4,sp
 1010280:	980b883a 	mov	r5,r19
 1010284:	dc400904 	addi	r17,sp,36
 1010288:	dfc01515 	stw	ra,84(sp)
 101028c:	da400115 	stw	r9,4(sp)
 1010290:	d9c00315 	stw	r7,12(sp)
 1010294:	da000015 	stw	r8,0(sp)
 1010298:	d9800215 	stw	r6,8(sp)
 101029c:	10115ac0 	call	10115ac <__unpack_d>
 10102a0:	d9000204 	addi	r4,sp,8
 10102a4:	880b883a 	mov	r5,r17
 10102a8:	10115ac0 	call	10115ac <__unpack_d>
 10102ac:	d8800a17 	ldw	r2,40(sp)
 10102b0:	880b883a 	mov	r5,r17
 10102b4:	9809883a 	mov	r4,r19
 10102b8:	d9800e04 	addi	r6,sp,56
 10102bc:	1080005c 	xori	r2,r2,1
 10102c0:	d8800a15 	stw	r2,40(sp)
 10102c4:	100fe540 	call	100fe54 <_fpadd_parts>
 10102c8:	1009883a 	mov	r4,r2
 10102cc:	10112980 	call	1011298 <__pack_d>
 10102d0:	dfc01517 	ldw	ra,84(sp)
 10102d4:	dcc01417 	ldw	r19,80(sp)
 10102d8:	dc401317 	ldw	r17,76(sp)
 10102dc:	dec01604 	addi	sp,sp,88
 10102e0:	f800283a 	ret

010102e4 <__adddf3>:
 10102e4:	deffea04 	addi	sp,sp,-88
 10102e8:	dcc01415 	stw	r19,80(sp)
 10102ec:	dcc00404 	addi	r19,sp,16
 10102f0:	2011883a 	mov	r8,r4
 10102f4:	2813883a 	mov	r9,r5
 10102f8:	dc401315 	stw	r17,76(sp)
 10102fc:	d809883a 	mov	r4,sp
 1010300:	980b883a 	mov	r5,r19
 1010304:	dc400904 	addi	r17,sp,36
 1010308:	dfc01515 	stw	ra,84(sp)
 101030c:	da400115 	stw	r9,4(sp)
 1010310:	d9c00315 	stw	r7,12(sp)
 1010314:	da000015 	stw	r8,0(sp)
 1010318:	d9800215 	stw	r6,8(sp)
 101031c:	10115ac0 	call	10115ac <__unpack_d>
 1010320:	d9000204 	addi	r4,sp,8
 1010324:	880b883a 	mov	r5,r17
 1010328:	10115ac0 	call	10115ac <__unpack_d>
 101032c:	d9800e04 	addi	r6,sp,56
 1010330:	9809883a 	mov	r4,r19
 1010334:	880b883a 	mov	r5,r17
 1010338:	100fe540 	call	100fe54 <_fpadd_parts>
 101033c:	1009883a 	mov	r4,r2
 1010340:	10112980 	call	1011298 <__pack_d>
 1010344:	dfc01517 	ldw	ra,84(sp)
 1010348:	dcc01417 	ldw	r19,80(sp)
 101034c:	dc401317 	ldw	r17,76(sp)
 1010350:	dec01604 	addi	sp,sp,88
 1010354:	f800283a 	ret

01010358 <__muldf3>:
 1010358:	deffe004 	addi	sp,sp,-128
 101035c:	dc401815 	stw	r17,96(sp)
 1010360:	dc400404 	addi	r17,sp,16
 1010364:	2011883a 	mov	r8,r4
 1010368:	2813883a 	mov	r9,r5
 101036c:	dc001715 	stw	r16,92(sp)
 1010370:	d809883a 	mov	r4,sp
 1010374:	880b883a 	mov	r5,r17
 1010378:	dc000904 	addi	r16,sp,36
 101037c:	dfc01f15 	stw	ra,124(sp)
 1010380:	da400115 	stw	r9,4(sp)
 1010384:	d9c00315 	stw	r7,12(sp)
 1010388:	da000015 	stw	r8,0(sp)
 101038c:	d9800215 	stw	r6,8(sp)
 1010390:	ddc01e15 	stw	r23,120(sp)
 1010394:	dd801d15 	stw	r22,116(sp)
 1010398:	dd401c15 	stw	r21,112(sp)
 101039c:	dd001b15 	stw	r20,108(sp)
 10103a0:	dcc01a15 	stw	r19,104(sp)
 10103a4:	dc801915 	stw	r18,100(sp)
 10103a8:	10115ac0 	call	10115ac <__unpack_d>
 10103ac:	d9000204 	addi	r4,sp,8
 10103b0:	800b883a 	mov	r5,r16
 10103b4:	10115ac0 	call	10115ac <__unpack_d>
 10103b8:	d9000417 	ldw	r4,16(sp)
 10103bc:	00800044 	movi	r2,1
 10103c0:	1100102e 	bgeu	r2,r4,1010404 <__muldf3+0xac>
 10103c4:	d8c00917 	ldw	r3,36(sp)
 10103c8:	10c0062e 	bgeu	r2,r3,10103e4 <__muldf3+0x8c>
 10103cc:	00800104 	movi	r2,4
 10103d0:	20800a26 	beq	r4,r2,10103fc <__muldf3+0xa4>
 10103d4:	1880cc26 	beq	r3,r2,1010708 <__muldf3+0x3b0>
 10103d8:	00800084 	movi	r2,2
 10103dc:	20800926 	beq	r4,r2,1010404 <__muldf3+0xac>
 10103e0:	1880191e 	bne	r3,r2,1010448 <__muldf3+0xf0>
 10103e4:	d8c00a17 	ldw	r3,40(sp)
 10103e8:	d8800517 	ldw	r2,20(sp)
 10103ec:	8009883a 	mov	r4,r16
 10103f0:	10c4c03a 	cmpne	r2,r2,r3
 10103f4:	d8800a15 	stw	r2,40(sp)
 10103f8:	00000706 	br	1010418 <__muldf3+0xc0>
 10103fc:	00800084 	movi	r2,2
 1010400:	1880c326 	beq	r3,r2,1010710 <__muldf3+0x3b8>
 1010404:	d8800517 	ldw	r2,20(sp)
 1010408:	d8c00a17 	ldw	r3,40(sp)
 101040c:	8809883a 	mov	r4,r17
 1010410:	10c4c03a 	cmpne	r2,r2,r3
 1010414:	d8800515 	stw	r2,20(sp)
 1010418:	10112980 	call	1011298 <__pack_d>
 101041c:	dfc01f17 	ldw	ra,124(sp)
 1010420:	ddc01e17 	ldw	r23,120(sp)
 1010424:	dd801d17 	ldw	r22,116(sp)
 1010428:	dd401c17 	ldw	r21,112(sp)
 101042c:	dd001b17 	ldw	r20,108(sp)
 1010430:	dcc01a17 	ldw	r19,104(sp)
 1010434:	dc801917 	ldw	r18,100(sp)
 1010438:	dc401817 	ldw	r17,96(sp)
 101043c:	dc001717 	ldw	r16,92(sp)
 1010440:	dec02004 	addi	sp,sp,128
 1010444:	f800283a 	ret
 1010448:	dd800717 	ldw	r22,28(sp)
 101044c:	dc800c17 	ldw	r18,48(sp)
 1010450:	002b883a 	mov	r21,zero
 1010454:	0023883a 	mov	r17,zero
 1010458:	a80b883a 	mov	r5,r21
 101045c:	b00d883a 	mov	r6,r22
 1010460:	880f883a 	mov	r7,r17
 1010464:	ddc00817 	ldw	r23,32(sp)
 1010468:	dcc00d17 	ldw	r19,52(sp)
 101046c:	9009883a 	mov	r4,r18
 1010470:	100ee580 	call	100ee58 <__muldi3>
 1010474:	001b883a 	mov	r13,zero
 1010478:	680f883a 	mov	r7,r13
 101047c:	b009883a 	mov	r4,r22
 1010480:	000b883a 	mov	r5,zero
 1010484:	980d883a 	mov	r6,r19
 1010488:	b82d883a 	mov	r22,r23
 101048c:	002f883a 	mov	r23,zero
 1010490:	db401615 	stw	r13,88(sp)
 1010494:	d8801315 	stw	r2,76(sp)
 1010498:	d8c01415 	stw	r3,80(sp)
 101049c:	dcc01515 	stw	r19,84(sp)
 10104a0:	100ee580 	call	100ee58 <__muldi3>
 10104a4:	b00d883a 	mov	r6,r22
 10104a8:	000b883a 	mov	r5,zero
 10104ac:	9009883a 	mov	r4,r18
 10104b0:	b80f883a 	mov	r7,r23
 10104b4:	1021883a 	mov	r16,r2
 10104b8:	1823883a 	mov	r17,r3
 10104bc:	100ee580 	call	100ee58 <__muldi3>
 10104c0:	8085883a 	add	r2,r16,r2
 10104c4:	140d803a 	cmpltu	r6,r2,r16
 10104c8:	88c7883a 	add	r3,r17,r3
 10104cc:	30cd883a 	add	r6,r6,r3
 10104d0:	1029883a 	mov	r20,r2
 10104d4:	302b883a 	mov	r21,r6
 10104d8:	da801317 	ldw	r10,76(sp)
 10104dc:	dac01417 	ldw	r11,80(sp)
 10104e0:	db001517 	ldw	r12,84(sp)
 10104e4:	db401617 	ldw	r13,88(sp)
 10104e8:	3440612e 	bgeu	r6,r17,1010670 <__muldf3+0x318>
 10104ec:	0009883a 	mov	r4,zero
 10104f0:	5105883a 	add	r2,r10,r4
 10104f4:	128d803a 	cmpltu	r6,r2,r10
 10104f8:	5d07883a 	add	r3,r11,r20
 10104fc:	30cd883a 	add	r6,r6,r3
 1010500:	0021883a 	mov	r16,zero
 1010504:	04400044 	movi	r17,1
 1010508:	1025883a 	mov	r18,r2
 101050c:	3027883a 	mov	r19,r6
 1010510:	32c06236 	bltu	r6,r11,101069c <__muldf3+0x344>
 1010514:	59807a26 	beq	r11,r6,1010700 <__muldf3+0x3a8>
 1010518:	680b883a 	mov	r5,r13
 101051c:	b80f883a 	mov	r7,r23
 1010520:	6009883a 	mov	r4,r12
 1010524:	b00d883a 	mov	r6,r22
 1010528:	100ee580 	call	100ee58 <__muldi3>
 101052c:	1009883a 	mov	r4,r2
 1010530:	000f883a 	mov	r7,zero
 1010534:	1545883a 	add	r2,r2,r21
 1010538:	1111803a 	cmpltu	r8,r2,r4
 101053c:	19c7883a 	add	r3,r3,r7
 1010540:	40c7883a 	add	r3,r8,r3
 1010544:	88cb883a 	add	r5,r17,r3
 1010548:	d8c00617 	ldw	r3,24(sp)
 101054c:	8089883a 	add	r4,r16,r2
 1010550:	d8800b17 	ldw	r2,44(sp)
 1010554:	18c00104 	addi	r3,r3,4
 1010558:	240d803a 	cmpltu	r6,r4,r16
 101055c:	10c7883a 	add	r3,r2,r3
 1010560:	2013883a 	mov	r9,r4
 1010564:	d8800a17 	ldw	r2,40(sp)
 1010568:	d9000517 	ldw	r4,20(sp)
 101056c:	314d883a 	add	r6,r6,r5
 1010570:	3015883a 	mov	r10,r6
 1010574:	2088c03a 	cmpne	r4,r4,r2
 1010578:	00880034 	movhi	r2,8192
 101057c:	10bfffc4 	addi	r2,r2,-1
 1010580:	d9000f15 	stw	r4,60(sp)
 1010584:	d8c01015 	stw	r3,64(sp)
 1010588:	1180162e 	bgeu	r2,r6,10105e4 <__muldf3+0x28c>
 101058c:	1811883a 	mov	r8,r3
 1010590:	101f883a 	mov	r15,r2
 1010594:	980497fa 	slli	r2,r19,31
 1010598:	9016d07a 	srli	r11,r18,1
 101059c:	500697fa 	slli	r3,r10,31
 10105a0:	480cd07a 	srli	r6,r9,1
 10105a4:	500ed07a 	srli	r7,r10,1
 10105a8:	12d6b03a 	or	r11,r2,r11
 10105ac:	00800044 	movi	r2,1
 10105b0:	198cb03a 	or	r6,r3,r6
 10105b4:	4888703a 	and	r4,r9,r2
 10105b8:	9818d07a 	srli	r12,r19,1
 10105bc:	001b883a 	mov	r13,zero
 10105c0:	03a00034 	movhi	r14,32768
 10105c4:	3013883a 	mov	r9,r6
 10105c8:	3815883a 	mov	r10,r7
 10105cc:	4091883a 	add	r8,r8,r2
 10105d0:	20000226 	beq	r4,zero,10105dc <__muldf3+0x284>
 10105d4:	5b64b03a 	or	r18,r11,r13
 10105d8:	63a6b03a 	or	r19,r12,r14
 10105dc:	7abfed36 	bltu	r15,r10,1010594 <__muldf3+0x23c>
 10105e0:	da001015 	stw	r8,64(sp)
 10105e4:	00840034 	movhi	r2,4096
 10105e8:	10bfffc4 	addi	r2,r2,-1
 10105ec:	12801436 	bltu	r2,r10,1010640 <__muldf3+0x2e8>
 10105f0:	da001017 	ldw	r8,64(sp)
 10105f4:	101f883a 	mov	r15,r2
 10105f8:	4a45883a 	add	r2,r9,r9
 10105fc:	124d803a 	cmpltu	r6,r2,r9
 1010600:	5287883a 	add	r3,r10,r10
 1010604:	9497883a 	add	r11,r18,r18
 1010608:	5c8f803a 	cmpltu	r7,r11,r18
 101060c:	9cd9883a 	add	r12,r19,r19
 1010610:	01000044 	movi	r4,1
 1010614:	30cd883a 	add	r6,r6,r3
 1010618:	3b0f883a 	add	r7,r7,r12
 101061c:	423fffc4 	addi	r8,r8,-1
 1010620:	1013883a 	mov	r9,r2
 1010624:	3015883a 	mov	r10,r6
 1010628:	111ab03a 	or	r13,r2,r4
 101062c:	98003016 	blt	r19,zero,10106f0 <__muldf3+0x398>
 1010630:	5825883a 	mov	r18,r11
 1010634:	3827883a 	mov	r19,r7
 1010638:	7abfef2e 	bgeu	r15,r10,10105f8 <__muldf3+0x2a0>
 101063c:	da001015 	stw	r8,64(sp)
 1010640:	00803fc4 	movi	r2,255
 1010644:	488e703a 	and	r7,r9,r2
 1010648:	00802004 	movi	r2,128
 101064c:	0007883a 	mov	r3,zero
 1010650:	0011883a 	mov	r8,zero
 1010654:	38801826 	beq	r7,r2,10106b8 <__muldf3+0x360>
 1010658:	008000c4 	movi	r2,3
 101065c:	d9000e04 	addi	r4,sp,56
 1010660:	da801215 	stw	r10,72(sp)
 1010664:	d8800e15 	stw	r2,56(sp)
 1010668:	da401115 	stw	r9,68(sp)
 101066c:	003f6a06 	br	1010418 <__muldf3+0xc0>
 1010670:	89802126 	beq	r17,r6,10106f8 <__muldf3+0x3a0>
 1010674:	0009883a 	mov	r4,zero
 1010678:	5105883a 	add	r2,r10,r4
 101067c:	128d803a 	cmpltu	r6,r2,r10
 1010680:	5d07883a 	add	r3,r11,r20
 1010684:	30cd883a 	add	r6,r6,r3
 1010688:	0021883a 	mov	r16,zero
 101068c:	0023883a 	mov	r17,zero
 1010690:	1025883a 	mov	r18,r2
 1010694:	3027883a 	mov	r19,r6
 1010698:	32ff9e2e 	bgeu	r6,r11,1010514 <__muldf3+0x1bc>
 101069c:	00800044 	movi	r2,1
 10106a0:	8089883a 	add	r4,r16,r2
 10106a4:	240d803a 	cmpltu	r6,r4,r16
 10106a8:	344d883a 	add	r6,r6,r17
 10106ac:	2021883a 	mov	r16,r4
 10106b0:	3023883a 	mov	r17,r6
 10106b4:	003f9806 	br	1010518 <__muldf3+0x1c0>
 10106b8:	403fe71e 	bne	r8,zero,1010658 <__muldf3+0x300>
 10106bc:	01004004 	movi	r4,256
 10106c0:	4904703a 	and	r2,r9,r4
 10106c4:	10c4b03a 	or	r2,r2,r3
 10106c8:	103fe31e 	bne	r2,zero,1010658 <__muldf3+0x300>
 10106cc:	94c4b03a 	or	r2,r18,r19
 10106d0:	103fe126 	beq	r2,zero,1010658 <__muldf3+0x300>
 10106d4:	49c5883a 	add	r2,r9,r7
 10106d8:	1251803a 	cmpltu	r8,r2,r9
 10106dc:	4291883a 	add	r8,r8,r10
 10106e0:	013fc004 	movi	r4,-256
 10106e4:	1112703a 	and	r9,r2,r4
 10106e8:	4015883a 	mov	r10,r8
 10106ec:	003fda06 	br	1010658 <__muldf3+0x300>
 10106f0:	6813883a 	mov	r9,r13
 10106f4:	003fce06 	br	1010630 <__muldf3+0x2d8>
 10106f8:	143f7c36 	bltu	r2,r16,10104ec <__muldf3+0x194>
 10106fc:	003fdd06 	br	1010674 <__muldf3+0x31c>
 1010700:	12bf852e 	bgeu	r2,r10,1010518 <__muldf3+0x1c0>
 1010704:	003fe506 	br	101069c <__muldf3+0x344>
 1010708:	00800084 	movi	r2,2
 101070c:	20bf351e 	bne	r4,r2,10103e4 <__muldf3+0x8c>
 1010710:	010040b4 	movhi	r4,258
 1010714:	2132bc04 	addi	r4,r4,-13584
 1010718:	003f3f06 	br	1010418 <__muldf3+0xc0>

0101071c <__divdf3>:
 101071c:	deffed04 	addi	sp,sp,-76
 1010720:	dcc01115 	stw	r19,68(sp)
 1010724:	dcc00404 	addi	r19,sp,16
 1010728:	2011883a 	mov	r8,r4
 101072c:	2813883a 	mov	r9,r5
 1010730:	dc000e15 	stw	r16,56(sp)
 1010734:	d809883a 	mov	r4,sp
 1010738:	980b883a 	mov	r5,r19
 101073c:	dc000904 	addi	r16,sp,36
 1010740:	dfc01215 	stw	ra,72(sp)
 1010744:	da400115 	stw	r9,4(sp)
 1010748:	d9c00315 	stw	r7,12(sp)
 101074c:	da000015 	stw	r8,0(sp)
 1010750:	d9800215 	stw	r6,8(sp)
 1010754:	dc801015 	stw	r18,64(sp)
 1010758:	dc400f15 	stw	r17,60(sp)
 101075c:	10115ac0 	call	10115ac <__unpack_d>
 1010760:	d9000204 	addi	r4,sp,8
 1010764:	800b883a 	mov	r5,r16
 1010768:	10115ac0 	call	10115ac <__unpack_d>
 101076c:	d9000417 	ldw	r4,16(sp)
 1010770:	00800044 	movi	r2,1
 1010774:	11000b2e 	bgeu	r2,r4,10107a4 <__divdf3+0x88>
 1010778:	d9400917 	ldw	r5,36(sp)
 101077c:	1140762e 	bgeu	r2,r5,1010958 <__divdf3+0x23c>
 1010780:	d8800517 	ldw	r2,20(sp)
 1010784:	d8c00a17 	ldw	r3,40(sp)
 1010788:	01800104 	movi	r6,4
 101078c:	10c4f03a 	xor	r2,r2,r3
 1010790:	d8800515 	stw	r2,20(sp)
 1010794:	21800226 	beq	r4,r6,10107a0 <__divdf3+0x84>
 1010798:	00800084 	movi	r2,2
 101079c:	2080141e 	bne	r4,r2,10107f0 <__divdf3+0xd4>
 10107a0:	29000926 	beq	r5,r4,10107c8 <__divdf3+0xac>
 10107a4:	9809883a 	mov	r4,r19
 10107a8:	10112980 	call	1011298 <__pack_d>
 10107ac:	dfc01217 	ldw	ra,72(sp)
 10107b0:	dcc01117 	ldw	r19,68(sp)
 10107b4:	dc801017 	ldw	r18,64(sp)
 10107b8:	dc400f17 	ldw	r17,60(sp)
 10107bc:	dc000e17 	ldw	r16,56(sp)
 10107c0:	dec01304 	addi	sp,sp,76
 10107c4:	f800283a 	ret
 10107c8:	010040b4 	movhi	r4,258
 10107cc:	2132bc04 	addi	r4,r4,-13584
 10107d0:	10112980 	call	1011298 <__pack_d>
 10107d4:	dfc01217 	ldw	ra,72(sp)
 10107d8:	dcc01117 	ldw	r19,68(sp)
 10107dc:	dc801017 	ldw	r18,64(sp)
 10107e0:	dc400f17 	ldw	r17,60(sp)
 10107e4:	dc000e17 	ldw	r16,56(sp)
 10107e8:	dec01304 	addi	sp,sp,76
 10107ec:	f800283a 	ret
 10107f0:	29805b26 	beq	r5,r6,1010960 <__divdf3+0x244>
 10107f4:	28802d26 	beq	r5,r2,10108ac <__divdf3+0x190>
 10107f8:	d8c00617 	ldw	r3,24(sp)
 10107fc:	d8800b17 	ldw	r2,44(sp)
 1010800:	d9c00817 	ldw	r7,32(sp)
 1010804:	dc400d17 	ldw	r17,52(sp)
 1010808:	188bc83a 	sub	r5,r3,r2
 101080c:	d9800717 	ldw	r6,28(sp)
 1010810:	dc000c17 	ldw	r16,48(sp)
 1010814:	d9400615 	stw	r5,24(sp)
 1010818:	3c403836 	bltu	r7,r17,10108fc <__divdf3+0x1e0>
 101081c:	89c03626 	beq	r17,r7,10108f8 <__divdf3+0x1dc>
 1010820:	0015883a 	mov	r10,zero
 1010824:	001d883a 	mov	r14,zero
 1010828:	02c40034 	movhi	r11,4096
 101082c:	001f883a 	mov	r15,zero
 1010830:	003f883a 	mov	ra,zero
 1010834:	04800f44 	movi	r18,61
 1010838:	00000f06 	br	1010878 <__divdf3+0x15c>
 101083c:	601d883a 	mov	r14,r12
 1010840:	681f883a 	mov	r15,r13
 1010844:	400d883a 	mov	r6,r8
 1010848:	100f883a 	mov	r7,r2
 101084c:	3191883a 	add	r8,r6,r6
 1010850:	5808d07a 	srli	r4,r11,1
 1010854:	4185803a 	cmpltu	r2,r8,r6
 1010858:	39d3883a 	add	r9,r7,r7
 101085c:	28c6b03a 	or	r3,r5,r3
 1010860:	1245883a 	add	r2,r2,r9
 1010864:	1815883a 	mov	r10,r3
 1010868:	2017883a 	mov	r11,r4
 101086c:	400d883a 	mov	r6,r8
 1010870:	100f883a 	mov	r7,r2
 1010874:	fc801726 	beq	ra,r18,10108d4 <__divdf3+0x1b8>
 1010878:	580a97fa 	slli	r5,r11,31
 101087c:	5006d07a 	srli	r3,r10,1
 1010880:	ffc00044 	addi	ra,ra,1
 1010884:	3c7ff136 	bltu	r7,r17,101084c <__divdf3+0x130>
 1010888:	3411c83a 	sub	r8,r6,r16
 101088c:	3205803a 	cmpltu	r2,r6,r8
 1010890:	3c53c83a 	sub	r9,r7,r17
 1010894:	7298b03a 	or	r12,r14,r10
 1010898:	7adab03a 	or	r13,r15,r11
 101089c:	4885c83a 	sub	r2,r9,r2
 10108a0:	89ffe61e 	bne	r17,r7,101083c <__divdf3+0x120>
 10108a4:	343fe936 	bltu	r6,r16,101084c <__divdf3+0x130>
 10108a8:	003fe406 	br	101083c <__divdf3+0x120>
 10108ac:	9809883a 	mov	r4,r19
 10108b0:	d9800415 	stw	r6,16(sp)
 10108b4:	10112980 	call	1011298 <__pack_d>
 10108b8:	dfc01217 	ldw	ra,72(sp)
 10108bc:	dcc01117 	ldw	r19,68(sp)
 10108c0:	dc801017 	ldw	r18,64(sp)
 10108c4:	dc400f17 	ldw	r17,60(sp)
 10108c8:	dc000e17 	ldw	r16,56(sp)
 10108cc:	dec01304 	addi	sp,sp,76
 10108d0:	f800283a 	ret
 10108d4:	00803fc4 	movi	r2,255
 10108d8:	7090703a 	and	r8,r14,r2
 10108dc:	00802004 	movi	r2,128
 10108e0:	0007883a 	mov	r3,zero
 10108e4:	0013883a 	mov	r9,zero
 10108e8:	40800d26 	beq	r8,r2,1010920 <__divdf3+0x204>
 10108ec:	dbc00815 	stw	r15,32(sp)
 10108f0:	db800715 	stw	r14,28(sp)
 10108f4:	003fab06 	br	10107a4 <__divdf3+0x88>
 10108f8:	343fc92e 	bgeu	r6,r16,1010820 <__divdf3+0x104>
 10108fc:	3185883a 	add	r2,r6,r6
 1010900:	1189803a 	cmpltu	r4,r2,r6
 1010904:	39c7883a 	add	r3,r7,r7
 1010908:	20c9883a 	add	r4,r4,r3
 101090c:	297fffc4 	addi	r5,r5,-1
 1010910:	100d883a 	mov	r6,r2
 1010914:	200f883a 	mov	r7,r4
 1010918:	d9400615 	stw	r5,24(sp)
 101091c:	003fc006 	br	1010820 <__divdf3+0x104>
 1010920:	483ff21e 	bne	r9,zero,10108ec <__divdf3+0x1d0>
 1010924:	01004004 	movi	r4,256
 1010928:	7104703a 	and	r2,r14,r4
 101092c:	10c4b03a 	or	r2,r2,r3
 1010930:	103fee1e 	bne	r2,zero,10108ec <__divdf3+0x1d0>
 1010934:	31c4b03a 	or	r2,r6,r7
 1010938:	103fec26 	beq	r2,zero,10108ec <__divdf3+0x1d0>
 101093c:	7205883a 	add	r2,r14,r8
 1010940:	1391803a 	cmpltu	r8,r2,r14
 1010944:	43d1883a 	add	r8,r8,r15
 1010948:	013fc004 	movi	r4,-256
 101094c:	111c703a 	and	r14,r2,r4
 1010950:	401f883a 	mov	r15,r8
 1010954:	003fe506 	br	10108ec <__divdf3+0x1d0>
 1010958:	8009883a 	mov	r4,r16
 101095c:	003f9206 	br	10107a8 <__divdf3+0x8c>
 1010960:	9809883a 	mov	r4,r19
 1010964:	d8000715 	stw	zero,28(sp)
 1010968:	d8000815 	stw	zero,32(sp)
 101096c:	d8000615 	stw	zero,24(sp)
 1010970:	003f8d06 	br	10107a8 <__divdf3+0x8c>

01010974 <__eqdf2>:
 1010974:	deffef04 	addi	sp,sp,-68
 1010978:	dc400f15 	stw	r17,60(sp)
 101097c:	dc400404 	addi	r17,sp,16
 1010980:	2005883a 	mov	r2,r4
 1010984:	2807883a 	mov	r3,r5
 1010988:	dc000e15 	stw	r16,56(sp)
 101098c:	d809883a 	mov	r4,sp
 1010990:	880b883a 	mov	r5,r17
 1010994:	dc000904 	addi	r16,sp,36
 1010998:	d8c00115 	stw	r3,4(sp)
 101099c:	d8800015 	stw	r2,0(sp)
 10109a0:	d9800215 	stw	r6,8(sp)
 10109a4:	dfc01015 	stw	ra,64(sp)
 10109a8:	d9c00315 	stw	r7,12(sp)
 10109ac:	10115ac0 	call	10115ac <__unpack_d>
 10109b0:	d9000204 	addi	r4,sp,8
 10109b4:	800b883a 	mov	r5,r16
 10109b8:	10115ac0 	call	10115ac <__unpack_d>
 10109bc:	d8800417 	ldw	r2,16(sp)
 10109c0:	00c00044 	movi	r3,1
 10109c4:	180d883a 	mov	r6,r3
 10109c8:	1880062e 	bgeu	r3,r2,10109e4 <__eqdf2+0x70>
 10109cc:	d8800917 	ldw	r2,36(sp)
 10109d0:	8809883a 	mov	r4,r17
 10109d4:	800b883a 	mov	r5,r16
 10109d8:	1880022e 	bgeu	r3,r2,10109e4 <__eqdf2+0x70>
 10109dc:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 10109e0:	100d883a 	mov	r6,r2
 10109e4:	3005883a 	mov	r2,r6
 10109e8:	dfc01017 	ldw	ra,64(sp)
 10109ec:	dc400f17 	ldw	r17,60(sp)
 10109f0:	dc000e17 	ldw	r16,56(sp)
 10109f4:	dec01104 	addi	sp,sp,68
 10109f8:	f800283a 	ret

010109fc <__nedf2>:
 10109fc:	deffef04 	addi	sp,sp,-68
 1010a00:	dc400f15 	stw	r17,60(sp)
 1010a04:	dc400404 	addi	r17,sp,16
 1010a08:	2005883a 	mov	r2,r4
 1010a0c:	2807883a 	mov	r3,r5
 1010a10:	dc000e15 	stw	r16,56(sp)
 1010a14:	d809883a 	mov	r4,sp
 1010a18:	880b883a 	mov	r5,r17
 1010a1c:	dc000904 	addi	r16,sp,36
 1010a20:	d8c00115 	stw	r3,4(sp)
 1010a24:	d8800015 	stw	r2,0(sp)
 1010a28:	d9800215 	stw	r6,8(sp)
 1010a2c:	dfc01015 	stw	ra,64(sp)
 1010a30:	d9c00315 	stw	r7,12(sp)
 1010a34:	10115ac0 	call	10115ac <__unpack_d>
 1010a38:	d9000204 	addi	r4,sp,8
 1010a3c:	800b883a 	mov	r5,r16
 1010a40:	10115ac0 	call	10115ac <__unpack_d>
 1010a44:	d8800417 	ldw	r2,16(sp)
 1010a48:	00c00044 	movi	r3,1
 1010a4c:	180d883a 	mov	r6,r3
 1010a50:	1880062e 	bgeu	r3,r2,1010a6c <__nedf2+0x70>
 1010a54:	d8800917 	ldw	r2,36(sp)
 1010a58:	8809883a 	mov	r4,r17
 1010a5c:	800b883a 	mov	r5,r16
 1010a60:	1880022e 	bgeu	r3,r2,1010a6c <__nedf2+0x70>
 1010a64:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 1010a68:	100d883a 	mov	r6,r2
 1010a6c:	3005883a 	mov	r2,r6
 1010a70:	dfc01017 	ldw	ra,64(sp)
 1010a74:	dc400f17 	ldw	r17,60(sp)
 1010a78:	dc000e17 	ldw	r16,56(sp)
 1010a7c:	dec01104 	addi	sp,sp,68
 1010a80:	f800283a 	ret

01010a84 <__gtdf2>:
 1010a84:	deffef04 	addi	sp,sp,-68
 1010a88:	dc400f15 	stw	r17,60(sp)
 1010a8c:	dc400404 	addi	r17,sp,16
 1010a90:	2005883a 	mov	r2,r4
 1010a94:	2807883a 	mov	r3,r5
 1010a98:	dc000e15 	stw	r16,56(sp)
 1010a9c:	d809883a 	mov	r4,sp
 1010aa0:	880b883a 	mov	r5,r17
 1010aa4:	dc000904 	addi	r16,sp,36
 1010aa8:	d8c00115 	stw	r3,4(sp)
 1010aac:	d8800015 	stw	r2,0(sp)
 1010ab0:	d9800215 	stw	r6,8(sp)
 1010ab4:	dfc01015 	stw	ra,64(sp)
 1010ab8:	d9c00315 	stw	r7,12(sp)
 1010abc:	10115ac0 	call	10115ac <__unpack_d>
 1010ac0:	d9000204 	addi	r4,sp,8
 1010ac4:	800b883a 	mov	r5,r16
 1010ac8:	10115ac0 	call	10115ac <__unpack_d>
 1010acc:	d8800417 	ldw	r2,16(sp)
 1010ad0:	00c00044 	movi	r3,1
 1010ad4:	01bfffc4 	movi	r6,-1
 1010ad8:	1880062e 	bgeu	r3,r2,1010af4 <__gtdf2+0x70>
 1010adc:	d8800917 	ldw	r2,36(sp)
 1010ae0:	8809883a 	mov	r4,r17
 1010ae4:	800b883a 	mov	r5,r16
 1010ae8:	1880022e 	bgeu	r3,r2,1010af4 <__gtdf2+0x70>
 1010aec:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 1010af0:	100d883a 	mov	r6,r2
 1010af4:	3005883a 	mov	r2,r6
 1010af8:	dfc01017 	ldw	ra,64(sp)
 1010afc:	dc400f17 	ldw	r17,60(sp)
 1010b00:	dc000e17 	ldw	r16,56(sp)
 1010b04:	dec01104 	addi	sp,sp,68
 1010b08:	f800283a 	ret

01010b0c <__gedf2>:
 1010b0c:	deffef04 	addi	sp,sp,-68
 1010b10:	dc400f15 	stw	r17,60(sp)
 1010b14:	dc400404 	addi	r17,sp,16
 1010b18:	2005883a 	mov	r2,r4
 1010b1c:	2807883a 	mov	r3,r5
 1010b20:	dc000e15 	stw	r16,56(sp)
 1010b24:	d809883a 	mov	r4,sp
 1010b28:	880b883a 	mov	r5,r17
 1010b2c:	dc000904 	addi	r16,sp,36
 1010b30:	d8c00115 	stw	r3,4(sp)
 1010b34:	d8800015 	stw	r2,0(sp)
 1010b38:	d9800215 	stw	r6,8(sp)
 1010b3c:	dfc01015 	stw	ra,64(sp)
 1010b40:	d9c00315 	stw	r7,12(sp)
 1010b44:	10115ac0 	call	10115ac <__unpack_d>
 1010b48:	d9000204 	addi	r4,sp,8
 1010b4c:	800b883a 	mov	r5,r16
 1010b50:	10115ac0 	call	10115ac <__unpack_d>
 1010b54:	d8800417 	ldw	r2,16(sp)
 1010b58:	00c00044 	movi	r3,1
 1010b5c:	01bfffc4 	movi	r6,-1
 1010b60:	1880062e 	bgeu	r3,r2,1010b7c <__gedf2+0x70>
 1010b64:	d8800917 	ldw	r2,36(sp)
 1010b68:	8809883a 	mov	r4,r17
 1010b6c:	800b883a 	mov	r5,r16
 1010b70:	1880022e 	bgeu	r3,r2,1010b7c <__gedf2+0x70>
 1010b74:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 1010b78:	100d883a 	mov	r6,r2
 1010b7c:	3005883a 	mov	r2,r6
 1010b80:	dfc01017 	ldw	ra,64(sp)
 1010b84:	dc400f17 	ldw	r17,60(sp)
 1010b88:	dc000e17 	ldw	r16,56(sp)
 1010b8c:	dec01104 	addi	sp,sp,68
 1010b90:	f800283a 	ret

01010b94 <__ltdf2>:
 1010b94:	deffef04 	addi	sp,sp,-68
 1010b98:	dc400f15 	stw	r17,60(sp)
 1010b9c:	dc400404 	addi	r17,sp,16
 1010ba0:	2005883a 	mov	r2,r4
 1010ba4:	2807883a 	mov	r3,r5
 1010ba8:	dc000e15 	stw	r16,56(sp)
 1010bac:	d809883a 	mov	r4,sp
 1010bb0:	880b883a 	mov	r5,r17
 1010bb4:	dc000904 	addi	r16,sp,36
 1010bb8:	d8c00115 	stw	r3,4(sp)
 1010bbc:	d8800015 	stw	r2,0(sp)
 1010bc0:	d9800215 	stw	r6,8(sp)
 1010bc4:	dfc01015 	stw	ra,64(sp)
 1010bc8:	d9c00315 	stw	r7,12(sp)
 1010bcc:	10115ac0 	call	10115ac <__unpack_d>
 1010bd0:	d9000204 	addi	r4,sp,8
 1010bd4:	800b883a 	mov	r5,r16
 1010bd8:	10115ac0 	call	10115ac <__unpack_d>
 1010bdc:	d8800417 	ldw	r2,16(sp)
 1010be0:	00c00044 	movi	r3,1
 1010be4:	180d883a 	mov	r6,r3
 1010be8:	1880062e 	bgeu	r3,r2,1010c04 <__ltdf2+0x70>
 1010bec:	d8800917 	ldw	r2,36(sp)
 1010bf0:	8809883a 	mov	r4,r17
 1010bf4:	800b883a 	mov	r5,r16
 1010bf8:	1880022e 	bgeu	r3,r2,1010c04 <__ltdf2+0x70>
 1010bfc:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 1010c00:	100d883a 	mov	r6,r2
 1010c04:	3005883a 	mov	r2,r6
 1010c08:	dfc01017 	ldw	ra,64(sp)
 1010c0c:	dc400f17 	ldw	r17,60(sp)
 1010c10:	dc000e17 	ldw	r16,56(sp)
 1010c14:	dec01104 	addi	sp,sp,68
 1010c18:	f800283a 	ret

01010c1c <__ledf2>:
 1010c1c:	deffef04 	addi	sp,sp,-68
 1010c20:	dc400f15 	stw	r17,60(sp)
 1010c24:	dc400404 	addi	r17,sp,16
 1010c28:	2005883a 	mov	r2,r4
 1010c2c:	2807883a 	mov	r3,r5
 1010c30:	dc000e15 	stw	r16,56(sp)
 1010c34:	d809883a 	mov	r4,sp
 1010c38:	880b883a 	mov	r5,r17
 1010c3c:	dc000904 	addi	r16,sp,36
 1010c40:	d8c00115 	stw	r3,4(sp)
 1010c44:	d8800015 	stw	r2,0(sp)
 1010c48:	d9800215 	stw	r6,8(sp)
 1010c4c:	dfc01015 	stw	ra,64(sp)
 1010c50:	d9c00315 	stw	r7,12(sp)
 1010c54:	10115ac0 	call	10115ac <__unpack_d>
 1010c58:	d9000204 	addi	r4,sp,8
 1010c5c:	800b883a 	mov	r5,r16
 1010c60:	10115ac0 	call	10115ac <__unpack_d>
 1010c64:	d8800417 	ldw	r2,16(sp)
 1010c68:	00c00044 	movi	r3,1
 1010c6c:	180d883a 	mov	r6,r3
 1010c70:	1880062e 	bgeu	r3,r2,1010c8c <__ledf2+0x70>
 1010c74:	d8800917 	ldw	r2,36(sp)
 1010c78:	8809883a 	mov	r4,r17
 1010c7c:	800b883a 	mov	r5,r16
 1010c80:	1880022e 	bgeu	r3,r2,1010c8c <__ledf2+0x70>
 1010c84:	10116e40 	call	10116e4 <__fpcmp_parts_d>
 1010c88:	100d883a 	mov	r6,r2
 1010c8c:	3005883a 	mov	r2,r6
 1010c90:	dfc01017 	ldw	ra,64(sp)
 1010c94:	dc400f17 	ldw	r17,60(sp)
 1010c98:	dc000e17 	ldw	r16,56(sp)
 1010c9c:	dec01104 	addi	sp,sp,68
 1010ca0:	f800283a 	ret

01010ca4 <__floatsidf>:
 1010ca4:	2006d7fa 	srli	r3,r4,31
 1010ca8:	defff604 	addi	sp,sp,-40
 1010cac:	008000c4 	movi	r2,3
 1010cb0:	dfc00915 	stw	ra,36(sp)
 1010cb4:	dcc00815 	stw	r19,32(sp)
 1010cb8:	dc800715 	stw	r18,28(sp)
 1010cbc:	dc400615 	stw	r17,24(sp)
 1010cc0:	dc000515 	stw	r16,20(sp)
 1010cc4:	d8800015 	stw	r2,0(sp)
 1010cc8:	d8c00115 	stw	r3,4(sp)
 1010ccc:	20000f1e 	bne	r4,zero,1010d0c <__floatsidf+0x68>
 1010cd0:	00800084 	movi	r2,2
 1010cd4:	d8800015 	stw	r2,0(sp)
 1010cd8:	d809883a 	mov	r4,sp
 1010cdc:	10112980 	call	1011298 <__pack_d>
 1010ce0:	1009883a 	mov	r4,r2
 1010ce4:	180b883a 	mov	r5,r3
 1010ce8:	2005883a 	mov	r2,r4
 1010cec:	2807883a 	mov	r3,r5
 1010cf0:	dfc00917 	ldw	ra,36(sp)
 1010cf4:	dcc00817 	ldw	r19,32(sp)
 1010cf8:	dc800717 	ldw	r18,28(sp)
 1010cfc:	dc400617 	ldw	r17,24(sp)
 1010d00:	dc000517 	ldw	r16,20(sp)
 1010d04:	dec00a04 	addi	sp,sp,40
 1010d08:	f800283a 	ret
 1010d0c:	00800f04 	movi	r2,60
 1010d10:	1807003a 	cmpeq	r3,r3,zero
 1010d14:	d8800215 	stw	r2,8(sp)
 1010d18:	18001126 	beq	r3,zero,1010d60 <__floatsidf+0xbc>
 1010d1c:	0027883a 	mov	r19,zero
 1010d20:	2025883a 	mov	r18,r4
 1010d24:	d9000315 	stw	r4,12(sp)
 1010d28:	dcc00415 	stw	r19,16(sp)
 1010d2c:	101107c0 	call	101107c <__clzsi2>
 1010d30:	11000744 	addi	r4,r2,29
 1010d34:	013fe80e 	bge	zero,r4,1010cd8 <__floatsidf+0x34>
 1010d38:	10bfff44 	addi	r2,r2,-3
 1010d3c:	10000c16 	blt	r2,zero,1010d70 <__floatsidf+0xcc>
 1010d40:	90a2983a 	sll	r17,r18,r2
 1010d44:	0021883a 	mov	r16,zero
 1010d48:	d8800217 	ldw	r2,8(sp)
 1010d4c:	dc400415 	stw	r17,16(sp)
 1010d50:	dc000315 	stw	r16,12(sp)
 1010d54:	1105c83a 	sub	r2,r2,r4
 1010d58:	d8800215 	stw	r2,8(sp)
 1010d5c:	003fde06 	br	1010cd8 <__floatsidf+0x34>
 1010d60:	00a00034 	movhi	r2,32768
 1010d64:	20800a26 	beq	r4,r2,1010d90 <__floatsidf+0xec>
 1010d68:	0109c83a 	sub	r4,zero,r4
 1010d6c:	003feb06 	br	1010d1c <__floatsidf+0x78>
 1010d70:	9006d07a 	srli	r3,r18,1
 1010d74:	008007c4 	movi	r2,31
 1010d78:	1105c83a 	sub	r2,r2,r4
 1010d7c:	1886d83a 	srl	r3,r3,r2
 1010d80:	9922983a 	sll	r17,r19,r4
 1010d84:	9120983a 	sll	r16,r18,r4
 1010d88:	1c62b03a 	or	r17,r3,r17
 1010d8c:	003fee06 	br	1010d48 <__floatsidf+0xa4>
 1010d90:	0009883a 	mov	r4,zero
 1010d94:	01707834 	movhi	r5,49632
 1010d98:	003fd306 	br	1010ce8 <__floatsidf+0x44>

01010d9c <__fixdfsi>:
 1010d9c:	defff804 	addi	sp,sp,-32
 1010da0:	2005883a 	mov	r2,r4
 1010da4:	2807883a 	mov	r3,r5
 1010da8:	d809883a 	mov	r4,sp
 1010dac:	d9400204 	addi	r5,sp,8
 1010db0:	d8c00115 	stw	r3,4(sp)
 1010db4:	d8800015 	stw	r2,0(sp)
 1010db8:	dfc00715 	stw	ra,28(sp)
 1010dbc:	10115ac0 	call	10115ac <__unpack_d>
 1010dc0:	d8c00217 	ldw	r3,8(sp)
 1010dc4:	00800084 	movi	r2,2
 1010dc8:	1880051e 	bne	r3,r2,1010de0 <__fixdfsi+0x44>
 1010dcc:	0007883a 	mov	r3,zero
 1010dd0:	1805883a 	mov	r2,r3
 1010dd4:	dfc00717 	ldw	ra,28(sp)
 1010dd8:	dec00804 	addi	sp,sp,32
 1010ddc:	f800283a 	ret
 1010de0:	00800044 	movi	r2,1
 1010de4:	10fff92e 	bgeu	r2,r3,1010dcc <__fixdfsi+0x30>
 1010de8:	00800104 	movi	r2,4
 1010dec:	18800426 	beq	r3,r2,1010e00 <__fixdfsi+0x64>
 1010df0:	d8c00417 	ldw	r3,16(sp)
 1010df4:	183ff516 	blt	r3,zero,1010dcc <__fixdfsi+0x30>
 1010df8:	00800784 	movi	r2,30
 1010dfc:	10c0080e 	bge	r2,r3,1010e20 <__fixdfsi+0x84>
 1010e00:	d8800317 	ldw	r2,12(sp)
 1010e04:	1000121e 	bne	r2,zero,1010e50 <__fixdfsi+0xb4>
 1010e08:	00e00034 	movhi	r3,32768
 1010e0c:	18ffffc4 	addi	r3,r3,-1
 1010e10:	1805883a 	mov	r2,r3
 1010e14:	dfc00717 	ldw	ra,28(sp)
 1010e18:	dec00804 	addi	sp,sp,32
 1010e1c:	f800283a 	ret
 1010e20:	00800f04 	movi	r2,60
 1010e24:	10d1c83a 	sub	r8,r2,r3
 1010e28:	40bff804 	addi	r2,r8,-32
 1010e2c:	d9800517 	ldw	r6,20(sp)
 1010e30:	d9c00617 	ldw	r7,24(sp)
 1010e34:	10000816 	blt	r2,zero,1010e58 <__fixdfsi+0xbc>
 1010e38:	3888d83a 	srl	r4,r7,r2
 1010e3c:	d8800317 	ldw	r2,12(sp)
 1010e40:	2007883a 	mov	r3,r4
 1010e44:	103fe226 	beq	r2,zero,1010dd0 <__fixdfsi+0x34>
 1010e48:	0107c83a 	sub	r3,zero,r4
 1010e4c:	003fe006 	br	1010dd0 <__fixdfsi+0x34>
 1010e50:	00e00034 	movhi	r3,32768
 1010e54:	003fde06 	br	1010dd0 <__fixdfsi+0x34>
 1010e58:	39c7883a 	add	r3,r7,r7
 1010e5c:	008007c4 	movi	r2,31
 1010e60:	1205c83a 	sub	r2,r2,r8
 1010e64:	1886983a 	sll	r3,r3,r2
 1010e68:	3208d83a 	srl	r4,r6,r8
 1010e6c:	1908b03a 	or	r4,r3,r4
 1010e70:	003ff206 	br	1010e3c <__fixdfsi+0xa0>

01010e74 <__truncdfsf2>:
 1010e74:	defff804 	addi	sp,sp,-32
 1010e78:	2005883a 	mov	r2,r4
 1010e7c:	2807883a 	mov	r3,r5
 1010e80:	d809883a 	mov	r4,sp
 1010e84:	d9400204 	addi	r5,sp,8
 1010e88:	d8c00115 	stw	r3,4(sp)
 1010e8c:	d8800015 	stw	r2,0(sp)
 1010e90:	dfc00715 	stw	ra,28(sp)
 1010e94:	10115ac0 	call	10115ac <__unpack_d>
 1010e98:	d9c00517 	ldw	r7,20(sp)
 1010e9c:	da000617 	ldw	r8,24(sp)
 1010ea0:	02d00034 	movhi	r11,16384
 1010ea4:	5affffc4 	addi	r11,r11,-1
 1010ea8:	3812d7ba 	srli	r9,r7,30
 1010eac:	401a90ba 	slli	r13,r8,2
 1010eb0:	3ac4703a 	and	r2,r7,r11
 1010eb4:	0007883a 	mov	r3,zero
 1010eb8:	6a52b03a 	or	r9,r13,r9
 1010ebc:	10c4b03a 	or	r2,r2,r3
 1010ec0:	d9000217 	ldw	r4,8(sp)
 1010ec4:	d9400317 	ldw	r5,12(sp)
 1010ec8:	d9800417 	ldw	r6,16(sp)
 1010ecc:	480f883a 	mov	r7,r9
 1010ed0:	10000126 	beq	r2,zero,1010ed8 <__truncdfsf2+0x64>
 1010ed4:	49c00054 	ori	r7,r9,1
 1010ed8:	101126c0 	call	101126c <__make_fp>
 1010edc:	dfc00717 	ldw	ra,28(sp)
 1010ee0:	dec00804 	addi	sp,sp,32
 1010ee4:	f800283a 	ret

01010ee8 <__floatunsidf>:
 1010ee8:	defff204 	addi	sp,sp,-56
 1010eec:	dfc00d15 	stw	ra,52(sp)
 1010ef0:	ddc00c15 	stw	r23,48(sp)
 1010ef4:	dd800b15 	stw	r22,44(sp)
 1010ef8:	dd400a15 	stw	r21,40(sp)
 1010efc:	dd000915 	stw	r20,36(sp)
 1010f00:	dcc00815 	stw	r19,32(sp)
 1010f04:	dc800715 	stw	r18,28(sp)
 1010f08:	dc400615 	stw	r17,24(sp)
 1010f0c:	dc000515 	stw	r16,20(sp)
 1010f10:	d8000115 	stw	zero,4(sp)
 1010f14:	20000f1e 	bne	r4,zero,1010f54 <__floatunsidf+0x6c>
 1010f18:	00800084 	movi	r2,2
 1010f1c:	d8800015 	stw	r2,0(sp)
 1010f20:	d809883a 	mov	r4,sp
 1010f24:	10112980 	call	1011298 <__pack_d>
 1010f28:	dfc00d17 	ldw	ra,52(sp)
 1010f2c:	ddc00c17 	ldw	r23,48(sp)
 1010f30:	dd800b17 	ldw	r22,44(sp)
 1010f34:	dd400a17 	ldw	r21,40(sp)
 1010f38:	dd000917 	ldw	r20,36(sp)
 1010f3c:	dcc00817 	ldw	r19,32(sp)
 1010f40:	dc800717 	ldw	r18,28(sp)
 1010f44:	dc400617 	ldw	r17,24(sp)
 1010f48:	dc000517 	ldw	r16,20(sp)
 1010f4c:	dec00e04 	addi	sp,sp,56
 1010f50:	f800283a 	ret
 1010f54:	008000c4 	movi	r2,3
 1010f58:	00c00f04 	movi	r3,60
 1010f5c:	002f883a 	mov	r23,zero
 1010f60:	202d883a 	mov	r22,r4
 1010f64:	d8800015 	stw	r2,0(sp)
 1010f68:	d8c00215 	stw	r3,8(sp)
 1010f6c:	d9000315 	stw	r4,12(sp)
 1010f70:	ddc00415 	stw	r23,16(sp)
 1010f74:	101107c0 	call	101107c <__clzsi2>
 1010f78:	12400744 	addi	r9,r2,29
 1010f7c:	48000b16 	blt	r9,zero,1010fac <__floatunsidf+0xc4>
 1010f80:	483fe726 	beq	r9,zero,1010f20 <__floatunsidf+0x38>
 1010f84:	10bfff44 	addi	r2,r2,-3
 1010f88:	10002e16 	blt	r2,zero,1011044 <__floatunsidf+0x15c>
 1010f8c:	b0a2983a 	sll	r17,r22,r2
 1010f90:	0021883a 	mov	r16,zero
 1010f94:	d8800217 	ldw	r2,8(sp)
 1010f98:	dc400415 	stw	r17,16(sp)
 1010f9c:	dc000315 	stw	r16,12(sp)
 1010fa0:	1245c83a 	sub	r2,r2,r9
 1010fa4:	d8800215 	stw	r2,8(sp)
 1010fa8:	003fdd06 	br	1010f20 <__floatunsidf+0x38>
 1010fac:	0255c83a 	sub	r10,zero,r9
 1010fb0:	51bff804 	addi	r6,r10,-32
 1010fb4:	30001b16 	blt	r6,zero,1011024 <__floatunsidf+0x13c>
 1010fb8:	b9a8d83a 	srl	r20,r23,r6
 1010fbc:	002b883a 	mov	r21,zero
 1010fc0:	000f883a 	mov	r7,zero
 1010fc4:	01000044 	movi	r4,1
 1010fc8:	0011883a 	mov	r8,zero
 1010fcc:	30002516 	blt	r6,zero,1011064 <__floatunsidf+0x17c>
 1010fd0:	21a6983a 	sll	r19,r4,r6
 1010fd4:	0025883a 	mov	r18,zero
 1010fd8:	00bfffc4 	movi	r2,-1
 1010fdc:	9089883a 	add	r4,r18,r2
 1010fe0:	988b883a 	add	r5,r19,r2
 1010fe4:	248d803a 	cmpltu	r6,r4,r18
 1010fe8:	314b883a 	add	r5,r6,r5
 1010fec:	b104703a 	and	r2,r22,r4
 1010ff0:	b946703a 	and	r3,r23,r5
 1010ff4:	10c4b03a 	or	r2,r2,r3
 1010ff8:	10000226 	beq	r2,zero,1011004 <__floatunsidf+0x11c>
 1010ffc:	01c00044 	movi	r7,1
 1011000:	0011883a 	mov	r8,zero
 1011004:	d9000217 	ldw	r4,8(sp)
 1011008:	a1c4b03a 	or	r2,r20,r7
 101100c:	aa06b03a 	or	r3,r21,r8
 1011010:	2249c83a 	sub	r4,r4,r9
 1011014:	d8c00415 	stw	r3,16(sp)
 1011018:	d9000215 	stw	r4,8(sp)
 101101c:	d8800315 	stw	r2,12(sp)
 1011020:	003fbf06 	br	1010f20 <__floatunsidf+0x38>
 1011024:	bdc7883a 	add	r3,r23,r23
 1011028:	008007c4 	movi	r2,31
 101102c:	1285c83a 	sub	r2,r2,r10
 1011030:	1886983a 	sll	r3,r3,r2
 1011034:	b2a8d83a 	srl	r20,r22,r10
 1011038:	baaad83a 	srl	r21,r23,r10
 101103c:	1d28b03a 	or	r20,r3,r20
 1011040:	003fdf06 	br	1010fc0 <__floatunsidf+0xd8>
 1011044:	b006d07a 	srli	r3,r22,1
 1011048:	008007c4 	movi	r2,31
 101104c:	1245c83a 	sub	r2,r2,r9
 1011050:	1886d83a 	srl	r3,r3,r2
 1011054:	ba62983a 	sll	r17,r23,r9
 1011058:	b260983a 	sll	r16,r22,r9
 101105c:	1c62b03a 	or	r17,r3,r17
 1011060:	003fcc06 	br	1010f94 <__floatunsidf+0xac>
 1011064:	2006d07a 	srli	r3,r4,1
 1011068:	008007c4 	movi	r2,31
 101106c:	1285c83a 	sub	r2,r2,r10
 1011070:	18a6d83a 	srl	r19,r3,r2
 1011074:	22a4983a 	sll	r18,r4,r10
 1011078:	003fd706 	br	1010fd8 <__floatunsidf+0xf0>

0101107c <__clzsi2>:
 101107c:	00bfffd4 	movui	r2,65535
 1011080:	11000e36 	bltu	r2,r4,10110bc <__clzsi2+0x40>
 1011084:	00803fc4 	movi	r2,255
 1011088:	01400204 	movi	r5,8
 101108c:	0007883a 	mov	r3,zero
 1011090:	11001036 	bltu	r2,r4,10110d4 <__clzsi2+0x58>
 1011094:	000b883a 	mov	r5,zero
 1011098:	20c6d83a 	srl	r3,r4,r3
 101109c:	008040b4 	movhi	r2,258
 10110a0:	10b2c104 	addi	r2,r2,-13564
 10110a4:	1887883a 	add	r3,r3,r2
 10110a8:	18800003 	ldbu	r2,0(r3)
 10110ac:	00c00804 	movi	r3,32
 10110b0:	2885883a 	add	r2,r5,r2
 10110b4:	1885c83a 	sub	r2,r3,r2
 10110b8:	f800283a 	ret
 10110bc:	01400404 	movi	r5,16
 10110c0:	00804034 	movhi	r2,256
 10110c4:	10bfffc4 	addi	r2,r2,-1
 10110c8:	2807883a 	mov	r3,r5
 10110cc:	113ff22e 	bgeu	r2,r4,1011098 <__clzsi2+0x1c>
 10110d0:	01400604 	movi	r5,24
 10110d4:	2807883a 	mov	r3,r5
 10110d8:	20c6d83a 	srl	r3,r4,r3
 10110dc:	008040b4 	movhi	r2,258
 10110e0:	10b2c104 	addi	r2,r2,-13564
 10110e4:	1887883a 	add	r3,r3,r2
 10110e8:	18800003 	ldbu	r2,0(r3)
 10110ec:	00c00804 	movi	r3,32
 10110f0:	2885883a 	add	r2,r5,r2
 10110f4:	1885c83a 	sub	r2,r3,r2
 10110f8:	f800283a 	ret

010110fc <__unpack_f>:
 10110fc:	21800017 	ldw	r6,0(r4)
 1011100:	00c02034 	movhi	r3,128
 1011104:	18ffffc4 	addi	r3,r3,-1
 1011108:	3004d5fa 	srli	r2,r6,23
 101110c:	3008d7fa 	srli	r4,r6,31
 1011110:	30ce703a 	and	r7,r6,r3
 1011114:	10c03fcc 	andi	r3,r2,255
 1011118:	29000115 	stw	r4,4(r5)
 101111c:	1800131e 	bne	r3,zero,101116c <__unpack_f+0x70>
 1011120:	38000f26 	beq	r7,zero,1011160 <__unpack_f+0x64>
 1011124:	380691fa 	slli	r3,r7,7
 1011128:	01bfe084 	movi	r6,-126
 101112c:	008000c4 	movi	r2,3
 1011130:	01100034 	movhi	r4,16384
 1011134:	213fffc4 	addi	r4,r4,-1
 1011138:	28800015 	stw	r2,0(r5)
 101113c:	29800215 	stw	r6,8(r5)
 1011140:	20c00536 	bltu	r4,r3,1011158 <__unpack_f+0x5c>
 1011144:	3005883a 	mov	r2,r6
 1011148:	18c7883a 	add	r3,r3,r3
 101114c:	10bfffc4 	addi	r2,r2,-1
 1011150:	20fffd2e 	bgeu	r4,r3,1011148 <__unpack_f+0x4c>
 1011154:	28800215 	stw	r2,8(r5)
 1011158:	28c00315 	stw	r3,12(r5)
 101115c:	f800283a 	ret
 1011160:	00800084 	movi	r2,2
 1011164:	28800015 	stw	r2,0(r5)
 1011168:	f800283a 	ret
 101116c:	00803fc4 	movi	r2,255
 1011170:	18800826 	beq	r3,r2,1011194 <__unpack_f+0x98>
 1011174:	380491fa 	slli	r2,r7,7
 1011178:	18ffe044 	addi	r3,r3,-127
 101117c:	28c00215 	stw	r3,8(r5)
 1011180:	10900034 	orhi	r2,r2,16384
 1011184:	28800315 	stw	r2,12(r5)
 1011188:	008000c4 	movi	r2,3
 101118c:	28800015 	stw	r2,0(r5)
 1011190:	f800283a 	ret
 1011194:	3800031e 	bne	r7,zero,10111a4 <__unpack_f+0xa8>
 1011198:	00800104 	movi	r2,4
 101119c:	28800015 	stw	r2,0(r5)
 10111a0:	f800283a 	ret
 10111a4:	3080042c 	andhi	r2,r6,16
 10111a8:	10000426 	beq	r2,zero,10111bc <__unpack_f+0xc0>
 10111ac:	00800044 	movi	r2,1
 10111b0:	28800015 	stw	r2,0(r5)
 10111b4:	29c00315 	stw	r7,12(r5)
 10111b8:	f800283a 	ret
 10111bc:	28000015 	stw	zero,0(r5)
 10111c0:	003ffc06 	br	10111b4 <__unpack_f+0xb8>

010111c4 <__fpcmp_parts_f>:
 10111c4:	21800017 	ldw	r6,0(r4)
 10111c8:	00c00044 	movi	r3,1
 10111cc:	19800a2e 	bgeu	r3,r6,10111f8 <__fpcmp_parts_f+0x34>
 10111d0:	28800017 	ldw	r2,0(r5)
 10111d4:	1880082e 	bgeu	r3,r2,10111f8 <__fpcmp_parts_f+0x34>
 10111d8:	00c00104 	movi	r3,4
 10111dc:	30c01e26 	beq	r6,r3,1011258 <__fpcmp_parts_f+0x94>
 10111e0:	10c01a26 	beq	r2,r3,101124c <__fpcmp_parts_f+0x88>
 10111e4:	00c00084 	movi	r3,2
 10111e8:	30c00526 	beq	r6,r3,1011200 <__fpcmp_parts_f+0x3c>
 10111ec:	10c0071e 	bne	r2,r3,101120c <__fpcmp_parts_f+0x48>
 10111f0:	20800117 	ldw	r2,4(r4)
 10111f4:	1000091e 	bne	r2,zero,101121c <__fpcmp_parts_f+0x58>
 10111f8:	00800044 	movi	r2,1
 10111fc:	f800283a 	ret
 1011200:	10c0121e 	bne	r2,r3,101124c <__fpcmp_parts_f+0x88>
 1011204:	0005883a 	mov	r2,zero
 1011208:	f800283a 	ret
 101120c:	20c00117 	ldw	r3,4(r4)
 1011210:	28800117 	ldw	r2,4(r5)
 1011214:	18800326 	beq	r3,r2,1011224 <__fpcmp_parts_f+0x60>
 1011218:	183ff726 	beq	r3,zero,10111f8 <__fpcmp_parts_f+0x34>
 101121c:	00bfffc4 	movi	r2,-1
 1011220:	f800283a 	ret
 1011224:	21800217 	ldw	r6,8(r4)
 1011228:	28800217 	ldw	r2,8(r5)
 101122c:	11bffa16 	blt	r2,r6,1011218 <__fpcmp_parts_f+0x54>
 1011230:	30800416 	blt	r6,r2,1011244 <__fpcmp_parts_f+0x80>
 1011234:	21000317 	ldw	r4,12(r4)
 1011238:	29400317 	ldw	r5,12(r5)
 101123c:	293ff636 	bltu	r5,r4,1011218 <__fpcmp_parts_f+0x54>
 1011240:	217ff02e 	bgeu	r4,r5,1011204 <__fpcmp_parts_f+0x40>
 1011244:	183fec1e 	bne	r3,zero,10111f8 <__fpcmp_parts_f+0x34>
 1011248:	003ff406 	br	101121c <__fpcmp_parts_f+0x58>
 101124c:	28800117 	ldw	r2,4(r5)
 1011250:	103fe91e 	bne	r2,zero,10111f8 <__fpcmp_parts_f+0x34>
 1011254:	003ff106 	br	101121c <__fpcmp_parts_f+0x58>
 1011258:	11bfe51e 	bne	r2,r6,10111f0 <__fpcmp_parts_f+0x2c>
 101125c:	28c00117 	ldw	r3,4(r5)
 1011260:	20800117 	ldw	r2,4(r4)
 1011264:	1885c83a 	sub	r2,r3,r2
 1011268:	f800283a 	ret

0101126c <__make_fp>:
 101126c:	defffb04 	addi	sp,sp,-20
 1011270:	d9000015 	stw	r4,0(sp)
 1011274:	d809883a 	mov	r4,sp
 1011278:	dfc00415 	stw	ra,16(sp)
 101127c:	d9400115 	stw	r5,4(sp)
 1011280:	d9800215 	stw	r6,8(sp)
 1011284:	d9c00315 	stw	r7,12(sp)
 1011288:	10117ac0 	call	10117ac <__pack_f>
 101128c:	dfc00417 	ldw	ra,16(sp)
 1011290:	dec00504 	addi	sp,sp,20
 1011294:	f800283a 	ret

01011298 <__pack_d>:
 1011298:	20c00017 	ldw	r3,0(r4)
 101129c:	defffd04 	addi	sp,sp,-12
 10112a0:	dc000015 	stw	r16,0(sp)
 10112a4:	dc800215 	stw	r18,8(sp)
 10112a8:	dc400115 	stw	r17,4(sp)
 10112ac:	00800044 	movi	r2,1
 10112b0:	22000317 	ldw	r8,12(r4)
 10112b4:	001f883a 	mov	r15,zero
 10112b8:	22400417 	ldw	r9,16(r4)
 10112bc:	24000117 	ldw	r16,4(r4)
 10112c0:	10c0552e 	bgeu	r2,r3,1011418 <__pack_d+0x180>
 10112c4:	00800104 	movi	r2,4
 10112c8:	18804f26 	beq	r3,r2,1011408 <__pack_d+0x170>
 10112cc:	00800084 	movi	r2,2
 10112d0:	18800226 	beq	r3,r2,10112dc <__pack_d+0x44>
 10112d4:	4244b03a 	or	r2,r8,r9
 10112d8:	10001a1e 	bne	r2,zero,1011344 <__pack_d+0xac>
 10112dc:	000d883a 	mov	r6,zero
 10112e0:	000f883a 	mov	r7,zero
 10112e4:	0011883a 	mov	r8,zero
 10112e8:	00800434 	movhi	r2,16
 10112ec:	10bfffc4 	addi	r2,r2,-1
 10112f0:	301d883a 	mov	r14,r6
 10112f4:	3884703a 	and	r2,r7,r2
 10112f8:	400a953a 	slli	r5,r8,20
 10112fc:	79bffc2c 	andhi	r6,r15,65520
 1011300:	308cb03a 	or	r6,r6,r2
 1011304:	00e00434 	movhi	r3,32784
 1011308:	18ffffc4 	addi	r3,r3,-1
 101130c:	800497fa 	slli	r2,r16,31
 1011310:	30c6703a 	and	r3,r6,r3
 1011314:	1946b03a 	or	r3,r3,r5
 1011318:	01600034 	movhi	r5,32768
 101131c:	297fffc4 	addi	r5,r5,-1
 1011320:	194a703a 	and	r5,r3,r5
 1011324:	288ab03a 	or	r5,r5,r2
 1011328:	2807883a 	mov	r3,r5
 101132c:	7005883a 	mov	r2,r14
 1011330:	dc800217 	ldw	r18,8(sp)
 1011334:	dc400117 	ldw	r17,4(sp)
 1011338:	dc000017 	ldw	r16,0(sp)
 101133c:	dec00304 	addi	sp,sp,12
 1011340:	f800283a 	ret
 1011344:	21000217 	ldw	r4,8(r4)
 1011348:	00bf0084 	movi	r2,-1022
 101134c:	20803f16 	blt	r4,r2,101144c <__pack_d+0x1b4>
 1011350:	0080ffc4 	movi	r2,1023
 1011354:	11002c16 	blt	r2,r4,1011408 <__pack_d+0x170>
 1011358:	00803fc4 	movi	r2,255
 101135c:	408c703a 	and	r6,r8,r2
 1011360:	00802004 	movi	r2,128
 1011364:	0007883a 	mov	r3,zero
 1011368:	000f883a 	mov	r7,zero
 101136c:	2280ffc4 	addi	r10,r4,1023
 1011370:	30801e26 	beq	r6,r2,10113ec <__pack_d+0x154>
 1011374:	00801fc4 	movi	r2,127
 1011378:	4089883a 	add	r4,r8,r2
 101137c:	220d803a 	cmpltu	r6,r4,r8
 1011380:	324d883a 	add	r6,r6,r9
 1011384:	2011883a 	mov	r8,r4
 1011388:	3013883a 	mov	r9,r6
 101138c:	00880034 	movhi	r2,8192
 1011390:	10bfffc4 	addi	r2,r2,-1
 1011394:	12400d36 	bltu	r2,r9,10113cc <__pack_d+0x134>
 1011398:	4804963a 	slli	r2,r9,24
 101139c:	400cd23a 	srli	r6,r8,8
 10113a0:	480ed23a 	srli	r7,r9,8
 10113a4:	013fffc4 	movi	r4,-1
 10113a8:	118cb03a 	or	r6,r2,r6
 10113ac:	01400434 	movhi	r5,16
 10113b0:	297fffc4 	addi	r5,r5,-1
 10113b4:	3104703a 	and	r2,r6,r4
 10113b8:	3946703a 	and	r3,r7,r5
 10113bc:	5201ffcc 	andi	r8,r10,2047
 10113c0:	100d883a 	mov	r6,r2
 10113c4:	180f883a 	mov	r7,r3
 10113c8:	003fc706 	br	10112e8 <__pack_d+0x50>
 10113cc:	480897fa 	slli	r4,r9,31
 10113d0:	4004d07a 	srli	r2,r8,1
 10113d4:	4806d07a 	srli	r3,r9,1
 10113d8:	52800044 	addi	r10,r10,1
 10113dc:	2084b03a 	or	r2,r4,r2
 10113e0:	1011883a 	mov	r8,r2
 10113e4:	1813883a 	mov	r9,r3
 10113e8:	003feb06 	br	1011398 <__pack_d+0x100>
 10113ec:	383fe11e 	bne	r7,zero,1011374 <__pack_d+0xdc>
 10113f0:	01004004 	movi	r4,256
 10113f4:	4104703a 	and	r2,r8,r4
 10113f8:	10c4b03a 	or	r2,r2,r3
 10113fc:	103fe326 	beq	r2,zero,101138c <__pack_d+0xf4>
 1011400:	3005883a 	mov	r2,r6
 1011404:	003fdc06 	br	1011378 <__pack_d+0xe0>
 1011408:	000d883a 	mov	r6,zero
 101140c:	000f883a 	mov	r7,zero
 1011410:	0201ffc4 	movi	r8,2047
 1011414:	003fb406 	br	10112e8 <__pack_d+0x50>
 1011418:	0005883a 	mov	r2,zero
 101141c:	00c00234 	movhi	r3,8
 1011420:	408cb03a 	or	r6,r8,r2
 1011424:	48ceb03a 	or	r7,r9,r3
 1011428:	013fffc4 	movi	r4,-1
 101142c:	01400434 	movhi	r5,16
 1011430:	297fffc4 	addi	r5,r5,-1
 1011434:	3104703a 	and	r2,r6,r4
 1011438:	3946703a 	and	r3,r7,r5
 101143c:	100d883a 	mov	r6,r2
 1011440:	180f883a 	mov	r7,r3
 1011444:	0201ffc4 	movi	r8,2047
 1011448:	003fa706 	br	10112e8 <__pack_d+0x50>
 101144c:	1109c83a 	sub	r4,r2,r4
 1011450:	00800e04 	movi	r2,56
 1011454:	11004316 	blt	r2,r4,1011564 <__pack_d+0x2cc>
 1011458:	21fff804 	addi	r7,r4,-32
 101145c:	38004516 	blt	r7,zero,1011574 <__pack_d+0x2dc>
 1011460:	49d8d83a 	srl	r12,r9,r7
 1011464:	001b883a 	mov	r13,zero
 1011468:	0023883a 	mov	r17,zero
 101146c:	01400044 	movi	r5,1
 1011470:	0025883a 	mov	r18,zero
 1011474:	38004716 	blt	r7,zero,1011594 <__pack_d+0x2fc>
 1011478:	29d6983a 	sll	r11,r5,r7
 101147c:	0015883a 	mov	r10,zero
 1011480:	00bfffc4 	movi	r2,-1
 1011484:	5089883a 	add	r4,r10,r2
 1011488:	588b883a 	add	r5,r11,r2
 101148c:	228d803a 	cmpltu	r6,r4,r10
 1011490:	314b883a 	add	r5,r6,r5
 1011494:	4104703a 	and	r2,r8,r4
 1011498:	4946703a 	and	r3,r9,r5
 101149c:	10c4b03a 	or	r2,r2,r3
 10114a0:	10000226 	beq	r2,zero,10114ac <__pack_d+0x214>
 10114a4:	04400044 	movi	r17,1
 10114a8:	0025883a 	mov	r18,zero
 10114ac:	00803fc4 	movi	r2,255
 10114b0:	644eb03a 	or	r7,r12,r17
 10114b4:	3892703a 	and	r9,r7,r2
 10114b8:	00802004 	movi	r2,128
 10114bc:	6c90b03a 	or	r8,r13,r18
 10114c0:	0015883a 	mov	r10,zero
 10114c4:	48801626 	beq	r9,r2,1011520 <__pack_d+0x288>
 10114c8:	01001fc4 	movi	r4,127
 10114cc:	3905883a 	add	r2,r7,r4
 10114d0:	11cd803a 	cmpltu	r6,r2,r7
 10114d4:	320d883a 	add	r6,r6,r8
 10114d8:	100f883a 	mov	r7,r2
 10114dc:	00840034 	movhi	r2,4096
 10114e0:	10bfffc4 	addi	r2,r2,-1
 10114e4:	3011883a 	mov	r8,r6
 10114e8:	0007883a 	mov	r3,zero
 10114ec:	11801b36 	bltu	r2,r6,101155c <__pack_d+0x2c4>
 10114f0:	4004963a 	slli	r2,r8,24
 10114f4:	3808d23a 	srli	r4,r7,8
 10114f8:	400ad23a 	srli	r5,r8,8
 10114fc:	1813883a 	mov	r9,r3
 1011500:	1108b03a 	or	r4,r2,r4
 1011504:	00bfffc4 	movi	r2,-1
 1011508:	00c00434 	movhi	r3,16
 101150c:	18ffffc4 	addi	r3,r3,-1
 1011510:	208c703a 	and	r6,r4,r2
 1011514:	28ce703a 	and	r7,r5,r3
 1011518:	4a01ffcc 	andi	r8,r9,2047
 101151c:	003f7206 	br	10112e8 <__pack_d+0x50>
 1011520:	503fe91e 	bne	r10,zero,10114c8 <__pack_d+0x230>
 1011524:	01004004 	movi	r4,256
 1011528:	3904703a 	and	r2,r7,r4
 101152c:	0007883a 	mov	r3,zero
 1011530:	10c4b03a 	or	r2,r2,r3
 1011534:	10000626 	beq	r2,zero,1011550 <__pack_d+0x2b8>
 1011538:	3a45883a 	add	r2,r7,r9
 101153c:	11cd803a 	cmpltu	r6,r2,r7
 1011540:	320d883a 	add	r6,r6,r8
 1011544:	100f883a 	mov	r7,r2
 1011548:	3011883a 	mov	r8,r6
 101154c:	0007883a 	mov	r3,zero
 1011550:	00840034 	movhi	r2,4096
 1011554:	10bfffc4 	addi	r2,r2,-1
 1011558:	123fe52e 	bgeu	r2,r8,10114f0 <__pack_d+0x258>
 101155c:	00c00044 	movi	r3,1
 1011560:	003fe306 	br	10114f0 <__pack_d+0x258>
 1011564:	0009883a 	mov	r4,zero
 1011568:	0013883a 	mov	r9,zero
 101156c:	000b883a 	mov	r5,zero
 1011570:	003fe406 	br	1011504 <__pack_d+0x26c>
 1011574:	4a47883a 	add	r3,r9,r9
 1011578:	008007c4 	movi	r2,31
 101157c:	1105c83a 	sub	r2,r2,r4
 1011580:	1886983a 	sll	r3,r3,r2
 1011584:	4118d83a 	srl	r12,r8,r4
 1011588:	491ad83a 	srl	r13,r9,r4
 101158c:	1b18b03a 	or	r12,r3,r12
 1011590:	003fb506 	br	1011468 <__pack_d+0x1d0>
 1011594:	2806d07a 	srli	r3,r5,1
 1011598:	008007c4 	movi	r2,31
 101159c:	1105c83a 	sub	r2,r2,r4
 10115a0:	1896d83a 	srl	r11,r3,r2
 10115a4:	2914983a 	sll	r10,r5,r4
 10115a8:	003fb506 	br	1011480 <__pack_d+0x1e8>

010115ac <__unpack_d>:
 10115ac:	20c00117 	ldw	r3,4(r4)
 10115b0:	22400017 	ldw	r9,0(r4)
 10115b4:	00800434 	movhi	r2,16
 10115b8:	10bfffc4 	addi	r2,r2,-1
 10115bc:	1808d53a 	srli	r4,r3,20
 10115c0:	180cd7fa 	srli	r6,r3,31
 10115c4:	1894703a 	and	r10,r3,r2
 10115c8:	2201ffcc 	andi	r8,r4,2047
 10115cc:	281b883a 	mov	r13,r5
 10115d0:	4817883a 	mov	r11,r9
 10115d4:	29800115 	stw	r6,4(r5)
 10115d8:	5019883a 	mov	r12,r10
 10115dc:	40001e1e 	bne	r8,zero,1011658 <__unpack_d+0xac>
 10115e0:	4a84b03a 	or	r2,r9,r10
 10115e4:	10001926 	beq	r2,zero,101164c <__unpack_d+0xa0>
 10115e8:	4804d63a 	srli	r2,r9,24
 10115ec:	500c923a 	slli	r6,r10,8
 10115f0:	013f0084 	movi	r4,-1022
 10115f4:	00c40034 	movhi	r3,4096
 10115f8:	18ffffc4 	addi	r3,r3,-1
 10115fc:	118cb03a 	or	r6,r2,r6
 1011600:	008000c4 	movi	r2,3
 1011604:	480a923a 	slli	r5,r9,8
 1011608:	68800015 	stw	r2,0(r13)
 101160c:	69000215 	stw	r4,8(r13)
 1011610:	19800b36 	bltu	r3,r6,1011640 <__unpack_d+0x94>
 1011614:	200f883a 	mov	r7,r4
 1011618:	1811883a 	mov	r8,r3
 101161c:	2945883a 	add	r2,r5,r5
 1011620:	1149803a 	cmpltu	r4,r2,r5
 1011624:	3187883a 	add	r3,r6,r6
 1011628:	20c9883a 	add	r4,r4,r3
 101162c:	100b883a 	mov	r5,r2
 1011630:	200d883a 	mov	r6,r4
 1011634:	39ffffc4 	addi	r7,r7,-1
 1011638:	413ff82e 	bgeu	r8,r4,101161c <__unpack_d+0x70>
 101163c:	69c00215 	stw	r7,8(r13)
 1011640:	69800415 	stw	r6,16(r13)
 1011644:	69400315 	stw	r5,12(r13)
 1011648:	f800283a 	ret
 101164c:	00800084 	movi	r2,2
 1011650:	28800015 	stw	r2,0(r5)
 1011654:	f800283a 	ret
 1011658:	0081ffc4 	movi	r2,2047
 101165c:	40800f26 	beq	r8,r2,101169c <__unpack_d+0xf0>
 1011660:	480cd63a 	srli	r6,r9,24
 1011664:	5006923a 	slli	r3,r10,8
 1011668:	4804923a 	slli	r2,r9,8
 101166c:	0009883a 	mov	r4,zero
 1011670:	30c6b03a 	or	r3,r6,r3
 1011674:	01440034 	movhi	r5,4096
 1011678:	110cb03a 	or	r6,r2,r4
 101167c:	423f0044 	addi	r8,r8,-1023
 1011680:	194eb03a 	or	r7,r3,r5
 1011684:	008000c4 	movi	r2,3
 1011688:	69c00415 	stw	r7,16(r13)
 101168c:	6a000215 	stw	r8,8(r13)
 1011690:	68800015 	stw	r2,0(r13)
 1011694:	69800315 	stw	r6,12(r13)
 1011698:	f800283a 	ret
 101169c:	4a84b03a 	or	r2,r9,r10
 10116a0:	1000031e 	bne	r2,zero,10116b0 <__unpack_d+0x104>
 10116a4:	00800104 	movi	r2,4
 10116a8:	28800015 	stw	r2,0(r5)
 10116ac:	f800283a 	ret
 10116b0:	0009883a 	mov	r4,zero
 10116b4:	01400234 	movhi	r5,8
 10116b8:	4904703a 	and	r2,r9,r4
 10116bc:	5146703a 	and	r3,r10,r5
 10116c0:	10c4b03a 	or	r2,r2,r3
 10116c4:	10000526 	beq	r2,zero,10116dc <__unpack_d+0x130>
 10116c8:	00800044 	movi	r2,1
 10116cc:	68800015 	stw	r2,0(r13)
 10116d0:	6b000415 	stw	r12,16(r13)
 10116d4:	6ac00315 	stw	r11,12(r13)
 10116d8:	f800283a 	ret
 10116dc:	68000015 	stw	zero,0(r13)
 10116e0:	003ffb06 	br	10116d0 <__unpack_d+0x124>

010116e4 <__fpcmp_parts_d>:
 10116e4:	21800017 	ldw	r6,0(r4)
 10116e8:	00c00044 	movi	r3,1
 10116ec:	19800a2e 	bgeu	r3,r6,1011718 <__fpcmp_parts_d+0x34>
 10116f0:	28800017 	ldw	r2,0(r5)
 10116f4:	1880082e 	bgeu	r3,r2,1011718 <__fpcmp_parts_d+0x34>
 10116f8:	00c00104 	movi	r3,4
 10116fc:	30c02626 	beq	r6,r3,1011798 <__fpcmp_parts_d+0xb4>
 1011700:	10c02226 	beq	r2,r3,101178c <__fpcmp_parts_d+0xa8>
 1011704:	00c00084 	movi	r3,2
 1011708:	30c00526 	beq	r6,r3,1011720 <__fpcmp_parts_d+0x3c>
 101170c:	10c0071e 	bne	r2,r3,101172c <__fpcmp_parts_d+0x48>
 1011710:	20800117 	ldw	r2,4(r4)
 1011714:	1000091e 	bne	r2,zero,101173c <__fpcmp_parts_d+0x58>
 1011718:	00800044 	movi	r2,1
 101171c:	f800283a 	ret
 1011720:	10c01a1e 	bne	r2,r3,101178c <__fpcmp_parts_d+0xa8>
 1011724:	0005883a 	mov	r2,zero
 1011728:	f800283a 	ret
 101172c:	22000117 	ldw	r8,4(r4)
 1011730:	28800117 	ldw	r2,4(r5)
 1011734:	40800326 	beq	r8,r2,1011744 <__fpcmp_parts_d+0x60>
 1011738:	403ff726 	beq	r8,zero,1011718 <__fpcmp_parts_d+0x34>
 101173c:	00bfffc4 	movi	r2,-1
 1011740:	f800283a 	ret
 1011744:	20c00217 	ldw	r3,8(r4)
 1011748:	28800217 	ldw	r2,8(r5)
 101174c:	10fffa16 	blt	r2,r3,1011738 <__fpcmp_parts_d+0x54>
 1011750:	18800916 	blt	r3,r2,1011778 <__fpcmp_parts_d+0x94>
 1011754:	21c00417 	ldw	r7,16(r4)
 1011758:	28c00417 	ldw	r3,16(r5)
 101175c:	21800317 	ldw	r6,12(r4)
 1011760:	28800317 	ldw	r2,12(r5)
 1011764:	19fff436 	bltu	r3,r7,1011738 <__fpcmp_parts_d+0x54>
 1011768:	38c00526 	beq	r7,r3,1011780 <__fpcmp_parts_d+0x9c>
 101176c:	38c00236 	bltu	r7,r3,1011778 <__fpcmp_parts_d+0x94>
 1011770:	19ffec1e 	bne	r3,r7,1011724 <__fpcmp_parts_d+0x40>
 1011774:	30bfeb2e 	bgeu	r6,r2,1011724 <__fpcmp_parts_d+0x40>
 1011778:	403fe71e 	bne	r8,zero,1011718 <__fpcmp_parts_d+0x34>
 101177c:	003fef06 	br	101173c <__fpcmp_parts_d+0x58>
 1011780:	11bffa2e 	bgeu	r2,r6,101176c <__fpcmp_parts_d+0x88>
 1011784:	403fe426 	beq	r8,zero,1011718 <__fpcmp_parts_d+0x34>
 1011788:	003fec06 	br	101173c <__fpcmp_parts_d+0x58>
 101178c:	28800117 	ldw	r2,4(r5)
 1011790:	103fe11e 	bne	r2,zero,1011718 <__fpcmp_parts_d+0x34>
 1011794:	003fe906 	br	101173c <__fpcmp_parts_d+0x58>
 1011798:	11bfdd1e 	bne	r2,r6,1011710 <__fpcmp_parts_d+0x2c>
 101179c:	28c00117 	ldw	r3,4(r5)
 10117a0:	20800117 	ldw	r2,4(r4)
 10117a4:	1885c83a 	sub	r2,r3,r2
 10117a8:	f800283a 	ret

010117ac <__pack_f>:
 10117ac:	20c00017 	ldw	r3,0(r4)
 10117b0:	01c00044 	movi	r7,1
 10117b4:	21800317 	ldw	r6,12(r4)
 10117b8:	21400117 	ldw	r5,4(r4)
 10117bc:	38c02d2e 	bgeu	r7,r3,1011874 <__pack_f+0xc8>
 10117c0:	00800104 	movi	r2,4
 10117c4:	18802826 	beq	r3,r2,1011868 <__pack_f+0xbc>
 10117c8:	00800084 	movi	r2,2
 10117cc:	18800126 	beq	r3,r2,10117d4 <__pack_f+0x28>
 10117d0:	3000101e 	bne	r6,zero,1011814 <__pack_f+0x68>
 10117d4:	000d883a 	mov	r6,zero
 10117d8:	0007883a 	mov	r3,zero
 10117dc:	19003fcc 	andi	r4,r3,255
 10117e0:	200895fa 	slli	r4,r4,23
 10117e4:	00c02034 	movhi	r3,128
 10117e8:	18ffffc4 	addi	r3,r3,-1
 10117ec:	30c6703a 	and	r3,r6,r3
 10117f0:	10a0002c 	andhi	r2,r2,32768
 10117f4:	10c4b03a 	or	r2,r2,r3
 10117f8:	280a97fa 	slli	r5,r5,31
 10117fc:	1104b03a 	or	r2,r2,r4
 1011800:	00e00034 	movhi	r3,32768
 1011804:	18ffffc4 	addi	r3,r3,-1
 1011808:	10c4703a 	and	r2,r2,r3
 101180c:	1144b03a 	or	r2,r2,r5
 1011810:	f800283a 	ret
 1011814:	21000217 	ldw	r4,8(r4)
 1011818:	00bfe084 	movi	r2,-126
 101181c:	20801b16 	blt	r4,r2,101188c <__pack_f+0xe0>
 1011820:	00801fc4 	movi	r2,127
 1011824:	11001016 	blt	r2,r4,1011868 <__pack_f+0xbc>
 1011828:	308e703a 	and	r7,r6,r2
 101182c:	2087883a 	add	r3,r4,r2
 1011830:	00801004 	movi	r2,64
 1011834:	38800526 	beq	r7,r2,101184c <__pack_f+0xa0>
 1011838:	31800fc4 	addi	r6,r6,63
 101183c:	30000716 	blt	r6,zero,101185c <__pack_f+0xb0>
 1011840:	300490ba 	slli	r2,r6,2
 1011844:	100cd27a 	srli	r6,r2,9
 1011848:	003fe406 	br	10117dc <__pack_f+0x30>
 101184c:	3080200c 	andi	r2,r6,128
 1011850:	103ffa26 	beq	r2,zero,101183c <__pack_f+0x90>
 1011854:	31cd883a 	add	r6,r6,r7
 1011858:	003ff806 	br	101183c <__pack_f+0x90>
 101185c:	300cd07a 	srli	r6,r6,1
 1011860:	18c00044 	addi	r3,r3,1
 1011864:	003ff606 	br	1011840 <__pack_f+0x94>
 1011868:	000d883a 	mov	r6,zero
 101186c:	00ffffc4 	movi	r3,-1
 1011870:	003fda06 	br	10117dc <__pack_f+0x30>
 1011874:	31800434 	orhi	r6,r6,16
 1011878:	00802034 	movhi	r2,128
 101187c:	10bfffc4 	addi	r2,r2,-1
 1011880:	308c703a 	and	r6,r6,r2
 1011884:	00ffffc4 	movi	r3,-1
 1011888:	003fd406 	br	10117dc <__pack_f+0x30>
 101188c:	1109c83a 	sub	r4,r2,r4
 1011890:	00800644 	movi	r2,25
 1011894:	11001216 	blt	r2,r4,10118e0 <__pack_f+0x134>
 1011898:	3904983a 	sll	r2,r7,r4
 101189c:	3106d83a 	srl	r3,r6,r4
 10118a0:	10bfffc4 	addi	r2,r2,-1
 10118a4:	3084703a 	and	r2,r6,r2
 10118a8:	1004c03a 	cmpne	r2,r2,zero
 10118ac:	1886b03a 	or	r3,r3,r2
 10118b0:	19001fcc 	andi	r4,r3,127
 10118b4:	00801004 	movi	r2,64
 10118b8:	20800c26 	beq	r4,r2,10118ec <__pack_f+0x140>
 10118bc:	18c00fc4 	addi	r3,r3,63
 10118c0:	00900034 	movhi	r2,16384
 10118c4:	10bfffc4 	addi	r2,r2,-1
 10118c8:	180cd1fa 	srli	r6,r3,7
 10118cc:	10c7803a 	cmpltu	r3,r2,r3
 10118d0:	00802034 	movhi	r2,128
 10118d4:	10bfffc4 	addi	r2,r2,-1
 10118d8:	308c703a 	and	r6,r6,r2
 10118dc:	003fbf06 	br	10117dc <__pack_f+0x30>
 10118e0:	0007883a 	mov	r3,zero
 10118e4:	000d883a 	mov	r6,zero
 10118e8:	003ff906 	br	10118d0 <__pack_f+0x124>
 10118ec:	1880200c 	andi	r2,r3,128
 10118f0:	10000126 	beq	r2,zero,10118f8 <__pack_f+0x14c>
 10118f4:	1907883a 	add	r3,r3,r4
 10118f8:	180cd1fa 	srli	r6,r3,7
 10118fc:	00900034 	movhi	r2,16384
 1011900:	10bfffc4 	addi	r2,r2,-1
 1011904:	10c7803a 	cmpltu	r3,r2,r3
 1011908:	003ff106 	br	10118d0 <__pack_f+0x124>

0101190c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 101190c:	defff404 	addi	sp,sp,-48
 1011910:	df000b15 	stw	fp,44(sp)
 1011914:	df000b04 	addi	fp,sp,44
 1011918:	e13ffb15 	stw	r4,-20(fp)
 101191c:	e17ffc15 	stw	r5,-16(fp)
 1011920:	e1bffd15 	stw	r6,-12(fp)
 1011924:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1011928:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101192c:	008040b4 	movhi	r2,258
 1011930:	10816e04 	addi	r2,r2,1464
 1011934:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1011938:	1005003a 	cmpeq	r2,r2,zero
 101193c:	1000411e 	bne	r2,zero,1011a44 <alt_alarm_start+0x138>
  {
    if (alarm)
 1011940:	e0bffb17 	ldw	r2,-20(fp)
 1011944:	1005003a 	cmpeq	r2,r2,zero
 1011948:	10003b1e 	bne	r2,zero,1011a38 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 101194c:	e0fffb17 	ldw	r3,-20(fp)
 1011950:	e0bffd17 	ldw	r2,-12(fp)
 1011954:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1011958:	e0fffb17 	ldw	r3,-20(fp)
 101195c:	e0bffe17 	ldw	r2,-8(fp)
 1011960:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011964:	0005303a 	rdctl	r2,status
 1011968:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101196c:	e0fff817 	ldw	r3,-32(fp)
 1011970:	00bfff84 	movi	r2,-2
 1011974:	1884703a 	and	r2,r3,r2
 1011978:	1001703a 	wrctl	status,r2
  
  return context;
 101197c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1011980:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1011984:	008040b4 	movhi	r2,258
 1011988:	10816f04 	addi	r2,r2,1468
 101198c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1011990:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1011994:	e0fffc17 	ldw	r3,-16(fp)
 1011998:	e0bff917 	ldw	r2,-28(fp)
 101199c:	1885883a 	add	r2,r3,r2
 10119a0:	10c00044 	addi	r3,r2,1
 10119a4:	e0bffb17 	ldw	r2,-20(fp)
 10119a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10119ac:	e0bffb17 	ldw	r2,-20(fp)
 10119b0:	10c00217 	ldw	r3,8(r2)
 10119b4:	e0bff917 	ldw	r2,-28(fp)
 10119b8:	1880042e 	bgeu	r3,r2,10119cc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10119bc:	e0fffb17 	ldw	r3,-20(fp)
 10119c0:	00800044 	movi	r2,1
 10119c4:	18800405 	stb	r2,16(r3)
 10119c8:	00000206 	br	10119d4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10119cc:	e0bffb17 	ldw	r2,-20(fp)
 10119d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10119d4:	e0fffb17 	ldw	r3,-20(fp)
 10119d8:	008040b4 	movhi	r2,258
 10119dc:	10ba4904 	addi	r2,r2,-5852
 10119e0:	e0bff615 	stw	r2,-40(fp)
 10119e4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10119e8:	e0fff717 	ldw	r3,-36(fp)
 10119ec:	e0bff617 	ldw	r2,-40(fp)
 10119f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10119f4:	e0bff617 	ldw	r2,-40(fp)
 10119f8:	10c00017 	ldw	r3,0(r2)
 10119fc:	e0bff717 	ldw	r2,-36(fp)
 1011a00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1011a04:	e0bff617 	ldw	r2,-40(fp)
 1011a08:	10c00017 	ldw	r3,0(r2)
 1011a0c:	e0bff717 	ldw	r2,-36(fp)
 1011a10:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1011a14:	e0fff617 	ldw	r3,-40(fp)
 1011a18:	e0bff717 	ldw	r2,-36(fp)
 1011a1c:	18800015 	stw	r2,0(r3)
 1011a20:	e0bffa17 	ldw	r2,-24(fp)
 1011a24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011a28:	e0bff517 	ldw	r2,-44(fp)
 1011a2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1011a30:	e03fff15 	stw	zero,-4(fp)
 1011a34:	00000506 	br	1011a4c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1011a38:	00bffa84 	movi	r2,-22
 1011a3c:	e0bfff15 	stw	r2,-4(fp)
 1011a40:	00000206 	br	1011a4c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1011a44:	00bfde84 	movi	r2,-134
 1011a48:	e0bfff15 	stw	r2,-4(fp)
 1011a4c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1011a50:	e037883a 	mov	sp,fp
 1011a54:	df000017 	ldw	fp,0(sp)
 1011a58:	dec00104 	addi	sp,sp,4
 1011a5c:	f800283a 	ret

01011a60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1011a60:	defff804 	addi	sp,sp,-32
 1011a64:	dfc00715 	stw	ra,28(sp)
 1011a68:	df000615 	stw	fp,24(sp)
 1011a6c:	df000604 	addi	fp,sp,24
 1011a70:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1011a74:	e0bffc17 	ldw	r2,-16(fp)
 1011a78:	1004803a 	cmplt	r2,r2,zero
 1011a7c:	1000091e 	bne	r2,zero,1011aa4 <close+0x44>
 1011a80:	e13ffc17 	ldw	r4,-16(fp)
 1011a84:	01400304 	movi	r5,12
 1011a88:	10026440 	call	1002644 <__mulsi3>
 1011a8c:	1007883a 	mov	r3,r2
 1011a90:	008040b4 	movhi	r2,258
 1011a94:	10b55604 	addi	r2,r2,-10920
 1011a98:	1887883a 	add	r3,r3,r2
 1011a9c:	e0ffff15 	stw	r3,-4(fp)
 1011aa0:	00000106 	br	1011aa8 <close+0x48>
 1011aa4:	e03fff15 	stw	zero,-4(fp)
 1011aa8:	e0bfff17 	ldw	r2,-4(fp)
 1011aac:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1011ab0:	e0bffb17 	ldw	r2,-20(fp)
 1011ab4:	1005003a 	cmpeq	r2,r2,zero
 1011ab8:	10001d1e 	bne	r2,zero,1011b30 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1011abc:	e0bffb17 	ldw	r2,-20(fp)
 1011ac0:	10800017 	ldw	r2,0(r2)
 1011ac4:	10800417 	ldw	r2,16(r2)
 1011ac8:	1005003a 	cmpeq	r2,r2,zero
 1011acc:	1000071e 	bne	r2,zero,1011aec <close+0x8c>
 1011ad0:	e0bffb17 	ldw	r2,-20(fp)
 1011ad4:	10800017 	ldw	r2,0(r2)
 1011ad8:	10800417 	ldw	r2,16(r2)
 1011adc:	e13ffb17 	ldw	r4,-20(fp)
 1011ae0:	103ee83a 	callr	r2
 1011ae4:	e0bffe15 	stw	r2,-8(fp)
 1011ae8:	00000106 	br	1011af0 <close+0x90>
 1011aec:	e03ffe15 	stw	zero,-8(fp)
 1011af0:	e0bffe17 	ldw	r2,-8(fp)
 1011af4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1011af8:	e13ffc17 	ldw	r4,-16(fp)
 1011afc:	10125500 	call	1012550 <alt_release_fd>
    if (rval < 0)
 1011b00:	e0bffa17 	ldw	r2,-24(fp)
 1011b04:	1004403a 	cmpge	r2,r2,zero
 1011b08:	1000071e 	bne	r2,zero,1011b28 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1011b0c:	1011b600 	call	1011b60 <alt_get_errno>
 1011b10:	e0fffa17 	ldw	r3,-24(fp)
 1011b14:	00c7c83a 	sub	r3,zero,r3
 1011b18:	10c00015 	stw	r3,0(r2)
      return -1;
 1011b1c:	00bfffc4 	movi	r2,-1
 1011b20:	e0bffd15 	stw	r2,-12(fp)
 1011b24:	00000806 	br	1011b48 <close+0xe8>
    }
    return 0;
 1011b28:	e03ffd15 	stw	zero,-12(fp)
 1011b2c:	00000606 	br	1011b48 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1011b30:	1011b600 	call	1011b60 <alt_get_errno>
 1011b34:	1007883a 	mov	r3,r2
 1011b38:	00801444 	movi	r2,81
 1011b3c:	18800015 	stw	r2,0(r3)
    return -1;
 1011b40:	00bfffc4 	movi	r2,-1
 1011b44:	e0bffd15 	stw	r2,-12(fp)
 1011b48:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1011b4c:	e037883a 	mov	sp,fp
 1011b50:	dfc00117 	ldw	ra,4(sp)
 1011b54:	df000017 	ldw	fp,0(sp)
 1011b58:	dec00204 	addi	sp,sp,8
 1011b5c:	f800283a 	ret

01011b60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011b60:	defffd04 	addi	sp,sp,-12
 1011b64:	dfc00215 	stw	ra,8(sp)
 1011b68:	df000115 	stw	fp,4(sp)
 1011b6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011b70:	008040b4 	movhi	r2,258
 1011b74:	10ba4704 	addi	r2,r2,-5860
 1011b78:	10800017 	ldw	r2,0(r2)
 1011b7c:	1005003a 	cmpeq	r2,r2,zero
 1011b80:	1000061e 	bne	r2,zero,1011b9c <alt_get_errno+0x3c>
 1011b84:	008040b4 	movhi	r2,258
 1011b88:	10ba4704 	addi	r2,r2,-5860
 1011b8c:	10800017 	ldw	r2,0(r2)
 1011b90:	103ee83a 	callr	r2
 1011b94:	e0bfff15 	stw	r2,-4(fp)
 1011b98:	00000306 	br	1011ba8 <alt_get_errno+0x48>
 1011b9c:	008040b4 	movhi	r2,258
 1011ba0:	10816704 	addi	r2,r2,1436
 1011ba4:	e0bfff15 	stw	r2,-4(fp)
 1011ba8:	e0bfff17 	ldw	r2,-4(fp)
}
 1011bac:	e037883a 	mov	sp,fp
 1011bb0:	dfc00117 	ldw	ra,4(sp)
 1011bb4:	df000017 	ldw	fp,0(sp)
 1011bb8:	dec00204 	addi	sp,sp,8
 1011bbc:	f800283a 	ret

01011bc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1011bc0:	defffc04 	addi	sp,sp,-16
 1011bc4:	df000315 	stw	fp,12(sp)
 1011bc8:	df000304 	addi	fp,sp,12
 1011bcc:	e13ffd15 	stw	r4,-12(fp)
 1011bd0:	e17ffe15 	stw	r5,-8(fp)
 1011bd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1011bd8:	e0bfff17 	ldw	r2,-4(fp)
}
 1011bdc:	e037883a 	mov	sp,fp
 1011be0:	df000017 	ldw	fp,0(sp)
 1011be4:	dec00104 	addi	sp,sp,4
 1011be8:	f800283a 	ret

01011bec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1011bec:	defff904 	addi	sp,sp,-28
 1011bf0:	dfc00615 	stw	ra,24(sp)
 1011bf4:	df000515 	stw	fp,20(sp)
 1011bf8:	df000504 	addi	fp,sp,20
 1011bfc:	e13ffc15 	stw	r4,-16(fp)
 1011c00:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1011c04:	e0bffc17 	ldw	r2,-16(fp)
 1011c08:	1004803a 	cmplt	r2,r2,zero
 1011c0c:	1000091e 	bne	r2,zero,1011c34 <fstat+0x48>
 1011c10:	e13ffc17 	ldw	r4,-16(fp)
 1011c14:	01400304 	movi	r5,12
 1011c18:	10026440 	call	1002644 <__mulsi3>
 1011c1c:	1007883a 	mov	r3,r2
 1011c20:	008040b4 	movhi	r2,258
 1011c24:	10b55604 	addi	r2,r2,-10920
 1011c28:	1887883a 	add	r3,r3,r2
 1011c2c:	e0ffff15 	stw	r3,-4(fp)
 1011c30:	00000106 	br	1011c38 <fstat+0x4c>
 1011c34:	e03fff15 	stw	zero,-4(fp)
 1011c38:	e0bfff17 	ldw	r2,-4(fp)
 1011c3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1011c40:	e0bffb17 	ldw	r2,-20(fp)
 1011c44:	1005003a 	cmpeq	r2,r2,zero
 1011c48:	1000121e 	bne	r2,zero,1011c94 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1011c4c:	e0bffb17 	ldw	r2,-20(fp)
 1011c50:	10800017 	ldw	r2,0(r2)
 1011c54:	10800817 	ldw	r2,32(r2)
 1011c58:	1005003a 	cmpeq	r2,r2,zero
 1011c5c:	1000081e 	bne	r2,zero,1011c80 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1011c60:	e0bffb17 	ldw	r2,-20(fp)
 1011c64:	10800017 	ldw	r2,0(r2)
 1011c68:	10800817 	ldw	r2,32(r2)
 1011c6c:	e13ffb17 	ldw	r4,-20(fp)
 1011c70:	e17ffd17 	ldw	r5,-12(fp)
 1011c74:	103ee83a 	callr	r2
 1011c78:	e0bffe15 	stw	r2,-8(fp)
 1011c7c:	00000b06 	br	1011cac <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1011c80:	e0fffd17 	ldw	r3,-12(fp)
 1011c84:	00880004 	movi	r2,8192
 1011c88:	18800115 	stw	r2,4(r3)
      return 0;
 1011c8c:	e03ffe15 	stw	zero,-8(fp)
 1011c90:	00000606 	br	1011cac <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1011c94:	1011cc40 	call	1011cc4 <alt_get_errno>
 1011c98:	1007883a 	mov	r3,r2
 1011c9c:	00801444 	movi	r2,81
 1011ca0:	18800015 	stw	r2,0(r3)
    return -1;
 1011ca4:	00bfffc4 	movi	r2,-1
 1011ca8:	e0bffe15 	stw	r2,-8(fp)
 1011cac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1011cb0:	e037883a 	mov	sp,fp
 1011cb4:	dfc00117 	ldw	ra,4(sp)
 1011cb8:	df000017 	ldw	fp,0(sp)
 1011cbc:	dec00204 	addi	sp,sp,8
 1011cc0:	f800283a 	ret

01011cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011cc4:	defffd04 	addi	sp,sp,-12
 1011cc8:	dfc00215 	stw	ra,8(sp)
 1011ccc:	df000115 	stw	fp,4(sp)
 1011cd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011cd4:	008040b4 	movhi	r2,258
 1011cd8:	10ba4704 	addi	r2,r2,-5860
 1011cdc:	10800017 	ldw	r2,0(r2)
 1011ce0:	1005003a 	cmpeq	r2,r2,zero
 1011ce4:	1000061e 	bne	r2,zero,1011d00 <alt_get_errno+0x3c>
 1011ce8:	008040b4 	movhi	r2,258
 1011cec:	10ba4704 	addi	r2,r2,-5860
 1011cf0:	10800017 	ldw	r2,0(r2)
 1011cf4:	103ee83a 	callr	r2
 1011cf8:	e0bfff15 	stw	r2,-4(fp)
 1011cfc:	00000306 	br	1011d0c <alt_get_errno+0x48>
 1011d00:	008040b4 	movhi	r2,258
 1011d04:	10816704 	addi	r2,r2,1436
 1011d08:	e0bfff15 	stw	r2,-4(fp)
 1011d0c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011d10:	e037883a 	mov	sp,fp
 1011d14:	dfc00117 	ldw	ra,4(sp)
 1011d18:	df000017 	ldw	fp,0(sp)
 1011d1c:	dec00204 	addi	sp,sp,8
 1011d20:	f800283a 	ret

01011d24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1011d24:	deffeb04 	addi	sp,sp,-84
 1011d28:	dfc01415 	stw	ra,80(sp)
 1011d2c:	df001315 	stw	fp,76(sp)
 1011d30:	df001304 	addi	fp,sp,76
 1011d34:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1011d38:	e0bffd17 	ldw	r2,-12(fp)
 1011d3c:	1004803a 	cmplt	r2,r2,zero
 1011d40:	1000091e 	bne	r2,zero,1011d68 <isatty+0x44>
 1011d44:	e13ffd17 	ldw	r4,-12(fp)
 1011d48:	01400304 	movi	r5,12
 1011d4c:	10026440 	call	1002644 <__mulsi3>
 1011d50:	1007883a 	mov	r3,r2
 1011d54:	008040b4 	movhi	r2,258
 1011d58:	10b55604 	addi	r2,r2,-10920
 1011d5c:	1887883a 	add	r3,r3,r2
 1011d60:	e0ffff15 	stw	r3,-4(fp)
 1011d64:	00000106 	br	1011d6c <isatty+0x48>
 1011d68:	e03fff15 	stw	zero,-4(fp)
 1011d6c:	e0bfff17 	ldw	r2,-4(fp)
 1011d70:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1011d74:	e0bfed17 	ldw	r2,-76(fp)
 1011d78:	1005003a 	cmpeq	r2,r2,zero
 1011d7c:	10000f1e 	bne	r2,zero,1011dbc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1011d80:	e0bfed17 	ldw	r2,-76(fp)
 1011d84:	10800017 	ldw	r2,0(r2)
 1011d88:	10800817 	ldw	r2,32(r2)
 1011d8c:	1004c03a 	cmpne	r2,r2,zero
 1011d90:	1000031e 	bne	r2,zero,1011da0 <isatty+0x7c>
    {
      return 1;
 1011d94:	00800044 	movi	r2,1
 1011d98:	e0bffe15 	stw	r2,-8(fp)
 1011d9c:	00000c06 	br	1011dd0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1011da0:	e17fee04 	addi	r5,fp,-72
 1011da4:	e13ffd17 	ldw	r4,-12(fp)
 1011da8:	1011bec0 	call	1011bec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1011dac:	e0bfef17 	ldw	r2,-68(fp)
 1011db0:	10880020 	cmpeqi	r2,r2,8192
 1011db4:	e0bffe15 	stw	r2,-8(fp)
 1011db8:	00000506 	br	1011dd0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1011dbc:	1011de80 	call	1011de8 <alt_get_errno>
 1011dc0:	1007883a 	mov	r3,r2
 1011dc4:	00801444 	movi	r2,81
 1011dc8:	18800015 	stw	r2,0(r3)
    return 0;
 1011dcc:	e03ffe15 	stw	zero,-8(fp)
 1011dd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1011dd4:	e037883a 	mov	sp,fp
 1011dd8:	dfc00117 	ldw	ra,4(sp)
 1011ddc:	df000017 	ldw	fp,0(sp)
 1011de0:	dec00204 	addi	sp,sp,8
 1011de4:	f800283a 	ret

01011de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011de8:	defffd04 	addi	sp,sp,-12
 1011dec:	dfc00215 	stw	ra,8(sp)
 1011df0:	df000115 	stw	fp,4(sp)
 1011df4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011df8:	008040b4 	movhi	r2,258
 1011dfc:	10ba4704 	addi	r2,r2,-5860
 1011e00:	10800017 	ldw	r2,0(r2)
 1011e04:	1005003a 	cmpeq	r2,r2,zero
 1011e08:	1000061e 	bne	r2,zero,1011e24 <alt_get_errno+0x3c>
 1011e0c:	008040b4 	movhi	r2,258
 1011e10:	10ba4704 	addi	r2,r2,-5860
 1011e14:	10800017 	ldw	r2,0(r2)
 1011e18:	103ee83a 	callr	r2
 1011e1c:	e0bfff15 	stw	r2,-4(fp)
 1011e20:	00000306 	br	1011e30 <alt_get_errno+0x48>
 1011e24:	008040b4 	movhi	r2,258
 1011e28:	10816704 	addi	r2,r2,1436
 1011e2c:	e0bfff15 	stw	r2,-4(fp)
 1011e30:	e0bfff17 	ldw	r2,-4(fp)
}
 1011e34:	e037883a 	mov	sp,fp
 1011e38:	dfc00117 	ldw	ra,4(sp)
 1011e3c:	df000017 	ldw	fp,0(sp)
 1011e40:	dec00204 	addi	sp,sp,8
 1011e44:	f800283a 	ret

01011e48 <alt_load>:
 1011e48:	defffe04 	addi	sp,sp,-8
 1011e4c:	dfc00115 	stw	ra,4(sp)
 1011e50:	df000015 	stw	fp,0(sp)
 1011e54:	d839883a 	mov	fp,sp
 1011e58:	010040b4 	movhi	r4,258
 1011e5c:	213a4c04 	addi	r4,r4,-5840
 1011e60:	014040b4 	movhi	r5,258
 1011e64:	29733d04 	addi	r5,r5,-13068
 1011e68:	018040b4 	movhi	r6,258
 1011e6c:	31ba4c04 	addi	r6,r6,-5840
 1011e70:	1011ec80 	call	1011ec8 <alt_load_section>
 1011e74:	01004034 	movhi	r4,256
 1011e78:	21000804 	addi	r4,r4,32
 1011e7c:	01404034 	movhi	r5,256
 1011e80:	29400804 	addi	r5,r5,32
 1011e84:	01804034 	movhi	r6,256
 1011e88:	31806e04 	addi	r6,r6,440
 1011e8c:	1011ec80 	call	1011ec8 <alt_load_section>
 1011e90:	010040b4 	movhi	r4,258
 1011e94:	21305c04 	addi	r4,r4,-16016
 1011e98:	014040b4 	movhi	r5,258
 1011e9c:	29705c04 	addi	r5,r5,-16016
 1011ea0:	018040b4 	movhi	r6,258
 1011ea4:	31b33d04 	addi	r6,r6,-13068
 1011ea8:	1011ec80 	call	1011ec8 <alt_load_section>
 1011eac:	101b1800 	call	101b180 <alt_dcache_flush_all>
 1011eb0:	101b4340 	call	101b434 <alt_icache_flush_all>
 1011eb4:	e037883a 	mov	sp,fp
 1011eb8:	dfc00117 	ldw	ra,4(sp)
 1011ebc:	df000017 	ldw	fp,0(sp)
 1011ec0:	dec00204 	addi	sp,sp,8
 1011ec4:	f800283a 	ret

01011ec8 <alt_load_section>:
 1011ec8:	defffc04 	addi	sp,sp,-16
 1011ecc:	df000315 	stw	fp,12(sp)
 1011ed0:	df000304 	addi	fp,sp,12
 1011ed4:	e13ffd15 	stw	r4,-12(fp)
 1011ed8:	e17ffe15 	stw	r5,-8(fp)
 1011edc:	e1bfff15 	stw	r6,-4(fp)
 1011ee0:	e0fffe17 	ldw	r3,-8(fp)
 1011ee4:	e0bffd17 	ldw	r2,-12(fp)
 1011ee8:	18800e26 	beq	r3,r2,1011f24 <alt_load_section+0x5c>
 1011eec:	00000a06 	br	1011f18 <alt_load_section+0x50>
 1011ef0:	e0bffd17 	ldw	r2,-12(fp)
 1011ef4:	10c00017 	ldw	r3,0(r2)
 1011ef8:	e0bffe17 	ldw	r2,-8(fp)
 1011efc:	10c00015 	stw	r3,0(r2)
 1011f00:	e0bffe17 	ldw	r2,-8(fp)
 1011f04:	10800104 	addi	r2,r2,4
 1011f08:	e0bffe15 	stw	r2,-8(fp)
 1011f0c:	e0bffd17 	ldw	r2,-12(fp)
 1011f10:	10800104 	addi	r2,r2,4
 1011f14:	e0bffd15 	stw	r2,-12(fp)
 1011f18:	e0fffe17 	ldw	r3,-8(fp)
 1011f1c:	e0bfff17 	ldw	r2,-4(fp)
 1011f20:	18bff31e 	bne	r3,r2,1011ef0 <alt_load_section+0x28>
 1011f24:	e037883a 	mov	sp,fp
 1011f28:	df000017 	ldw	fp,0(sp)
 1011f2c:	dec00104 	addi	sp,sp,4
 1011f30:	f800283a 	ret

01011f34 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1011f34:	defff804 	addi	sp,sp,-32
 1011f38:	dfc00715 	stw	ra,28(sp)
 1011f3c:	df000615 	stw	fp,24(sp)
 1011f40:	df000604 	addi	fp,sp,24
 1011f44:	e13ffc15 	stw	r4,-16(fp)
 1011f48:	e17ffd15 	stw	r5,-12(fp)
 1011f4c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1011f50:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1011f54:	e0bffc17 	ldw	r2,-16(fp)
 1011f58:	1004803a 	cmplt	r2,r2,zero
 1011f5c:	1000091e 	bne	r2,zero,1011f84 <lseek+0x50>
 1011f60:	e13ffc17 	ldw	r4,-16(fp)
 1011f64:	01400304 	movi	r5,12
 1011f68:	10026440 	call	1002644 <__mulsi3>
 1011f6c:	1007883a 	mov	r3,r2
 1011f70:	008040b4 	movhi	r2,258
 1011f74:	10b55604 	addi	r2,r2,-10920
 1011f78:	1887883a 	add	r3,r3,r2
 1011f7c:	e0ffff15 	stw	r3,-4(fp)
 1011f80:	00000106 	br	1011f88 <lseek+0x54>
 1011f84:	e03fff15 	stw	zero,-4(fp)
 1011f88:	e0bfff17 	ldw	r2,-4(fp)
 1011f8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1011f90:	e0bffb17 	ldw	r2,-20(fp)
 1011f94:	1005003a 	cmpeq	r2,r2,zero
 1011f98:	1000111e 	bne	r2,zero,1011fe0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1011f9c:	e0bffb17 	ldw	r2,-20(fp)
 1011fa0:	10800017 	ldw	r2,0(r2)
 1011fa4:	10800717 	ldw	r2,28(r2)
 1011fa8:	1005003a 	cmpeq	r2,r2,zero
 1011fac:	1000091e 	bne	r2,zero,1011fd4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1011fb0:	e0bffb17 	ldw	r2,-20(fp)
 1011fb4:	10800017 	ldw	r2,0(r2)
 1011fb8:	10800717 	ldw	r2,28(r2)
 1011fbc:	e13ffb17 	ldw	r4,-20(fp)
 1011fc0:	e17ffd17 	ldw	r5,-12(fp)
 1011fc4:	e1bffe17 	ldw	r6,-8(fp)
 1011fc8:	103ee83a 	callr	r2
 1011fcc:	e0bffa15 	stw	r2,-24(fp)
 1011fd0:	00000506 	br	1011fe8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1011fd4:	00bfde84 	movi	r2,-134
 1011fd8:	e0bffa15 	stw	r2,-24(fp)
 1011fdc:	00000206 	br	1011fe8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1011fe0:	00bfebc4 	movi	r2,-81
 1011fe4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1011fe8:	e0bffa17 	ldw	r2,-24(fp)
 1011fec:	1004403a 	cmpge	r2,r2,zero
 1011ff0:	1000071e 	bne	r2,zero,1012010 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1011ff4:	10120280 	call	1012028 <alt_get_errno>
 1011ff8:	1007883a 	mov	r3,r2
 1011ffc:	e0bffa17 	ldw	r2,-24(fp)
 1012000:	0085c83a 	sub	r2,zero,r2
 1012004:	18800015 	stw	r2,0(r3)
    rc = -1;
 1012008:	00bfffc4 	movi	r2,-1
 101200c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1012010:	e0bffa17 	ldw	r2,-24(fp)
}
 1012014:	e037883a 	mov	sp,fp
 1012018:	dfc00117 	ldw	ra,4(sp)
 101201c:	df000017 	ldw	fp,0(sp)
 1012020:	dec00204 	addi	sp,sp,8
 1012024:	f800283a 	ret

01012028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1012028:	defffd04 	addi	sp,sp,-12
 101202c:	dfc00215 	stw	ra,8(sp)
 1012030:	df000115 	stw	fp,4(sp)
 1012034:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1012038:	008040b4 	movhi	r2,258
 101203c:	10ba4704 	addi	r2,r2,-5860
 1012040:	10800017 	ldw	r2,0(r2)
 1012044:	1005003a 	cmpeq	r2,r2,zero
 1012048:	1000061e 	bne	r2,zero,1012064 <alt_get_errno+0x3c>
 101204c:	008040b4 	movhi	r2,258
 1012050:	10ba4704 	addi	r2,r2,-5860
 1012054:	10800017 	ldw	r2,0(r2)
 1012058:	103ee83a 	callr	r2
 101205c:	e0bfff15 	stw	r2,-4(fp)
 1012060:	00000306 	br	1012070 <alt_get_errno+0x48>
 1012064:	008040b4 	movhi	r2,258
 1012068:	10816704 	addi	r2,r2,1436
 101206c:	e0bfff15 	stw	r2,-4(fp)
 1012070:	e0bfff17 	ldw	r2,-4(fp)
}
 1012074:	e037883a 	mov	sp,fp
 1012078:	dfc00117 	ldw	ra,4(sp)
 101207c:	df000017 	ldw	fp,0(sp)
 1012080:	dec00204 	addi	sp,sp,8
 1012084:	f800283a 	ret

01012088 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1012088:	defffd04 	addi	sp,sp,-12
 101208c:	dfc00215 	stw	ra,8(sp)
 1012090:	df000115 	stw	fp,4(sp)
 1012094:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1012098:	0009883a 	mov	r4,zero
 101209c:	10129ac0 	call	10129ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10120a0:	10129e00 	call	10129e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10120a4:	010040b4 	movhi	r4,258
 10120a8:	21330404 	addi	r4,r4,-13296
 10120ac:	014040b4 	movhi	r5,258
 10120b0:	29730404 	addi	r5,r5,-13296
 10120b4:	018040b4 	movhi	r6,258
 10120b8:	31b30404 	addi	r6,r6,-13296
 10120bc:	101b53c0 	call	101b53c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10120c0:	101b2d80 	call	101b2d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10120c4:	010040b4 	movhi	r4,258
 10120c8:	212ccf04 	addi	r4,r4,-19652
 10120cc:	101bcf80 	call	101bcf8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10120d0:	d1273217 	ldw	r4,-25400(gp)
 10120d4:	d1673317 	ldw	r5,-25396(gp)
 10120d8:	d1a73417 	ldw	r6,-25392(gp)
 10120dc:	1001e140 	call	1001e14 <main>
 10120e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10120e4:	01000044 	movi	r4,1
 10120e8:	1011a600 	call	1011a60 <close>
  exit (result);
 10120ec:	e13fff17 	ldw	r4,-4(fp)
 10120f0:	101bd0c0 	call	101bd0c <exit>

010120f4 <__malloc_lock>:
 10120f4:	defffe04 	addi	sp,sp,-8
 10120f8:	df000115 	stw	fp,4(sp)
 10120fc:	df000104 	addi	fp,sp,4
 1012100:	e13fff15 	stw	r4,-4(fp)
 1012104:	e037883a 	mov	sp,fp
 1012108:	df000017 	ldw	fp,0(sp)
 101210c:	dec00104 	addi	sp,sp,4
 1012110:	f800283a 	ret

01012114 <__malloc_unlock>:
 1012114:	defffe04 	addi	sp,sp,-8
 1012118:	df000115 	stw	fp,4(sp)
 101211c:	df000104 	addi	fp,sp,4
 1012120:	e13fff15 	stw	r4,-4(fp)
 1012124:	e037883a 	mov	sp,fp
 1012128:	df000017 	ldw	fp,0(sp)
 101212c:	dec00104 	addi	sp,sp,4
 1012130:	f800283a 	ret

01012134 <alt_printf>:
 1012134:	defff204 	addi	sp,sp,-56
 1012138:	dfc00a15 	stw	ra,40(sp)
 101213c:	df000915 	stw	fp,36(sp)
 1012140:	df000904 	addi	fp,sp,36
 1012144:	e1400215 	stw	r5,8(fp)
 1012148:	e1800315 	stw	r6,12(fp)
 101214c:	e1c00415 	stw	r7,16(fp)
 1012150:	e13fff15 	stw	r4,-4(fp)
 1012154:	e0800204 	addi	r2,fp,8
 1012158:	e0bffe15 	stw	r2,-8(fp)
 101215c:	e0bfff17 	ldw	r2,-4(fp)
 1012160:	e0bffd15 	stw	r2,-12(fp)
 1012164:	00007806 	br	1012348 <alt_printf+0x214>
 1012168:	e0bffc07 	ldb	r2,-16(fp)
 101216c:	10800960 	cmpeqi	r2,r2,37
 1012170:	1000031e 	bne	r2,zero,1012180 <alt_printf+0x4c>
 1012174:	e13ffc07 	ldb	r4,-16(fp)
 1012178:	101238c0 	call	101238c <alt_putchar>
 101217c:	00007206 	br	1012348 <alt_printf+0x214>
 1012180:	e0bffd17 	ldw	r2,-12(fp)
 1012184:	10800003 	ldbu	r2,0(r2)
 1012188:	e0bffc05 	stb	r2,-16(fp)
 101218c:	e0bffc07 	ldb	r2,-16(fp)
 1012190:	1004c03a 	cmpne	r2,r2,zero
 1012194:	1007883a 	mov	r3,r2
 1012198:	e0bffd17 	ldw	r2,-12(fp)
 101219c:	10800044 	addi	r2,r2,1
 10121a0:	e0bffd15 	stw	r2,-12(fp)
 10121a4:	18803fcc 	andi	r2,r3,255
 10121a8:	1005003a 	cmpeq	r2,r2,zero
 10121ac:	1000721e 	bne	r2,zero,1012378 <alt_printf+0x244>
 10121b0:	e0bffc07 	ldb	r2,-16(fp)
 10121b4:	10800958 	cmpnei	r2,r2,37
 10121b8:	1000031e 	bne	r2,zero,10121c8 <alt_printf+0x94>
 10121bc:	e13ffc07 	ldb	r4,-16(fp)
 10121c0:	101238c0 	call	101238c <alt_putchar>
 10121c4:	00006006 	br	1012348 <alt_printf+0x214>
 10121c8:	e0bffc07 	ldb	r2,-16(fp)
 10121cc:	108018d8 	cmpnei	r2,r2,99
 10121d0:	1000091e 	bne	r2,zero,10121f8 <alt_printf+0xc4>
 10121d4:	e0fffe17 	ldw	r3,-8(fp)
 10121d8:	18800104 	addi	r2,r3,4
 10121dc:	e0bffe15 	stw	r2,-8(fp)
 10121e0:	1805883a 	mov	r2,r3
 10121e4:	10800017 	ldw	r2,0(r2)
 10121e8:	e0bffb15 	stw	r2,-20(fp)
 10121ec:	e13ffb17 	ldw	r4,-20(fp)
 10121f0:	101238c0 	call	101238c <alt_putchar>
 10121f4:	00005406 	br	1012348 <alt_printf+0x214>
 10121f8:	e0bffc07 	ldb	r2,-16(fp)
 10121fc:	10801e18 	cmpnei	r2,r2,120
 1012200:	1000371e 	bne	r2,zero,10122e0 <alt_printf+0x1ac>
 1012204:	e0fffe17 	ldw	r3,-8(fp)
 1012208:	18800104 	addi	r2,r3,4
 101220c:	e0bffe15 	stw	r2,-8(fp)
 1012210:	1805883a 	mov	r2,r3
 1012214:	10800017 	ldw	r2,0(r2)
 1012218:	e0bffa15 	stw	r2,-24(fp)
 101221c:	e0bffa17 	ldw	r2,-24(fp)
 1012220:	1004c03a 	cmpne	r2,r2,zero
 1012224:	1000031e 	bne	r2,zero,1012234 <alt_printf+0x100>
 1012228:	01000c04 	movi	r4,48
 101222c:	101238c0 	call	101238c <alt_putchar>
 1012230:	00004506 	br	1012348 <alt_printf+0x214>
 1012234:	00800704 	movi	r2,28
 1012238:	e0bff815 	stw	r2,-32(fp)
 101223c:	00000306 	br	101224c <alt_printf+0x118>
 1012240:	e0bff817 	ldw	r2,-32(fp)
 1012244:	10bfff04 	addi	r2,r2,-4
 1012248:	e0bff815 	stw	r2,-32(fp)
 101224c:	00c003c4 	movi	r3,15
 1012250:	e0bff817 	ldw	r2,-32(fp)
 1012254:	1884983a 	sll	r2,r3,r2
 1012258:	1007883a 	mov	r3,r2
 101225c:	e0bffa17 	ldw	r2,-24(fp)
 1012260:	1884703a 	and	r2,r3,r2
 1012264:	1005003a 	cmpeq	r2,r2,zero
 1012268:	103ff51e 	bne	r2,zero,1012240 <alt_printf+0x10c>
 101226c:	00001806 	br	10122d0 <alt_printf+0x19c>
 1012270:	00c003c4 	movi	r3,15
 1012274:	e0bff817 	ldw	r2,-32(fp)
 1012278:	1884983a 	sll	r2,r3,r2
 101227c:	1007883a 	mov	r3,r2
 1012280:	e0bffa17 	ldw	r2,-24(fp)
 1012284:	1886703a 	and	r3,r3,r2
 1012288:	e0bff817 	ldw	r2,-32(fp)
 101228c:	1884d83a 	srl	r2,r3,r2
 1012290:	e0bff915 	stw	r2,-28(fp)
 1012294:	e0bff917 	ldw	r2,-28(fp)
 1012298:	108002a8 	cmpgeui	r2,r2,10
 101229c:	1000041e 	bne	r2,zero,10122b0 <alt_printf+0x17c>
 10122a0:	e0bff917 	ldw	r2,-28(fp)
 10122a4:	10800c04 	addi	r2,r2,48
 10122a8:	e0bffc05 	stb	r2,-16(fp)
 10122ac:	00000306 	br	10122bc <alt_printf+0x188>
 10122b0:	e0bff917 	ldw	r2,-28(fp)
 10122b4:	108015c4 	addi	r2,r2,87
 10122b8:	e0bffc05 	stb	r2,-16(fp)
 10122bc:	e13ffc07 	ldb	r4,-16(fp)
 10122c0:	101238c0 	call	101238c <alt_putchar>
 10122c4:	e0bff817 	ldw	r2,-32(fp)
 10122c8:	10bfff04 	addi	r2,r2,-4
 10122cc:	e0bff815 	stw	r2,-32(fp)
 10122d0:	e0bff817 	ldw	r2,-32(fp)
 10122d4:	1004403a 	cmpge	r2,r2,zero
 10122d8:	103fe51e 	bne	r2,zero,1012270 <alt_printf+0x13c>
 10122dc:	00001a06 	br	1012348 <alt_printf+0x214>
 10122e0:	e0bffc07 	ldb	r2,-16(fp)
 10122e4:	10801cd8 	cmpnei	r2,r2,115
 10122e8:	1000171e 	bne	r2,zero,1012348 <alt_printf+0x214>
 10122ec:	e0fffe17 	ldw	r3,-8(fp)
 10122f0:	18800104 	addi	r2,r3,4
 10122f4:	e0bffe15 	stw	r2,-8(fp)
 10122f8:	1805883a 	mov	r2,r3
 10122fc:	10800017 	ldw	r2,0(r2)
 1012300:	e0bff715 	stw	r2,-36(fp)
 1012304:	00000906 	br	101232c <alt_printf+0x1f8>
 1012308:	e0bff717 	ldw	r2,-36(fp)
 101230c:	10800003 	ldbu	r2,0(r2)
 1012310:	11003fcc 	andi	r4,r2,255
 1012314:	2100201c 	xori	r4,r4,128
 1012318:	213fe004 	addi	r4,r4,-128
 101231c:	e0bff717 	ldw	r2,-36(fp)
 1012320:	10800044 	addi	r2,r2,1
 1012324:	e0bff715 	stw	r2,-36(fp)
 1012328:	101238c0 	call	101238c <alt_putchar>
 101232c:	e0bff717 	ldw	r2,-36(fp)
 1012330:	10800003 	ldbu	r2,0(r2)
 1012334:	10803fcc 	andi	r2,r2,255
 1012338:	1080201c 	xori	r2,r2,128
 101233c:	10bfe004 	addi	r2,r2,-128
 1012340:	1004c03a 	cmpne	r2,r2,zero
 1012344:	103ff01e 	bne	r2,zero,1012308 <alt_printf+0x1d4>
 1012348:	e0bffd17 	ldw	r2,-12(fp)
 101234c:	10800003 	ldbu	r2,0(r2)
 1012350:	e0bffc05 	stb	r2,-16(fp)
 1012354:	e0bffc07 	ldb	r2,-16(fp)
 1012358:	1004c03a 	cmpne	r2,r2,zero
 101235c:	1007883a 	mov	r3,r2
 1012360:	e0bffd17 	ldw	r2,-12(fp)
 1012364:	10800044 	addi	r2,r2,1
 1012368:	e0bffd15 	stw	r2,-12(fp)
 101236c:	18803fcc 	andi	r2,r3,255
 1012370:	1004c03a 	cmpne	r2,r2,zero
 1012374:	103f7c1e 	bne	r2,zero,1012168 <alt_printf+0x34>
 1012378:	e037883a 	mov	sp,fp
 101237c:	dfc00117 	ldw	ra,4(sp)
 1012380:	df000017 	ldw	fp,0(sp)
 1012384:	dec00504 	addi	sp,sp,20
 1012388:	f800283a 	ret

0101238c <alt_putchar>:
 101238c:	defffd04 	addi	sp,sp,-12
 1012390:	dfc00215 	stw	ra,8(sp)
 1012394:	df000115 	stw	fp,4(sp)
 1012398:	df000104 	addi	fp,sp,4
 101239c:	e13fff15 	stw	r4,-4(fp)
 10123a0:	008040b4 	movhi	r2,258
 10123a4:	10ba3e04 	addi	r2,r2,-5896
 10123a8:	10800017 	ldw	r2,0(r2)
 10123ac:	11400217 	ldw	r5,8(r2)
 10123b0:	e13fff17 	ldw	r4,-4(fp)
 10123b4:	100a9fc0 	call	100a9fc <putc>
 10123b8:	e037883a 	mov	sp,fp
 10123bc:	dfc00117 	ldw	ra,4(sp)
 10123c0:	df000017 	ldw	fp,0(sp)
 10123c4:	dec00204 	addi	sp,sp,8
 10123c8:	f800283a 	ret

010123cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10123cc:	defff704 	addi	sp,sp,-36
 10123d0:	dfc00815 	stw	ra,32(sp)
 10123d4:	df000715 	stw	fp,28(sp)
 10123d8:	df000704 	addi	fp,sp,28
 10123dc:	e13ffb15 	stw	r4,-20(fp)
 10123e0:	e17ffc15 	stw	r5,-16(fp)
 10123e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10123e8:	e0bffb17 	ldw	r2,-20(fp)
 10123ec:	1004803a 	cmplt	r2,r2,zero
 10123f0:	1000091e 	bne	r2,zero,1012418 <read+0x4c>
 10123f4:	e13ffb17 	ldw	r4,-20(fp)
 10123f8:	01400304 	movi	r5,12
 10123fc:	10026440 	call	1002644 <__mulsi3>
 1012400:	1007883a 	mov	r3,r2
 1012404:	008040b4 	movhi	r2,258
 1012408:	10b55604 	addi	r2,r2,-10920
 101240c:	1887883a 	add	r3,r3,r2
 1012410:	e0ffff15 	stw	r3,-4(fp)
 1012414:	00000106 	br	101241c <read+0x50>
 1012418:	e03fff15 	stw	zero,-4(fp)
 101241c:	e0bfff17 	ldw	r2,-4(fp)
 1012420:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1012424:	e0bffa17 	ldw	r2,-24(fp)
 1012428:	1005003a 	cmpeq	r2,r2,zero
 101242c:	1000241e 	bne	r2,zero,10124c0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1012430:	e0bffa17 	ldw	r2,-24(fp)
 1012434:	10800217 	ldw	r2,8(r2)
 1012438:	108000cc 	andi	r2,r2,3
 101243c:	10800060 	cmpeqi	r2,r2,1
 1012440:	10001a1e 	bne	r2,zero,10124ac <read+0xe0>
 1012444:	e0bffa17 	ldw	r2,-24(fp)
 1012448:	10800017 	ldw	r2,0(r2)
 101244c:	10800517 	ldw	r2,20(r2)
 1012450:	1005003a 	cmpeq	r2,r2,zero
 1012454:	1000151e 	bne	r2,zero,10124ac <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1012458:	e0bffa17 	ldw	r2,-24(fp)
 101245c:	10800017 	ldw	r2,0(r2)
 1012460:	10800517 	ldw	r2,20(r2)
 1012464:	e17ffc17 	ldw	r5,-16(fp)
 1012468:	e1bffd17 	ldw	r6,-12(fp)
 101246c:	e13ffa17 	ldw	r4,-24(fp)
 1012470:	103ee83a 	callr	r2
 1012474:	e0bff915 	stw	r2,-28(fp)
 1012478:	e0bff917 	ldw	r2,-28(fp)
 101247c:	1004403a 	cmpge	r2,r2,zero
 1012480:	1000071e 	bne	r2,zero,10124a0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 1012484:	10124f00 	call	10124f0 <alt_get_errno>
 1012488:	e0fff917 	ldw	r3,-28(fp)
 101248c:	00c7c83a 	sub	r3,zero,r3
 1012490:	10c00015 	stw	r3,0(r2)
          return -1;
 1012494:	00bfffc4 	movi	r2,-1
 1012498:	e0bffe15 	stw	r2,-8(fp)
 101249c:	00000e06 	br	10124d8 <read+0x10c>
        }
        return rval;
 10124a0:	e0bff917 	ldw	r2,-28(fp)
 10124a4:	e0bffe15 	stw	r2,-8(fp)
 10124a8:	00000b06 	br	10124d8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10124ac:	10124f00 	call	10124f0 <alt_get_errno>
 10124b0:	1007883a 	mov	r3,r2
 10124b4:	00800344 	movi	r2,13
 10124b8:	18800015 	stw	r2,0(r3)
 10124bc:	00000406 	br	10124d0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10124c0:	10124f00 	call	10124f0 <alt_get_errno>
 10124c4:	1007883a 	mov	r3,r2
 10124c8:	00801444 	movi	r2,81
 10124cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10124d0:	00bfffc4 	movi	r2,-1
 10124d4:	e0bffe15 	stw	r2,-8(fp)
 10124d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10124dc:	e037883a 	mov	sp,fp
 10124e0:	dfc00117 	ldw	ra,4(sp)
 10124e4:	df000017 	ldw	fp,0(sp)
 10124e8:	dec00204 	addi	sp,sp,8
 10124ec:	f800283a 	ret

010124f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10124f0:	defffd04 	addi	sp,sp,-12
 10124f4:	dfc00215 	stw	ra,8(sp)
 10124f8:	df000115 	stw	fp,4(sp)
 10124fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1012500:	008040b4 	movhi	r2,258
 1012504:	10ba4704 	addi	r2,r2,-5860
 1012508:	10800017 	ldw	r2,0(r2)
 101250c:	1005003a 	cmpeq	r2,r2,zero
 1012510:	1000061e 	bne	r2,zero,101252c <alt_get_errno+0x3c>
 1012514:	008040b4 	movhi	r2,258
 1012518:	10ba4704 	addi	r2,r2,-5860
 101251c:	10800017 	ldw	r2,0(r2)
 1012520:	103ee83a 	callr	r2
 1012524:	e0bfff15 	stw	r2,-4(fp)
 1012528:	00000306 	br	1012538 <alt_get_errno+0x48>
 101252c:	008040b4 	movhi	r2,258
 1012530:	10816704 	addi	r2,r2,1436
 1012534:	e0bfff15 	stw	r2,-4(fp)
 1012538:	e0bfff17 	ldw	r2,-4(fp)
}
 101253c:	e037883a 	mov	sp,fp
 1012540:	dfc00117 	ldw	ra,4(sp)
 1012544:	df000017 	ldw	fp,0(sp)
 1012548:	dec00204 	addi	sp,sp,8
 101254c:	f800283a 	ret

01012550 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1012550:	defffc04 	addi	sp,sp,-16
 1012554:	dfc00315 	stw	ra,12(sp)
 1012558:	df000215 	stw	fp,8(sp)
 101255c:	dc000115 	stw	r16,4(sp)
 1012560:	df000104 	addi	fp,sp,4
 1012564:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1012568:	e0bfff17 	ldw	r2,-4(fp)
 101256c:	108000d0 	cmplti	r2,r2,3
 1012570:	10000f1e 	bne	r2,zero,10125b0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1012574:	e13fff17 	ldw	r4,-4(fp)
 1012578:	040040b4 	movhi	r16,258
 101257c:	84355604 	addi	r16,r16,-10920
 1012580:	01400304 	movi	r5,12
 1012584:	10026440 	call	1002644 <__mulsi3>
 1012588:	1405883a 	add	r2,r2,r16
 101258c:	10800204 	addi	r2,r2,8
 1012590:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1012594:	e13fff17 	ldw	r4,-4(fp)
 1012598:	040040b4 	movhi	r16,258
 101259c:	84355604 	addi	r16,r16,-10920
 10125a0:	01400304 	movi	r5,12
 10125a4:	10026440 	call	1002644 <__mulsi3>
 10125a8:	1405883a 	add	r2,r2,r16
 10125ac:	10000015 	stw	zero,0(r2)
  }
}
 10125b0:	e037883a 	mov	sp,fp
 10125b4:	dfc00217 	ldw	ra,8(sp)
 10125b8:	df000117 	ldw	fp,4(sp)
 10125bc:	dc000017 	ldw	r16,0(sp)
 10125c0:	dec00304 	addi	sp,sp,12
 10125c4:	f800283a 	ret

010125c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10125c8:	defff804 	addi	sp,sp,-32
 10125cc:	df000715 	stw	fp,28(sp)
 10125d0:	df000704 	addi	fp,sp,28
 10125d4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10125d8:	0005303a 	rdctl	r2,status
 10125dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10125e0:	e0fffb17 	ldw	r3,-20(fp)
 10125e4:	00bfff84 	movi	r2,-2
 10125e8:	1884703a 	and	r2,r3,r2
 10125ec:	1001703a 	wrctl	status,r2
  
  return context;
 10125f0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10125f4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10125f8:	d0a00f17 	ldw	r2,-32708(gp)
 10125fc:	10c000c4 	addi	r3,r2,3
 1012600:	00bfff04 	movi	r2,-4
 1012604:	1884703a 	and	r2,r3,r2
 1012608:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 101260c:	d0e00f17 	ldw	r3,-32708(gp)
 1012610:	e0bffe17 	ldw	r2,-8(fp)
 1012614:	1887883a 	add	r3,r3,r2
 1012618:	00806034 	movhi	r2,384
 101261c:	10800004 	addi	r2,r2,0
 1012620:	10c0072e 	bgeu	r2,r3,1012640 <sbrk+0x78>
 1012624:	e0bffd17 	ldw	r2,-12(fp)
 1012628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101262c:	e0bffa17 	ldw	r2,-24(fp)
 1012630:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1012634:	00bfffc4 	movi	r2,-1
 1012638:	e0bfff15 	stw	r2,-4(fp)
 101263c:	00000c06 	br	1012670 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1012640:	d0a00f17 	ldw	r2,-32708(gp)
 1012644:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1012648:	d0e00f17 	ldw	r3,-32708(gp)
 101264c:	e0bffe17 	ldw	r2,-8(fp)
 1012650:	1885883a 	add	r2,r3,r2
 1012654:	d0a00f15 	stw	r2,-32708(gp)
 1012658:	e0bffd17 	ldw	r2,-12(fp)
 101265c:	e0bff915 	stw	r2,-28(fp)
 1012660:	e0bff917 	ldw	r2,-28(fp)
 1012664:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1012668:	e0bffc17 	ldw	r2,-16(fp)
 101266c:	e0bfff15 	stw	r2,-4(fp)
 1012670:	e0bfff17 	ldw	r2,-4(fp)
} 
 1012674:	e037883a 	mov	sp,fp
 1012678:	df000017 	ldw	fp,0(sp)
 101267c:	dec00104 	addi	sp,sp,4
 1012680:	f800283a 	ret

01012684 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1012684:	defffa04 	addi	sp,sp,-24
 1012688:	df000515 	stw	fp,20(sp)
 101268c:	df000504 	addi	fp,sp,20
 1012690:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012694:	0005303a 	rdctl	r2,status
 1012698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101269c:	e0fffd17 	ldw	r3,-12(fp)
 10126a0:	00bfff84 	movi	r2,-2
 10126a4:	1884703a 	and	r2,r3,r2
 10126a8:	1001703a 	wrctl	status,r2
  
  return context;
 10126ac:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10126b0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10126b4:	e0bfff17 	ldw	r2,-4(fp)
 10126b8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10126bc:	e0bffc17 	ldw	r2,-16(fp)
 10126c0:	10c00017 	ldw	r3,0(r2)
 10126c4:	e0bffc17 	ldw	r2,-16(fp)
 10126c8:	10800117 	ldw	r2,4(r2)
 10126cc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10126d0:	e0bffc17 	ldw	r2,-16(fp)
 10126d4:	10c00117 	ldw	r3,4(r2)
 10126d8:	e0bffc17 	ldw	r2,-16(fp)
 10126dc:	10800017 	ldw	r2,0(r2)
 10126e0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10126e4:	e0fffc17 	ldw	r3,-16(fp)
 10126e8:	e0bffc17 	ldw	r2,-16(fp)
 10126ec:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10126f0:	e0fffc17 	ldw	r3,-16(fp)
 10126f4:	e0bffc17 	ldw	r2,-16(fp)
 10126f8:	18800015 	stw	r2,0(r3)
 10126fc:	e0bffe17 	ldw	r2,-8(fp)
 1012700:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012704:	e0bffb17 	ldw	r2,-20(fp)
 1012708:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 101270c:	e037883a 	mov	sp,fp
 1012710:	df000017 	ldw	fp,0(sp)
 1012714:	dec00104 	addi	sp,sp,4
 1012718:	f800283a 	ret

0101271c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 101271c:	defffb04 	addi	sp,sp,-20
 1012720:	dfc00415 	stw	ra,16(sp)
 1012724:	df000315 	stw	fp,12(sp)
 1012728:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 101272c:	d0a01017 	ldw	r2,-32704(gp)
 1012730:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1012734:	d0a73617 	ldw	r2,-25384(gp)
 1012738:	10800044 	addi	r2,r2,1
 101273c:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1012740:	00003106 	br	1012808 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1012744:	e0bffe17 	ldw	r2,-8(fp)
 1012748:	10800017 	ldw	r2,0(r2)
 101274c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1012750:	e0bffe17 	ldw	r2,-8(fp)
 1012754:	10800403 	ldbu	r2,16(r2)
 1012758:	10803fcc 	andi	r2,r2,255
 101275c:	1005003a 	cmpeq	r2,r2,zero
 1012760:	1000051e 	bne	r2,zero,1012778 <alt_tick+0x5c>
 1012764:	d0a73617 	ldw	r2,-25384(gp)
 1012768:	1004c03a 	cmpne	r2,r2,zero
 101276c:	1000021e 	bne	r2,zero,1012778 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1012770:	e0bffe17 	ldw	r2,-8(fp)
 1012774:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1012778:	e0bffe17 	ldw	r2,-8(fp)
 101277c:	10c00217 	ldw	r3,8(r2)
 1012780:	d0a73617 	ldw	r2,-25384(gp)
 1012784:	10c01e36 	bltu	r2,r3,1012800 <alt_tick+0xe4>
 1012788:	e0bffe17 	ldw	r2,-8(fp)
 101278c:	10800403 	ldbu	r2,16(r2)
 1012790:	10803fcc 	andi	r2,r2,255
 1012794:	1004c03a 	cmpne	r2,r2,zero
 1012798:	1000191e 	bne	r2,zero,1012800 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 101279c:	e0bffe17 	ldw	r2,-8(fp)
 10127a0:	10c00317 	ldw	r3,12(r2)
 10127a4:	e0bffe17 	ldw	r2,-8(fp)
 10127a8:	11000517 	ldw	r4,20(r2)
 10127ac:	183ee83a 	callr	r3
 10127b0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10127b4:	e0bffd17 	ldw	r2,-12(fp)
 10127b8:	1004c03a 	cmpne	r2,r2,zero
 10127bc:	1000031e 	bne	r2,zero,10127cc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10127c0:	e13ffe17 	ldw	r4,-8(fp)
 10127c4:	10126840 	call	1012684 <alt_alarm_stop>
 10127c8:	00000d06 	br	1012800 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10127cc:	e0bffe17 	ldw	r2,-8(fp)
 10127d0:	10c00217 	ldw	r3,8(r2)
 10127d4:	e0bffd17 	ldw	r2,-12(fp)
 10127d8:	1887883a 	add	r3,r3,r2
 10127dc:	e0bffe17 	ldw	r2,-8(fp)
 10127e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10127e4:	e0bffe17 	ldw	r2,-8(fp)
 10127e8:	10c00217 	ldw	r3,8(r2)
 10127ec:	d0a73617 	ldw	r2,-25384(gp)
 10127f0:	1880032e 	bgeu	r3,r2,1012800 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10127f4:	e0fffe17 	ldw	r3,-8(fp)
 10127f8:	00800044 	movi	r2,1
 10127fc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1012800:	e0bfff17 	ldw	r2,-4(fp)
 1012804:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1012808:	d0e01004 	addi	r3,gp,-32704
 101280c:	e0bffe17 	ldw	r2,-8(fp)
 1012810:	10ffcc1e 	bne	r2,r3,1012744 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1012814:	e037883a 	mov	sp,fp
 1012818:	dfc00117 	ldw	ra,4(sp)
 101281c:	df000017 	ldw	fp,0(sp)
 1012820:	dec00204 	addi	sp,sp,8
 1012824:	f800283a 	ret

01012828 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1012828:	defff704 	addi	sp,sp,-36
 101282c:	dfc00815 	stw	ra,32(sp)
 1012830:	df000715 	stw	fp,28(sp)
 1012834:	df000704 	addi	fp,sp,28
 1012838:	e13ffb15 	stw	r4,-20(fp)
 101283c:	e17ffc15 	stw	r5,-16(fp)
 1012840:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1012844:	e0bffb17 	ldw	r2,-20(fp)
 1012848:	1004803a 	cmplt	r2,r2,zero
 101284c:	1000091e 	bne	r2,zero,1012874 <write+0x4c>
 1012850:	e13ffb17 	ldw	r4,-20(fp)
 1012854:	01400304 	movi	r5,12
 1012858:	10026440 	call	1002644 <__mulsi3>
 101285c:	1007883a 	mov	r3,r2
 1012860:	008040b4 	movhi	r2,258
 1012864:	10b55604 	addi	r2,r2,-10920
 1012868:	1887883a 	add	r3,r3,r2
 101286c:	e0ffff15 	stw	r3,-4(fp)
 1012870:	00000106 	br	1012878 <write+0x50>
 1012874:	e03fff15 	stw	zero,-4(fp)
 1012878:	e0bfff17 	ldw	r2,-4(fp)
 101287c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1012880:	e0bffa17 	ldw	r2,-24(fp)
 1012884:	1005003a 	cmpeq	r2,r2,zero
 1012888:	1000241e 	bne	r2,zero,101291c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 101288c:	e0bffa17 	ldw	r2,-24(fp)
 1012890:	10800217 	ldw	r2,8(r2)
 1012894:	108000cc 	andi	r2,r2,3
 1012898:	1005003a 	cmpeq	r2,r2,zero
 101289c:	10001a1e 	bne	r2,zero,1012908 <write+0xe0>
 10128a0:	e0bffa17 	ldw	r2,-24(fp)
 10128a4:	10800017 	ldw	r2,0(r2)
 10128a8:	10800617 	ldw	r2,24(r2)
 10128ac:	1005003a 	cmpeq	r2,r2,zero
 10128b0:	1000151e 	bne	r2,zero,1012908 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10128b4:	e0bffa17 	ldw	r2,-24(fp)
 10128b8:	10800017 	ldw	r2,0(r2)
 10128bc:	10800617 	ldw	r2,24(r2)
 10128c0:	e17ffc17 	ldw	r5,-16(fp)
 10128c4:	e1bffd17 	ldw	r6,-12(fp)
 10128c8:	e13ffa17 	ldw	r4,-24(fp)
 10128cc:	103ee83a 	callr	r2
 10128d0:	e0bff915 	stw	r2,-28(fp)
 10128d4:	e0bff917 	ldw	r2,-28(fp)
 10128d8:	1004403a 	cmpge	r2,r2,zero
 10128dc:	1000071e 	bne	r2,zero,10128fc <write+0xd4>
      {
        ALT_ERRNO = -rval;
 10128e0:	101294c0 	call	101294c <alt_get_errno>
 10128e4:	e0fff917 	ldw	r3,-28(fp)
 10128e8:	00c7c83a 	sub	r3,zero,r3
 10128ec:	10c00015 	stw	r3,0(r2)
        return -1;
 10128f0:	00bfffc4 	movi	r2,-1
 10128f4:	e0bffe15 	stw	r2,-8(fp)
 10128f8:	00000e06 	br	1012934 <write+0x10c>
      }
      return rval;
 10128fc:	e0bff917 	ldw	r2,-28(fp)
 1012900:	e0bffe15 	stw	r2,-8(fp)
 1012904:	00000b06 	br	1012934 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1012908:	101294c0 	call	101294c <alt_get_errno>
 101290c:	1007883a 	mov	r3,r2
 1012910:	00800344 	movi	r2,13
 1012914:	18800015 	stw	r2,0(r3)
 1012918:	00000406 	br	101292c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 101291c:	101294c0 	call	101294c <alt_get_errno>
 1012920:	1007883a 	mov	r3,r2
 1012924:	00801444 	movi	r2,81
 1012928:	18800015 	stw	r2,0(r3)
  }
  return -1;
 101292c:	00bfffc4 	movi	r2,-1
 1012930:	e0bffe15 	stw	r2,-8(fp)
 1012934:	e0bffe17 	ldw	r2,-8(fp)
}
 1012938:	e037883a 	mov	sp,fp
 101293c:	dfc00117 	ldw	ra,4(sp)
 1012940:	df000017 	ldw	fp,0(sp)
 1012944:	dec00204 	addi	sp,sp,8
 1012948:	f800283a 	ret

0101294c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101294c:	defffd04 	addi	sp,sp,-12
 1012950:	dfc00215 	stw	ra,8(sp)
 1012954:	df000115 	stw	fp,4(sp)
 1012958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101295c:	008040b4 	movhi	r2,258
 1012960:	10ba4704 	addi	r2,r2,-5860
 1012964:	10800017 	ldw	r2,0(r2)
 1012968:	1005003a 	cmpeq	r2,r2,zero
 101296c:	1000061e 	bne	r2,zero,1012988 <alt_get_errno+0x3c>
 1012970:	008040b4 	movhi	r2,258
 1012974:	10ba4704 	addi	r2,r2,-5860
 1012978:	10800017 	ldw	r2,0(r2)
 101297c:	103ee83a 	callr	r2
 1012980:	e0bfff15 	stw	r2,-4(fp)
 1012984:	00000306 	br	1012994 <alt_get_errno+0x48>
 1012988:	008040b4 	movhi	r2,258
 101298c:	10816704 	addi	r2,r2,1436
 1012990:	e0bfff15 	stw	r2,-4(fp)
 1012994:	e0bfff17 	ldw	r2,-4(fp)
}
 1012998:	e037883a 	mov	sp,fp
 101299c:	dfc00117 	ldw	ra,4(sp)
 10129a0:	df000017 	ldw	fp,0(sp)
 10129a4:	dec00204 	addi	sp,sp,8
 10129a8:	f800283a 	ret

010129ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10129ac:	defffd04 	addi	sp,sp,-12
 10129b0:	dfc00215 	stw	ra,8(sp)
 10129b4:	df000115 	stw	fp,4(sp)
 10129b8:	df000104 	addi	fp,sp,4
 10129bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 10129c0:	101ba580 	call	101ba58 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10129c4:	00800044 	movi	r2,1
 10129c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10129cc:	e037883a 	mov	sp,fp
 10129d0:	dfc00117 	ldw	ra,4(sp)
 10129d4:	df000017 	ldw	fp,0(sp)
 10129d8:	dec00204 	addi	sp,sp,8
 10129dc:	f800283a 	ret

010129e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10129e0:	defffd04 	addi	sp,sp,-12
 10129e4:	dfc00215 	stw	ra,8(sp)
 10129e8:	df000115 	stw	fp,4(sp)
 10129ec:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HW_ONLY_CLK, hw_only_clk);
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
 10129f0:	01051004 	movi	r4,5184
 10129f4:	000b883a 	mov	r5,zero
 10129f8:	000d883a 	mov	r6,zero
 10129fc:	01c0fa04 	movi	r7,1000
 1012a00:	10138b80 	call	10138b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_CLK, timestamp_clk);
 1012a04:	00c040b4 	movhi	r3,258
 1012a08:	18c17004 	addi	r3,r3,1472
 1012a0c:	00850804 	movi	r2,5152
 1012a10:	18800015 	stw	r2,0(r3)
 1012a14:	00c040b4 	movhi	r3,258
 1012a18:	18c17104 	addi	r3,r3,1476
 1012a1c:	0080bef4 	movhi	r2,763
 1012a20:	10bc2004 	addi	r2,r2,-3968
 1012a24:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1012a28:	010040b4 	movhi	r4,258
 1012a2c:	2135c004 	addi	r4,r4,-10496
 1012a30:	000b883a 	mov	r5,zero
 1012a34:	01800144 	movi	r6,5
 1012a38:	1012ee40 	call	1012ee4 <altera_avalon_jtag_uart_init>
 1012a3c:	010040b4 	movhi	r4,258
 1012a40:	2135b604 	addi	r4,r4,-10536
 1012a44:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_CONFIG, audio_config);
 1012a48:	010040b4 	movhi	r4,258
 1012a4c:	2139ce04 	addi	r4,r4,-6344
 1012a50:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
 1012a54:	010040b4 	movhi	r4,258
 1012a58:	2139da04 	addi	r4,r4,-6296
 1012a5c:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1012a60:	010040b4 	movhi	r4,258
 1012a64:	2139e604 	addi	r4,r4,-6248
 1012a68:	1014aec0 	call	1014aec <alt_up_character_lcd_init>
 1012a6c:	010040b4 	movhi	r4,258
 1012a70:	2139e604 	addi	r4,r4,-6248
 1012a74:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTONS, buttons);
 1012a78:	010040b4 	movhi	r4,258
 1012a7c:	2139f104 	addi	r4,r4,-6204
 1012a80:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1012a84:	010040b4 	movhi	r4,258
 1012a88:	2139fc04 	addi	r4,r4,-6160
 1012a8c:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 1012a90:	008040b4 	movhi	r2,258
 1012a94:	10ba0704 	addi	r2,r2,-6116
 1012a98:	10800a17 	ldw	r2,40(r2)
 1012a9c:	10800104 	addi	r2,r2,4
 1012aa0:	10800017 	ldw	r2,0(r2)
 1012aa4:	10ffffcc 	andi	r3,r2,65535
 1012aa8:	008040b4 	movhi	r2,258
 1012aac:	10ba0704 	addi	r2,r2,-6116
 1012ab0:	10c00c15 	stw	r3,48(r2)
 1012ab4:	008040b4 	movhi	r2,258
 1012ab8:	10ba0704 	addi	r2,r2,-6116
 1012abc:	10800a17 	ldw	r2,40(r2)
 1012ac0:	10800104 	addi	r2,r2,4
 1012ac4:	10800017 	ldw	r2,0(r2)
 1012ac8:	1005d43a 	srai	r2,r2,16
 1012acc:	10ffffcc 	andi	r3,r2,65535
 1012ad0:	008040b4 	movhi	r2,258
 1012ad4:	10ba0704 	addi	r2,r2,-6116
 1012ad8:	10c00d15 	stw	r3,52(r2)
 1012adc:	008040b4 	movhi	r2,258
 1012ae0:	10ba0704 	addi	r2,r2,-6116
 1012ae4:	10800c17 	ldw	r2,48(r2)
 1012ae8:	10801068 	cmpgeui	r2,r2,65
 1012aec:	1000081e 	bne	r2,zero,1012b10 <alt_sys_init+0x130>
 1012af0:	00c040b4 	movhi	r3,258
 1012af4:	18fa0704 	addi	r3,r3,-6116
 1012af8:	00800fc4 	movi	r2,63
 1012afc:	18800f15 	stw	r2,60(r3)
 1012b00:	00c040b4 	movhi	r3,258
 1012b04:	18fa0704 	addi	r3,r3,-6116
 1012b08:	00800184 	movi	r2,6
 1012b0c:	18801015 	stw	r2,64(r3)
 1012b10:	008040b4 	movhi	r2,258
 1012b14:	10ba0704 	addi	r2,r2,-6116
 1012b18:	10800d17 	ldw	r2,52(r2)
 1012b1c:	10800868 	cmpgeui	r2,r2,33
 1012b20:	1000041e 	bne	r2,zero,1012b34 <alt_sys_init+0x154>
 1012b24:	00c040b4 	movhi	r3,258
 1012b28:	18fa0704 	addi	r3,r3,-6116
 1012b2c:	008007c4 	movi	r2,31
 1012b30:	18801115 	stw	r2,68(r3)
 1012b34:	010040b4 	movhi	r4,258
 1012b38:	213a0704 	addi	r4,r4,-6116
 1012b3c:	10153040 	call	1015304 <alt_up_char_buffer_init>
 1012b40:	010040b4 	movhi	r4,258
 1012b44:	213a0704 	addi	r4,r4,-6116
 1012b48:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 1012b4c:	008040b4 	movhi	r2,258
 1012b50:	10ba1904 	addi	r2,r2,-6044
 1012b54:	10800a17 	ldw	r2,40(r2)
 1012b58:	10800017 	ldw	r2,0(r2)
 1012b5c:	1007883a 	mov	r3,r2
 1012b60:	008040b4 	movhi	r2,258
 1012b64:	10ba1904 	addi	r2,r2,-6044
 1012b68:	10c00b15 	stw	r3,44(r2)
 1012b6c:	008040b4 	movhi	r2,258
 1012b70:	10ba1904 	addi	r2,r2,-6044
 1012b74:	10800a17 	ldw	r2,40(r2)
 1012b78:	10800104 	addi	r2,r2,4
 1012b7c:	10800017 	ldw	r2,0(r2)
 1012b80:	1007883a 	mov	r3,r2
 1012b84:	008040b4 	movhi	r2,258
 1012b88:	10ba1904 	addi	r2,r2,-6044
 1012b8c:	10c00c15 	stw	r3,48(r2)
 1012b90:	008040b4 	movhi	r2,258
 1012b94:	10ba1904 	addi	r2,r2,-6044
 1012b98:	10800a17 	ldw	r2,40(r2)
 1012b9c:	10800204 	addi	r2,r2,8
 1012ba0:	10800017 	ldw	r2,0(r2)
 1012ba4:	10ffffcc 	andi	r3,r2,65535
 1012ba8:	008040b4 	movhi	r2,258
 1012bac:	10ba1904 	addi	r2,r2,-6044
 1012bb0:	10c00f15 	stw	r3,60(r2)
 1012bb4:	008040b4 	movhi	r2,258
 1012bb8:	10ba1904 	addi	r2,r2,-6044
 1012bbc:	10800a17 	ldw	r2,40(r2)
 1012bc0:	10800204 	addi	r2,r2,8
 1012bc4:	10800017 	ldw	r2,0(r2)
 1012bc8:	1005d43a 	srai	r2,r2,16
 1012bcc:	10ffffcc 	andi	r3,r2,65535
 1012bd0:	008040b4 	movhi	r2,258
 1012bd4:	10ba1904 	addi	r2,r2,-6044
 1012bd8:	10c01015 	stw	r3,64(r2)
 1012bdc:	008040b4 	movhi	r2,258
 1012be0:	10ba1904 	addi	r2,r2,-6044
 1012be4:	10800a17 	ldw	r2,40(r2)
 1012be8:	10800304 	addi	r2,r2,12
 1012bec:	10800017 	ldw	r2,0(r2)
 1012bf0:	1005d07a 	srai	r2,r2,1
 1012bf4:	10c0004c 	andi	r3,r2,1
 1012bf8:	008040b4 	movhi	r2,258
 1012bfc:	10ba1904 	addi	r2,r2,-6044
 1012c00:	10c00d15 	stw	r3,52(r2)
 1012c04:	008040b4 	movhi	r2,258
 1012c08:	10ba1904 	addi	r2,r2,-6044
 1012c0c:	10800a17 	ldw	r2,40(r2)
 1012c10:	10800304 	addi	r2,r2,12
 1012c14:	10800017 	ldw	r2,0(r2)
 1012c18:	1005d13a 	srai	r2,r2,4
 1012c1c:	10c003cc 	andi	r3,r2,15
 1012c20:	008040b4 	movhi	r2,258
 1012c24:	10ba1904 	addi	r2,r2,-6044
 1012c28:	10c00e15 	stw	r3,56(r2)
 1012c2c:	008040b4 	movhi	r2,258
 1012c30:	10ba1904 	addi	r2,r2,-6044
 1012c34:	10800a17 	ldw	r2,40(r2)
 1012c38:	10800304 	addi	r2,r2,12
 1012c3c:	10800017 	ldw	r2,0(r2)
 1012c40:	1005d43a 	srai	r2,r2,16
 1012c44:	1007883a 	mov	r3,r2
 1012c48:	00bfffc4 	movi	r2,-1
 1012c4c:	1884703a 	and	r2,r3,r2
 1012c50:	e0bfff45 	stb	r2,-3(fp)
 1012c54:	008040b4 	movhi	r2,258
 1012c58:	10ba1904 	addi	r2,r2,-6044
 1012c5c:	10800a17 	ldw	r2,40(r2)
 1012c60:	10800304 	addi	r2,r2,12
 1012c64:	10800017 	ldw	r2,0(r2)
 1012c68:	1005d63a 	srai	r2,r2,24
 1012c6c:	1007883a 	mov	r3,r2
 1012c70:	00bfffc4 	movi	r2,-1
 1012c74:	1884703a 	and	r2,r3,r2
 1012c78:	e0bfff05 	stb	r2,-4(fp)
 1012c7c:	008040b4 	movhi	r2,258
 1012c80:	10ba1904 	addi	r2,r2,-6044
 1012c84:	10800e17 	ldw	r2,56(r2)
 1012c88:	10800058 	cmpnei	r2,r2,1
 1012c8c:	1000041e 	bne	r2,zero,1012ca0 <alt_sys_init+0x2c0>
 1012c90:	008040b4 	movhi	r2,258
 1012c94:	10ba1904 	addi	r2,r2,-6044
 1012c98:	10001115 	stw	zero,68(r2)
 1012c9c:	00000e06 	br	1012cd8 <alt_sys_init+0x2f8>
 1012ca0:	008040b4 	movhi	r2,258
 1012ca4:	10ba1904 	addi	r2,r2,-6044
 1012ca8:	10800e17 	ldw	r2,56(r2)
 1012cac:	10800098 	cmpnei	r2,r2,2
 1012cb0:	1000051e 	bne	r2,zero,1012cc8 <alt_sys_init+0x2e8>
 1012cb4:	00c040b4 	movhi	r3,258
 1012cb8:	18fa1904 	addi	r3,r3,-6044
 1012cbc:	00800044 	movi	r2,1
 1012cc0:	18801115 	stw	r2,68(r3)
 1012cc4:	00000406 	br	1012cd8 <alt_sys_init+0x2f8>
 1012cc8:	00c040b4 	movhi	r3,258
 1012ccc:	18fa1904 	addi	r3,r3,-6044
 1012cd0:	00800084 	movi	r2,2
 1012cd4:	18801115 	stw	r2,68(r3)
 1012cd8:	e0ffff43 	ldbu	r3,-3(fp)
 1012cdc:	00800804 	movi	r2,32
 1012ce0:	10c7c83a 	sub	r3,r2,r3
 1012ce4:	00bfffc4 	movi	r2,-1
 1012ce8:	10c6d83a 	srl	r3,r2,r3
 1012cec:	008040b4 	movhi	r2,258
 1012cf0:	10ba1904 	addi	r2,r2,-6044
 1012cf4:	10c01215 	stw	r3,72(r2)
 1012cf8:	e0ffff43 	ldbu	r3,-3(fp)
 1012cfc:	008040b4 	movhi	r2,258
 1012d00:	10ba1904 	addi	r2,r2,-6044
 1012d04:	10801117 	ldw	r2,68(r2)
 1012d08:	1887883a 	add	r3,r3,r2
 1012d0c:	008040b4 	movhi	r2,258
 1012d10:	10ba1904 	addi	r2,r2,-6044
 1012d14:	10c01315 	stw	r3,76(r2)
 1012d18:	e0ffff03 	ldbu	r3,-4(fp)
 1012d1c:	00800804 	movi	r2,32
 1012d20:	10c7c83a 	sub	r3,r2,r3
 1012d24:	00bfffc4 	movi	r2,-1
 1012d28:	10c6d83a 	srl	r3,r2,r3
 1012d2c:	008040b4 	movhi	r2,258
 1012d30:	10ba1904 	addi	r2,r2,-6044
 1012d34:	10c01415 	stw	r3,80(r2)
 1012d38:	010040b4 	movhi	r4,258
 1012d3c:	213a1904 	addi	r4,r4,-6044
 1012d40:	1012d640 	call	1012d64 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD, sdcard);
 1012d44:	010040b4 	movhi	r4,258
 1012d48:	213a2e04 	addi	r4,r4,-5960
 1012d4c:	1012d640 	call	1012d64 <alt_dev_reg>
}
 1012d50:	e037883a 	mov	sp,fp
 1012d54:	dfc00117 	ldw	ra,4(sp)
 1012d58:	df000017 	ldw	fp,0(sp)
 1012d5c:	dec00204 	addi	sp,sp,8
 1012d60:	f800283a 	ret

01012d64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1012d64:	defffd04 	addi	sp,sp,-12
 1012d68:	dfc00215 	stw	ra,8(sp)
 1012d6c:	df000115 	stw	fp,4(sp)
 1012d70:	df000104 	addi	fp,sp,4
 1012d74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1012d78:	e13fff17 	ldw	r4,-4(fp)
 1012d7c:	014040b4 	movhi	r5,258
 1012d80:	297a4404 	addi	r5,r5,-5872
 1012d84:	101b1c40 	call	101b1c4 <alt_dev_llist_insert>
}
 1012d88:	e037883a 	mov	sp,fp
 1012d8c:	dfc00117 	ldw	ra,4(sp)
 1012d90:	df000017 	ldw	fp,0(sp)
 1012d94:	dec00204 	addi	sp,sp,8
 1012d98:	f800283a 	ret

01012d9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1012d9c:	defffa04 	addi	sp,sp,-24
 1012da0:	dfc00515 	stw	ra,20(sp)
 1012da4:	df000415 	stw	fp,16(sp)
 1012da8:	df000404 	addi	fp,sp,16
 1012dac:	e13ffd15 	stw	r4,-12(fp)
 1012db0:	e17ffe15 	stw	r5,-8(fp)
 1012db4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1012db8:	e0bffd17 	ldw	r2,-12(fp)
 1012dbc:	10800017 	ldw	r2,0(r2)
 1012dc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1012dc4:	e0bffc17 	ldw	r2,-16(fp)
 1012dc8:	11000a04 	addi	r4,r2,40
 1012dcc:	e0bffd17 	ldw	r2,-12(fp)
 1012dd0:	11c00217 	ldw	r7,8(r2)
 1012dd4:	e17ffe17 	ldw	r5,-8(fp)
 1012dd8:	e1bfff17 	ldw	r6,-4(fp)
 1012ddc:	10133e00 	call	10133e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1012de0:	e037883a 	mov	sp,fp
 1012de4:	dfc00117 	ldw	ra,4(sp)
 1012de8:	df000017 	ldw	fp,0(sp)
 1012dec:	dec00204 	addi	sp,sp,8
 1012df0:	f800283a 	ret

01012df4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1012df4:	defffa04 	addi	sp,sp,-24
 1012df8:	dfc00515 	stw	ra,20(sp)
 1012dfc:	df000415 	stw	fp,16(sp)
 1012e00:	df000404 	addi	fp,sp,16
 1012e04:	e13ffd15 	stw	r4,-12(fp)
 1012e08:	e17ffe15 	stw	r5,-8(fp)
 1012e0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1012e10:	e0bffd17 	ldw	r2,-12(fp)
 1012e14:	10800017 	ldw	r2,0(r2)
 1012e18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1012e1c:	e0bffc17 	ldw	r2,-16(fp)
 1012e20:	11000a04 	addi	r4,r2,40
 1012e24:	e0bffd17 	ldw	r2,-12(fp)
 1012e28:	11c00217 	ldw	r7,8(r2)
 1012e2c:	e17ffe17 	ldw	r5,-8(fp)
 1012e30:	e1bfff17 	ldw	r6,-4(fp)
 1012e34:	10136040 	call	1013604 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1012e38:	e037883a 	mov	sp,fp
 1012e3c:	dfc00117 	ldw	ra,4(sp)
 1012e40:	df000017 	ldw	fp,0(sp)
 1012e44:	dec00204 	addi	sp,sp,8
 1012e48:	f800283a 	ret

01012e4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1012e4c:	defffc04 	addi	sp,sp,-16
 1012e50:	dfc00315 	stw	ra,12(sp)
 1012e54:	df000215 	stw	fp,8(sp)
 1012e58:	df000204 	addi	fp,sp,8
 1012e5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1012e60:	e0bfff17 	ldw	r2,-4(fp)
 1012e64:	10800017 	ldw	r2,0(r2)
 1012e68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1012e6c:	e0bffe17 	ldw	r2,-8(fp)
 1012e70:	11000a04 	addi	r4,r2,40
 1012e74:	e0bfff17 	ldw	r2,-4(fp)
 1012e78:	11400217 	ldw	r5,8(r2)
 1012e7c:	10132780 	call	1013278 <altera_avalon_jtag_uart_close>
}
 1012e80:	e037883a 	mov	sp,fp
 1012e84:	dfc00117 	ldw	ra,4(sp)
 1012e88:	df000017 	ldw	fp,0(sp)
 1012e8c:	dec00204 	addi	sp,sp,8
 1012e90:	f800283a 	ret

01012e94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1012e94:	defffa04 	addi	sp,sp,-24
 1012e98:	dfc00515 	stw	ra,20(sp)
 1012e9c:	df000415 	stw	fp,16(sp)
 1012ea0:	df000404 	addi	fp,sp,16
 1012ea4:	e13ffd15 	stw	r4,-12(fp)
 1012ea8:	e17ffe15 	stw	r5,-8(fp)
 1012eac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1012eb0:	e0bffd17 	ldw	r2,-12(fp)
 1012eb4:	10800017 	ldw	r2,0(r2)
 1012eb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1012ebc:	e0bffc17 	ldw	r2,-16(fp)
 1012ec0:	11000a04 	addi	r4,r2,40
 1012ec4:	e17ffe17 	ldw	r5,-8(fp)
 1012ec8:	e1bfff17 	ldw	r6,-4(fp)
 1012ecc:	10132ec0 	call	10132ec <altera_avalon_jtag_uart_ioctl>
}
 1012ed0:	e037883a 	mov	sp,fp
 1012ed4:	dfc00117 	ldw	ra,4(sp)
 1012ed8:	df000017 	ldw	fp,0(sp)
 1012edc:	dec00204 	addi	sp,sp,8
 1012ee0:	f800283a 	ret

01012ee4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1012ee4:	defffb04 	addi	sp,sp,-20
 1012ee8:	dfc00415 	stw	ra,16(sp)
 1012eec:	df000315 	stw	fp,12(sp)
 1012ef0:	df000304 	addi	fp,sp,12
 1012ef4:	e13ffd15 	stw	r4,-12(fp)
 1012ef8:	e17ffe15 	stw	r5,-8(fp)
 1012efc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1012f00:	e0fffd17 	ldw	r3,-12(fp)
 1012f04:	00800044 	movi	r2,1
 1012f08:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1012f0c:	e0bffd17 	ldw	r2,-12(fp)
 1012f10:	10800017 	ldw	r2,0(r2)
 1012f14:	11000104 	addi	r4,r2,4
 1012f18:	e0bffd17 	ldw	r2,-12(fp)
 1012f1c:	10800817 	ldw	r2,32(r2)
 1012f20:	1007883a 	mov	r3,r2
 1012f24:	2005883a 	mov	r2,r4
 1012f28:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1012f2c:	e13fff17 	ldw	r4,-4(fp)
 1012f30:	e17ffd17 	ldw	r5,-12(fp)
 1012f34:	01804074 	movhi	r6,257
 1012f38:	318be704 	addi	r6,r6,12188
 1012f3c:	101b5b40 	call	101b5b4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1012f40:	e0bffd17 	ldw	r2,-12(fp)
 1012f44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1012f48:	e0bffd17 	ldw	r2,-12(fp)
 1012f4c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1012f50:	008040b4 	movhi	r2,258
 1012f54:	10816e04 	addi	r2,r2,1464
 1012f58:	10800017 	ldw	r2,0(r2)
 1012f5c:	100b883a 	mov	r5,r2
 1012f60:	01804074 	movhi	r6,257
 1012f64:	318c7204 	addi	r6,r6,12744
 1012f68:	e1fffd17 	ldw	r7,-12(fp)
 1012f6c:	101190c0 	call	101190c <alt_alarm_start>
 1012f70:	1004403a 	cmpge	r2,r2,zero
 1012f74:	1000041e 	bne	r2,zero,1012f88 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1012f78:	e0fffd17 	ldw	r3,-12(fp)
 1012f7c:	00a00034 	movhi	r2,32768
 1012f80:	10bfffc4 	addi	r2,r2,-1
 1012f84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1012f88:	e037883a 	mov	sp,fp
 1012f8c:	dfc00117 	ldw	ra,4(sp)
 1012f90:	df000017 	ldw	fp,0(sp)
 1012f94:	dec00204 	addi	sp,sp,8
 1012f98:	f800283a 	ret

01012f9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1012f9c:	defff704 	addi	sp,sp,-36
 1012fa0:	df000815 	stw	fp,32(sp)
 1012fa4:	df000804 	addi	fp,sp,32
 1012fa8:	e13ffe15 	stw	r4,-8(fp)
 1012fac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1012fb0:	e0bffe17 	ldw	r2,-8(fp)
 1012fb4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1012fb8:	e0bffd17 	ldw	r2,-12(fp)
 1012fbc:	10800017 	ldw	r2,0(r2)
 1012fc0:	e0bffc15 	stw	r2,-16(fp)
 1012fc4:	00000006 	br	1012fc8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1012fc8:	e0bffc17 	ldw	r2,-16(fp)
 1012fcc:	10800104 	addi	r2,r2,4
 1012fd0:	10800037 	ldwio	r2,0(r2)
 1012fd4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1012fd8:	e0bffb17 	ldw	r2,-20(fp)
 1012fdc:	1080c00c 	andi	r2,r2,768
 1012fe0:	1005003a 	cmpeq	r2,r2,zero
 1012fe4:	1000741e 	bne	r2,zero,10131b8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1012fe8:	e0bffb17 	ldw	r2,-20(fp)
 1012fec:	1080400c 	andi	r2,r2,256
 1012ff0:	1005003a 	cmpeq	r2,r2,zero
 1012ff4:	1000351e 	bne	r2,zero,10130cc <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1012ff8:	00800074 	movhi	r2,1
 1012ffc:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013000:	e0bffd17 	ldw	r2,-12(fp)
 1013004:	10800a17 	ldw	r2,40(r2)
 1013008:	10800044 	addi	r2,r2,1
 101300c:	1081ffcc 	andi	r2,r2,2047
 1013010:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1013014:	e0bffd17 	ldw	r2,-12(fp)
 1013018:	10c00b17 	ldw	r3,44(r2)
 101301c:	e0bff917 	ldw	r2,-28(fp)
 1013020:	18801626 	beq	r3,r2,101307c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1013024:	e0bffc17 	ldw	r2,-16(fp)
 1013028:	10800037 	ldwio	r2,0(r2)
 101302c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1013030:	e0bffa17 	ldw	r2,-24(fp)
 1013034:	10a0000c 	andi	r2,r2,32768
 1013038:	1005003a 	cmpeq	r2,r2,zero
 101303c:	10000f1e 	bne	r2,zero,101307c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1013040:	e0bffd17 	ldw	r2,-12(fp)
 1013044:	10c00a17 	ldw	r3,40(r2)
 1013048:	e0bffa17 	ldw	r2,-24(fp)
 101304c:	1009883a 	mov	r4,r2
 1013050:	e0bffd17 	ldw	r2,-12(fp)
 1013054:	1885883a 	add	r2,r3,r2
 1013058:	10800e04 	addi	r2,r2,56
 101305c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013060:	e0bffd17 	ldw	r2,-12(fp)
 1013064:	10800a17 	ldw	r2,40(r2)
 1013068:	10800044 	addi	r2,r2,1
 101306c:	10c1ffcc 	andi	r3,r2,2047
 1013070:	e0bffd17 	ldw	r2,-12(fp)
 1013074:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1013078:	003fe106 	br	1013000 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101307c:	e0bffa17 	ldw	r2,-24(fp)
 1013080:	10bfffec 	andhi	r2,r2,65535
 1013084:	1005003a 	cmpeq	r2,r2,zero
 1013088:	1000101e 	bne	r2,zero,10130cc <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101308c:	e0bffd17 	ldw	r2,-12(fp)
 1013090:	10c00817 	ldw	r3,32(r2)
 1013094:	00bfff84 	movi	r2,-2
 1013098:	1886703a 	and	r3,r3,r2
 101309c:	e0bffd17 	ldw	r2,-12(fp)
 10130a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10130a4:	e0bffc17 	ldw	r2,-16(fp)
 10130a8:	11000104 	addi	r4,r2,4
 10130ac:	e0bffd17 	ldw	r2,-12(fp)
 10130b0:	10800817 	ldw	r2,32(r2)
 10130b4:	1007883a 	mov	r3,r2
 10130b8:	2005883a 	mov	r2,r4
 10130bc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10130c0:	e0bffc17 	ldw	r2,-16(fp)
 10130c4:	10800104 	addi	r2,r2,4
 10130c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10130cc:	e0bffb17 	ldw	r2,-20(fp)
 10130d0:	1080800c 	andi	r2,r2,512
 10130d4:	1005003a 	cmpeq	r2,r2,zero
 10130d8:	103fbb1e 	bne	r2,zero,1012fc8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10130dc:	e0bffb17 	ldw	r2,-20(fp)
 10130e0:	10bfffec 	andhi	r2,r2,65535
 10130e4:	1004d43a 	srli	r2,r2,16
 10130e8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10130ec:	00001506 	br	1013144 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10130f0:	e13ffc17 	ldw	r4,-16(fp)
 10130f4:	e0bffd17 	ldw	r2,-12(fp)
 10130f8:	10c00d17 	ldw	r3,52(r2)
 10130fc:	e0bffd17 	ldw	r2,-12(fp)
 1013100:	1885883a 	add	r2,r3,r2
 1013104:	10820e04 	addi	r2,r2,2104
 1013108:	10800003 	ldbu	r2,0(r2)
 101310c:	10c03fcc 	andi	r3,r2,255
 1013110:	18c0201c 	xori	r3,r3,128
 1013114:	18ffe004 	addi	r3,r3,-128
 1013118:	2005883a 	mov	r2,r4
 101311c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013120:	e0bffd17 	ldw	r2,-12(fp)
 1013124:	10800d17 	ldw	r2,52(r2)
 1013128:	10800044 	addi	r2,r2,1
 101312c:	10c1ffcc 	andi	r3,r2,2047
 1013130:	e0bffd17 	ldw	r2,-12(fp)
 1013134:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1013138:	e0bff817 	ldw	r2,-32(fp)
 101313c:	10bfffc4 	addi	r2,r2,-1
 1013140:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1013144:	e0bff817 	ldw	r2,-32(fp)
 1013148:	1005003a 	cmpeq	r2,r2,zero
 101314c:	1000051e 	bne	r2,zero,1013164 <altera_avalon_jtag_uart_irq+0x1c8>
 1013150:	e0bffd17 	ldw	r2,-12(fp)
 1013154:	10c00d17 	ldw	r3,52(r2)
 1013158:	e0bffd17 	ldw	r2,-12(fp)
 101315c:	10800c17 	ldw	r2,48(r2)
 1013160:	18bfe31e 	bne	r3,r2,10130f0 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1013164:	e0bff817 	ldw	r2,-32(fp)
 1013168:	1005003a 	cmpeq	r2,r2,zero
 101316c:	103f961e 	bne	r2,zero,1012fc8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1013170:	e0bffd17 	ldw	r2,-12(fp)
 1013174:	10c00817 	ldw	r3,32(r2)
 1013178:	00bfff44 	movi	r2,-3
 101317c:	1886703a 	and	r3,r3,r2
 1013180:	e0bffd17 	ldw	r2,-12(fp)
 1013184:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1013188:	e0bffd17 	ldw	r2,-12(fp)
 101318c:	10800017 	ldw	r2,0(r2)
 1013190:	11000104 	addi	r4,r2,4
 1013194:	e0bffd17 	ldw	r2,-12(fp)
 1013198:	10800817 	ldw	r2,32(r2)
 101319c:	1007883a 	mov	r3,r2
 10131a0:	2005883a 	mov	r2,r4
 10131a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10131a8:	e0bffc17 	ldw	r2,-16(fp)
 10131ac:	10800104 	addi	r2,r2,4
 10131b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10131b4:	003f8406 	br	1012fc8 <altera_avalon_jtag_uart_irq+0x2c>
}
 10131b8:	e037883a 	mov	sp,fp
 10131bc:	df000017 	ldw	fp,0(sp)
 10131c0:	dec00104 	addi	sp,sp,4
 10131c4:	f800283a 	ret

010131c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10131c8:	defffc04 	addi	sp,sp,-16
 10131cc:	df000315 	stw	fp,12(sp)
 10131d0:	df000304 	addi	fp,sp,12
 10131d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10131d8:	e0bfff17 	ldw	r2,-4(fp)
 10131dc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10131e0:	e0bffe17 	ldw	r2,-8(fp)
 10131e4:	10800017 	ldw	r2,0(r2)
 10131e8:	10800104 	addi	r2,r2,4
 10131ec:	10800037 	ldwio	r2,0(r2)
 10131f0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10131f4:	e0bffd17 	ldw	r2,-12(fp)
 10131f8:	1081000c 	andi	r2,r2,1024
 10131fc:	1005003a 	cmpeq	r2,r2,zero
 1013200:	10000c1e 	bne	r2,zero,1013234 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1013204:	e0bffe17 	ldw	r2,-8(fp)
 1013208:	10800017 	ldw	r2,0(r2)
 101320c:	11000104 	addi	r4,r2,4
 1013210:	e0bffe17 	ldw	r2,-8(fp)
 1013214:	10800817 	ldw	r2,32(r2)
 1013218:	10810014 	ori	r2,r2,1024
 101321c:	1007883a 	mov	r3,r2
 1013220:	2005883a 	mov	r2,r4
 1013224:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1013228:	e0bffe17 	ldw	r2,-8(fp)
 101322c:	10000915 	stw	zero,36(r2)
 1013230:	00000a06 	br	101325c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1013234:	e0bffe17 	ldw	r2,-8(fp)
 1013238:	10c00917 	ldw	r3,36(r2)
 101323c:	00a00034 	movhi	r2,32768
 1013240:	10bfff04 	addi	r2,r2,-4
 1013244:	10c00536 	bltu	r2,r3,101325c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1013248:	e0bffe17 	ldw	r2,-8(fp)
 101324c:	10800917 	ldw	r2,36(r2)
 1013250:	10c00044 	addi	r3,r2,1
 1013254:	e0bffe17 	ldw	r2,-8(fp)
 1013258:	10c00915 	stw	r3,36(r2)
 101325c:	008040b4 	movhi	r2,258
 1013260:	10816e04 	addi	r2,r2,1464
 1013264:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1013268:	e037883a 	mov	sp,fp
 101326c:	df000017 	ldw	fp,0(sp)
 1013270:	dec00104 	addi	sp,sp,4
 1013274:	f800283a 	ret

01013278 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1013278:	defffc04 	addi	sp,sp,-16
 101327c:	df000315 	stw	fp,12(sp)
 1013280:	df000304 	addi	fp,sp,12
 1013284:	e13ffd15 	stw	r4,-12(fp)
 1013288:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101328c:	00000706 	br	10132ac <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1013290:	e0bffe17 	ldw	r2,-8(fp)
 1013294:	1090000c 	andi	r2,r2,16384
 1013298:	1005003a 	cmpeq	r2,r2,zero
 101329c:	1000031e 	bne	r2,zero,10132ac <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10132a0:	00bffd44 	movi	r2,-11
 10132a4:	e0bfff15 	stw	r2,-4(fp)
 10132a8:	00000b06 	br	10132d8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10132ac:	e0bffd17 	ldw	r2,-12(fp)
 10132b0:	10c00d17 	ldw	r3,52(r2)
 10132b4:	e0bffd17 	ldw	r2,-12(fp)
 10132b8:	10800c17 	ldw	r2,48(r2)
 10132bc:	18800526 	beq	r3,r2,10132d4 <altera_avalon_jtag_uart_close+0x5c>
 10132c0:	e0bffd17 	ldw	r2,-12(fp)
 10132c4:	10c00917 	ldw	r3,36(r2)
 10132c8:	e0bffd17 	ldw	r2,-12(fp)
 10132cc:	10800117 	ldw	r2,4(r2)
 10132d0:	18bfef36 	bltu	r3,r2,1013290 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10132d4:	e03fff15 	stw	zero,-4(fp)
 10132d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10132dc:	e037883a 	mov	sp,fp
 10132e0:	df000017 	ldw	fp,0(sp)
 10132e4:	dec00104 	addi	sp,sp,4
 10132e8:	f800283a 	ret

010132ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10132ec:	defff804 	addi	sp,sp,-32
 10132f0:	df000715 	stw	fp,28(sp)
 10132f4:	df000704 	addi	fp,sp,28
 10132f8:	e13ffb15 	stw	r4,-20(fp)
 10132fc:	e17ffc15 	stw	r5,-16(fp)
 1013300:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1013304:	00bff9c4 	movi	r2,-25
 1013308:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 101330c:	e0bffc17 	ldw	r2,-16(fp)
 1013310:	e0bfff15 	stw	r2,-4(fp)
 1013314:	e0ffff17 	ldw	r3,-4(fp)
 1013318:	189a8060 	cmpeqi	r2,r3,27137
 101331c:	1000041e 	bne	r2,zero,1013330 <altera_avalon_jtag_uart_ioctl+0x44>
 1013320:	e0ffff17 	ldw	r3,-4(fp)
 1013324:	189a80a0 	cmpeqi	r2,r3,27138
 1013328:	10001b1e 	bne	r2,zero,1013398 <altera_avalon_jtag_uart_ioctl+0xac>
 101332c:	00002706 	br	10133cc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1013330:	e0bffb17 	ldw	r2,-20(fp)
 1013334:	10c00117 	ldw	r3,4(r2)
 1013338:	00a00034 	movhi	r2,32768
 101333c:	10bfffc4 	addi	r2,r2,-1
 1013340:	18802226 	beq	r3,r2,10133cc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1013344:	e0bffd17 	ldw	r2,-12(fp)
 1013348:	10800017 	ldw	r2,0(r2)
 101334c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1013350:	e0bff917 	ldw	r2,-28(fp)
 1013354:	10800090 	cmplti	r2,r2,2
 1013358:	1000071e 	bne	r2,zero,1013378 <altera_avalon_jtag_uart_ioctl+0x8c>
 101335c:	e0fff917 	ldw	r3,-28(fp)
 1013360:	00a00034 	movhi	r2,32768
 1013364:	10bfffc4 	addi	r2,r2,-1
 1013368:	18800326 	beq	r3,r2,1013378 <altera_avalon_jtag_uart_ioctl+0x8c>
 101336c:	e0bff917 	ldw	r2,-28(fp)
 1013370:	e0bffe15 	stw	r2,-8(fp)
 1013374:	00000306 	br	1013384 <altera_avalon_jtag_uart_ioctl+0x98>
 1013378:	00e00034 	movhi	r3,32768
 101337c:	18ffff84 	addi	r3,r3,-2
 1013380:	e0fffe15 	stw	r3,-8(fp)
 1013384:	e0bffb17 	ldw	r2,-20(fp)
 1013388:	e0fffe17 	ldw	r3,-8(fp)
 101338c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1013390:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1013394:	00000d06 	br	10133cc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1013398:	e0bffb17 	ldw	r2,-20(fp)
 101339c:	10c00117 	ldw	r3,4(r2)
 10133a0:	00a00034 	movhi	r2,32768
 10133a4:	10bfffc4 	addi	r2,r2,-1
 10133a8:	18800826 	beq	r3,r2,10133cc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10133ac:	e13ffd17 	ldw	r4,-12(fp)
 10133b0:	e0bffb17 	ldw	r2,-20(fp)
 10133b4:	10c00917 	ldw	r3,36(r2)
 10133b8:	e0bffb17 	ldw	r2,-20(fp)
 10133bc:	10800117 	ldw	r2,4(r2)
 10133c0:	1885803a 	cmpltu	r2,r3,r2
 10133c4:	20800015 	stw	r2,0(r4)
      rc = 0;
 10133c8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10133cc:	e0bffa17 	ldw	r2,-24(fp)
}
 10133d0:	e037883a 	mov	sp,fp
 10133d4:	df000017 	ldw	fp,0(sp)
 10133d8:	dec00104 	addi	sp,sp,4
 10133dc:	f800283a 	ret

010133e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10133e0:	defff204 	addi	sp,sp,-56
 10133e4:	dfc00d15 	stw	ra,52(sp)
 10133e8:	df000c15 	stw	fp,48(sp)
 10133ec:	df000c04 	addi	fp,sp,48
 10133f0:	e13ffb15 	stw	r4,-20(fp)
 10133f4:	e17ffc15 	stw	r5,-16(fp)
 10133f8:	e1bffd15 	stw	r6,-12(fp)
 10133fc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1013400:	e0bffc17 	ldw	r2,-16(fp)
 1013404:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1013408:	00004806 	br	101352c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101340c:	e0bffb17 	ldw	r2,-20(fp)
 1013410:	10800a17 	ldw	r2,40(r2)
 1013414:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1013418:	e0bffb17 	ldw	r2,-20(fp)
 101341c:	10800b17 	ldw	r2,44(r2)
 1013420:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1013424:	e0fff717 	ldw	r3,-36(fp)
 1013428:	e0bff617 	ldw	r2,-40(fp)
 101342c:	18800536 	bltu	r3,r2,1013444 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1013430:	e0bff717 	ldw	r2,-36(fp)
 1013434:	e0fff617 	ldw	r3,-40(fp)
 1013438:	10c5c83a 	sub	r2,r2,r3
 101343c:	e0bff815 	stw	r2,-32(fp)
 1013440:	00000406 	br	1013454 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1013444:	00820004 	movi	r2,2048
 1013448:	e0fff617 	ldw	r3,-40(fp)
 101344c:	10c5c83a 	sub	r2,r2,r3
 1013450:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1013454:	e0bff817 	ldw	r2,-32(fp)
 1013458:	1005003a 	cmpeq	r2,r2,zero
 101345c:	10001f1e 	bne	r2,zero,10134dc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1013460:	e0fffd17 	ldw	r3,-12(fp)
 1013464:	e0bff817 	ldw	r2,-32(fp)
 1013468:	1880022e 	bgeu	r3,r2,1013474 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 101346c:	e0bffd17 	ldw	r2,-12(fp)
 1013470:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1013474:	e0bffb17 	ldw	r2,-20(fp)
 1013478:	10c00e04 	addi	r3,r2,56
 101347c:	e0bff617 	ldw	r2,-40(fp)
 1013480:	1887883a 	add	r3,r3,r2
 1013484:	e0bffa17 	ldw	r2,-24(fp)
 1013488:	1009883a 	mov	r4,r2
 101348c:	180b883a 	mov	r5,r3
 1013490:	e1bff817 	ldw	r6,-32(fp)
 1013494:	10097580 	call	1009758 <memcpy>
      ptr   += n;
 1013498:	e0fff817 	ldw	r3,-32(fp)
 101349c:	e0bffa17 	ldw	r2,-24(fp)
 10134a0:	10c5883a 	add	r2,r2,r3
 10134a4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 10134a8:	e0fffd17 	ldw	r3,-12(fp)
 10134ac:	e0bff817 	ldw	r2,-32(fp)
 10134b0:	1885c83a 	sub	r2,r3,r2
 10134b4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10134b8:	e0fff617 	ldw	r3,-40(fp)
 10134bc:	e0bff817 	ldw	r2,-32(fp)
 10134c0:	1885883a 	add	r2,r3,r2
 10134c4:	10c1ffcc 	andi	r3,r2,2047
 10134c8:	e0bffb17 	ldw	r2,-20(fp)
 10134cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10134d0:	e0bffd17 	ldw	r2,-12(fp)
 10134d4:	10800048 	cmpgei	r2,r2,1
 10134d8:	103fcc1e 	bne	r2,zero,101340c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10134dc:	e0fffa17 	ldw	r3,-24(fp)
 10134e0:	e0bffc17 	ldw	r2,-16(fp)
 10134e4:	1880141e 	bne	r3,r2,1013538 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10134e8:	e0bffe17 	ldw	r2,-8(fp)
 10134ec:	1090000c 	andi	r2,r2,16384
 10134f0:	1004c03a 	cmpne	r2,r2,zero
 10134f4:	1000101e 	bne	r2,zero,1013538 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10134f8:	e0bffb17 	ldw	r2,-20(fp)
 10134fc:	10c00a17 	ldw	r3,40(r2)
 1013500:	e0bff717 	ldw	r2,-36(fp)
 1013504:	1880051e 	bne	r3,r2,101351c <altera_avalon_jtag_uart_read+0x13c>
 1013508:	e0bffb17 	ldw	r2,-20(fp)
 101350c:	10c00917 	ldw	r3,36(r2)
 1013510:	e0bffb17 	ldw	r2,-20(fp)
 1013514:	10800117 	ldw	r2,4(r2)
 1013518:	18bff736 	bltu	r3,r2,10134f8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 101351c:	e0bffb17 	ldw	r2,-20(fp)
 1013520:	10c00a17 	ldw	r3,40(r2)
 1013524:	e0bff717 	ldw	r2,-36(fp)
 1013528:	18800326 	beq	r3,r2,1013538 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101352c:	e0bffd17 	ldw	r2,-12(fp)
 1013530:	10800048 	cmpgei	r2,r2,1
 1013534:	103fb51e 	bne	r2,zero,101340c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1013538:	e0fffa17 	ldw	r3,-24(fp)
 101353c:	e0bffc17 	ldw	r2,-16(fp)
 1013540:	18801926 	beq	r3,r2,10135a8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013544:	0005303a 	rdctl	r2,status
 1013548:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101354c:	e0fff517 	ldw	r3,-44(fp)
 1013550:	00bfff84 	movi	r2,-2
 1013554:	1884703a 	and	r2,r3,r2
 1013558:	1001703a 	wrctl	status,r2
  
  return context;
 101355c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1013560:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1013564:	e0bffb17 	ldw	r2,-20(fp)
 1013568:	10800817 	ldw	r2,32(r2)
 101356c:	10c00054 	ori	r3,r2,1
 1013570:	e0bffb17 	ldw	r2,-20(fp)
 1013574:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1013578:	e0bffb17 	ldw	r2,-20(fp)
 101357c:	10800017 	ldw	r2,0(r2)
 1013580:	11000104 	addi	r4,r2,4
 1013584:	e0bffb17 	ldw	r2,-20(fp)
 1013588:	10800817 	ldw	r2,32(r2)
 101358c:	1007883a 	mov	r3,r2
 1013590:	2005883a 	mov	r2,r4
 1013594:	10c00035 	stwio	r3,0(r2)
 1013598:	e0bff917 	ldw	r2,-28(fp)
 101359c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10135a0:	e0bff417 	ldw	r2,-48(fp)
 10135a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10135a8:	e0fffa17 	ldw	r3,-24(fp)
 10135ac:	e0bffc17 	ldw	r2,-16(fp)
 10135b0:	18800526 	beq	r3,r2,10135c8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10135b4:	e0fffa17 	ldw	r3,-24(fp)
 10135b8:	e0bffc17 	ldw	r2,-16(fp)
 10135bc:	1887c83a 	sub	r3,r3,r2
 10135c0:	e0ffff15 	stw	r3,-4(fp)
 10135c4:	00000906 	br	10135ec <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10135c8:	e0bffe17 	ldw	r2,-8(fp)
 10135cc:	1090000c 	andi	r2,r2,16384
 10135d0:	1005003a 	cmpeq	r2,r2,zero
 10135d4:	1000031e 	bne	r2,zero,10135e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10135d8:	00bffd44 	movi	r2,-11
 10135dc:	e0bfff15 	stw	r2,-4(fp)
 10135e0:	00000206 	br	10135ec <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 10135e4:	00bffec4 	movi	r2,-5
 10135e8:	e0bfff15 	stw	r2,-4(fp)
 10135ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10135f0:	e037883a 	mov	sp,fp
 10135f4:	dfc00117 	ldw	ra,4(sp)
 10135f8:	df000017 	ldw	fp,0(sp)
 10135fc:	dec00204 	addi	sp,sp,8
 1013600:	f800283a 	ret

01013604 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1013604:	defff204 	addi	sp,sp,-56
 1013608:	dfc00d15 	stw	ra,52(sp)
 101360c:	df000c15 	stw	fp,48(sp)
 1013610:	df000c04 	addi	fp,sp,48
 1013614:	e13ffb15 	stw	r4,-20(fp)
 1013618:	e17ffc15 	stw	r5,-16(fp)
 101361c:	e1bffd15 	stw	r6,-12(fp)
 1013620:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1013624:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1013628:	e0bffc17 	ldw	r2,-16(fp)
 101362c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1013630:	00003a06 	br	101371c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1013634:	e0bffb17 	ldw	r2,-20(fp)
 1013638:	10800c17 	ldw	r2,48(r2)
 101363c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1013640:	e0bffb17 	ldw	r2,-20(fp)
 1013644:	10800d17 	ldw	r2,52(r2)
 1013648:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 101364c:	e0fffa17 	ldw	r3,-24(fp)
 1013650:	e0bff917 	ldw	r2,-28(fp)
 1013654:	1880062e 	bgeu	r3,r2,1013670 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1013658:	e0fff917 	ldw	r3,-28(fp)
 101365c:	e0bffa17 	ldw	r2,-24(fp)
 1013660:	1885c83a 	sub	r2,r3,r2
 1013664:	10bfffc4 	addi	r2,r2,-1
 1013668:	e0bff815 	stw	r2,-32(fp)
 101366c:	00000c06 	br	10136a0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1013670:	e0bff917 	ldw	r2,-28(fp)
 1013674:	1005003a 	cmpeq	r2,r2,zero
 1013678:	1000051e 	bne	r2,zero,1013690 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 101367c:	00820004 	movi	r2,2048
 1013680:	e0fffa17 	ldw	r3,-24(fp)
 1013684:	10c5c83a 	sub	r2,r2,r3
 1013688:	e0bff815 	stw	r2,-32(fp)
 101368c:	00000406 	br	10136a0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1013690:	0081ffc4 	movi	r2,2047
 1013694:	e0fffa17 	ldw	r3,-24(fp)
 1013698:	10c5c83a 	sub	r2,r2,r3
 101369c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10136a0:	e0bff817 	ldw	r2,-32(fp)
 10136a4:	1005003a 	cmpeq	r2,r2,zero
 10136a8:	10001f1e 	bne	r2,zero,1013728 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10136ac:	e0fffd17 	ldw	r3,-12(fp)
 10136b0:	e0bff817 	ldw	r2,-32(fp)
 10136b4:	1880022e 	bgeu	r3,r2,10136c0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10136b8:	e0bffd17 	ldw	r2,-12(fp)
 10136bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10136c0:	e0bffb17 	ldw	r2,-20(fp)
 10136c4:	10c20e04 	addi	r3,r2,2104
 10136c8:	e0bffa17 	ldw	r2,-24(fp)
 10136cc:	1885883a 	add	r2,r3,r2
 10136d0:	e0fffc17 	ldw	r3,-16(fp)
 10136d4:	1009883a 	mov	r4,r2
 10136d8:	180b883a 	mov	r5,r3
 10136dc:	e1bff817 	ldw	r6,-32(fp)
 10136e0:	10097580 	call	1009758 <memcpy>
      ptr   += n;
 10136e4:	e0fff817 	ldw	r3,-32(fp)
 10136e8:	e0bffc17 	ldw	r2,-16(fp)
 10136ec:	10c5883a 	add	r2,r2,r3
 10136f0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10136f4:	e0fffd17 	ldw	r3,-12(fp)
 10136f8:	e0bff817 	ldw	r2,-32(fp)
 10136fc:	1885c83a 	sub	r2,r3,r2
 1013700:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013704:	e0fffa17 	ldw	r3,-24(fp)
 1013708:	e0bff817 	ldw	r2,-32(fp)
 101370c:	1885883a 	add	r2,r3,r2
 1013710:	10c1ffcc 	andi	r3,r2,2047
 1013714:	e0bffb17 	ldw	r2,-20(fp)
 1013718:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101371c:	e0bffd17 	ldw	r2,-12(fp)
 1013720:	10800048 	cmpgei	r2,r2,1
 1013724:	103fc31e 	bne	r2,zero,1013634 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013728:	0005303a 	rdctl	r2,status
 101372c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013730:	e0fff517 	ldw	r3,-44(fp)
 1013734:	00bfff84 	movi	r2,-2
 1013738:	1884703a 	and	r2,r3,r2
 101373c:	1001703a 	wrctl	status,r2
  
  return context;
 1013740:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1013744:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1013748:	e0bffb17 	ldw	r2,-20(fp)
 101374c:	10800817 	ldw	r2,32(r2)
 1013750:	10c00094 	ori	r3,r2,2
 1013754:	e0bffb17 	ldw	r2,-20(fp)
 1013758:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101375c:	e0bffb17 	ldw	r2,-20(fp)
 1013760:	10800017 	ldw	r2,0(r2)
 1013764:	11000104 	addi	r4,r2,4
 1013768:	e0bffb17 	ldw	r2,-20(fp)
 101376c:	10800817 	ldw	r2,32(r2)
 1013770:	1007883a 	mov	r3,r2
 1013774:	2005883a 	mov	r2,r4
 1013778:	10c00035 	stwio	r3,0(r2)
 101377c:	e0bff717 	ldw	r2,-36(fp)
 1013780:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013784:	e0bff417 	ldw	r2,-48(fp)
 1013788:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 101378c:	e0bffd17 	ldw	r2,-12(fp)
 1013790:	10800050 	cmplti	r2,r2,1
 1013794:	1000111e 	bne	r2,zero,10137dc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1013798:	e0bffe17 	ldw	r2,-8(fp)
 101379c:	1090000c 	andi	r2,r2,16384
 10137a0:	1004c03a 	cmpne	r2,r2,zero
 10137a4:	1000101e 	bne	r2,zero,10137e8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10137a8:	e0bffb17 	ldw	r2,-20(fp)
 10137ac:	10c00d17 	ldw	r3,52(r2)
 10137b0:	e0bff917 	ldw	r2,-28(fp)
 10137b4:	1880051e 	bne	r3,r2,10137cc <altera_avalon_jtag_uart_write+0x1c8>
 10137b8:	e0bffb17 	ldw	r2,-20(fp)
 10137bc:	10c00917 	ldw	r3,36(r2)
 10137c0:	e0bffb17 	ldw	r2,-20(fp)
 10137c4:	10800117 	ldw	r2,4(r2)
 10137c8:	18bff736 	bltu	r3,r2,10137a8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10137cc:	e0bffb17 	ldw	r2,-20(fp)
 10137d0:	10c00d17 	ldw	r3,52(r2)
 10137d4:	e0bff917 	ldw	r2,-28(fp)
 10137d8:	18800326 	beq	r3,r2,10137e8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 10137dc:	e0bffd17 	ldw	r2,-12(fp)
 10137e0:	10800048 	cmpgei	r2,r2,1
 10137e4:	103fcd1e 	bne	r2,zero,101371c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10137e8:	e0fffc17 	ldw	r3,-16(fp)
 10137ec:	e0bff617 	ldw	r2,-40(fp)
 10137f0:	18800526 	beq	r3,r2,1013808 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 10137f4:	e0fffc17 	ldw	r3,-16(fp)
 10137f8:	e0bff617 	ldw	r2,-40(fp)
 10137fc:	1887c83a 	sub	r3,r3,r2
 1013800:	e0ffff15 	stw	r3,-4(fp)
 1013804:	00000906 	br	101382c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1013808:	e0bffe17 	ldw	r2,-8(fp)
 101380c:	1090000c 	andi	r2,r2,16384
 1013810:	1005003a 	cmpeq	r2,r2,zero
 1013814:	1000031e 	bne	r2,zero,1013824 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1013818:	00bffd44 	movi	r2,-11
 101381c:	e0bfff15 	stw	r2,-4(fp)
 1013820:	00000206 	br	101382c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 1013824:	00bffec4 	movi	r2,-5
 1013828:	e0bfff15 	stw	r2,-4(fp)
 101382c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013830:	e037883a 	mov	sp,fp
 1013834:	dfc00117 	ldw	ra,4(sp)
 1013838:	df000017 	ldw	fp,0(sp)
 101383c:	dec00204 	addi	sp,sp,8
 1013840:	f800283a 	ret

01013844 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1013844:	defff904 	addi	sp,sp,-28
 1013848:	dfc00615 	stw	ra,24(sp)
 101384c:	df000515 	stw	fp,20(sp)
 1013850:	df000504 	addi	fp,sp,20
 1013854:	e13ffe15 	stw	r4,-8(fp)
 1013858:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101385c:	e0bffe17 	ldw	r2,-8(fp)
 1013860:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1013864:	e0bffe17 	ldw	r2,-8(fp)
 1013868:	10800104 	addi	r2,r2,4
 101386c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013870:	0005303a 	rdctl	r2,status
 1013874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013878:	e0fffc17 	ldw	r3,-16(fp)
 101387c:	00bfff84 	movi	r2,-2
 1013880:	1884703a 	and	r2,r3,r2
 1013884:	1001703a 	wrctl	status,r2
  
  return context;
 1013888:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101388c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1013890:	101271c0 	call	101271c <alt_tick>
 1013894:	e0bffd17 	ldw	r2,-12(fp)
 1013898:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101389c:	e0bffb17 	ldw	r2,-20(fp)
 10138a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10138a4:	e037883a 	mov	sp,fp
 10138a8:	dfc00117 	ldw	ra,4(sp)
 10138ac:	df000017 	ldw	fp,0(sp)
 10138b0:	dec00204 	addi	sp,sp,8
 10138b4:	f800283a 	ret

010138b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10138b8:	defff904 	addi	sp,sp,-28
 10138bc:	dfc00615 	stw	ra,24(sp)
 10138c0:	df000515 	stw	fp,20(sp)
 10138c4:	df000504 	addi	fp,sp,20
 10138c8:	e13ffc15 	stw	r4,-16(fp)
 10138cc:	e17ffd15 	stw	r5,-12(fp)
 10138d0:	e1bffe15 	stw	r6,-8(fp)
 10138d4:	e1ffff15 	stw	r7,-4(fp)
 10138d8:	e0bfff17 	ldw	r2,-4(fp)
 10138dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10138e0:	008040b4 	movhi	r2,258
 10138e4:	10816e04 	addi	r2,r2,1464
 10138e8:	10800017 	ldw	r2,0(r2)
 10138ec:	1004c03a 	cmpne	r2,r2,zero
 10138f0:	1000041e 	bne	r2,zero,1013904 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 10138f4:	00c040b4 	movhi	r3,258
 10138f8:	18c16e04 	addi	r3,r3,1464
 10138fc:	e0bffb17 	ldw	r2,-20(fp)
 1013900:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1013904:	e0bffc17 	ldw	r2,-16(fp)
 1013908:	10800104 	addi	r2,r2,4
 101390c:	1007883a 	mov	r3,r2
 1013910:	008001c4 	movi	r2,7
 1013914:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1013918:	e13ffe17 	ldw	r4,-8(fp)
 101391c:	e17ffc17 	ldw	r5,-16(fp)
 1013920:	01804074 	movhi	r6,257
 1013924:	318e1104 	addi	r6,r6,14404
 1013928:	101b5b40 	call	101b5b4 <alt_irq_register>
#endif  
}
 101392c:	e037883a 	mov	sp,fp
 1013930:	dfc00117 	ldw	ra,4(sp)
 1013934:	df000017 	ldw	fp,0(sp)
 1013938:	dec00204 	addi	sp,sp,8
 101393c:	f800283a 	ret

01013940 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 1013940:	defffd04 	addi	sp,sp,-12
 1013944:	df000215 	stw	fp,8(sp)
 1013948:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 101394c:	008040b4 	movhi	r2,258
 1013950:	10817004 	addi	r2,r2,1472
 1013954:	10800017 	ldw	r2,0(r2)
 1013958:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 101395c:	008040b4 	movhi	r2,258
 1013960:	10817104 	addi	r2,r2,1476
 1013964:	10800017 	ldw	r2,0(r2)
 1013968:	1004c03a 	cmpne	r2,r2,zero
 101396c:	1000031e 	bne	r2,zero,101397c <alt_timestamp_start+0x3c>
  {
    return -1;
 1013970:	00bfffc4 	movi	r2,-1
 1013974:	e0bfff15 	stw	r2,-4(fp)
 1013978:	00001506 	br	10139d0 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 101397c:	e0bffe17 	ldw	r2,-8(fp)
 1013980:	10800104 	addi	r2,r2,4
 1013984:	1007883a 	mov	r3,r2
 1013988:	00800204 	movi	r2,8
 101398c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 1013990:	e0bffe17 	ldw	r2,-8(fp)
 1013994:	10800204 	addi	r2,r2,8
 1013998:	1007883a 	mov	r3,r2
 101399c:	00bfffd4 	movui	r2,65535
 10139a0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 10139a4:	e0bffe17 	ldw	r2,-8(fp)
 10139a8:	10800304 	addi	r2,r2,12
 10139ac:	1007883a 	mov	r3,r2
 10139b0:	00bfffd4 	movui	r2,65535
 10139b4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 10139b8:	e0bffe17 	ldw	r2,-8(fp)
 10139bc:	10800104 	addi	r2,r2,4
 10139c0:	1007883a 	mov	r3,r2
 10139c4:	00800104 	movi	r2,4
 10139c8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 10139cc:	e03fff15 	stw	zero,-4(fp)
 10139d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10139d4:	e037883a 	mov	sp,fp
 10139d8:	df000017 	ldw	fp,0(sp)
 10139dc:	dec00104 	addi	sp,sp,4
 10139e0:	f800283a 	ret

010139e4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 10139e4:	defffb04 	addi	sp,sp,-20
 10139e8:	df000415 	stw	fp,16(sp)
 10139ec:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 10139f0:	008040b4 	movhi	r2,258
 10139f4:	10817004 	addi	r2,r2,1472
 10139f8:	10800017 	ldw	r2,0(r2)
 10139fc:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 1013a00:	008040b4 	movhi	r2,258
 1013a04:	10817104 	addi	r2,r2,1476
 1013a08:	10800017 	ldw	r2,0(r2)
 1013a0c:	1004c03a 	cmpne	r2,r2,zero
 1013a10:	1000031e 	bne	r2,zero,1013a20 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 1013a14:	00bfffc4 	movi	r2,-1
 1013a18:	e0bfff15 	stw	r2,-4(fp)
 1013a1c:	00001306 	br	1013a6c <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 1013a20:	e0bffe17 	ldw	r2,-8(fp)
 1013a24:	10800404 	addi	r2,r2,16
 1013a28:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 1013a2c:	e0bffe17 	ldw	r2,-8(fp)
 1013a30:	10800404 	addi	r2,r2,16
 1013a34:	10800037 	ldwio	r2,0(r2)
 1013a38:	10bfffcc 	andi	r2,r2,65535
 1013a3c:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 1013a40:	e0bffe17 	ldw	r2,-8(fp)
 1013a44:	10800504 	addi	r2,r2,20
 1013a48:	10800037 	ldwio	r2,0(r2)
 1013a4c:	10bfffcc 	andi	r2,r2,65535
 1013a50:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 1013a54:	e0bffc17 	ldw	r2,-16(fp)
 1013a58:	1006943a 	slli	r3,r2,16
 1013a5c:	e0bffd17 	ldw	r2,-12(fp)
 1013a60:	1884b03a 	or	r2,r3,r2
 1013a64:	0084303a 	nor	r2,zero,r2
 1013a68:	e0bfff15 	stw	r2,-4(fp)
 1013a6c:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 1013a70:	e037883a 	mov	sp,fp
 1013a74:	df000017 	ldw	fp,0(sp)
 1013a78:	dec00104 	addi	sp,sp,4
 1013a7c:	f800283a 	ret

01013a80 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 1013a80:	deffff04 	addi	sp,sp,-4
 1013a84:	df000015 	stw	fp,0(sp)
 1013a88:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 1013a8c:	008040b4 	movhi	r2,258
 1013a90:	10817104 	addi	r2,r2,1476
 1013a94:	10800017 	ldw	r2,0(r2)
}
 1013a98:	e037883a 	mov	sp,fp
 1013a9c:	df000017 	ldw	fp,0(sp)
 1013aa0:	dec00104 	addi	sp,sp,4
 1013aa4:	f800283a 	ret

01013aa8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 1013aa8:	defffc04 	addi	sp,sp,-16
 1013aac:	dfc00315 	stw	ra,12(sp)
 1013ab0:	df000215 	stw	fp,8(sp)
 1013ab4:	df000204 	addi	fp,sp,8
 1013ab8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 1013abc:	e13fff17 	ldw	r4,-4(fp)
 1013ac0:	014040b4 	movhi	r5,258
 1013ac4:	297a4404 	addi	r5,r5,-5872
 1013ac8:	101b3a00 	call	101b3a0 <alt_find_dev>
 1013acc:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 1013ad0:	e0bffe17 	ldw	r2,-8(fp)
}
 1013ad4:	e037883a 	mov	sp,fp
 1013ad8:	dfc00117 	ldw	ra,4(sp)
 1013adc:	df000017 	ldw	fp,0(sp)
 1013ae0:	dec00204 	addi	sp,sp,8
 1013ae4:	f800283a 	ret

01013ae8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 1013ae8:	defffd04 	addi	sp,sp,-12
 1013aec:	df000215 	stw	fp,8(sp)
 1013af0:	df000204 	addi	fp,sp,8
 1013af4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013af8:	e0bfff17 	ldw	r2,-4(fp)
 1013afc:	10800a17 	ldw	r2,40(r2)
 1013b00:	10800037 	ldwio	r2,0(r2)
 1013b04:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 1013b08:	e0bffe17 	ldw	r2,-8(fp)
 1013b0c:	10800054 	ori	r2,r2,1
 1013b10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013b14:	e0bfff17 	ldw	r2,-4(fp)
 1013b18:	10800a17 	ldw	r2,40(r2)
 1013b1c:	e0fffe17 	ldw	r3,-8(fp)
 1013b20:	10c00035 	stwio	r3,0(r2)
}
 1013b24:	e037883a 	mov	sp,fp
 1013b28:	df000017 	ldw	fp,0(sp)
 1013b2c:	dec00104 	addi	sp,sp,4
 1013b30:	f800283a 	ret

01013b34 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 1013b34:	defffd04 	addi	sp,sp,-12
 1013b38:	df000215 	stw	fp,8(sp)
 1013b3c:	df000204 	addi	fp,sp,8
 1013b40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013b44:	e0bfff17 	ldw	r2,-4(fp)
 1013b48:	10800a17 	ldw	r2,40(r2)
 1013b4c:	10800037 	ldwio	r2,0(r2)
 1013b50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 1013b54:	e0fffe17 	ldw	r3,-8(fp)
 1013b58:	00bfff84 	movi	r2,-2
 1013b5c:	1884703a 	and	r2,r3,r2
 1013b60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013b64:	e0bfff17 	ldw	r2,-4(fp)
 1013b68:	10800a17 	ldw	r2,40(r2)
 1013b6c:	e0fffe17 	ldw	r3,-8(fp)
 1013b70:	10c00035 	stwio	r3,0(r2)
}
 1013b74:	e037883a 	mov	sp,fp
 1013b78:	df000017 	ldw	fp,0(sp)
 1013b7c:	dec00104 	addi	sp,sp,4
 1013b80:	f800283a 	ret

01013b84 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 1013b84:	defffd04 	addi	sp,sp,-12
 1013b88:	df000215 	stw	fp,8(sp)
 1013b8c:	df000204 	addi	fp,sp,8
 1013b90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013b94:	e0bfff17 	ldw	r2,-4(fp)
 1013b98:	10800a17 	ldw	r2,40(r2)
 1013b9c:	10800037 	ldwio	r2,0(r2)
 1013ba0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 1013ba4:	e0bffe17 	ldw	r2,-8(fp)
 1013ba8:	10800094 	ori	r2,r2,2
 1013bac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013bb0:	e0bfff17 	ldw	r2,-4(fp)
 1013bb4:	10800a17 	ldw	r2,40(r2)
 1013bb8:	e0fffe17 	ldw	r3,-8(fp)
 1013bbc:	10c00035 	stwio	r3,0(r2)
}
 1013bc0:	e037883a 	mov	sp,fp
 1013bc4:	df000017 	ldw	fp,0(sp)
 1013bc8:	dec00104 	addi	sp,sp,4
 1013bcc:	f800283a 	ret

01013bd0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 1013bd0:	defffd04 	addi	sp,sp,-12
 1013bd4:	df000215 	stw	fp,8(sp)
 1013bd8:	df000204 	addi	fp,sp,8
 1013bdc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013be0:	e0bfff17 	ldw	r2,-4(fp)
 1013be4:	10800a17 	ldw	r2,40(r2)
 1013be8:	10800037 	ldwio	r2,0(r2)
 1013bec:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 1013bf0:	e0fffe17 	ldw	r3,-8(fp)
 1013bf4:	00bfff44 	movi	r2,-3
 1013bf8:	1884703a 	and	r2,r3,r2
 1013bfc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013c00:	e0bfff17 	ldw	r2,-4(fp)
 1013c04:	10800a17 	ldw	r2,40(r2)
 1013c08:	e0fffe17 	ldw	r3,-8(fp)
 1013c0c:	10c00035 	stwio	r3,0(r2)
}
 1013c10:	e037883a 	mov	sp,fp
 1013c14:	df000017 	ldw	fp,0(sp)
 1013c18:	dec00104 	addi	sp,sp,4
 1013c1c:	f800283a 	ret

01013c20 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 1013c20:	defffd04 	addi	sp,sp,-12
 1013c24:	df000215 	stw	fp,8(sp)
 1013c28:	df000204 	addi	fp,sp,8
 1013c2c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013c30:	e0bfff17 	ldw	r2,-4(fp)
 1013c34:	10800a17 	ldw	r2,40(r2)
 1013c38:	10800037 	ldwio	r2,0(r2)
 1013c3c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 1013c40:	e0bffe17 	ldw	r2,-8(fp)
 1013c44:	1080400c 	andi	r2,r2,256
 1013c48:	1004c03a 	cmpne	r2,r2,zero
}
 1013c4c:	e037883a 	mov	sp,fp
 1013c50:	df000017 	ldw	fp,0(sp)
 1013c54:	dec00104 	addi	sp,sp,4
 1013c58:	f800283a 	ret

01013c5c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 1013c5c:	defffd04 	addi	sp,sp,-12
 1013c60:	df000215 	stw	fp,8(sp)
 1013c64:	df000204 	addi	fp,sp,8
 1013c68:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013c6c:	e0bfff17 	ldw	r2,-4(fp)
 1013c70:	10800a17 	ldw	r2,40(r2)
 1013c74:	10800037 	ldwio	r2,0(r2)
 1013c78:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 1013c7c:	e0bffe17 	ldw	r2,-8(fp)
 1013c80:	1080800c 	andi	r2,r2,512
 1013c84:	1004c03a 	cmpne	r2,r2,zero
}
 1013c88:	e037883a 	mov	sp,fp
 1013c8c:	df000017 	ldw	fp,0(sp)
 1013c90:	dec00104 	addi	sp,sp,4
 1013c94:	f800283a 	ret

01013c98 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 1013c98:	defffd04 	addi	sp,sp,-12
 1013c9c:	df000215 	stw	fp,8(sp)
 1013ca0:	df000204 	addi	fp,sp,8
 1013ca4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 1013ca8:	e0bfff17 	ldw	r2,-4(fp)
 1013cac:	10800a17 	ldw	r2,40(r2)
 1013cb0:	10800037 	ldwio	r2,0(r2)
 1013cb4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 1013cb8:	e0bffe17 	ldw	r2,-8(fp)
 1013cbc:	10800114 	ori	r2,r2,4
 1013cc0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 1013cc4:	e0bffe17 	ldw	r2,-8(fp)
 1013cc8:	10800214 	ori	r2,r2,8
 1013ccc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013cd0:	e0bfff17 	ldw	r2,-4(fp)
 1013cd4:	10800a17 	ldw	r2,40(r2)
 1013cd8:	e0fffe17 	ldw	r3,-8(fp)
 1013cdc:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 1013ce0:	e0fffe17 	ldw	r3,-8(fp)
 1013ce4:	00bffec4 	movi	r2,-5
 1013ce8:	1884703a 	and	r2,r3,r2
 1013cec:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 1013cf0:	e0fffe17 	ldw	r3,-8(fp)
 1013cf4:	00bffdc4 	movi	r2,-9
 1013cf8:	1884703a 	and	r2,r3,r2
 1013cfc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 1013d00:	e0bfff17 	ldw	r2,-4(fp)
 1013d04:	10800a17 	ldw	r2,40(r2)
 1013d08:	e0fffe17 	ldw	r3,-8(fp)
 1013d0c:	10c00035 	stwio	r3,0(r2)
}
 1013d10:	e037883a 	mov	sp,fp
 1013d14:	df000017 	ldw	fp,0(sp)
 1013d18:	dec00104 	addi	sp,sp,4
 1013d1c:	f800283a 	ret

01013d20 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 1013d20:	defffb04 	addi	sp,sp,-20
 1013d24:	df000415 	stw	fp,16(sp)
 1013d28:	df000404 	addi	fp,sp,16
 1013d2c:	e13ffd15 	stw	r4,-12(fp)
 1013d30:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 1013d34:	e0bffd17 	ldw	r2,-12(fp)
 1013d38:	10800a17 	ldw	r2,40(r2)
 1013d3c:	10800104 	addi	r2,r2,4
 1013d40:	10800037 	ldwio	r2,0(r2)
 1013d44:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 1013d48:	e0bffe17 	ldw	r2,-8(fp)
 1013d4c:	1004c03a 	cmpne	r2,r2,zero
 1013d50:	1000051e 	bne	r2,zero,1013d68 <alt_up_audio_read_fifo_avail+0x48>
 1013d54:	e0bffc17 	ldw	r2,-16(fp)
 1013d58:	10bfc00c 	andi	r2,r2,65280
 1013d5c:	1004d23a 	srli	r2,r2,8
 1013d60:	e0bfff15 	stw	r2,-4(fp)
 1013d64:	00000306 	br	1013d74 <alt_up_audio_read_fifo_avail+0x54>
 1013d68:	e0bffc17 	ldw	r2,-16(fp)
 1013d6c:	10803fcc 	andi	r2,r2,255
 1013d70:	e0bfff15 	stw	r2,-4(fp)
 1013d74:	e0bfff17 	ldw	r2,-4(fp)
 1013d78:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 1013d7c:	e0bffc17 	ldw	r2,-16(fp)
}
 1013d80:	e037883a 	mov	sp,fp
 1013d84:	df000017 	ldw	fp,0(sp)
 1013d88:	dec00104 	addi	sp,sp,4
 1013d8c:	f800283a 	ret

01013d90 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 1013d90:	defff904 	addi	sp,sp,-28
 1013d94:	dfc00615 	stw	ra,24(sp)
 1013d98:	df000515 	stw	fp,20(sp)
 1013d9c:	df000504 	addi	fp,sp,20
 1013da0:	e13ffc15 	stw	r4,-16(fp)
 1013da4:	e17ffd15 	stw	r5,-12(fp)
 1013da8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 1013dac:	e13ffc17 	ldw	r4,-16(fp)
 1013db0:	01400044 	movi	r5,1
 1013db4:	1013d200 	call	1013d20 <alt_up_audio_read_fifo_avail>
 1013db8:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
 1013dbc:	e0bffb17 	ldw	r2,-20(fp)
 1013dc0:	10801868 	cmpgeui	r2,r2,97
 1013dc4:	1000021e 	bne	r2,zero,1013dd0 <alt_up_audio_record_r+0x40>
		return 0;
 1013dc8:	e03fff15 	stw	zero,-4(fp)
 1013dcc:	00000606 	br	1013de8 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 1013dd0:	e13ffc17 	ldw	r4,-16(fp)
 1013dd4:	e17ffd17 	ldw	r5,-12(fp)
 1013dd8:	e1bffe17 	ldw	r6,-8(fp)
 1013ddc:	01c00044 	movi	r7,1
 1013de0:	1013fc40 	call	1013fc4 <alt_up_audio_read_fifo>
 1013de4:	e0bfff15 	stw	r2,-4(fp)
 1013de8:	e0bfff17 	ldw	r2,-4(fp)
}
 1013dec:	e037883a 	mov	sp,fp
 1013df0:	dfc00117 	ldw	ra,4(sp)
 1013df4:	df000017 	ldw	fp,0(sp)
 1013df8:	dec00204 	addi	sp,sp,8
 1013dfc:	f800283a 	ret

01013e00 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 1013e00:	defff904 	addi	sp,sp,-28
 1013e04:	dfc00615 	stw	ra,24(sp)
 1013e08:	df000515 	stw	fp,20(sp)
 1013e0c:	df000504 	addi	fp,sp,20
 1013e10:	e13ffc15 	stw	r4,-16(fp)
 1013e14:	e17ffd15 	stw	r5,-12(fp)
 1013e18:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 1013e1c:	e13ffc17 	ldw	r4,-16(fp)
 1013e20:	000b883a 	mov	r5,zero
 1013e24:	1013d200 	call	1013d20 <alt_up_audio_read_fifo_avail>
 1013e28:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
 1013e2c:	e0bffb17 	ldw	r2,-20(fp)
 1013e30:	10801868 	cmpgeui	r2,r2,97
 1013e34:	1000021e 	bne	r2,zero,1013e40 <alt_up_audio_record_l+0x40>
		return 0;
 1013e38:	e03fff15 	stw	zero,-4(fp)
 1013e3c:	00000606 	br	1013e58 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 1013e40:	e13ffc17 	ldw	r4,-16(fp)
 1013e44:	e17ffd17 	ldw	r5,-12(fp)
 1013e48:	e1bffe17 	ldw	r6,-8(fp)
 1013e4c:	000f883a 	mov	r7,zero
 1013e50:	1013fc40 	call	1013fc4 <alt_up_audio_read_fifo>
 1013e54:	e0bfff15 	stw	r2,-4(fp)
 1013e58:	e0bfff17 	ldw	r2,-4(fp)
}
 1013e5c:	e037883a 	mov	sp,fp
 1013e60:	dfc00117 	ldw	ra,4(sp)
 1013e64:	df000017 	ldw	fp,0(sp)
 1013e68:	dec00204 	addi	sp,sp,8
 1013e6c:	f800283a 	ret

01013e70 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 1013e70:	defffb04 	addi	sp,sp,-20
 1013e74:	df000415 	stw	fp,16(sp)
 1013e78:	df000404 	addi	fp,sp,16
 1013e7c:	e13ffd15 	stw	r4,-12(fp)
 1013e80:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 1013e84:	e0bffd17 	ldw	r2,-12(fp)
 1013e88:	10800a17 	ldw	r2,40(r2)
 1013e8c:	10800104 	addi	r2,r2,4
 1013e90:	10800037 	ldwio	r2,0(r2)
 1013e94:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 1013e98:	e0bffe17 	ldw	r2,-8(fp)
 1013e9c:	1004c03a 	cmpne	r2,r2,zero
 1013ea0:	1000051e 	bne	r2,zero,1013eb8 <alt_up_audio_write_fifo_space+0x48>
 1013ea4:	e0bffc17 	ldw	r2,-16(fp)
 1013ea8:	10bfc02c 	andhi	r2,r2,65280
 1013eac:	1004d63a 	srli	r2,r2,24
 1013eb0:	e0bfff15 	stw	r2,-4(fp)
 1013eb4:	00000406 	br	1013ec8 <alt_up_audio_write_fifo_space+0x58>
 1013eb8:	e0bffc17 	ldw	r2,-16(fp)
 1013ebc:	10803fec 	andhi	r2,r2,255
 1013ec0:	1004d43a 	srli	r2,r2,16
 1013ec4:	e0bfff15 	stw	r2,-4(fp)
 1013ec8:	e0bfff17 	ldw	r2,-4(fp)
 1013ecc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 1013ed0:	e0bffc17 	ldw	r2,-16(fp)
}
 1013ed4:	e037883a 	mov	sp,fp
 1013ed8:	df000017 	ldw	fp,0(sp)
 1013edc:	dec00104 	addi	sp,sp,4
 1013ee0:	f800283a 	ret

01013ee4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 1013ee4:	defff904 	addi	sp,sp,-28
 1013ee8:	dfc00615 	stw	ra,24(sp)
 1013eec:	df000515 	stw	fp,20(sp)
 1013ef0:	df000504 	addi	fp,sp,20
 1013ef4:	e13ffc15 	stw	r4,-16(fp)
 1013ef8:	e17ffd15 	stw	r5,-12(fp)
 1013efc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 1013f00:	e13ffc17 	ldw	r4,-16(fp)
 1013f04:	01400044 	movi	r5,1
 1013f08:	1013e700 	call	1013e70 <alt_up_audio_write_fifo_space>
 1013f0c:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
 1013f10:	e0bffb17 	ldw	r2,-20(fp)
 1013f14:	10801868 	cmpgeui	r2,r2,97
 1013f18:	1000021e 	bne	r2,zero,1013f24 <alt_up_audio_play_r+0x40>
		return 0;
 1013f1c:	e03fff15 	stw	zero,-4(fp)
 1013f20:	00000606 	br	1013f3c <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 1013f24:	e13ffc17 	ldw	r4,-16(fp)
 1013f28:	e17ffd17 	ldw	r5,-12(fp)
 1013f2c:	e1bffe17 	ldw	r6,-8(fp)
 1013f30:	01c00044 	movi	r7,1
 1013f34:	10140c80 	call	10140c8 <alt_up_audio_write_fifo>
 1013f38:	e0bfff15 	stw	r2,-4(fp)
 1013f3c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013f40:	e037883a 	mov	sp,fp
 1013f44:	dfc00117 	ldw	ra,4(sp)
 1013f48:	df000017 	ldw	fp,0(sp)
 1013f4c:	dec00204 	addi	sp,sp,8
 1013f50:	f800283a 	ret

01013f54 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 1013f54:	defff904 	addi	sp,sp,-28
 1013f58:	dfc00615 	stw	ra,24(sp)
 1013f5c:	df000515 	stw	fp,20(sp)
 1013f60:	df000504 	addi	fp,sp,20
 1013f64:	e13ffc15 	stw	r4,-16(fp)
 1013f68:	e17ffd15 	stw	r5,-12(fp)
 1013f6c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 1013f70:	e13ffc17 	ldw	r4,-16(fp)
 1013f74:	000b883a 	mov	r5,zero
 1013f78:	1013e700 	call	1013e70 <alt_up_audio_write_fifo_space>
 1013f7c:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
 1013f80:	e0bffb17 	ldw	r2,-20(fp)
 1013f84:	10801868 	cmpgeui	r2,r2,97
 1013f88:	1000021e 	bne	r2,zero,1013f94 <alt_up_audio_play_l+0x40>
		return 0;
 1013f8c:	e03fff15 	stw	zero,-4(fp)
 1013f90:	00000606 	br	1013fac <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 1013f94:	e13ffc17 	ldw	r4,-16(fp)
 1013f98:	e17ffd17 	ldw	r5,-12(fp)
 1013f9c:	e1bffe17 	ldw	r6,-8(fp)
 1013fa0:	000f883a 	mov	r7,zero
 1013fa4:	10140c80 	call	10140c8 <alt_up_audio_write_fifo>
 1013fa8:	e0bfff15 	stw	r2,-4(fp)
 1013fac:	e0bfff17 	ldw	r2,-4(fp)
}
 1013fb0:	e037883a 	mov	sp,fp
 1013fb4:	dfc00117 	ldw	ra,4(sp)
 1013fb8:	df000017 	ldw	fp,0(sp)
 1013fbc:	dec00204 	addi	sp,sp,8
 1013fc0:	f800283a 	ret

01013fc4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 1013fc4:	defff604 	addi	sp,sp,-40
 1013fc8:	df000915 	stw	fp,36(sp)
 1013fcc:	df000904 	addi	fp,sp,36
 1013fd0:	e13ff915 	stw	r4,-28(fp)
 1013fd4:	e17ffa15 	stw	r5,-24(fp)
 1013fd8:	e1bffb15 	stw	r6,-20(fp)
 1013fdc:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
 1013fe0:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
 1013fe4:	00003006 	br	10140a8 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 1013fe8:	e0bff917 	ldw	r2,-28(fp)
 1013fec:	10800a17 	ldw	r2,40(r2)
 1013ff0:	10800104 	addi	r2,r2,4
 1013ff4:	10800037 	ldwio	r2,0(r2)
 1013ff8:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 1013ffc:	e0bffc17 	ldw	r2,-16(fp)
 1014000:	1004c03a 	cmpne	r2,r2,zero
 1014004:	1000051e 	bne	r2,zero,101401c <alt_up_audio_read_fifo+0x58>
 1014008:	e0bff817 	ldw	r2,-32(fp)
 101400c:	10bfc00c 	andi	r2,r2,65280
 1014010:	1004d23a 	srli	r2,r2,8
 1014014:	e0bfff15 	stw	r2,-4(fp)
 1014018:	00000306 	br	1014028 <alt_up_audio_read_fifo+0x64>
 101401c:	e0bff817 	ldw	r2,-32(fp)
 1014020:	10803fcc 	andi	r2,r2,255
 1014024:	e0bfff15 	stw	r2,-4(fp)
 1014028:	e0bfff17 	ldw	r2,-4(fp)
 101402c:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 1014030:	e0bff817 	ldw	r2,-32(fp)
 1014034:	1005003a 	cmpeq	r2,r2,zero
 1014038:	10001e1e 	bne	r2,zero,10140b4 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 101403c:	e0bff717 	ldw	r2,-36(fp)
 1014040:	1085883a 	add	r2,r2,r2
 1014044:	1085883a 	add	r2,r2,r2
 1014048:	1007883a 	mov	r3,r2
 101404c:	e0bffa17 	ldw	r2,-24(fp)
 1014050:	1887883a 	add	r3,r3,r2
 1014054:	e0fffe15 	stw	r3,-8(fp)
 1014058:	e0bffc17 	ldw	r2,-16(fp)
 101405c:	1004c03a 	cmpne	r2,r2,zero
 1014060:	1000061e 	bne	r2,zero,101407c <alt_up_audio_read_fifo+0xb8>
 1014064:	e0bff917 	ldw	r2,-28(fp)
 1014068:	10800a17 	ldw	r2,40(r2)
 101406c:	10800204 	addi	r2,r2,8
 1014070:	10800037 	ldwio	r2,0(r2)
 1014074:	e0bffd15 	stw	r2,-12(fp)
 1014078:	00000506 	br	1014090 <alt_up_audio_read_fifo+0xcc>
 101407c:	e0bff917 	ldw	r2,-28(fp)
 1014080:	10800a17 	ldw	r2,40(r2)
 1014084:	10800304 	addi	r2,r2,12
 1014088:	10800037 	ldwio	r2,0(r2)
 101408c:	e0bffd15 	stw	r2,-12(fp)
 1014090:	e0fffd17 	ldw	r3,-12(fp)
 1014094:	e0bffe17 	ldw	r2,-8(fp)
 1014098:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 101409c:	e0bff717 	ldw	r2,-36(fp)
 10140a0:	10800044 	addi	r2,r2,1
 10140a4:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 10140a8:	e0fff717 	ldw	r3,-36(fp)
 10140ac:	e0bffb17 	ldw	r2,-20(fp)
 10140b0:	18bfcd16 	blt	r3,r2,1013fe8 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
 10140b4:	e0bff717 	ldw	r2,-36(fp)
}
 10140b8:	e037883a 	mov	sp,fp
 10140bc:	df000017 	ldw	fp,0(sp)
 10140c0:	dec00104 	addi	sp,sp,4
 10140c4:	f800283a 	ret

010140c8 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 10140c8:	defff804 	addi	sp,sp,-32
 10140cc:	df000715 	stw	fp,28(sp)
 10140d0:	df000704 	addi	fp,sp,28
 10140d4:	e13ffb15 	stw	r4,-20(fp)
 10140d8:	e17ffc15 	stw	r5,-16(fp)
 10140dc:	e1bffd15 	stw	r6,-12(fp)
 10140e0:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
 10140e4:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
 10140e8:	00003a06 	br	10141d4 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 10140ec:	e0bffb17 	ldw	r2,-20(fp)
 10140f0:	10800a17 	ldw	r2,40(r2)
 10140f4:	10800104 	addi	r2,r2,4
 10140f8:	10800037 	ldwio	r2,0(r2)
 10140fc:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 1014100:	e0bffe17 	ldw	r2,-8(fp)
 1014104:	1004c03a 	cmpne	r2,r2,zero
 1014108:	1000051e 	bne	r2,zero,1014120 <alt_up_audio_write_fifo+0x58>
 101410c:	e0bffa17 	ldw	r2,-24(fp)
 1014110:	10bfc02c 	andhi	r2,r2,65280
 1014114:	1004d63a 	srli	r2,r2,24
 1014118:	e0bfff15 	stw	r2,-4(fp)
 101411c:	00000406 	br	1014130 <alt_up_audio_write_fifo+0x68>
 1014120:	e0bffa17 	ldw	r2,-24(fp)
 1014124:	10803fec 	andhi	r2,r2,255
 1014128:	1004d43a 	srli	r2,r2,16
 101412c:	e0bfff15 	stw	r2,-4(fp)
 1014130:	e0bfff17 	ldw	r2,-4(fp)
 1014134:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 1014138:	e0bffa17 	ldw	r2,-24(fp)
 101413c:	1005003a 	cmpeq	r2,r2,zero
 1014140:	1000271e 	bne	r2,zero,10141e0 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 1014144:	e0bffe17 	ldw	r2,-8(fp)
 1014148:	1004c03a 	cmpne	r2,r2,zero
 101414c:	1000111e 	bne	r2,zero,1014194 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 1014150:	e0bffb17 	ldw	r2,-20(fp)
 1014154:	10800a17 	ldw	r2,40(r2)
 1014158:	11000204 	addi	r4,r2,8
 101415c:	e0bff917 	ldw	r2,-28(fp)
 1014160:	1085883a 	add	r2,r2,r2
 1014164:	1085883a 	add	r2,r2,r2
 1014168:	1007883a 	mov	r3,r2
 101416c:	e0bffc17 	ldw	r2,-16(fp)
 1014170:	1885883a 	add	r2,r3,r2
 1014174:	10800017 	ldw	r2,0(r2)
 1014178:	1007883a 	mov	r3,r2
 101417c:	e0bff917 	ldw	r2,-28(fp)
 1014180:	10800044 	addi	r2,r2,1
 1014184:	e0bff915 	stw	r2,-28(fp)
 1014188:	2005883a 	mov	r2,r4
 101418c:	10c00035 	stwio	r3,0(r2)
 1014190:	00001006 	br	10141d4 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 1014194:	e0bffb17 	ldw	r2,-20(fp)
 1014198:	10800a17 	ldw	r2,40(r2)
 101419c:	11000304 	addi	r4,r2,12
 10141a0:	e0bff917 	ldw	r2,-28(fp)
 10141a4:	1085883a 	add	r2,r2,r2
 10141a8:	1085883a 	add	r2,r2,r2
 10141ac:	1007883a 	mov	r3,r2
 10141b0:	e0bffc17 	ldw	r2,-16(fp)
 10141b4:	1885883a 	add	r2,r3,r2
 10141b8:	10800017 	ldw	r2,0(r2)
 10141bc:	1007883a 	mov	r3,r2
 10141c0:	e0bff917 	ldw	r2,-28(fp)
 10141c4:	10800044 	addi	r2,r2,1
 10141c8:	e0bff915 	stw	r2,-28(fp)
 10141cc:	2005883a 	mov	r2,r4
 10141d0:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 10141d4:	e0fff917 	ldw	r3,-28(fp)
 10141d8:	e0bffd17 	ldw	r2,-12(fp)
 10141dc:	18bfc316 	blt	r3,r2,10140ec <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
 10141e0:	e0bff917 	ldw	r2,-28(fp)
}
 10141e4:	e037883a 	mov	sp,fp
 10141e8:	df000017 	ldw	fp,0(sp)
 10141ec:	dec00104 	addi	sp,sp,4
 10141f0:	f800283a 	ret

010141f4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 10141f4:	defffc04 	addi	sp,sp,-16
 10141f8:	df000315 	stw	fp,12(sp)
 10141fc:	df000304 	addi	fp,sp,12
 1014200:	e13ffd15 	stw	r4,-12(fp)
 1014204:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 1014208:	e0bffe17 	ldw	r2,-8(fp)
 101420c:	1004c03a 	cmpne	r2,r2,zero
 1014210:	1000061e 	bne	r2,zero,101422c <alt_up_audio_read_fifo_head+0x38>
 1014214:	e0bffd17 	ldw	r2,-12(fp)
 1014218:	10800a17 	ldw	r2,40(r2)
 101421c:	10800204 	addi	r2,r2,8
 1014220:	10800037 	ldwio	r2,0(r2)
 1014224:	e0bfff15 	stw	r2,-4(fp)
 1014228:	00000506 	br	1014240 <alt_up_audio_read_fifo_head+0x4c>
 101422c:	e0bffd17 	ldw	r2,-12(fp)
 1014230:	10800a17 	ldw	r2,40(r2)
 1014234:	10800304 	addi	r2,r2,12
 1014238:	10800037 	ldwio	r2,0(r2)
 101423c:	e0bfff15 	stw	r2,-4(fp)
 1014240:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
 1014244:	e037883a 	mov	sp,fp
 1014248:	df000017 	ldw	fp,0(sp)
 101424c:	dec00104 	addi	sp,sp,4
 1014250:	f800283a 	ret

01014254 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 1014254:	defffc04 	addi	sp,sp,-16
 1014258:	df000315 	stw	fp,12(sp)
 101425c:	df000304 	addi	fp,sp,12
 1014260:	e13ffd15 	stw	r4,-12(fp)
 1014264:	e17ffe15 	stw	r5,-8(fp)
 1014268:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 101426c:	e0bfff17 	ldw	r2,-4(fp)
 1014270:	1004c03a 	cmpne	r2,r2,zero
 1014274:	1000061e 	bne	r2,zero,1014290 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 1014278:	e0bffd17 	ldw	r2,-12(fp)
 101427c:	10800a17 	ldw	r2,40(r2)
 1014280:	10800204 	addi	r2,r2,8
 1014284:	e0fffe17 	ldw	r3,-8(fp)
 1014288:	10c00035 	stwio	r3,0(r2)
 101428c:	00000506 	br	10142a4 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 1014290:	e0bffd17 	ldw	r2,-12(fp)
 1014294:	10800a17 	ldw	r2,40(r2)
 1014298:	10800304 	addi	r2,r2,12
 101429c:	e0fffe17 	ldw	r3,-8(fp)
 10142a0:	10c00035 	stwio	r3,0(r2)
}
 10142a4:	e037883a 	mov	sp,fp
 10142a8:	df000017 	ldw	fp,0(sp)
 10142ac:	dec00104 	addi	sp,sp,4
 10142b0:	f800283a 	ret

010142b4 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 10142b4:	defffc04 	addi	sp,sp,-16
 10142b8:	dfc00315 	stw	ra,12(sp)
 10142bc:	df000215 	stw	fp,8(sp)
 10142c0:	df000204 	addi	fp,sp,8
 10142c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 10142c8:	e13fff17 	ldw	r4,-4(fp)
 10142cc:	014040b4 	movhi	r5,258
 10142d0:	297a4404 	addi	r5,r5,-5872
 10142d4:	101b3a00 	call	101b3a0 <alt_find_dev>
 10142d8:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 10142dc:	e0bffe17 	ldw	r2,-8(fp)
 10142e0:	10800a17 	ldw	r2,40(r2)
 10142e4:	10800104 	addi	r2,r2,4
 10142e8:	10800037 	ldwio	r2,0(r2)
 10142ec:	10803fec 	andhi	r2,r2,255
 10142f0:	1005d43a 	srai	r2,r2,16
 10142f4:	1007883a 	mov	r3,r2
 10142f8:	e0bffe17 	ldw	r2,-8(fp)
 10142fc:	10c00b15 	stw	r3,44(r2)

  return dev;
 1014300:	e0bffe17 	ldw	r2,-8(fp)
}
 1014304:	e037883a 	mov	sp,fp
 1014308:	dfc00117 	ldw	ra,4(sp)
 101430c:	df000017 	ldw	fp,0(sp)
 1014310:	dec00204 	addi	sp,sp,8
 1014314:	f800283a 	ret

01014318 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 1014318:	defffc04 	addi	sp,sp,-16
 101431c:	df000315 	stw	fp,12(sp)
 1014320:	df000304 	addi	fp,sp,12
 1014324:	e13ffd15 	stw	r4,-12(fp)
 1014328:	e17ffe15 	stw	r5,-8(fp)
 101432c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 1014330:	e0bffd17 	ldw	r2,-12(fp)
 1014334:	10800a17 	ldw	r2,40(r2)
 1014338:	11000204 	addi	r4,r2,8
 101433c:	e0bffe17 	ldw	r2,-8(fp)
 1014340:	10c03fcc 	andi	r3,r2,255
 1014344:	2005883a 	mov	r2,r4
 1014348:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 101434c:	e0bffd17 	ldw	r2,-12(fp)
 1014350:	10800a17 	ldw	r2,40(r2)
 1014354:	11000304 	addi	r4,r2,12
 1014358:	e0bfff17 	ldw	r2,-4(fp)
 101435c:	10ffffcc 	andi	r3,r2,65535
 1014360:	2005883a 	mov	r2,r4
 1014364:	10c00035 	stwio	r3,0(r2)

	return 0;
 1014368:	0005883a 	mov	r2,zero
}
 101436c:	e037883a 	mov	sp,fp
 1014370:	df000017 	ldw	fp,0(sp)
 1014374:	dec00104 	addi	sp,sp,4
 1014378:	f800283a 	ret

0101437c <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 101437c:	defffa04 	addi	sp,sp,-24
 1014380:	dfc00515 	stw	ra,20(sp)
 1014384:	df000415 	stw	fp,16(sp)
 1014388:	df000404 	addi	fp,sp,16
 101438c:	e13ffc15 	stw	r4,-16(fp)
 1014390:	e17ffd15 	stw	r5,-12(fp)
 1014394:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 1014398:	e0bffc17 	ldw	r2,-16(fp)
 101439c:	10800a17 	ldw	r2,40(r2)
 10143a0:	11000204 	addi	r4,r2,8
 10143a4:	e0bffd17 	ldw	r2,-12(fp)
 10143a8:	10c03fcc 	andi	r3,r2,255
 10143ac:	2005883a 	mov	r2,r4
 10143b0:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 10143b4:	e0bffc17 	ldw	r2,-16(fp)
 10143b8:	10800a17 	ldw	r2,40(r2)
 10143bc:	10800304 	addi	r2,r2,12
 10143c0:	10800037 	ldwio	r2,0(r2)
 10143c4:	1007883a 	mov	r3,r2
 10143c8:	e0bffe17 	ldw	r2,-8(fp)
 10143cc:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 10143d0:	e13ffc17 	ldw	r4,-16(fp)
 10143d4:	10144a80 	call	10144a8 <alt_up_av_config_read_acknowledge>
 10143d8:	1005003a 	cmpeq	r2,r2,zero
 10143dc:	1000031e 	bne	r2,zero,10143ec <alt_up_av_config_read_data+0x70>
		return -1;
 10143e0:	00bfffc4 	movi	r2,-1
 10143e4:	e0bfff15 	stw	r2,-4(fp)
 10143e8:	00000106 	br	10143f0 <alt_up_av_config_read_data+0x74>

	return 0;
 10143ec:	e03fff15 	stw	zero,-4(fp)
 10143f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10143f4:	e037883a 	mov	sp,fp
 10143f8:	dfc00117 	ldw	ra,4(sp)
 10143fc:	df000017 	ldw	fp,0(sp)
 1014400:	dec00204 	addi	sp,sp,8
 1014404:	f800283a 	ret

01014408 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 1014408:	defffe04 	addi	sp,sp,-8
 101440c:	df000115 	stw	fp,4(sp)
 1014410:	df000104 	addi	fp,sp,4
 1014414:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 1014418:	e0bfff17 	ldw	r2,-4(fp)
 101441c:	10800a17 	ldw	r2,40(r2)
 1014420:	1007883a 	mov	r3,r2
 1014424:	00800044 	movi	r2,1
 1014428:	18800025 	stbio	r2,0(r3)
	return 0;
 101442c:	0005883a 	mov	r2,zero
}
 1014430:	e037883a 	mov	sp,fp
 1014434:	df000017 	ldw	fp,0(sp)
 1014438:	dec00104 	addi	sp,sp,4
 101443c:	f800283a 	ret

01014440 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 1014440:	defffe04 	addi	sp,sp,-8
 1014444:	df000115 	stw	fp,4(sp)
 1014448:	df000104 	addi	fp,sp,4
 101444c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 1014450:	e0bfff17 	ldw	r2,-4(fp)
 1014454:	10800a17 	ldw	r2,40(r2)
 1014458:	1007883a 	mov	r3,r2
 101445c:	00800084 	movi	r2,2
 1014460:	18800025 	stbio	r2,0(r3)
	return 0;
 1014464:	0005883a 	mov	r2,zero
}
 1014468:	e037883a 	mov	sp,fp
 101446c:	df000017 	ldw	fp,0(sp)
 1014470:	dec00104 	addi	sp,sp,4
 1014474:	f800283a 	ret

01014478 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 1014478:	defffe04 	addi	sp,sp,-8
 101447c:	df000115 	stw	fp,4(sp)
 1014480:	df000104 	addi	fp,sp,4
 1014484:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 1014488:	e0bfff17 	ldw	r2,-4(fp)
 101448c:	10800a17 	ldw	r2,40(r2)
 1014490:	10000025 	stbio	zero,0(r2)
	return 0;
 1014494:	0005883a 	mov	r2,zero
}
 1014498:	e037883a 	mov	sp,fp
 101449c:	df000017 	ldw	fp,0(sp)
 10144a0:	dec00104 	addi	sp,sp,4
 10144a4:	f800283a 	ret

010144a8 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 10144a8:	defffd04 	addi	sp,sp,-12
 10144ac:	df000215 	stw	fp,8(sp)
 10144b0:	df000204 	addi	fp,sp,8
 10144b4:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 10144b8:	e0bffe17 	ldw	r2,-8(fp)
 10144bc:	10800a17 	ldw	r2,40(r2)
 10144c0:	10800104 	addi	r2,r2,4
 10144c4:	10800037 	ldwio	r2,0(r2)
 10144c8:	1080008c 	andi	r2,r2,2
 10144cc:	1005d07a 	srai	r2,r2,1
 10144d0:	1005003a 	cmpeq	r2,r2,zero
 10144d4:	1000071e 	bne	r2,zero,10144f4 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 10144d8:	e0bffe17 	ldw	r2,-8(fp)
 10144dc:	10800a17 	ldw	r2,40(r2)
 10144e0:	10800104 	addi	r2,r2,4
 10144e4:	10800037 	ldwio	r2,0(r2)
 10144e8:	1080004c 	andi	r2,r2,1
 10144ec:	e0bfff15 	stw	r2,-4(fp)
 10144f0:	00000206 	br	10144fc <alt_up_av_config_read_acknowledge+0x54>
	return -1;
 10144f4:	00bfffc4 	movi	r2,-1
 10144f8:	e0bfff15 	stw	r2,-4(fp)
 10144fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014500:	e037883a 	mov	sp,fp
 1014504:	df000017 	ldw	fp,0(sp)
 1014508:	dec00104 	addi	sp,sp,4
 101450c:	f800283a 	ret

01014510 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 1014510:	defffe04 	addi	sp,sp,-8
 1014514:	df000115 	stw	fp,4(sp)
 1014518:	df000104 	addi	fp,sp,4
 101451c:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 1014520:	e0bfff17 	ldw	r2,-4(fp)
 1014524:	10800a17 	ldw	r2,40(r2)
 1014528:	10800104 	addi	r2,r2,4
 101452c:	10800037 	ldwio	r2,0(r2)
 1014530:	1080008c 	andi	r2,r2,2
 1014534:	1005d07a 	srai	r2,r2,1
}
 1014538:	e037883a 	mov	sp,fp
 101453c:	df000017 	ldw	fp,0(sp)
 1014540:	dec00104 	addi	sp,sp,4
 1014544:	f800283a 	ret

01014548 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 1014548:	defff904 	addi	sp,sp,-28
 101454c:	dfc00615 	stw	ra,24(sp)
 1014550:	df000515 	stw	fp,20(sp)
 1014554:	df000504 	addi	fp,sp,20
 1014558:	e13ffc15 	stw	r4,-16(fp)
 101455c:	e17ffd15 	stw	r5,-12(fp)
 1014560:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 1014564:	e0bffc17 	ldw	r2,-16(fp)
 1014568:	10800b17 	ldw	r2,44(r2)
 101456c:	10800060 	cmpeqi	r2,r2,1
 1014570:	10000f1e 	bne	r2,zero,10145b0 <alt_up_av_config_write_audio_cfg_register+0x68>
 1014574:	e0bffc17 	ldw	r2,-16(fp)
 1014578:	10800b17 	ldw	r2,44(r2)
 101457c:	108000a0 	cmpeqi	r2,r2,2
 1014580:	10000b1e 	bne	r2,zero,10145b0 <alt_up_av_config_write_audio_cfg_register+0x68>
 1014584:	e0bffc17 	ldw	r2,-16(fp)
 1014588:	10800b17 	ldw	r2,44(r2)
 101458c:	108000e0 	cmpeqi	r2,r2,3
 1014590:	1000071e 	bne	r2,zero,10145b0 <alt_up_av_config_write_audio_cfg_register+0x68>
 1014594:	e0bffc17 	ldw	r2,-16(fp)
 1014598:	10800b17 	ldw	r2,44(r2)
 101459c:	10800120 	cmpeqi	r2,r2,4
 10145a0:	1000031e 	bne	r2,zero,10145b0 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
 10145a4:	00bffa84 	movi	r2,-22
 10145a8:	e0bfff15 	stw	r2,-4(fp)
 10145ac:	00000b06 	br	10145dc <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 10145b0:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 10145b4:	e0bffc17 	ldw	r2,-16(fp)
 10145b8:	10800a17 	ldw	r2,40(r2)
 10145bc:	10800084 	addi	r2,r2,2
 10145c0:	e0fffb17 	ldw	r3,-20(fp)
 10145c4:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
 10145c8:	e13ffc17 	ldw	r4,-16(fp)
 10145cc:	e17ffd17 	ldw	r5,-12(fp)
 10145d0:	e1bffe17 	ldw	r6,-8(fp)
 10145d4:	10143180 	call	1014318 <alt_up_av_config_write_data>
 10145d8:	e0bfff15 	stw	r2,-4(fp)
 10145dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10145e0:	e037883a 	mov	sp,fp
 10145e4:	dfc00117 	ldw	ra,4(sp)
 10145e8:	df000017 	ldw	fp,0(sp)
 10145ec:	dec00204 	addi	sp,sp,8
 10145f0:	f800283a 	ret

010145f4 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 10145f4:	defff904 	addi	sp,sp,-28
 10145f8:	dfc00615 	stw	ra,24(sp)
 10145fc:	df000515 	stw	fp,20(sp)
 1014600:	df000504 	addi	fp,sp,20
 1014604:	e13ffb15 	stw	r4,-20(fp)
 1014608:	e17ffc15 	stw	r5,-16(fp)
 101460c:	e1bffd15 	stw	r6,-12(fp)
 1014610:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 1014614:	e0bffb17 	ldw	r2,-20(fp)
 1014618:	10800b17 	ldw	r2,44(r2)
 101461c:	108000a0 	cmpeqi	r2,r2,2
 1014620:	10000b1e 	bne	r2,zero,1014650 <alt_up_av_config_read_video_cfg_register+0x5c>
 1014624:	e0bffb17 	ldw	r2,-20(fp)
 1014628:	10800b17 	ldw	r2,44(r2)
 101462c:	108000e0 	cmpeqi	r2,r2,3
 1014630:	1000071e 	bne	r2,zero,1014650 <alt_up_av_config_read_video_cfg_register+0x5c>
 1014634:	e0bffb17 	ldw	r2,-20(fp)
 1014638:	10800b17 	ldw	r2,44(r2)
 101463c:	10800120 	cmpeqi	r2,r2,4
 1014640:	1000031e 	bne	r2,zero,1014650 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
 1014644:	00bffa84 	movi	r2,-22
 1014648:	e0bfff15 	stw	r2,-4(fp)
 101464c:	00002106 	br	10146d4 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 1014650:	e0bffb17 	ldw	r2,-20(fp)
 1014654:	10800b17 	ldw	r2,44(r2)
 1014658:	108000a0 	cmpeqi	r2,r2,2
 101465c:	1000041e 	bne	r2,zero,1014670 <alt_up_av_config_read_video_cfg_register+0x7c>
 1014660:	e0bffb17 	ldw	r2,-20(fp)
 1014664:	10800b17 	ldw	r2,44(r2)
 1014668:	10800118 	cmpnei	r2,r2,4
 101466c:	1000061e 	bne	r2,zero,1014688 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 1014670:	e0bffe17 	ldw	r2,-8(fp)
 1014674:	10800060 	cmpeqi	r2,r2,1
 1014678:	10000c1e 	bne	r2,zero,10146ac <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
 101467c:	00bffa84 	movi	r2,-22
 1014680:	e0bfff15 	stw	r2,-4(fp)
 1014684:	00001306 	br	10146d4 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 1014688:	e0bffe17 	ldw	r2,-8(fp)
 101468c:	10800060 	cmpeqi	r2,r2,1
 1014690:	1000061e 	bne	r2,zero,10146ac <alt_up_av_config_read_video_cfg_register+0xb8>
 1014694:	e0bffe17 	ldw	r2,-8(fp)
 1014698:	108000a0 	cmpeqi	r2,r2,2
 101469c:	1000031e 	bne	r2,zero,10146ac <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
 10146a0:	00bffa84 	movi	r2,-22
 10146a4:	e0bfff15 	stw	r2,-4(fp)
 10146a8:	00000a06 	br	10146d4 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 10146ac:	e0bffb17 	ldw	r2,-20(fp)
 10146b0:	10800a17 	ldw	r2,40(r2)
 10146b4:	10800084 	addi	r2,r2,2
 10146b8:	e0fffe17 	ldw	r3,-8(fp)
 10146bc:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
 10146c0:	e13ffb17 	ldw	r4,-20(fp)
 10146c4:	e17ffc17 	ldw	r5,-16(fp)
 10146c8:	e1bffd17 	ldw	r6,-12(fp)
 10146cc:	101437c0 	call	101437c <alt_up_av_config_read_data>
 10146d0:	e0bfff15 	stw	r2,-4(fp)
 10146d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10146d8:	e037883a 	mov	sp,fp
 10146dc:	dfc00117 	ldw	ra,4(sp)
 10146e0:	df000017 	ldw	fp,0(sp)
 10146e4:	dec00204 	addi	sp,sp,8
 10146e8:	f800283a 	ret

010146ec <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 10146ec:	defff904 	addi	sp,sp,-28
 10146f0:	dfc00615 	stw	ra,24(sp)
 10146f4:	df000515 	stw	fp,20(sp)
 10146f8:	df000504 	addi	fp,sp,20
 10146fc:	e13ffb15 	stw	r4,-20(fp)
 1014700:	e17ffc15 	stw	r5,-16(fp)
 1014704:	e1bffd15 	stw	r6,-12(fp)
 1014708:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 101470c:	e0bffb17 	ldw	r2,-20(fp)
 1014710:	10800b17 	ldw	r2,44(r2)
 1014714:	108000a0 	cmpeqi	r2,r2,2
 1014718:	10000b1e 	bne	r2,zero,1014748 <alt_up_av_config_write_video_cfg_register+0x5c>
 101471c:	e0bffb17 	ldw	r2,-20(fp)
 1014720:	10800b17 	ldw	r2,44(r2)
 1014724:	108000e0 	cmpeqi	r2,r2,3
 1014728:	1000071e 	bne	r2,zero,1014748 <alt_up_av_config_write_video_cfg_register+0x5c>
 101472c:	e0bffb17 	ldw	r2,-20(fp)
 1014730:	10800b17 	ldw	r2,44(r2)
 1014734:	10800120 	cmpeqi	r2,r2,4
 1014738:	1000031e 	bne	r2,zero,1014748 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
 101473c:	00bffa84 	movi	r2,-22
 1014740:	e0bfff15 	stw	r2,-4(fp)
 1014744:	00002106 	br	10147cc <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 1014748:	e0bffb17 	ldw	r2,-20(fp)
 101474c:	10800b17 	ldw	r2,44(r2)
 1014750:	108000a0 	cmpeqi	r2,r2,2
 1014754:	1000041e 	bne	r2,zero,1014768 <alt_up_av_config_write_video_cfg_register+0x7c>
 1014758:	e0bffb17 	ldw	r2,-20(fp)
 101475c:	10800b17 	ldw	r2,44(r2)
 1014760:	10800118 	cmpnei	r2,r2,4
 1014764:	1000061e 	bne	r2,zero,1014780 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 1014768:	e0bffe17 	ldw	r2,-8(fp)
 101476c:	10800060 	cmpeqi	r2,r2,1
 1014770:	10000c1e 	bne	r2,zero,10147a4 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
 1014774:	00bffa84 	movi	r2,-22
 1014778:	e0bfff15 	stw	r2,-4(fp)
 101477c:	00001306 	br	10147cc <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 1014780:	e0bffe17 	ldw	r2,-8(fp)
 1014784:	10800060 	cmpeqi	r2,r2,1
 1014788:	1000061e 	bne	r2,zero,10147a4 <alt_up_av_config_write_video_cfg_register+0xb8>
 101478c:	e0bffe17 	ldw	r2,-8(fp)
 1014790:	108000a0 	cmpeqi	r2,r2,2
 1014794:	1000031e 	bne	r2,zero,10147a4 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
 1014798:	00bffa84 	movi	r2,-22
 101479c:	e0bfff15 	stw	r2,-4(fp)
 10147a0:	00000a06 	br	10147cc <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 10147a4:	e0bffb17 	ldw	r2,-20(fp)
 10147a8:	10800a17 	ldw	r2,40(r2)
 10147ac:	10800084 	addi	r2,r2,2
 10147b0:	e0fffe17 	ldw	r3,-8(fp)
 10147b4:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
 10147b8:	e13ffb17 	ldw	r4,-20(fp)
 10147bc:	e17ffc17 	ldw	r5,-16(fp)
 10147c0:	e1bffd17 	ldw	r6,-12(fp)
 10147c4:	10143180 	call	1014318 <alt_up_av_config_write_data>
 10147c8:	e0bfff15 	stw	r2,-4(fp)
 10147cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10147d0:	e037883a 	mov	sp,fp
 10147d4:	dfc00117 	ldw	ra,4(sp)
 10147d8:	df000017 	ldw	fp,0(sp)
 10147dc:	dec00204 	addi	sp,sp,8
 10147e0:	f800283a 	ret

010147e4 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 10147e4:	defffa04 	addi	sp,sp,-24
 10147e8:	dfc00515 	stw	ra,20(sp)
 10147ec:	df000415 	stw	fp,16(sp)
 10147f0:	df000404 	addi	fp,sp,16
 10147f4:	e13ffc15 	stw	r4,-16(fp)
 10147f8:	e17ffd15 	stw	r5,-12(fp)
 10147fc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 1014800:	e0bffc17 	ldw	r2,-16(fp)
 1014804:	10800b17 	ldw	r2,44(r2)
 1014808:	10800220 	cmpeqi	r2,r2,8
 101480c:	1000031e 	bne	r2,zero,101481c <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
 1014810:	00bffa84 	movi	r2,-22
 1014814:	e0bfff15 	stw	r2,-4(fp)
 1014818:	00000506 	br	1014830 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
 101481c:	e13ffc17 	ldw	r4,-16(fp)
 1014820:	e17ffd17 	ldw	r5,-12(fp)
 1014824:	e1bffe17 	ldw	r6,-8(fp)
 1014828:	101437c0 	call	101437c <alt_up_av_config_read_data>
 101482c:	e0bfff15 	stw	r2,-4(fp)
 1014830:	e0bfff17 	ldw	r2,-4(fp)
}
 1014834:	e037883a 	mov	sp,fp
 1014838:	dfc00117 	ldw	ra,4(sp)
 101483c:	df000017 	ldw	fp,0(sp)
 1014840:	dec00204 	addi	sp,sp,8
 1014844:	f800283a 	ret

01014848 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 1014848:	defffa04 	addi	sp,sp,-24
 101484c:	dfc00515 	stw	ra,20(sp)
 1014850:	df000415 	stw	fp,16(sp)
 1014854:	df000404 	addi	fp,sp,16
 1014858:	e13ffc15 	stw	r4,-16(fp)
 101485c:	e17ffd15 	stw	r5,-12(fp)
 1014860:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 1014864:	e0bffc17 	ldw	r2,-16(fp)
 1014868:	10800b17 	ldw	r2,44(r2)
 101486c:	10800220 	cmpeqi	r2,r2,8
 1014870:	1000031e 	bne	r2,zero,1014880 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
 1014874:	00bffa84 	movi	r2,-22
 1014878:	e0bfff15 	stw	r2,-4(fp)
 101487c:	00000506 	br	1014894 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
 1014880:	e13ffc17 	ldw	r4,-16(fp)
 1014884:	e17ffd17 	ldw	r5,-12(fp)
 1014888:	e1bffe17 	ldw	r6,-8(fp)
 101488c:	10143180 	call	1014318 <alt_up_av_config_write_data>
 1014890:	e0bfff15 	stw	r2,-4(fp)
 1014894:	e0bfff17 	ldw	r2,-4(fp)
}
 1014898:	e037883a 	mov	sp,fp
 101489c:	dfc00117 	ldw	ra,4(sp)
 10148a0:	df000017 	ldw	fp,0(sp)
 10148a4:	dec00204 	addi	sp,sp,8
 10148a8:	f800283a 	ret

010148ac <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 10148ac:	defffa04 	addi	sp,sp,-24
 10148b0:	dfc00515 	stw	ra,20(sp)
 10148b4:	df000415 	stw	fp,16(sp)
 10148b8:	df000404 	addi	fp,sp,16
 10148bc:	e13ffc15 	stw	r4,-16(fp)
 10148c0:	e17ffd15 	stw	r5,-12(fp)
 10148c4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 10148c8:	e0bffc17 	ldw	r2,-16(fp)
 10148cc:	10800b17 	ldw	r2,44(r2)
 10148d0:	10800260 	cmpeqi	r2,r2,9
 10148d4:	1000031e 	bne	r2,zero,10148e4 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
 10148d8:	00bffa84 	movi	r2,-22
 10148dc:	e0bfff15 	stw	r2,-4(fp)
 10148e0:	00000506 	br	10148f8 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 10148e4:	e13ffc17 	ldw	r4,-16(fp)
 10148e8:	e17ffd17 	ldw	r5,-12(fp)
 10148ec:	e1bffe17 	ldw	r6,-8(fp)
 10148f0:	101437c0 	call	101437c <alt_up_av_config_read_data>
 10148f4:	e0bfff15 	stw	r2,-4(fp)
 10148f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10148fc:	e037883a 	mov	sp,fp
 1014900:	dfc00117 	ldw	ra,4(sp)
 1014904:	df000017 	ldw	fp,0(sp)
 1014908:	dec00204 	addi	sp,sp,8
 101490c:	f800283a 	ret

01014910 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 1014910:	defffa04 	addi	sp,sp,-24
 1014914:	dfc00515 	stw	ra,20(sp)
 1014918:	df000415 	stw	fp,16(sp)
 101491c:	df000404 	addi	fp,sp,16
 1014920:	e13ffc15 	stw	r4,-16(fp)
 1014924:	e17ffd15 	stw	r5,-12(fp)
 1014928:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 101492c:	e0bffc17 	ldw	r2,-16(fp)
 1014930:	10800b17 	ldw	r2,44(r2)
 1014934:	10800260 	cmpeqi	r2,r2,9
 1014938:	1000031e 	bne	r2,zero,1014948 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
 101493c:	00bffa84 	movi	r2,-22
 1014940:	e0bfff15 	stw	r2,-4(fp)
 1014944:	00000506 	br	101495c <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 1014948:	e13ffc17 	ldw	r4,-16(fp)
 101494c:	e17ffd17 	ldw	r5,-12(fp)
 1014950:	e1bffe17 	ldw	r6,-8(fp)
 1014954:	10143180 	call	1014318 <alt_up_av_config_write_data>
 1014958:	e0bfff15 	stw	r2,-4(fp)
 101495c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014960:	e037883a 	mov	sp,fp
 1014964:	dfc00117 	ldw	ra,4(sp)
 1014968:	df000017 	ldw	fp,0(sp)
 101496c:	dec00204 	addi	sp,sp,8
 1014970:	f800283a 	ret

01014974 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 1014974:	defffa04 	addi	sp,sp,-24
 1014978:	dfc00515 	stw	ra,20(sp)
 101497c:	df000415 	stw	fp,16(sp)
 1014980:	df000404 	addi	fp,sp,16
 1014984:	e13ffc15 	stw	r4,-16(fp)
 1014988:	e17ffd15 	stw	r5,-12(fp)
 101498c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 1014990:	e0bffc17 	ldw	r2,-16(fp)
 1014994:	10800b17 	ldw	r2,44(r2)
 1014998:	108002a0 	cmpeqi	r2,r2,10
 101499c:	1000031e 	bne	r2,zero,10149ac <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
 10149a0:	00bffa84 	movi	r2,-22
 10149a4:	e0bfff15 	stw	r2,-4(fp)
 10149a8:	00000506 	br	10149c0 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
 10149ac:	e13ffc17 	ldw	r4,-16(fp)
 10149b0:	e17ffd17 	ldw	r5,-12(fp)
 10149b4:	e1bffe17 	ldw	r6,-8(fp)
 10149b8:	101437c0 	call	101437c <alt_up_av_config_read_data>
 10149bc:	e0bfff15 	stw	r2,-4(fp)
 10149c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10149c4:	e037883a 	mov	sp,fp
 10149c8:	dfc00117 	ldw	ra,4(sp)
 10149cc:	df000017 	ldw	fp,0(sp)
 10149d0:	dec00204 	addi	sp,sp,8
 10149d4:	f800283a 	ret

010149d8 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 10149d8:	defffa04 	addi	sp,sp,-24
 10149dc:	dfc00515 	stw	ra,20(sp)
 10149e0:	df000415 	stw	fp,16(sp)
 10149e4:	df000404 	addi	fp,sp,16
 10149e8:	e13ffc15 	stw	r4,-16(fp)
 10149ec:	e17ffd15 	stw	r5,-12(fp)
 10149f0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 10149f4:	e0bffc17 	ldw	r2,-16(fp)
 10149f8:	10800b17 	ldw	r2,44(r2)
 10149fc:	108002a0 	cmpeqi	r2,r2,10
 1014a00:	1000031e 	bne	r2,zero,1014a10 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
 1014a04:	00bffa84 	movi	r2,-22
 1014a08:	e0bfff15 	stw	r2,-4(fp)
 1014a0c:	00000506 	br	1014a24 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
 1014a10:	e13ffc17 	ldw	r4,-16(fp)
 1014a14:	e17ffd17 	ldw	r5,-12(fp)
 1014a18:	e1bffe17 	ldw	r6,-8(fp)
 1014a1c:	10143180 	call	1014318 <alt_up_av_config_write_data>
 1014a20:	e0bfff15 	stw	r2,-4(fp)
 1014a24:	e0bfff17 	ldw	r2,-4(fp)
}
 1014a28:	e037883a 	mov	sp,fp
 1014a2c:	dfc00117 	ldw	ra,4(sp)
 1014a30:	df000017 	ldw	fp,0(sp)
 1014a34:	dec00204 	addi	sp,sp,8
 1014a38:	f800283a 	ret

01014a3c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1014a3c:	defffc04 	addi	sp,sp,-16
 1014a40:	df000315 	stw	fp,12(sp)
 1014a44:	df000304 	addi	fp,sp,12
 1014a48:	e13ffe15 	stw	r4,-8(fp)
 1014a4c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1014a50:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1014a54:	e0bfff17 	ldw	r2,-4(fp)
 1014a58:	1004c03a 	cmpne	r2,r2,zero
 1014a5c:	1000061e 	bne	r2,zero,1014a78 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1014a60:	e0bffe17 	ldw	r2,-8(fp)
 1014a64:	1007883a 	mov	r3,r2
 1014a68:	e0bffd03 	ldbu	r2,-12(fp)
 1014a6c:	10c4b03a 	or	r2,r2,r3
 1014a70:	e0bffd05 	stb	r2,-12(fp)
 1014a74:	00000806 	br	1014a98 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1014a78:	e0bffe17 	ldw	r2,-8(fp)
 1014a7c:	1007883a 	mov	r3,r2
 1014a80:	e0bffd03 	ldbu	r2,-12(fp)
 1014a84:	10c4b03a 	or	r2,r2,r3
 1014a88:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1014a8c:	e0bffd03 	ldbu	r2,-12(fp)
 1014a90:	10801014 	ori	r2,r2,64
 1014a94:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1014a98:	e0fffd03 	ldbu	r3,-12(fp)
 1014a9c:	00bfe004 	movi	r2,-128
 1014aa0:	1884b03a 	or	r2,r3,r2
 1014aa4:	10803fcc 	andi	r2,r2,255
}
 1014aa8:	e037883a 	mov	sp,fp
 1014aac:	df000017 	ldw	fp,0(sp)
 1014ab0:	dec00104 	addi	sp,sp,4
 1014ab4:	f800283a 	ret

01014ab8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1014ab8:	defffd04 	addi	sp,sp,-12
 1014abc:	df000215 	stw	fp,8(sp)
 1014ac0:	df000204 	addi	fp,sp,8
 1014ac4:	e13ffe15 	stw	r4,-8(fp)
 1014ac8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1014acc:	e0bffe17 	ldw	r2,-8(fp)
 1014ad0:	10800a17 	ldw	r2,40(r2)
 1014ad4:	e0ffff03 	ldbu	r3,-4(fp)
 1014ad8:	10c00025 	stbio	r3,0(r2)
}
 1014adc:	e037883a 	mov	sp,fp
 1014ae0:	df000017 	ldw	fp,0(sp)
 1014ae4:	dec00104 	addi	sp,sp,4
 1014ae8:	f800283a 	ret

01014aec <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1014aec:	defffe04 	addi	sp,sp,-8
 1014af0:	df000115 	stw	fp,4(sp)
 1014af4:	df000104 	addi	fp,sp,4
 1014af8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1014afc:	e0bfff17 	ldw	r2,-4(fp)
 1014b00:	10800a17 	ldw	r2,40(r2)
 1014b04:	1007883a 	mov	r3,r2
 1014b08:	00800044 	movi	r2,1
 1014b0c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1014b10:	e037883a 	mov	sp,fp
 1014b14:	df000017 	ldw	fp,0(sp)
 1014b18:	dec00104 	addi	sp,sp,4
 1014b1c:	f800283a 	ret

01014b20 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1014b20:	defffc04 	addi	sp,sp,-16
 1014b24:	dfc00315 	stw	ra,12(sp)
 1014b28:	df000215 	stw	fp,8(sp)
 1014b2c:	df000204 	addi	fp,sp,8
 1014b30:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1014b34:	e13fff17 	ldw	r4,-4(fp)
 1014b38:	014040b4 	movhi	r5,258
 1014b3c:	297a4404 	addi	r5,r5,-5872
 1014b40:	101b3a00 	call	101b3a0 <alt_find_dev>
 1014b44:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1014b48:	e0bffe17 	ldw	r2,-8(fp)
}
 1014b4c:	e037883a 	mov	sp,fp
 1014b50:	dfc00117 	ldw	ra,4(sp)
 1014b54:	df000017 	ldw	fp,0(sp)
 1014b58:	dec00204 	addi	sp,sp,8
 1014b5c:	f800283a 	ret

01014b60 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1014b60:	defffb04 	addi	sp,sp,-20
 1014b64:	df000415 	stw	fp,16(sp)
 1014b68:	df000404 	addi	fp,sp,16
 1014b6c:	e13ffd15 	stw	r4,-12(fp)
 1014b70:	e17ffe15 	stw	r5,-8(fp)
 1014b74:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1014b78:	e03ffc15 	stw	zero,-16(fp)
 1014b7c:	00000f06 	br	1014bbc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1014b80:	e0bffd17 	ldw	r2,-12(fp)
 1014b84:	10800a17 	ldw	r2,40(r2)
 1014b88:	11000044 	addi	r4,r2,1
 1014b8c:	e0fffc17 	ldw	r3,-16(fp)
 1014b90:	e0bffe17 	ldw	r2,-8(fp)
 1014b94:	1885883a 	add	r2,r3,r2
 1014b98:	10800003 	ldbu	r2,0(r2)
 1014b9c:	10c03fcc 	andi	r3,r2,255
 1014ba0:	18c0201c 	xori	r3,r3,128
 1014ba4:	18ffe004 	addi	r3,r3,-128
 1014ba8:	2005883a 	mov	r2,r4
 1014bac:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1014bb0:	e0bffc17 	ldw	r2,-16(fp)
 1014bb4:	10800044 	addi	r2,r2,1
 1014bb8:	e0bffc15 	stw	r2,-16(fp)
 1014bbc:	e0fffc17 	ldw	r3,-16(fp)
 1014bc0:	e0bfff17 	ldw	r2,-4(fp)
 1014bc4:	18bfee36 	bltu	r3,r2,1014b80 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1014bc8:	e037883a 	mov	sp,fp
 1014bcc:	df000017 	ldw	fp,0(sp)
 1014bd0:	dec00104 	addi	sp,sp,4
 1014bd4:	f800283a 	ret

01014bd8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1014bd8:	defffd04 	addi	sp,sp,-12
 1014bdc:	df000215 	stw	fp,8(sp)
 1014be0:	df000204 	addi	fp,sp,8
 1014be4:	e13ffe15 	stw	r4,-8(fp)
 1014be8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1014bec:	00000d06 	br	1014c24 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1014bf0:	e0bffe17 	ldw	r2,-8(fp)
 1014bf4:	10800a17 	ldw	r2,40(r2)
 1014bf8:	11000044 	addi	r4,r2,1
 1014bfc:	e0bfff17 	ldw	r2,-4(fp)
 1014c00:	10800003 	ldbu	r2,0(r2)
 1014c04:	10c03fcc 	andi	r3,r2,255
 1014c08:	18c0201c 	xori	r3,r3,128
 1014c0c:	18ffe004 	addi	r3,r3,-128
 1014c10:	2005883a 	mov	r2,r4
 1014c14:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1014c18:	e0bfff17 	ldw	r2,-4(fp)
 1014c1c:	10800044 	addi	r2,r2,1
 1014c20:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1014c24:	e0bfff17 	ldw	r2,-4(fp)
 1014c28:	10800003 	ldbu	r2,0(r2)
 1014c2c:	10803fcc 	andi	r2,r2,255
 1014c30:	1080201c 	xori	r2,r2,128
 1014c34:	10bfe004 	addi	r2,r2,-128
 1014c38:	1004c03a 	cmpne	r2,r2,zero
 1014c3c:	103fec1e 	bne	r2,zero,1014bf0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1014c40:	e037883a 	mov	sp,fp
 1014c44:	df000017 	ldw	fp,0(sp)
 1014c48:	dec00104 	addi	sp,sp,4
 1014c4c:	f800283a 	ret

01014c50 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1014c50:	defffb04 	addi	sp,sp,-20
 1014c54:	dfc00415 	stw	ra,16(sp)
 1014c58:	df000315 	stw	fp,12(sp)
 1014c5c:	df000304 	addi	fp,sp,12
 1014c60:	e13ffd15 	stw	r4,-12(fp)
 1014c64:	e17ffe15 	stw	r5,-8(fp)
 1014c68:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1014c6c:	e0bffd17 	ldw	r2,-12(fp)
 1014c70:	10800017 	ldw	r2,0(r2)
 1014c74:	1009883a 	mov	r4,r2
 1014c78:	e1bfff17 	ldw	r6,-4(fp)
 1014c7c:	e17ffe17 	ldw	r5,-8(fp)
 1014c80:	1014b600 	call	1014b60 <alt_up_character_lcd_write>
	return 0;
 1014c84:	0005883a 	mov	r2,zero
}
 1014c88:	e037883a 	mov	sp,fp
 1014c8c:	dfc00117 	ldw	ra,4(sp)
 1014c90:	df000017 	ldw	fp,0(sp)
 1014c94:	dec00204 	addi	sp,sp,8
 1014c98:	f800283a 	ret

01014c9c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1014c9c:	defff904 	addi	sp,sp,-28
 1014ca0:	dfc00615 	stw	ra,24(sp)
 1014ca4:	df000515 	stw	fp,20(sp)
 1014ca8:	df000504 	addi	fp,sp,20
 1014cac:	e13ffc15 	stw	r4,-16(fp)
 1014cb0:	e17ffd15 	stw	r5,-12(fp)
 1014cb4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1014cb8:	e0bffd17 	ldw	r2,-12(fp)
 1014cbc:	10800a28 	cmpgeui	r2,r2,40
 1014cc0:	1000031e 	bne	r2,zero,1014cd0 <alt_up_character_lcd_set_cursor_pos+0x34>
 1014cc4:	e0bffe17 	ldw	r2,-8(fp)
 1014cc8:	108000b0 	cmpltui	r2,r2,2
 1014ccc:	1000031e 	bne	r2,zero,1014cdc <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1014cd0:	00bfffc4 	movi	r2,-1
 1014cd4:	e0bfff15 	stw	r2,-4(fp)
 1014cd8:	00000806 	br	1014cfc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1014cdc:	e13ffd17 	ldw	r4,-12(fp)
 1014ce0:	e17ffe17 	ldw	r5,-8(fp)
 1014ce4:	1014a3c0 	call	1014a3c <get_DDRAM_addr>
 1014ce8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1014cec:	e17ffb03 	ldbu	r5,-20(fp)
 1014cf0:	e13ffc17 	ldw	r4,-16(fp)
 1014cf4:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
	return 0;
 1014cf8:	e03fff15 	stw	zero,-4(fp)
 1014cfc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014d00:	e037883a 	mov	sp,fp
 1014d04:	dfc00117 	ldw	ra,4(sp)
 1014d08:	df000017 	ldw	fp,0(sp)
 1014d0c:	dec00204 	addi	sp,sp,8
 1014d10:	f800283a 	ret

01014d14 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1014d14:	defff904 	addi	sp,sp,-28
 1014d18:	dfc00615 	stw	ra,24(sp)
 1014d1c:	df000515 	stw	fp,20(sp)
 1014d20:	df000504 	addi	fp,sp,20
 1014d24:	e13ffc15 	stw	r4,-16(fp)
 1014d28:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1014d2c:	e0bffd17 	ldw	r2,-12(fp)
 1014d30:	1005003a 	cmpeq	r2,r2,zero
 1014d34:	10001e1e 	bne	r2,zero,1014db0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1014d38:	e0bffd17 	ldw	r2,-12(fp)
 1014d3c:	10800050 	cmplti	r2,r2,1
 1014d40:	1000031e 	bne	r2,zero,1014d50 <alt_up_character_lcd_shift_cursor+0x3c>
 1014d44:	00800504 	movi	r2,20
 1014d48:	e0bfff05 	stb	r2,-4(fp)
 1014d4c:	00000206 	br	1014d58 <alt_up_character_lcd_shift_cursor+0x44>
 1014d50:	00c00404 	movi	r3,16
 1014d54:	e0ffff05 	stb	r3,-4(fp)
 1014d58:	e0bfff03 	ldbu	r2,-4(fp)
 1014d5c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1014d60:	e0fffd17 	ldw	r3,-12(fp)
 1014d64:	e0fffe15 	stw	r3,-8(fp)
 1014d68:	e0fffe17 	ldw	r3,-8(fp)
 1014d6c:	1804403a 	cmpge	r2,r3,zero
 1014d70:	1000031e 	bne	r2,zero,1014d80 <alt_up_character_lcd_shift_cursor+0x6c>
 1014d74:	e0bffe17 	ldw	r2,-8(fp)
 1014d78:	0085c83a 	sub	r2,zero,r2
 1014d7c:	e0bffe15 	stw	r2,-8(fp)
 1014d80:	e0fffe17 	ldw	r3,-8(fp)
 1014d84:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1014d88:	00000306 	br	1014d98 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1014d8c:	e17ffb43 	ldbu	r5,-19(fp)
 1014d90:	e13ffc17 	ldw	r4,-16(fp)
 1014d94:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1014d98:	e0bffb03 	ldbu	r2,-20(fp)
 1014d9c:	10bfffc4 	addi	r2,r2,-1
 1014da0:	e0bffb05 	stb	r2,-20(fp)
 1014da4:	e0bffb03 	ldbu	r2,-20(fp)
 1014da8:	10803fd8 	cmpnei	r2,r2,255
 1014dac:	103ff71e 	bne	r2,zero,1014d8c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1014db0:	e037883a 	mov	sp,fp
 1014db4:	dfc00117 	ldw	ra,4(sp)
 1014db8:	df000017 	ldw	fp,0(sp)
 1014dbc:	dec00204 	addi	sp,sp,8
 1014dc0:	f800283a 	ret

01014dc4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1014dc4:	defff904 	addi	sp,sp,-28
 1014dc8:	dfc00615 	stw	ra,24(sp)
 1014dcc:	df000515 	stw	fp,20(sp)
 1014dd0:	df000504 	addi	fp,sp,20
 1014dd4:	e13ffc15 	stw	r4,-16(fp)
 1014dd8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1014ddc:	e0bffd17 	ldw	r2,-12(fp)
 1014de0:	1005003a 	cmpeq	r2,r2,zero
 1014de4:	10001e1e 	bne	r2,zero,1014e60 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1014de8:	e0bffd17 	ldw	r2,-12(fp)
 1014dec:	10800050 	cmplti	r2,r2,1
 1014df0:	1000031e 	bne	r2,zero,1014e00 <alt_up_character_lcd_shift_display+0x3c>
 1014df4:	00800704 	movi	r2,28
 1014df8:	e0bfff05 	stb	r2,-4(fp)
 1014dfc:	00000206 	br	1014e08 <alt_up_character_lcd_shift_display+0x44>
 1014e00:	00c00604 	movi	r3,24
 1014e04:	e0ffff05 	stb	r3,-4(fp)
 1014e08:	e0bfff03 	ldbu	r2,-4(fp)
 1014e0c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1014e10:	e0fffd17 	ldw	r3,-12(fp)
 1014e14:	e0fffe15 	stw	r3,-8(fp)
 1014e18:	e0fffe17 	ldw	r3,-8(fp)
 1014e1c:	1804403a 	cmpge	r2,r3,zero
 1014e20:	1000031e 	bne	r2,zero,1014e30 <alt_up_character_lcd_shift_display+0x6c>
 1014e24:	e0bffe17 	ldw	r2,-8(fp)
 1014e28:	0085c83a 	sub	r2,zero,r2
 1014e2c:	e0bffe15 	stw	r2,-8(fp)
 1014e30:	e0fffe17 	ldw	r3,-8(fp)
 1014e34:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1014e38:	00000306 	br	1014e48 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1014e3c:	e17ffb43 	ldbu	r5,-19(fp)
 1014e40:	e13ffc17 	ldw	r4,-16(fp)
 1014e44:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1014e48:	e0bffb03 	ldbu	r2,-20(fp)
 1014e4c:	10bfffc4 	addi	r2,r2,-1
 1014e50:	e0bffb05 	stb	r2,-20(fp)
 1014e54:	e0bffb03 	ldbu	r2,-20(fp)
 1014e58:	10803fd8 	cmpnei	r2,r2,255
 1014e5c:	103ff71e 	bne	r2,zero,1014e3c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1014e60:	e037883a 	mov	sp,fp
 1014e64:	dfc00117 	ldw	ra,4(sp)
 1014e68:	df000017 	ldw	fp,0(sp)
 1014e6c:	dec00204 	addi	sp,sp,8
 1014e70:	f800283a 	ret

01014e74 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1014e74:	defff904 	addi	sp,sp,-28
 1014e78:	dfc00615 	stw	ra,24(sp)
 1014e7c:	df000515 	stw	fp,20(sp)
 1014e80:	df000504 	addi	fp,sp,20
 1014e84:	e13ffc15 	stw	r4,-16(fp)
 1014e88:	e17ffd15 	stw	r5,-12(fp)
 1014e8c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1014e90:	e0bffd17 	ldw	r2,-12(fp)
 1014e94:	10800a28 	cmpgeui	r2,r2,40
 1014e98:	1000031e 	bne	r2,zero,1014ea8 <alt_up_character_lcd_erase_pos+0x34>
 1014e9c:	e0bffe17 	ldw	r2,-8(fp)
 1014ea0:	108000b0 	cmpltui	r2,r2,2
 1014ea4:	1000031e 	bne	r2,zero,1014eb4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1014ea8:	00bfffc4 	movi	r2,-1
 1014eac:	e0bfff15 	stw	r2,-4(fp)
 1014eb0:	00000e06 	br	1014eec <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1014eb4:	e13ffd17 	ldw	r4,-12(fp)
 1014eb8:	e17ffe17 	ldw	r5,-8(fp)
 1014ebc:	1014a3c0 	call	1014a3c <get_DDRAM_addr>
 1014ec0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1014ec4:	e17ffb03 	ldbu	r5,-20(fp)
 1014ec8:	e13ffc17 	ldw	r4,-16(fp)
 1014ecc:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1014ed0:	e0bffc17 	ldw	r2,-16(fp)
 1014ed4:	10800a17 	ldw	r2,40(r2)
 1014ed8:	10800044 	addi	r2,r2,1
 1014edc:	1007883a 	mov	r3,r2
 1014ee0:	00800084 	movi	r2,2
 1014ee4:	18800025 	stbio	r2,0(r3)
	return 0;
 1014ee8:	e03fff15 	stw	zero,-4(fp)
 1014eec:	e0bfff17 	ldw	r2,-4(fp)
}
 1014ef0:	e037883a 	mov	sp,fp
 1014ef4:	dfc00117 	ldw	ra,4(sp)
 1014ef8:	df000017 	ldw	fp,0(sp)
 1014efc:	dec00204 	addi	sp,sp,8
 1014f00:	f800283a 	ret

01014f04 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1014f04:	defffd04 	addi	sp,sp,-12
 1014f08:	dfc00215 	stw	ra,8(sp)
 1014f0c:	df000115 	stw	fp,4(sp)
 1014f10:	df000104 	addi	fp,sp,4
 1014f14:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1014f18:	e13fff17 	ldw	r4,-4(fp)
 1014f1c:	01400304 	movi	r5,12
 1014f20:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
}
 1014f24:	e037883a 	mov	sp,fp
 1014f28:	dfc00117 	ldw	ra,4(sp)
 1014f2c:	df000017 	ldw	fp,0(sp)
 1014f30:	dec00204 	addi	sp,sp,8
 1014f34:	f800283a 	ret

01014f38 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1014f38:	defffd04 	addi	sp,sp,-12
 1014f3c:	dfc00215 	stw	ra,8(sp)
 1014f40:	df000115 	stw	fp,4(sp)
 1014f44:	df000104 	addi	fp,sp,4
 1014f48:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1014f4c:	e13fff17 	ldw	r4,-4(fp)
 1014f50:	014003c4 	movi	r5,15
 1014f54:	1014ab80 	call	1014ab8 <alt_up_character_lcd_send_cmd>
}
 1014f58:	e037883a 	mov	sp,fp
 1014f5c:	dfc00117 	ldw	ra,4(sp)
 1014f60:	df000017 	ldw	fp,0(sp)
 1014f64:	dec00204 	addi	sp,sp,8
 1014f68:	f800283a 	ret

01014f6c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1014f6c:	defffd04 	addi	sp,sp,-12
 1014f70:	df000215 	stw	fp,8(sp)
 1014f74:	df000204 	addi	fp,sp,8
 1014f78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1014f7c:	e0bfff17 	ldw	r2,-4(fp)
 1014f80:	10800a17 	ldw	r2,40(r2)
 1014f84:	10800104 	addi	r2,r2,4
 1014f88:	10800037 	ldwio	r2,0(r2)
 1014f8c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1014f90:	e0bffe17 	ldw	r2,-8(fp)
 1014f94:	10800054 	ori	r2,r2,1
 1014f98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1014f9c:	e0bfff17 	ldw	r2,-4(fp)
 1014fa0:	10800a17 	ldw	r2,40(r2)
 1014fa4:	10800104 	addi	r2,r2,4
 1014fa8:	e0fffe17 	ldw	r3,-8(fp)
 1014fac:	10c00035 	stwio	r3,0(r2)
}
 1014fb0:	e037883a 	mov	sp,fp
 1014fb4:	df000017 	ldw	fp,0(sp)
 1014fb8:	dec00104 	addi	sp,sp,4
 1014fbc:	f800283a 	ret

01014fc0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1014fc0:	defffd04 	addi	sp,sp,-12
 1014fc4:	df000215 	stw	fp,8(sp)
 1014fc8:	df000204 	addi	fp,sp,8
 1014fcc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1014fd0:	e0bfff17 	ldw	r2,-4(fp)
 1014fd4:	10800a17 	ldw	r2,40(r2)
 1014fd8:	10800104 	addi	r2,r2,4
 1014fdc:	10800037 	ldwio	r2,0(r2)
 1014fe0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1014fe4:	e0fffe17 	ldw	r3,-8(fp)
 1014fe8:	00bfff84 	movi	r2,-2
 1014fec:	1884703a 	and	r2,r3,r2
 1014ff0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1014ff4:	e0bfff17 	ldw	r2,-4(fp)
 1014ff8:	10800a17 	ldw	r2,40(r2)
 1014ffc:	10800104 	addi	r2,r2,4
 1015000:	e0fffe17 	ldw	r3,-8(fp)
 1015004:	10c00035 	stwio	r3,0(r2)
}
 1015008:	e037883a 	mov	sp,fp
 101500c:	df000017 	ldw	fp,0(sp)
 1015010:	dec00104 	addi	sp,sp,4
 1015014:	f800283a 	ret

01015018 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1015018:	defffd04 	addi	sp,sp,-12
 101501c:	df000215 	stw	fp,8(sp)
 1015020:	df000204 	addi	fp,sp,8
 1015024:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1015028:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 101502c:	e0bfff17 	ldw	r2,-4(fp)
 1015030:	10800a17 	ldw	r2,40(r2)
 1015034:	10800084 	addi	r2,r2,2
 1015038:	1080002b 	ldhuio	r2,0(r2)
 101503c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1015040:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1015044:	e037883a 	mov	sp,fp
 1015048:	df000017 	ldw	fp,0(sp)
 101504c:	dec00104 	addi	sp,sp,4
 1015050:	f800283a 	ret

01015054 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1015054:	defffd04 	addi	sp,sp,-12
 1015058:	df000215 	stw	fp,8(sp)
 101505c:	df000204 	addi	fp,sp,8
 1015060:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1015064:	e0bfff17 	ldw	r2,-4(fp)
 1015068:	10800a17 	ldw	r2,40(r2)
 101506c:	10800104 	addi	r2,r2,4
 1015070:	10800037 	ldwio	r2,0(r2)
 1015074:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1015078:	e0bffe17 	ldw	r2,-8(fp)
 101507c:	10bfffec 	andhi	r2,r2,65535
 1015080:	1004d43a 	srli	r2,r2,16
}
 1015084:	e037883a 	mov	sp,fp
 1015088:	df000017 	ldw	fp,0(sp)
 101508c:	dec00104 	addi	sp,sp,4
 1015090:	f800283a 	ret

01015094 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1015094:	defffc04 	addi	sp,sp,-16
 1015098:	df000315 	stw	fp,12(sp)
 101509c:	df000304 	addi	fp,sp,12
 10150a0:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 10150a4:	e0bffe17 	ldw	r2,-8(fp)
 10150a8:	1080800c 	andi	r2,r2,512
 10150ac:	1004d27a 	srli	r2,r2,9
 10150b0:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 10150b4:	e0bffd17 	ldw	r2,-12(fp)
 10150b8:	1005003a 	cmpeq	r2,r2,zero
 10150bc:	1000031e 	bne	r2,zero,10150cc <alt_up_rs232_check_parity+0x38>
 10150c0:	00bfffc4 	movi	r2,-1
 10150c4:	e0bfff15 	stw	r2,-4(fp)
 10150c8:	00000106 	br	10150d0 <alt_up_rs232_check_parity+0x3c>
 10150cc:	e03fff15 	stw	zero,-4(fp)
 10150d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10150d4:	e037883a 	mov	sp,fp
 10150d8:	df000017 	ldw	fp,0(sp)
 10150dc:	dec00104 	addi	sp,sp,4
 10150e0:	f800283a 	ret

010150e4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 10150e4:	defffc04 	addi	sp,sp,-16
 10150e8:	df000315 	stw	fp,12(sp)
 10150ec:	df000304 	addi	fp,sp,12
 10150f0:	e13ffe15 	stw	r4,-8(fp)
 10150f4:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 10150f8:	e0bffe17 	ldw	r2,-8(fp)
 10150fc:	10800a17 	ldw	r2,40(r2)
 1015100:	10800037 	ldwio	r2,0(r2)
 1015104:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1015108:	e0bffe17 	ldw	r2,-8(fp)
 101510c:	10800a17 	ldw	r2,40(r2)
 1015110:	e0ffff03 	ldbu	r3,-4(fp)
 1015114:	10c00035 	stwio	r3,0(r2)
	return 0;
 1015118:	0005883a 	mov	r2,zero
}
 101511c:	e037883a 	mov	sp,fp
 1015120:	df000017 	ldw	fp,0(sp)
 1015124:	dec00104 	addi	sp,sp,4
 1015128:	f800283a 	ret

0101512c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 101512c:	defffa04 	addi	sp,sp,-24
 1015130:	dfc00515 	stw	ra,20(sp)
 1015134:	df000415 	stw	fp,16(sp)
 1015138:	df000404 	addi	fp,sp,16
 101513c:	e13ffd15 	stw	r4,-12(fp)
 1015140:	e17ffe15 	stw	r5,-8(fp)
 1015144:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1015148:	e0bffd17 	ldw	r2,-12(fp)
 101514c:	10800a17 	ldw	r2,40(r2)
 1015150:	10800037 	ldwio	r2,0(r2)
 1015154:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1015158:	e0bffc17 	ldw	r2,-16(fp)
 101515c:	1007883a 	mov	r3,r2
 1015160:	e0bffe17 	ldw	r2,-8(fp)
 1015164:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1015168:	e13ffc17 	ldw	r4,-16(fp)
 101516c:	10150940 	call	1015094 <alt_up_rs232_check_parity>
 1015170:	1007883a 	mov	r3,r2
 1015174:	e0bfff17 	ldw	r2,-4(fp)
 1015178:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 101517c:	e0bffc17 	ldw	r2,-16(fp)
 1015180:	10a0000c 	andi	r2,r2,32768
 1015184:	1004d3fa 	srli	r2,r2,15
 1015188:	10bfffc4 	addi	r2,r2,-1
}
 101518c:	e037883a 	mov	sp,fp
 1015190:	dfc00117 	ldw	ra,4(sp)
 1015194:	df000017 	ldw	fp,0(sp)
 1015198:	dec00204 	addi	sp,sp,8
 101519c:	f800283a 	ret

010151a0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 10151a0:	defff804 	addi	sp,sp,-32
 10151a4:	dfc00715 	stw	ra,28(sp)
 10151a8:	df000615 	stw	fp,24(sp)
 10151ac:	df000604 	addi	fp,sp,24
 10151b0:	e13ffd15 	stw	r4,-12(fp)
 10151b4:	e17ffe15 	stw	r5,-8(fp)
 10151b8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10151bc:	e0bffd17 	ldw	r2,-12(fp)
 10151c0:	10800017 	ldw	r2,0(r2)
 10151c4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 10151c8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 10151cc:	00000c06 	br	1015200 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 10151d0:	e17ffe17 	ldw	r5,-8(fp)
 10151d4:	e0bffe17 	ldw	r2,-8(fp)
 10151d8:	10800044 	addi	r2,r2,1
 10151dc:	e0bffe15 	stw	r2,-8(fp)
 10151e0:	e1bffc04 	addi	r6,fp,-16
 10151e4:	e13ffb17 	ldw	r4,-20(fp)
 10151e8:	101512c0 	call	101512c <alt_up_rs232_read_data>
 10151ec:	1004c03a 	cmpne	r2,r2,zero
 10151f0:	1000091e 	bne	r2,zero,1015218 <alt_up_rs232_read_fd+0x78>
			count++;
 10151f4:	e0bffa17 	ldw	r2,-24(fp)
 10151f8:	10800044 	addi	r2,r2,1
 10151fc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1015200:	e0bfff17 	ldw	r2,-4(fp)
 1015204:	10bfffc4 	addi	r2,r2,-1
 1015208:	e0bfff15 	stw	r2,-4(fp)
 101520c:	e0bfff17 	ldw	r2,-4(fp)
 1015210:	10bfffd8 	cmpnei	r2,r2,-1
 1015214:	103fee1e 	bne	r2,zero,10151d0 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1015218:	e0bffa17 	ldw	r2,-24(fp)
}
 101521c:	e037883a 	mov	sp,fp
 1015220:	dfc00117 	ldw	ra,4(sp)
 1015224:	df000017 	ldw	fp,0(sp)
 1015228:	dec00204 	addi	sp,sp,8
 101522c:	f800283a 	ret

01015230 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1015230:	defff904 	addi	sp,sp,-28
 1015234:	dfc00615 	stw	ra,24(sp)
 1015238:	df000515 	stw	fp,20(sp)
 101523c:	df000504 	addi	fp,sp,20
 1015240:	e13ffd15 	stw	r4,-12(fp)
 1015244:	e17ffe15 	stw	r5,-8(fp)
 1015248:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 101524c:	e0bffd17 	ldw	r2,-12(fp)
 1015250:	10800017 	ldw	r2,0(r2)
 1015254:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1015258:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 101525c:	00000d06 	br	1015294 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1015260:	e0bffe17 	ldw	r2,-8(fp)
 1015264:	10800003 	ldbu	r2,0(r2)
 1015268:	11403fcc 	andi	r5,r2,255
 101526c:	e13ffc17 	ldw	r4,-16(fp)
 1015270:	10150e40 	call	10150e4 <alt_up_rs232_write_data>
 1015274:	1004c03a 	cmpne	r2,r2,zero
 1015278:	10000c1e 	bne	r2,zero,10152ac <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 101527c:	e0bffb17 	ldw	r2,-20(fp)
 1015280:	10800044 	addi	r2,r2,1
 1015284:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1015288:	e0bffe17 	ldw	r2,-8(fp)
 101528c:	10800044 	addi	r2,r2,1
 1015290:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1015294:	e0bfff17 	ldw	r2,-4(fp)
 1015298:	10bfffc4 	addi	r2,r2,-1
 101529c:	e0bfff15 	stw	r2,-4(fp)
 10152a0:	e0bfff17 	ldw	r2,-4(fp)
 10152a4:	10bfffd8 	cmpnei	r2,r2,-1
 10152a8:	103fed1e 	bne	r2,zero,1015260 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 10152ac:	e0bffb17 	ldw	r2,-20(fp)
}
 10152b0:	e037883a 	mov	sp,fp
 10152b4:	dfc00117 	ldw	ra,4(sp)
 10152b8:	df000017 	ldw	fp,0(sp)
 10152bc:	dec00204 	addi	sp,sp,8
 10152c0:	f800283a 	ret

010152c4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 10152c4:	defffc04 	addi	sp,sp,-16
 10152c8:	dfc00315 	stw	ra,12(sp)
 10152cc:	df000215 	stw	fp,8(sp)
 10152d0:	df000204 	addi	fp,sp,8
 10152d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 10152d8:	e13fff17 	ldw	r4,-4(fp)
 10152dc:	014040b4 	movhi	r5,258
 10152e0:	297a4404 	addi	r5,r5,-5872
 10152e4:	101b3a00 	call	101b3a0 <alt_find_dev>
 10152e8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10152ec:	e0bffe17 	ldw	r2,-8(fp)
}
 10152f0:	e037883a 	mov	sp,fp
 10152f4:	dfc00117 	ldw	ra,4(sp)
 10152f8:	df000017 	ldw	fp,0(sp)
 10152fc:	dec00204 	addi	sp,sp,8
 1015300:	f800283a 	ret

01015304 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 1015304:	defffc04 	addi	sp,sp,-16
 1015308:	dfc00315 	stw	ra,12(sp)
 101530c:	df000215 	stw	fp,8(sp)
 1015310:	df000204 	addi	fp,sp,8
 1015314:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 1015318:	e0bfff17 	ldw	r2,-4(fp)
 101531c:	10800217 	ldw	r2,8(r2)
 1015320:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 1015324:	00000c06 	br	1015358 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 1015328:	e13ffe17 	ldw	r4,-8(fp)
 101532c:	014040b4 	movhi	r5,258
 1015330:	29733604 	addi	r5,r5,-13096
 1015334:	100b7140 	call	100b714 <strcmp>
 1015338:	1004c03a 	cmpne	r2,r2,zero
 101533c:	1000031e 	bne	r2,zero,101534c <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 1015340:	e0bffe17 	ldw	r2,-8(fp)
 1015344:	10000005 	stb	zero,0(r2)
			break;
 1015348:	00000a06 	br	1015374 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 101534c:	e0bffe17 	ldw	r2,-8(fp)
 1015350:	10800044 	addi	r2,r2,1
 1015354:	e0bffe15 	stw	r2,-8(fp)
 1015358:	e0bffe17 	ldw	r2,-8(fp)
 101535c:	10800003 	ldbu	r2,0(r2)
 1015360:	10803fcc 	andi	r2,r2,255
 1015364:	1080201c 	xori	r2,r2,128
 1015368:	10bfe004 	addi	r2,r2,-128
 101536c:	1004c03a 	cmpne	r2,r2,zero
 1015370:	103fed1e 	bne	r2,zero,1015328 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 1015374:	e037883a 	mov	sp,fp
 1015378:	dfc00117 	ldw	ra,4(sp)
 101537c:	df000017 	ldw	fp,0(sp)
 1015380:	dec00204 	addi	sp,sp,8
 1015384:	f800283a 	ret

01015388 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1015388:	defffc04 	addi	sp,sp,-16
 101538c:	dfc00315 	stw	ra,12(sp)
 1015390:	df000215 	stw	fp,8(sp)
 1015394:	df000204 	addi	fp,sp,8
 1015398:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 101539c:	e13fff17 	ldw	r4,-4(fp)
 10153a0:	014040b4 	movhi	r5,258
 10153a4:	297a4404 	addi	r5,r5,-5872
 10153a8:	101b3a00 	call	101b3a0 <alt_find_dev>
 10153ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10153b0:	e0bffe17 	ldw	r2,-8(fp)
}
 10153b4:	e037883a 	mov	sp,fp
 10153b8:	dfc00117 	ldw	ra,4(sp)
 10153bc:	df000017 	ldw	fp,0(sp)
 10153c0:	dec00204 	addi	sp,sp,8
 10153c4:	f800283a 	ret

010153c8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 10153c8:	defff904 	addi	sp,sp,-28
 10153cc:	df000615 	stw	fp,24(sp)
 10153d0:	df000604 	addi	fp,sp,24
 10153d4:	e13ffb15 	stw	r4,-20(fp)
 10153d8:	e1bffd15 	stw	r6,-12(fp)
 10153dc:	e1fffe15 	stw	r7,-8(fp)
 10153e0:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 10153e4:	e0bffb17 	ldw	r2,-20(fp)
 10153e8:	10c00c17 	ldw	r3,48(r2)
 10153ec:	e0bffd17 	ldw	r2,-12(fp)
 10153f0:	10c0042e 	bgeu	r2,r3,1015404 <alt_up_char_buffer_draw+0x3c>
 10153f4:	e0bffb17 	ldw	r2,-20(fp)
 10153f8:	10c00d17 	ldw	r3,52(r2)
 10153fc:	e0bffe17 	ldw	r2,-8(fp)
 1015400:	10c00336 	bltu	r2,r3,1015410 <alt_up_char_buffer_draw+0x48>
		return -1;
 1015404:	00bfffc4 	movi	r2,-1
 1015408:	e0bfff15 	stw	r2,-4(fp)
 101540c:	00001d06 	br	1015484 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1015410:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1015414:	e0bffb17 	ldw	r2,-20(fp)
 1015418:	10c00f17 	ldw	r3,60(r2)
 101541c:	e0bffd17 	ldw	r2,-12(fp)
 1015420:	1886703a 	and	r3,r3,r2
 1015424:	e0bffb17 	ldw	r2,-20(fp)
 1015428:	10800e17 	ldw	r2,56(r2)
 101542c:	1886983a 	sll	r3,r3,r2
 1015430:	e0bffa17 	ldw	r2,-24(fp)
 1015434:	10c4b03a 	or	r2,r2,r3
 1015438:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 101543c:	e0bffb17 	ldw	r2,-20(fp)
 1015440:	10c01117 	ldw	r3,68(r2)
 1015444:	e0bffe17 	ldw	r2,-8(fp)
 1015448:	1886703a 	and	r3,r3,r2
 101544c:	e0bffb17 	ldw	r2,-20(fp)
 1015450:	10801017 	ldw	r2,64(r2)
 1015454:	1886983a 	sll	r3,r3,r2
 1015458:	e0bffa17 	ldw	r2,-24(fp)
 101545c:	10c4b03a 	or	r2,r2,r3
 1015460:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 1015464:	e0bffb17 	ldw	r2,-20(fp)
 1015468:	10800b17 	ldw	r2,44(r2)
 101546c:	1007883a 	mov	r3,r2
 1015470:	e0bffa17 	ldw	r2,-24(fp)
 1015474:	1885883a 	add	r2,r3,r2
 1015478:	e0fffc03 	ldbu	r3,-16(fp)
 101547c:	10c00025 	stbio	r3,0(r2)

	return 0;
 1015480:	e03fff15 	stw	zero,-4(fp)
 1015484:	e0bfff17 	ldw	r2,-4(fp)
}
 1015488:	e037883a 	mov	sp,fp
 101548c:	df000017 	ldw	fp,0(sp)
 1015490:	dec00104 	addi	sp,sp,4
 1015494:	f800283a 	ret

01015498 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1015498:	defff904 	addi	sp,sp,-28
 101549c:	df000615 	stw	fp,24(sp)
 10154a0:	df000604 	addi	fp,sp,24
 10154a4:	e13ffb15 	stw	r4,-20(fp)
 10154a8:	e17ffc15 	stw	r5,-16(fp)
 10154ac:	e1bffd15 	stw	r6,-12(fp)
 10154b0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 10154b4:	e0bffb17 	ldw	r2,-20(fp)
 10154b8:	10c00c17 	ldw	r3,48(r2)
 10154bc:	e0bffd17 	ldw	r2,-12(fp)
 10154c0:	10c0042e 	bgeu	r2,r3,10154d4 <alt_up_char_buffer_string+0x3c>
 10154c4:	e0bffb17 	ldw	r2,-20(fp)
 10154c8:	10c00d17 	ldw	r3,52(r2)
 10154cc:	e0bffe17 	ldw	r2,-8(fp)
 10154d0:	10c00336 	bltu	r2,r3,10154e0 <alt_up_char_buffer_string+0x48>
		return -1;
 10154d4:	00bfffc4 	movi	r2,-1
 10154d8:	e0bfff15 	stw	r2,-4(fp)
 10154dc:	00002e06 	br	1015598 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 10154e0:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 10154e4:	e0bffb17 	ldw	r2,-20(fp)
 10154e8:	10801017 	ldw	r2,64(r2)
 10154ec:	1007883a 	mov	r3,r2
 10154f0:	e0bffe17 	ldw	r2,-8(fp)
 10154f4:	10c6983a 	sll	r3,r2,r3
 10154f8:	e0bffd17 	ldw	r2,-12(fp)
 10154fc:	1885883a 	add	r2,r3,r2
 1015500:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 1015504:	00001c06 	br	1015578 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 1015508:	e0bffb17 	ldw	r2,-20(fp)
 101550c:	10800b17 	ldw	r2,44(r2)
 1015510:	1007883a 	mov	r3,r2
 1015514:	e0bffa17 	ldw	r2,-24(fp)
 1015518:	1889883a 	add	r4,r3,r2
 101551c:	e0bffc17 	ldw	r2,-16(fp)
 1015520:	10800003 	ldbu	r2,0(r2)
 1015524:	10c03fcc 	andi	r3,r2,255
 1015528:	18c0201c 	xori	r3,r3,128
 101552c:	18ffe004 	addi	r3,r3,-128
 1015530:	2005883a 	mov	r2,r4
 1015534:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1015538:	e0bffc17 	ldw	r2,-16(fp)
 101553c:	10800044 	addi	r2,r2,1
 1015540:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 1015544:	e0bffd17 	ldw	r2,-12(fp)
 1015548:	10800044 	addi	r2,r2,1
 101554c:	e0bffd15 	stw	r2,-12(fp)
 1015550:	e0bffb17 	ldw	r2,-20(fp)
 1015554:	10c00c17 	ldw	r3,48(r2)
 1015558:	e0bffd17 	ldw	r2,-12(fp)
 101555c:	10c00336 	bltu	r2,r3,101556c <alt_up_char_buffer_string+0xd4>
			return -1;
 1015560:	00bfffc4 	movi	r2,-1
 1015564:	e0bfff15 	stw	r2,-4(fp)
 1015568:	00000b06 	br	1015598 <alt_up_char_buffer_string+0x100>
		++offset;
 101556c:	e0bffa17 	ldw	r2,-24(fp)
 1015570:	10800044 	addi	r2,r2,1
 1015574:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1015578:	e0bffc17 	ldw	r2,-16(fp)
 101557c:	10800003 	ldbu	r2,0(r2)
 1015580:	10803fcc 	andi	r2,r2,255
 1015584:	1080201c 	xori	r2,r2,128
 1015588:	10bfe004 	addi	r2,r2,-128
 101558c:	1004c03a 	cmpne	r2,r2,zero
 1015590:	103fdd1e 	bne	r2,zero,1015508 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1015594:	e03fff15 	stw	zero,-4(fp)
 1015598:	e0bfff17 	ldw	r2,-4(fp)
}
 101559c:	e037883a 	mov	sp,fp
 10155a0:	df000017 	ldw	fp,0(sp)
 10155a4:	dec00104 	addi	sp,sp,4
 10155a8:	f800283a 	ret

010155ac <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 10155ac:	defffe04 	addi	sp,sp,-8
 10155b0:	df000115 	stw	fp,4(sp)
 10155b4:	df000104 	addi	fp,sp,4
 10155b8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 10155bc:	e0bfff17 	ldw	r2,-4(fp)
 10155c0:	10800a17 	ldw	r2,40(r2)
 10155c4:	10800084 	addi	r2,r2,2
 10155c8:	1007883a 	mov	r3,r2
 10155cc:	00800044 	movi	r2,1
 10155d0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 10155d4:	e0bfff17 	ldw	r2,-4(fp)
 10155d8:	10800a17 	ldw	r2,40(r2)
 10155dc:	10800084 	addi	r2,r2,2
 10155e0:	10800023 	ldbuio	r2,0(r2)
 10155e4:	1080004c 	andi	r2,r2,1
 10155e8:	10803fcc 	andi	r2,r2,255
 10155ec:	1004c03a 	cmpne	r2,r2,zero
 10155f0:	103ff81e 	bne	r2,zero,10155d4 <alt_up_char_buffer_clear+0x28>
	return 0;
 10155f4:	0005883a 	mov	r2,zero
}
 10155f8:	e037883a 	mov	sp,fp
 10155fc:	df000017 	ldw	fp,0(sp)
 1015600:	dec00104 	addi	sp,sp,4
 1015604:	f800283a 	ret

01015608 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 1015608:	defffc04 	addi	sp,sp,-16
 101560c:	dfc00315 	stw	ra,12(sp)
 1015610:	df000215 	stw	fp,8(sp)
 1015614:	df000204 	addi	fp,sp,8
 1015618:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 101561c:	e13fff17 	ldw	r4,-4(fp)
 1015620:	014040b4 	movhi	r5,258
 1015624:	297a4404 	addi	r5,r5,-5872
 1015628:	101b3a00 	call	101b3a0 <alt_find_dev>
 101562c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1015630:	e0bffe17 	ldw	r2,-8(fp)
}
 1015634:	e037883a 	mov	sp,fp
 1015638:	dfc00117 	ldw	ra,4(sp)
 101563c:	df000017 	ldw	fp,0(sp)
 1015640:	dec00204 	addi	sp,sp,8
 1015644:	f800283a 	ret

01015648 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 1015648:	defff804 	addi	sp,sp,-32
 101564c:	dfc00715 	stw	ra,28(sp)
 1015650:	df000615 	stw	fp,24(sp)
 1015654:	df000604 	addi	fp,sp,24
 1015658:	e13ffb15 	stw	r4,-20(fp)
 101565c:	e17ffc15 	stw	r5,-16(fp)
 1015660:	e1bffd15 	stw	r6,-12(fp)
 1015664:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 1015668:	e0bffb17 	ldw	r2,-20(fp)
 101566c:	10c00f17 	ldw	r3,60(r2)
 1015670:	e0bffd17 	ldw	r2,-12(fp)
 1015674:	10c0042e 	bgeu	r2,r3,1015688 <alt_up_pixel_buffer_dma_draw+0x40>
 1015678:	e0bffb17 	ldw	r2,-20(fp)
 101567c:	10c01017 	ldw	r3,64(r2)
 1015680:	e0bffe17 	ldw	r2,-8(fp)
 1015684:	10c00336 	bltu	r2,r3,1015694 <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
 1015688:	00bfffc4 	movi	r2,-1
 101568c:	e0bfff15 	stw	r2,-4(fp)
 1015690:	00005206 	br	10157dc <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 1015694:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1015698:	e0bffb17 	ldw	r2,-20(fp)
 101569c:	10800d17 	ldw	r2,52(r2)
 10156a0:	1004c03a 	cmpne	r2,r2,zero
 10156a4:	1000151e 	bne	r2,zero,10156fc <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 10156a8:	e0bffb17 	ldw	r2,-20(fp)
 10156ac:	10c01217 	ldw	r3,72(r2)
 10156b0:	e0bffd17 	ldw	r2,-12(fp)
 10156b4:	1886703a 	and	r3,r3,r2
 10156b8:	e0bffb17 	ldw	r2,-20(fp)
 10156bc:	10801117 	ldw	r2,68(r2)
 10156c0:	1886983a 	sll	r3,r3,r2
 10156c4:	e0bffa17 	ldw	r2,-24(fp)
 10156c8:	10c4b03a 	or	r2,r2,r3
 10156cc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 10156d0:	e0bffb17 	ldw	r2,-20(fp)
 10156d4:	10c01417 	ldw	r3,80(r2)
 10156d8:	e0bffe17 	ldw	r2,-8(fp)
 10156dc:	1886703a 	and	r3,r3,r2
 10156e0:	e0bffb17 	ldw	r2,-20(fp)
 10156e4:	10801317 	ldw	r2,76(r2)
 10156e8:	1886983a 	sll	r3,r3,r2
 10156ec:	e0bffa17 	ldw	r2,-24(fp)
 10156f0:	10c4b03a 	or	r2,r2,r3
 10156f4:	e0bffa15 	stw	r2,-24(fp)
 10156f8:	00001806 	br	101575c <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 10156fc:	e0bffb17 	ldw	r2,-20(fp)
 1015700:	10c01217 	ldw	r3,72(r2)
 1015704:	e0bffd17 	ldw	r2,-12(fp)
 1015708:	1886703a 	and	r3,r3,r2
 101570c:	e0bffb17 	ldw	r2,-20(fp)
 1015710:	10801117 	ldw	r2,68(r2)
 1015714:	1886983a 	sll	r3,r3,r2
 1015718:	e0bffa17 	ldw	r2,-24(fp)
 101571c:	10c5883a 	add	r2,r2,r3
 1015720:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 1015724:	e0bffb17 	ldw	r2,-20(fp)
 1015728:	10c01417 	ldw	r3,80(r2)
 101572c:	e0bffe17 	ldw	r2,-8(fp)
 1015730:	1888703a 	and	r4,r3,r2
 1015734:	e0bffb17 	ldw	r2,-20(fp)
 1015738:	11400f17 	ldw	r5,60(r2)
 101573c:	10026440 	call	1002644 <__mulsi3>
 1015740:	1007883a 	mov	r3,r2
 1015744:	e0bffb17 	ldw	r2,-20(fp)
 1015748:	10801117 	ldw	r2,68(r2)
 101574c:	1886983a 	sll	r3,r3,r2
 1015750:	e0bffa17 	ldw	r2,-24(fp)
 1015754:	10c5883a 	add	r2,r2,r3
 1015758:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101575c:	e0bffb17 	ldw	r2,-20(fp)
 1015760:	10800e17 	ldw	r2,56(r2)
 1015764:	10800058 	cmpnei	r2,r2,1
 1015768:	1000081e 	bne	r2,zero,101578c <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 101576c:	e0bffb17 	ldw	r2,-20(fp)
 1015770:	10800c17 	ldw	r2,48(r2)
 1015774:	1007883a 	mov	r3,r2
 1015778:	e0bffa17 	ldw	r2,-24(fp)
 101577c:	1885883a 	add	r2,r3,r2
 1015780:	e0fffc17 	ldw	r3,-16(fp)
 1015784:	10c00025 	stbio	r3,0(r2)
 1015788:	00001306 	br	10157d8 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 101578c:	e0bffb17 	ldw	r2,-20(fp)
 1015790:	10800e17 	ldw	r2,56(r2)
 1015794:	10800098 	cmpnei	r2,r2,2
 1015798:	1000081e 	bne	r2,zero,10157bc <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 101579c:	e0bffb17 	ldw	r2,-20(fp)
 10157a0:	10800c17 	ldw	r2,48(r2)
 10157a4:	1007883a 	mov	r3,r2
 10157a8:	e0bffa17 	ldw	r2,-24(fp)
 10157ac:	1885883a 	add	r2,r3,r2
 10157b0:	e0fffc17 	ldw	r3,-16(fp)
 10157b4:	10c0002d 	sthio	r3,0(r2)
 10157b8:	00000706 	br	10157d8 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 10157bc:	e0bffb17 	ldw	r2,-20(fp)
 10157c0:	10800c17 	ldw	r2,48(r2)
 10157c4:	1007883a 	mov	r3,r2
 10157c8:	e0bffa17 	ldw	r2,-24(fp)
 10157cc:	1885883a 	add	r2,r3,r2
 10157d0:	e0fffc17 	ldw	r3,-16(fp)
 10157d4:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 10157d8:	e03fff15 	stw	zero,-4(fp)
 10157dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10157e0:	e037883a 	mov	sp,fp
 10157e4:	dfc00117 	ldw	ra,4(sp)
 10157e8:	df000017 	ldw	fp,0(sp)
 10157ec:	dec00204 	addi	sp,sp,8
 10157f0:	f800283a 	ret

010157f4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 10157f4:	defffd04 	addi	sp,sp,-12
 10157f8:	df000215 	stw	fp,8(sp)
 10157fc:	df000204 	addi	fp,sp,8
 1015800:	e13ffe15 	stw	r4,-8(fp)
 1015804:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 1015808:	e0bffe17 	ldw	r2,-8(fp)
 101580c:	10800a17 	ldw	r2,40(r2)
 1015810:	10800104 	addi	r2,r2,4
 1015814:	e0ffff17 	ldw	r3,-4(fp)
 1015818:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 101581c:	e0bffe17 	ldw	r2,-8(fp)
 1015820:	10800a17 	ldw	r2,40(r2)
 1015824:	10800104 	addi	r2,r2,4
 1015828:	10800037 	ldwio	r2,0(r2)
 101582c:	1007883a 	mov	r3,r2
 1015830:	e0bffe17 	ldw	r2,-8(fp)
 1015834:	10c00c15 	stw	r3,48(r2)
	return 0;
 1015838:	0005883a 	mov	r2,zero
}
 101583c:	e037883a 	mov	sp,fp
 1015840:	df000017 	ldw	fp,0(sp)
 1015844:	dec00104 	addi	sp,sp,4
 1015848:	f800283a 	ret

0101584c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 101584c:	defffe04 	addi	sp,sp,-8
 1015850:	df000115 	stw	fp,4(sp)
 1015854:	df000104 	addi	fp,sp,4
 1015858:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 101585c:	e0bfff17 	ldw	r2,-4(fp)
 1015860:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 1015864:	e0bfff17 	ldw	r2,-4(fp)
 1015868:	10800a17 	ldw	r2,40(r2)
 101586c:	1007883a 	mov	r3,r2
 1015870:	00800044 	movi	r2,1
 1015874:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 1015878:	e0bfff17 	ldw	r2,-4(fp)
 101587c:	10c00b17 	ldw	r3,44(r2)
 1015880:	e0bfff17 	ldw	r2,-4(fp)
 1015884:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 1015888:	e0bfff17 	ldw	r2,-4(fp)
 101588c:	11000b15 	stw	r4,44(r2)
	return 0;
 1015890:	0005883a 	mov	r2,zero
}
 1015894:	e037883a 	mov	sp,fp
 1015898:	df000017 	ldw	fp,0(sp)
 101589c:	dec00104 	addi	sp,sp,4
 10158a0:	f800283a 	ret

010158a4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 10158a4:	defffe04 	addi	sp,sp,-8
 10158a8:	df000115 	stw	fp,4(sp)
 10158ac:	df000104 	addi	fp,sp,4
 10158b0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 10158b4:	e0bfff17 	ldw	r2,-4(fp)
 10158b8:	10800a17 	ldw	r2,40(r2)
 10158bc:	10800304 	addi	r2,r2,12
 10158c0:	10800037 	ldwio	r2,0(r2)
 10158c4:	1080004c 	andi	r2,r2,1
}
 10158c8:	e037883a 	mov	sp,fp
 10158cc:	df000017 	ldw	fp,0(sp)
 10158d0:	dec00104 	addi	sp,sp,4
 10158d4:	f800283a 	ret

010158d8 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 10158d8:	defff504 	addi	sp,sp,-44
 10158dc:	dfc00a15 	stw	ra,40(sp)
 10158e0:	df000915 	stw	fp,36(sp)
 10158e4:	df000904 	addi	fp,sp,36
 10158e8:	e13ff715 	stw	r4,-36(fp)
 10158ec:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10158f0:	e0bff817 	ldw	r2,-32(fp)
 10158f4:	10800058 	cmpnei	r2,r2,1
 10158f8:	1000041e 	bne	r2,zero,101590c <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
 10158fc:	e0bff717 	ldw	r2,-36(fp)
 1015900:	10800c17 	ldw	r2,48(r2)
 1015904:	e0bfff15 	stw	r2,-4(fp)
 1015908:	00000306 	br	1015918 <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
 101590c:	e0bff717 	ldw	r2,-36(fp)
 1015910:	10800b17 	ldw	r2,44(r2)
 1015914:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 1015918:	e0bff717 	ldw	r2,-36(fp)
 101591c:	10800f17 	ldw	r2,60(r2)
 1015920:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1015924:	e0bff717 	ldw	r2,-36(fp)
 1015928:	10800e17 	ldw	r2,56(r2)
 101592c:	10800098 	cmpnei	r2,r2,2
 1015930:	1000051e 	bne	r2,zero,1015948 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 1015934:	e0fffe17 	ldw	r3,-8(fp)
 1015938:	e0fffe17 	ldw	r3,-8(fp)
 101593c:	18c5883a 	add	r2,r3,r3
 1015940:	e0bffe15 	stw	r2,-8(fp)
 1015944:	00000506 	br	101595c <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
 1015948:	e13ffe17 	ldw	r4,-8(fp)
 101594c:	e13ffe17 	ldw	r4,-8(fp)
 1015950:	2105883a 	add	r2,r4,r4
 1015954:	1085883a 	add	r2,r2,r2
 1015958:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 101595c:	e0bff717 	ldw	r2,-36(fp)
 1015960:	10801017 	ldw	r2,64(r2)
 1015964:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1015968:	e0bff717 	ldw	r2,-36(fp)
 101596c:	10800d17 	ldw	r2,52(r2)
 1015970:	1004c03a 	cmpne	r2,r2,zero
 1015974:	10001e1e 	bne	r2,zero,10159f0 <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1015978:	e0bff717 	ldw	r2,-36(fp)
 101597c:	10801317 	ldw	r2,76(r2)
 1015980:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 1015984:	e03ffb15 	stw	zero,-20(fp)
 1015988:	00001506 	br	10159e0 <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
 101598c:	e03ffc15 	stw	zero,-16(fp)
 1015990:	00000706 	br	10159b0 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
 1015994:	e0ffff17 	ldw	r3,-4(fp)
 1015998:	e0bffc17 	ldw	r2,-16(fp)
 101599c:	1885883a 	add	r2,r3,r2
 10159a0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 10159a4:	e0bffc17 	ldw	r2,-16(fp)
 10159a8:	10800104 	addi	r2,r2,4
 10159ac:	e0bffc15 	stw	r2,-16(fp)
 10159b0:	e0fffc17 	ldw	r3,-16(fp)
 10159b4:	e13ffe17 	ldw	r4,-8(fp)
 10159b8:	193ff636 	bltu	r3,r4,1015994 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 10159bc:	e0fffa17 	ldw	r3,-24(fp)
 10159c0:	00800044 	movi	r2,1
 10159c4:	10c4983a 	sll	r2,r2,r3
 10159c8:	e0ffff17 	ldw	r3,-4(fp)
 10159cc:	1887883a 	add	r3,r3,r2
 10159d0:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 10159d4:	e13ffb17 	ldw	r4,-20(fp)
 10159d8:	21000044 	addi	r4,r4,1
 10159dc:	e13ffb15 	stw	r4,-20(fp)
 10159e0:	e0bffb17 	ldw	r2,-20(fp)
 10159e4:	e0fffd17 	ldw	r3,-12(fp)
 10159e8:	10ffe836 	bltu	r2,r3,101598c <alt_up_pixel_buffer_dma_clear_screen+0xb4>
 10159ec:	00001006 	br	1015a30 <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 10159f0:	e13ffd17 	ldw	r4,-12(fp)
 10159f4:	e17ffe17 	ldw	r5,-8(fp)
 10159f8:	10026440 	call	1002644 <__mulsi3>
 10159fc:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 1015a00:	e03ff915 	stw	zero,-28(fp)
 1015a04:	00000706 	br	1015a24 <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
 1015a08:	e0ffff17 	ldw	r3,-4(fp)
 1015a0c:	e0bff917 	ldw	r2,-28(fp)
 1015a10:	1885883a 	add	r2,r3,r2
 1015a14:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 1015a18:	e13ff917 	ldw	r4,-28(fp)
 1015a1c:	21000104 	addi	r4,r4,4
 1015a20:	e13ff915 	stw	r4,-28(fp)
 1015a24:	e0bff917 	ldw	r2,-28(fp)
 1015a28:	e0fffd17 	ldw	r3,-12(fp)
 1015a2c:	10fff636 	bltu	r2,r3,1015a08 <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 1015a30:	e037883a 	mov	sp,fp
 1015a34:	dfc00117 	ldw	ra,4(sp)
 1015a38:	df000017 	ldw	fp,0(sp)
 1015a3c:	dec00204 	addi	sp,sp,8
 1015a40:	f800283a 	ret

01015a44 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 1015a44:	deffec04 	addi	sp,sp,-80
 1015a48:	dfc01315 	stw	ra,76(sp)
 1015a4c:	df001215 	stw	fp,72(sp)
 1015a50:	df001204 	addi	fp,sp,72
 1015a54:	e13fee15 	stw	r4,-72(fp)
 1015a58:	e17fef15 	stw	r5,-68(fp)
 1015a5c:	e1bff015 	stw	r6,-64(fp)
 1015a60:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1015a64:	e0bfee17 	ldw	r2,-72(fp)
 1015a68:	10800f17 	ldw	r2,60(r2)
 1015a6c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1015a70:	e0bfee17 	ldw	r2,-72(fp)
 1015a74:	10801017 	ldw	r2,64(r2)
 1015a78:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1015a7c:	e0bfef17 	ldw	r2,-68(fp)
 1015a80:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 1015a84:	e0fff117 	ldw	r3,-60(fp)
 1015a88:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 1015a8c:	e13ff017 	ldw	r4,-64(fp)
 1015a90:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 1015a94:	e0800217 	ldw	r2,8(fp)
 1015a98:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 1015a9c:	e0c00317 	ldw	r3,12(fp)
 1015aa0:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1015aa4:	e13ffa17 	ldw	r4,-24(fp)
 1015aa8:	e0bffb17 	ldw	r2,-20(fp)
 1015aac:	2080062e 	bgeu	r4,r2,1015ac8 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
 1015ab0:	e0fffb17 	ldw	r3,-20(fp)
 1015ab4:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 1015ab8:	e13ffa17 	ldw	r4,-24(fp)
 1015abc:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 1015ac0:	e0bffc17 	ldw	r2,-16(fp)
 1015ac4:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 1015ac8:	e0fff817 	ldw	r3,-32(fp)
 1015acc:	e13ff917 	ldw	r4,-28(fp)
 1015ad0:	1900062e 	bgeu	r3,r4,1015aec <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
 1015ad4:	e0bff917 	ldw	r2,-28(fp)
 1015ad8:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 1015adc:	e0fff817 	ldw	r3,-32(fp)
 1015ae0:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 1015ae4:	e13ffc17 	ldw	r4,-16(fp)
 1015ae8:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 1015aec:	e0bffb17 	ldw	r2,-20(fp)
 1015af0:	e0fffe17 	ldw	r3,-8(fp)
 1015af4:	10c10d2e 	bgeu	r2,r3,1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
 1015af8:	e13ff917 	ldw	r4,-28(fp)
 1015afc:	e0bffd17 	ldw	r2,-12(fp)
 1015b00:	20800136 	bltu	r4,r2,1015b08 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1015b04:	00010906 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1015b08:	e0fffa17 	ldw	r3,-24(fp)
 1015b0c:	e13ffe17 	ldw	r4,-8(fp)
 1015b10:	19000336 	bltu	r3,r4,1015b20 <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
 1015b14:	e0bffe17 	ldw	r2,-8(fp)
 1015b18:	10bfffc4 	addi	r2,r2,-1
 1015b1c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1015b20:	e0fff817 	ldw	r3,-32(fp)
 1015b24:	e13ffd17 	ldw	r4,-12(fp)
 1015b28:	19000336 	bltu	r3,r4,1015b38 <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
 1015b2c:	e0bffd17 	ldw	r2,-12(fp)
 1015b30:	10bfffc4 	addi	r2,r2,-1
 1015b34:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1015b38:	e0800417 	ldw	r2,16(fp)
 1015b3c:	10800058 	cmpnei	r2,r2,1
 1015b40:	1000041e 	bne	r2,zero,1015b54 <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
 1015b44:	e0bfee17 	ldw	r2,-72(fp)
 1015b48:	10800c17 	ldw	r2,48(r2)
 1015b4c:	e0bfff15 	stw	r2,-4(fp)
 1015b50:	00000306 	br	1015b60 <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
 1015b54:	e0bfee17 	ldw	r2,-72(fp)
 1015b58:	10800b17 	ldw	r2,44(r2)
 1015b5c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1015b60:	e0bfee17 	ldw	r2,-72(fp)
 1015b64:	10800d17 	ldw	r2,52(r2)
 1015b68:	1004c03a 	cmpne	r2,r2,zero
 1015b6c:	1000721e 	bne	r2,zero,1015d38 <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1015b70:	e0bfee17 	ldw	r2,-72(fp)
 1015b74:	10801317 	ldw	r2,76(r2)
 1015b78:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 1015b7c:	e0bff417 	ldw	r2,-48(fp)
 1015b80:	e0fff917 	ldw	r3,-28(fp)
 1015b84:	1884983a 	sll	r2,r3,r2
 1015b88:	e13fff17 	ldw	r4,-4(fp)
 1015b8c:	2089883a 	add	r4,r4,r2
 1015b90:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1015b94:	e0bfee17 	ldw	r2,-72(fp)
 1015b98:	10800e17 	ldw	r2,56(r2)
 1015b9c:	10800058 	cmpnei	r2,r2,1
 1015ba0:	10001e1e 	bne	r2,zero,1015c1c <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
 1015ba4:	e0bff917 	ldw	r2,-28(fp)
 1015ba8:	e0bff515 	stw	r2,-44(fp)
 1015bac:	00001706 	br	1015c0c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
 1015bb0:	e0fffb17 	ldw	r3,-20(fp)
 1015bb4:	e0fff615 	stw	r3,-40(fp)
 1015bb8:	00000806 	br	1015bdc <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1015bbc:	e0ffff17 	ldw	r3,-4(fp)
 1015bc0:	e0bff617 	ldw	r2,-40(fp)
 1015bc4:	1885883a 	add	r2,r3,r2
 1015bc8:	e0fff717 	ldw	r3,-36(fp)
 1015bcc:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015bd0:	e13ff617 	ldw	r4,-40(fp)
 1015bd4:	21000044 	addi	r4,r4,1
 1015bd8:	e13ff615 	stw	r4,-40(fp)
 1015bdc:	e0bffa17 	ldw	r2,-24(fp)
 1015be0:	e0fff617 	ldw	r3,-40(fp)
 1015be4:	10fff52e 	bgeu	r2,r3,1015bbc <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 1015be8:	e0fff417 	ldw	r3,-48(fp)
 1015bec:	00800044 	movi	r2,1
 1015bf0:	10c4983a 	sll	r2,r2,r3
 1015bf4:	e13fff17 	ldw	r4,-4(fp)
 1015bf8:	2089883a 	add	r4,r4,r2
 1015bfc:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1015c00:	e0bff517 	ldw	r2,-44(fp)
 1015c04:	10800044 	addi	r2,r2,1
 1015c08:	e0bff515 	stw	r2,-44(fp)
 1015c0c:	e0fff817 	ldw	r3,-32(fp)
 1015c10:	e13ff517 	ldw	r4,-44(fp)
 1015c14:	193fe62e 	bgeu	r3,r4,1015bb0 <alt_up_pixel_buffer_dma_draw_box+0x16c>
 1015c18:	0000c406 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1015c1c:	e0bfee17 	ldw	r2,-72(fp)
 1015c20:	10800e17 	ldw	r2,56(r2)
 1015c24:	10800098 	cmpnei	r2,r2,2
 1015c28:	1000211e 	bne	r2,zero,1015cb0 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
 1015c2c:	e0bff917 	ldw	r2,-28(fp)
 1015c30:	e0bff515 	stw	r2,-44(fp)
 1015c34:	00001a06 	br	1015ca0 <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
 1015c38:	e0fffb17 	ldw	r3,-20(fp)
 1015c3c:	e0fff615 	stw	r3,-40(fp)
 1015c40:	00000b06 	br	1015c70 <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1015c44:	e13ff617 	ldw	r4,-40(fp)
 1015c48:	e13ff617 	ldw	r4,-40(fp)
 1015c4c:	2105883a 	add	r2,r4,r4
 1015c50:	1007883a 	mov	r3,r2
 1015c54:	e0bfff17 	ldw	r2,-4(fp)
 1015c58:	1885883a 	add	r2,r3,r2
 1015c5c:	e0fff717 	ldw	r3,-36(fp)
 1015c60:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015c64:	e0bff617 	ldw	r2,-40(fp)
 1015c68:	10800044 	addi	r2,r2,1
 1015c6c:	e0bff615 	stw	r2,-40(fp)
 1015c70:	e0fffa17 	ldw	r3,-24(fp)
 1015c74:	e13ff617 	ldw	r4,-40(fp)
 1015c78:	193ff22e 	bgeu	r3,r4,1015c44 <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 1015c7c:	e0fff417 	ldw	r3,-48(fp)
 1015c80:	00800044 	movi	r2,1
 1015c84:	10c4983a 	sll	r2,r2,r3
 1015c88:	e0ffff17 	ldw	r3,-4(fp)
 1015c8c:	1887883a 	add	r3,r3,r2
 1015c90:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1015c94:	e13ff517 	ldw	r4,-44(fp)
 1015c98:	21000044 	addi	r4,r4,1
 1015c9c:	e13ff515 	stw	r4,-44(fp)
 1015ca0:	e0bff817 	ldw	r2,-32(fp)
 1015ca4:	e0fff517 	ldw	r3,-44(fp)
 1015ca8:	10ffe32e 	bgeu	r2,r3,1015c38 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
 1015cac:	00009f06 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1015cb0:	e13ff917 	ldw	r4,-28(fp)
 1015cb4:	e13ff515 	stw	r4,-44(fp)
 1015cb8:	00001b06 	br	1015d28 <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
 1015cbc:	e0bffb17 	ldw	r2,-20(fp)
 1015cc0:	e0bff615 	stw	r2,-40(fp)
 1015cc4:	00000c06 	br	1015cf8 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1015cc8:	e0fff617 	ldw	r3,-40(fp)
 1015ccc:	e0fff617 	ldw	r3,-40(fp)
 1015cd0:	18c5883a 	add	r2,r3,r3
 1015cd4:	1085883a 	add	r2,r2,r2
 1015cd8:	1007883a 	mov	r3,r2
 1015cdc:	e0bfff17 	ldw	r2,-4(fp)
 1015ce0:	1885883a 	add	r2,r3,r2
 1015ce4:	e0fff717 	ldw	r3,-36(fp)
 1015ce8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015cec:	e13ff617 	ldw	r4,-40(fp)
 1015cf0:	21000044 	addi	r4,r4,1
 1015cf4:	e13ff615 	stw	r4,-40(fp)
 1015cf8:	e0bffa17 	ldw	r2,-24(fp)
 1015cfc:	e0fff617 	ldw	r3,-40(fp)
 1015d00:	10fff12e 	bgeu	r2,r3,1015cc8 <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 1015d04:	e0fff417 	ldw	r3,-48(fp)
 1015d08:	00800044 	movi	r2,1
 1015d0c:	10c4983a 	sll	r2,r2,r3
 1015d10:	e13fff17 	ldw	r4,-4(fp)
 1015d14:	2089883a 	add	r4,r4,r2
 1015d18:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1015d1c:	e0bff517 	ldw	r2,-44(fp)
 1015d20:	10800044 	addi	r2,r2,1
 1015d24:	e0bff515 	stw	r2,-44(fp)
 1015d28:	e0fff817 	ldw	r3,-32(fp)
 1015d2c:	e13ff517 	ldw	r4,-44(fp)
 1015d30:	193fe22e 	bgeu	r3,r4,1015cbc <alt_up_pixel_buffer_dma_draw_box+0x278>
 1015d34:	00007d06 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1015d38:	e0bfee17 	ldw	r2,-72(fp)
 1015d3c:	10800e17 	ldw	r2,56(r2)
 1015d40:	10800058 	cmpnei	r2,r2,1
 1015d44:	1000221e 	bne	r2,zero,1015dd0 <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
 1015d48:	e13ff917 	ldw	r4,-28(fp)
 1015d4c:	e17ffe17 	ldw	r5,-8(fp)
 1015d50:	10026440 	call	1002644 <__mulsi3>
 1015d54:	e0ffff17 	ldw	r3,-4(fp)
 1015d58:	1887883a 	add	r3,r3,r2
 1015d5c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1015d60:	e13ff917 	ldw	r4,-28(fp)
 1015d64:	e13ff215 	stw	r4,-56(fp)
 1015d68:	00001506 	br	1015dc0 <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
 1015d6c:	e0bffb17 	ldw	r2,-20(fp)
 1015d70:	e0bff315 	stw	r2,-52(fp)
 1015d74:	00000806 	br	1015d98 <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1015d78:	e0ffff17 	ldw	r3,-4(fp)
 1015d7c:	e0bff317 	ldw	r2,-52(fp)
 1015d80:	1885883a 	add	r2,r3,r2
 1015d84:	e0fff717 	ldw	r3,-36(fp)
 1015d88:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015d8c:	e0fff317 	ldw	r3,-52(fp)
 1015d90:	18c00044 	addi	r3,r3,1
 1015d94:	e0fff315 	stw	r3,-52(fp)
 1015d98:	e13ffa17 	ldw	r4,-24(fp)
 1015d9c:	e0bff317 	ldw	r2,-52(fp)
 1015da0:	20bff52e 	bgeu	r4,r2,1015d78 <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 1015da4:	e0ffff17 	ldw	r3,-4(fp)
 1015da8:	e13ffe17 	ldw	r4,-8(fp)
 1015dac:	1907883a 	add	r3,r3,r4
 1015db0:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1015db4:	e0bff217 	ldw	r2,-56(fp)
 1015db8:	10800044 	addi	r2,r2,1
 1015dbc:	e0bff215 	stw	r2,-56(fp)
 1015dc0:	e0fff817 	ldw	r3,-32(fp)
 1015dc4:	e13ff217 	ldw	r4,-56(fp)
 1015dc8:	193fe82e 	bgeu	r3,r4,1015d6c <alt_up_pixel_buffer_dma_draw_box+0x328>
 1015dcc:	00005706 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1015dd0:	e0bfee17 	ldw	r2,-72(fp)
 1015dd4:	10800e17 	ldw	r2,56(r2)
 1015dd8:	10800098 	cmpnei	r2,r2,2
 1015ddc:	1000291e 	bne	r2,zero,1015e84 <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
 1015de0:	e0fffe17 	ldw	r3,-8(fp)
 1015de4:	e0fffe17 	ldw	r3,-8(fp)
 1015de8:	18c5883a 	add	r2,r3,r3
 1015dec:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1015df0:	e13ff917 	ldw	r4,-28(fp)
 1015df4:	e17ffe17 	ldw	r5,-8(fp)
 1015df8:	10026440 	call	1002644 <__mulsi3>
 1015dfc:	e13fff17 	ldw	r4,-4(fp)
 1015e00:	2089883a 	add	r4,r4,r2
 1015e04:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1015e08:	e0bff917 	ldw	r2,-28(fp)
 1015e0c:	e0bff215 	stw	r2,-56(fp)
 1015e10:	00001806 	br	1015e74 <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
 1015e14:	e0fffb17 	ldw	r3,-20(fp)
 1015e18:	e0fff315 	stw	r3,-52(fp)
 1015e1c:	00000b06 	br	1015e4c <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1015e20:	e13ff317 	ldw	r4,-52(fp)
 1015e24:	e13ff317 	ldw	r4,-52(fp)
 1015e28:	2105883a 	add	r2,r4,r4
 1015e2c:	1007883a 	mov	r3,r2
 1015e30:	e0bfff17 	ldw	r2,-4(fp)
 1015e34:	1885883a 	add	r2,r3,r2
 1015e38:	e0fff717 	ldw	r3,-36(fp)
 1015e3c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015e40:	e0bff317 	ldw	r2,-52(fp)
 1015e44:	10800044 	addi	r2,r2,1
 1015e48:	e0bff315 	stw	r2,-52(fp)
 1015e4c:	e0fffa17 	ldw	r3,-24(fp)
 1015e50:	e13ff317 	ldw	r4,-52(fp)
 1015e54:	193ff22e 	bgeu	r3,r4,1015e20 <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1015e58:	e0bfff17 	ldw	r2,-4(fp)
 1015e5c:	e0fffe17 	ldw	r3,-8(fp)
 1015e60:	10c5883a 	add	r2,r2,r3
 1015e64:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1015e68:	e13ff217 	ldw	r4,-56(fp)
 1015e6c:	21000044 	addi	r4,r4,1
 1015e70:	e13ff215 	stw	r4,-56(fp)
 1015e74:	e0bff817 	ldw	r2,-32(fp)
 1015e78:	e0fff217 	ldw	r3,-56(fp)
 1015e7c:	10ffe52e 	bgeu	r2,r3,1015e14 <alt_up_pixel_buffer_dma_draw_box+0x3d0>
 1015e80:	00002a06 	br	1015f2c <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1015e84:	e13ffe17 	ldw	r4,-8(fp)
 1015e88:	e13ffe17 	ldw	r4,-8(fp)
 1015e8c:	2105883a 	add	r2,r4,r4
 1015e90:	1085883a 	add	r2,r2,r2
 1015e94:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1015e98:	e13ff917 	ldw	r4,-28(fp)
 1015e9c:	e17ffe17 	ldw	r5,-8(fp)
 1015ea0:	10026440 	call	1002644 <__mulsi3>
 1015ea4:	e0ffff17 	ldw	r3,-4(fp)
 1015ea8:	1887883a 	add	r3,r3,r2
 1015eac:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1015eb0:	e13ff917 	ldw	r4,-28(fp)
 1015eb4:	e13ff215 	stw	r4,-56(fp)
 1015eb8:	00001906 	br	1015f20 <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
 1015ebc:	e0bffb17 	ldw	r2,-20(fp)
 1015ec0:	e0bff315 	stw	r2,-52(fp)
 1015ec4:	00000c06 	br	1015ef8 <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1015ec8:	e0fff317 	ldw	r3,-52(fp)
 1015ecc:	e0fff317 	ldw	r3,-52(fp)
 1015ed0:	18c5883a 	add	r2,r3,r3
 1015ed4:	1085883a 	add	r2,r2,r2
 1015ed8:	1007883a 	mov	r3,r2
 1015edc:	e0bfff17 	ldw	r2,-4(fp)
 1015ee0:	1885883a 	add	r2,r3,r2
 1015ee4:	e0fff717 	ldw	r3,-36(fp)
 1015ee8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1015eec:	e13ff317 	ldw	r4,-52(fp)
 1015ef0:	21000044 	addi	r4,r4,1
 1015ef4:	e13ff315 	stw	r4,-52(fp)
 1015ef8:	e0bffa17 	ldw	r2,-24(fp)
 1015efc:	e0fff317 	ldw	r3,-52(fp)
 1015f00:	10fff12e 	bgeu	r2,r3,1015ec8 <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 1015f04:	e13fff17 	ldw	r4,-4(fp)
 1015f08:	e0bffe17 	ldw	r2,-8(fp)
 1015f0c:	2089883a 	add	r4,r4,r2
 1015f10:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1015f14:	e0fff217 	ldw	r3,-56(fp)
 1015f18:	18c00044 	addi	r3,r3,1
 1015f1c:	e0fff215 	stw	r3,-56(fp)
 1015f20:	e13ff817 	ldw	r4,-32(fp)
 1015f24:	e0bff217 	ldw	r2,-56(fp)
 1015f28:	20bfe42e 	bgeu	r4,r2,1015ebc <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1015f2c:	e037883a 	mov	sp,fp
 1015f30:	dfc00117 	ldw	ra,4(sp)
 1015f34:	df000017 	ldw	fp,0(sp)
 1015f38:	dec00204 	addi	sp,sp,8
 1015f3c:	f800283a 	ret

01015f40 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 1015f40:	defff104 	addi	sp,sp,-60
 1015f44:	dfc00e15 	stw	ra,56(sp)
 1015f48:	df000d15 	stw	fp,52(sp)
 1015f4c:	df000d04 	addi	fp,sp,52
 1015f50:	e13ff315 	stw	r4,-52(fp)
 1015f54:	e17ff415 	stw	r5,-48(fp)
 1015f58:	e1bff515 	stw	r6,-44(fp)
 1015f5c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1015f60:	e0bff317 	ldw	r2,-52(fp)
 1015f64:	10800f17 	ldw	r2,60(r2)
 1015f68:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1015f6c:	e0bff317 	ldw	r2,-52(fp)
 1015f70:	10801017 	ldw	r2,64(r2)
 1015f74:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1015f78:	e0bff417 	ldw	r2,-48(fp)
 1015f7c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 1015f80:	e0fff517 	ldw	r3,-44(fp)
 1015f84:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 1015f88:	e13ff617 	ldw	r4,-40(fp)
 1015f8c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1015f90:	e0800217 	ldw	r2,8(fp)
 1015f94:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1015f98:	e0fffb17 	ldw	r3,-20(fp)
 1015f9c:	e13ffc17 	ldw	r4,-16(fp)
 1015fa0:	1900042e 	bgeu	r3,r4,1015fb4 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
 1015fa4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 1015fa8:	e0fffb17 	ldw	r3,-20(fp)
 1015fac:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 1015fb0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 1015fb4:	e13ffc17 	ldw	r4,-16(fp)
 1015fb8:	e0bffe17 	ldw	r2,-8(fp)
 1015fbc:	2080b12e 	bgeu	r4,r2,1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
 1015fc0:	e13ffa17 	ldw	r4,-24(fp)
 1015fc4:	e0fffd17 	ldw	r3,-12(fp)
 1015fc8:	20c00136 	bltu	r4,r3,1015fd0 <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1015fcc:	0000ad06 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1015fd0:	e0bffb17 	ldw	r2,-20(fp)
 1015fd4:	e0fffe17 	ldw	r3,-8(fp)
 1015fd8:	10c00336 	bltu	r2,r3,1015fe8 <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
 1015fdc:	e13ffe17 	ldw	r4,-8(fp)
 1015fe0:	213fffc4 	addi	r4,r4,-1
 1015fe4:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1015fe8:	e0800317 	ldw	r2,12(fp)
 1015fec:	10800058 	cmpnei	r2,r2,1
 1015ff0:	1000041e 	bne	r2,zero,1016004 <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 1015ff4:	e0bff317 	ldw	r2,-52(fp)
 1015ff8:	10800c17 	ldw	r2,48(r2)
 1015ffc:	e0bfff15 	stw	r2,-4(fp)
 1016000:	00000306 	br	1016010 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 1016004:	e0bff317 	ldw	r2,-52(fp)
 1016008:	10800b17 	ldw	r2,44(r2)
 101600c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1016010:	e0bff317 	ldw	r2,-52(fp)
 1016014:	10800d17 	ldw	r2,52(r2)
 1016018:	1004c03a 	cmpne	r2,r2,zero
 101601c:	1000431e 	bne	r2,zero,101612c <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1016020:	e0bff317 	ldw	r2,-52(fp)
 1016024:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 1016028:	e0fffa17 	ldw	r3,-24(fp)
 101602c:	1884983a 	sll	r2,r3,r2
 1016030:	e13fff17 	ldw	r4,-4(fp)
 1016034:	2089883a 	add	r4,r4,r2
 1016038:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101603c:	e0bff317 	ldw	r2,-52(fp)
 1016040:	10800e17 	ldw	r2,56(r2)
 1016044:	10800058 	cmpnei	r2,r2,1
 1016048:	10000f1e 	bne	r2,zero,1016088 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
 101604c:	e0bffc17 	ldw	r2,-16(fp)
 1016050:	e0bff815 	stw	r2,-32(fp)
 1016054:	00000806 	br	1016078 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1016058:	e0ffff17 	ldw	r3,-4(fp)
 101605c:	e0bff817 	ldw	r2,-32(fp)
 1016060:	1885883a 	add	r2,r3,r2
 1016064:	e0fff917 	ldw	r3,-28(fp)
 1016068:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 101606c:	e0fff817 	ldw	r3,-32(fp)
 1016070:	18c00044 	addi	r3,r3,1
 1016074:	e0fff815 	stw	r3,-32(fp)
 1016078:	e13ffb17 	ldw	r4,-20(fp)
 101607c:	e0bff817 	ldw	r2,-32(fp)
 1016080:	20bff52e 	bgeu	r4,r2,1016058 <alt_up_pixel_buffer_dma_draw_hline+0x118>
 1016084:	00007f06 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1016088:	e0bff317 	ldw	r2,-52(fp)
 101608c:	10800e17 	ldw	r2,56(r2)
 1016090:	10800098 	cmpnei	r2,r2,2
 1016094:	1000121e 	bne	r2,zero,10160e0 <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
 1016098:	e0fffc17 	ldw	r3,-16(fp)
 101609c:	e0fff815 	stw	r3,-32(fp)
 10160a0:	00000b06 	br	10160d0 <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 10160a4:	e13ff817 	ldw	r4,-32(fp)
 10160a8:	e13ff817 	ldw	r4,-32(fp)
 10160ac:	2105883a 	add	r2,r4,r4
 10160b0:	1007883a 	mov	r3,r2
 10160b4:	e0bfff17 	ldw	r2,-4(fp)
 10160b8:	1885883a 	add	r2,r3,r2
 10160bc:	e0fff917 	ldw	r3,-28(fp)
 10160c0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 10160c4:	e0bff817 	ldw	r2,-32(fp)
 10160c8:	10800044 	addi	r2,r2,1
 10160cc:	e0bff815 	stw	r2,-32(fp)
 10160d0:	e0fffb17 	ldw	r3,-20(fp)
 10160d4:	e13ff817 	ldw	r4,-32(fp)
 10160d8:	193ff22e 	bgeu	r3,r4,10160a4 <alt_up_pixel_buffer_dma_draw_hline+0x164>
 10160dc:	00006906 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 10160e0:	e0bffc17 	ldw	r2,-16(fp)
 10160e4:	e0bff815 	stw	r2,-32(fp)
 10160e8:	00000c06 	br	101611c <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 10160ec:	e0fff817 	ldw	r3,-32(fp)
 10160f0:	e0fff817 	ldw	r3,-32(fp)
 10160f4:	18c5883a 	add	r2,r3,r3
 10160f8:	1085883a 	add	r2,r2,r2
 10160fc:	1007883a 	mov	r3,r2
 1016100:	e0bfff17 	ldw	r2,-4(fp)
 1016104:	1885883a 	add	r2,r3,r2
 1016108:	e0fff917 	ldw	r3,-28(fp)
 101610c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1016110:	e13ff817 	ldw	r4,-32(fp)
 1016114:	21000044 	addi	r4,r4,1
 1016118:	e13ff815 	stw	r4,-32(fp)
 101611c:	e0bffb17 	ldw	r2,-20(fp)
 1016120:	e0fff817 	ldw	r3,-32(fp)
 1016124:	10fff12e 	bgeu	r2,r3,10160ec <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
 1016128:	00005606 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101612c:	e0bff317 	ldw	r2,-52(fp)
 1016130:	10800e17 	ldw	r2,56(r2)
 1016134:	10800058 	cmpnei	r2,r2,1
 1016138:	1000151e 	bne	r2,zero,1016190 <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
 101613c:	e13ffa17 	ldw	r4,-24(fp)
 1016140:	e17ffe17 	ldw	r5,-8(fp)
 1016144:	10026440 	call	1002644 <__mulsi3>
 1016148:	e13fff17 	ldw	r4,-4(fp)
 101614c:	2089883a 	add	r4,r4,r2
 1016150:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1016154:	e0bffc17 	ldw	r2,-16(fp)
 1016158:	e0bff715 	stw	r2,-36(fp)
 101615c:	00000806 	br	1016180 <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1016160:	e0ffff17 	ldw	r3,-4(fp)
 1016164:	e0bff717 	ldw	r2,-36(fp)
 1016168:	1885883a 	add	r2,r3,r2
 101616c:	e0fff917 	ldw	r3,-28(fp)
 1016170:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1016174:	e0fff717 	ldw	r3,-36(fp)
 1016178:	18c00044 	addi	r3,r3,1
 101617c:	e0fff715 	stw	r3,-36(fp)
 1016180:	e13ffb17 	ldw	r4,-20(fp)
 1016184:	e0bff717 	ldw	r2,-36(fp)
 1016188:	20bff52e 	bgeu	r4,r2,1016160 <alt_up_pixel_buffer_dma_draw_hline+0x220>
 101618c:	00003d06 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1016190:	e0bff317 	ldw	r2,-52(fp)
 1016194:	10800e17 	ldw	r2,56(r2)
 1016198:	10800098 	cmpnei	r2,r2,2
 101619c:	10001c1e 	bne	r2,zero,1016210 <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
 10161a0:	e0fffe17 	ldw	r3,-8(fp)
 10161a4:	e0fffe17 	ldw	r3,-8(fp)
 10161a8:	18c5883a 	add	r2,r3,r3
 10161ac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 10161b0:	e13ffa17 	ldw	r4,-24(fp)
 10161b4:	e17ffe17 	ldw	r5,-8(fp)
 10161b8:	10026440 	call	1002644 <__mulsi3>
 10161bc:	e13fff17 	ldw	r4,-4(fp)
 10161c0:	2089883a 	add	r4,r4,r2
 10161c4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10161c8:	e0bffc17 	ldw	r2,-16(fp)
 10161cc:	e0bff715 	stw	r2,-36(fp)
 10161d0:	00000b06 	br	1016200 <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 10161d4:	e0fff717 	ldw	r3,-36(fp)
 10161d8:	e0fff717 	ldw	r3,-36(fp)
 10161dc:	18c5883a 	add	r2,r3,r3
 10161e0:	1007883a 	mov	r3,r2
 10161e4:	e0bfff17 	ldw	r2,-4(fp)
 10161e8:	1885883a 	add	r2,r3,r2
 10161ec:	e0fff917 	ldw	r3,-28(fp)
 10161f0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10161f4:	e13ff717 	ldw	r4,-36(fp)
 10161f8:	21000044 	addi	r4,r4,1
 10161fc:	e13ff715 	stw	r4,-36(fp)
 1016200:	e0bffb17 	ldw	r2,-20(fp)
 1016204:	e0fff717 	ldw	r3,-36(fp)
 1016208:	10fff22e 	bgeu	r2,r3,10161d4 <alt_up_pixel_buffer_dma_draw_hline+0x294>
 101620c:	00001d06 	br	1016284 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1016210:	e13ffe17 	ldw	r4,-8(fp)
 1016214:	e13ffe17 	ldw	r4,-8(fp)
 1016218:	2105883a 	add	r2,r4,r4
 101621c:	1085883a 	add	r2,r2,r2
 1016220:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 1016224:	e13ffa17 	ldw	r4,-24(fp)
 1016228:	e17ffe17 	ldw	r5,-8(fp)
 101622c:	10026440 	call	1002644 <__mulsi3>
 1016230:	e0ffff17 	ldw	r3,-4(fp)
 1016234:	1887883a 	add	r3,r3,r2
 1016238:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 101623c:	e13ffc17 	ldw	r4,-16(fp)
 1016240:	e13ff715 	stw	r4,-36(fp)
 1016244:	00000c06 	br	1016278 <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 1016248:	e0fff717 	ldw	r3,-36(fp)
 101624c:	e0fff717 	ldw	r3,-36(fp)
 1016250:	18c5883a 	add	r2,r3,r3
 1016254:	1085883a 	add	r2,r2,r2
 1016258:	1007883a 	mov	r3,r2
 101625c:	e0bfff17 	ldw	r2,-4(fp)
 1016260:	1885883a 	add	r2,r3,r2
 1016264:	e0fff917 	ldw	r3,-28(fp)
 1016268:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 101626c:	e13ff717 	ldw	r4,-36(fp)
 1016270:	21000044 	addi	r4,r4,1
 1016274:	e13ff715 	stw	r4,-36(fp)
 1016278:	e0bffb17 	ldw	r2,-20(fp)
 101627c:	e0fff717 	ldw	r3,-36(fp)
 1016280:	10fff12e 	bgeu	r2,r3,1016248 <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 1016284:	e037883a 	mov	sp,fp
 1016288:	dfc00117 	ldw	ra,4(sp)
 101628c:	df000017 	ldw	fp,0(sp)
 1016290:	dec00204 	addi	sp,sp,8
 1016294:	f800283a 	ret

01016298 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 1016298:	defff004 	addi	sp,sp,-64
 101629c:	dfc00f15 	stw	ra,60(sp)
 10162a0:	df000e15 	stw	fp,56(sp)
 10162a4:	df000e04 	addi	fp,sp,56
 10162a8:	e13ff215 	stw	r4,-56(fp)
 10162ac:	e17ff315 	stw	r5,-52(fp)
 10162b0:	e1bff415 	stw	r6,-48(fp)
 10162b4:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10162b8:	e0bff217 	ldw	r2,-56(fp)
 10162bc:	10800f17 	ldw	r2,60(r2)
 10162c0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10162c4:	e0bff217 	ldw	r2,-56(fp)
 10162c8:	10801017 	ldw	r2,64(r2)
 10162cc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 10162d0:	e0bff317 	ldw	r2,-52(fp)
 10162d4:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 10162d8:	e0fff417 	ldw	r3,-48(fp)
 10162dc:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 10162e0:	e13ff517 	ldw	r4,-44(fp)
 10162e4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 10162e8:	e0800217 	ldw	r2,8(fp)
 10162ec:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 10162f0:	e0fffa17 	ldw	r3,-24(fp)
 10162f4:	e13ffb17 	ldw	r4,-20(fp)
 10162f8:	1900042e 	bgeu	r3,r4,101630c <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
 10162fc:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 1016300:	e0fffa17 	ldw	r3,-24(fp)
 1016304:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 1016308:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 101630c:	e13ffc17 	ldw	r4,-16(fp)
 1016310:	e0bffe17 	ldw	r2,-8(fp)
 1016314:	2080d12e 	bgeu	r4,r2,101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
 1016318:	e0fffb17 	ldw	r3,-20(fp)
 101631c:	e13ffd17 	ldw	r4,-12(fp)
 1016320:	19000136 	bltu	r3,r4,1016328 <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1016324:	0000cd06 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1016328:	e0bffa17 	ldw	r2,-24(fp)
 101632c:	e0fffd17 	ldw	r3,-12(fp)
 1016330:	10c00336 	bltu	r2,r3,1016340 <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
 1016334:	e13ffd17 	ldw	r4,-12(fp)
 1016338:	213fffc4 	addi	r4,r4,-1
 101633c:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1016340:	e0800317 	ldw	r2,12(fp)
 1016344:	10800058 	cmpnei	r2,r2,1
 1016348:	1000041e 	bne	r2,zero,101635c <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 101634c:	e0bff217 	ldw	r2,-56(fp)
 1016350:	10800c17 	ldw	r2,48(r2)
 1016354:	e0bfff15 	stw	r2,-4(fp)
 1016358:	00000306 	br	1016368 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 101635c:	e0bff217 	ldw	r2,-56(fp)
 1016360:	10800b17 	ldw	r2,44(r2)
 1016364:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1016368:	e0bff217 	ldw	r2,-56(fp)
 101636c:	10800d17 	ldw	r2,52(r2)
 1016370:	1004c03a 	cmpne	r2,r2,zero
 1016374:	1000571e 	bne	r2,zero,10164d4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1016378:	e0bff217 	ldw	r2,-56(fp)
 101637c:	10801317 	ldw	r2,76(r2)
 1016380:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 1016384:	e0bff717 	ldw	r2,-36(fp)
 1016388:	e0fffb17 	ldw	r3,-20(fp)
 101638c:	1884983a 	sll	r2,r3,r2
 1016390:	e13fff17 	ldw	r4,-4(fp)
 1016394:	2089883a 	add	r4,r4,r2
 1016398:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 101639c:	e0bff217 	ldw	r2,-56(fp)
 10163a0:	10800e17 	ldw	r2,56(r2)
 10163a4:	10800058 	cmpnei	r2,r2,1
 10163a8:	1000151e 	bne	r2,zero,1016400 <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
 10163ac:	e0bffb17 	ldw	r2,-20(fp)
 10163b0:	e0bff815 	stw	r2,-32(fp)
 10163b4:	00000e06 	br	10163f0 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 10163b8:	e0ffff17 	ldw	r3,-4(fp)
 10163bc:	e0bffc17 	ldw	r2,-16(fp)
 10163c0:	1885883a 	add	r2,r3,r2
 10163c4:	e0fff917 	ldw	r3,-28(fp)
 10163c8:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10163cc:	e0fff717 	ldw	r3,-36(fp)
 10163d0:	00800044 	movi	r2,1
 10163d4:	10c4983a 	sll	r2,r2,r3
 10163d8:	e0ffff17 	ldw	r3,-4(fp)
 10163dc:	1887883a 	add	r3,r3,r2
 10163e0:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10163e4:	e13ff817 	ldw	r4,-32(fp)
 10163e8:	21000044 	addi	r4,r4,1
 10163ec:	e13ff815 	stw	r4,-32(fp)
 10163f0:	e0bffa17 	ldw	r2,-24(fp)
 10163f4:	e0fff817 	ldw	r3,-32(fp)
 10163f8:	10ffef2e 	bgeu	r2,r3,10163b8 <alt_up_pixel_buffer_dma_draw_vline+0x120>
 10163fc:	00009706 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1016400:	e0bff217 	ldw	r2,-56(fp)
 1016404:	10800e17 	ldw	r2,56(r2)
 1016408:	10800098 	cmpnei	r2,r2,2
 101640c:	1000181e 	bne	r2,zero,1016470 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
 1016410:	e13ffb17 	ldw	r4,-20(fp)
 1016414:	e13ff815 	stw	r4,-32(fp)
 1016418:	00001106 	br	1016460 <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 101641c:	e0fffc17 	ldw	r3,-16(fp)
 1016420:	e0fffc17 	ldw	r3,-16(fp)
 1016424:	18c5883a 	add	r2,r3,r3
 1016428:	1007883a 	mov	r3,r2
 101642c:	e0bfff17 	ldw	r2,-4(fp)
 1016430:	1885883a 	add	r2,r3,r2
 1016434:	e0fff917 	ldw	r3,-28(fp)
 1016438:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 101643c:	e0fff717 	ldw	r3,-36(fp)
 1016440:	00800044 	movi	r2,1
 1016444:	10c4983a 	sll	r2,r2,r3
 1016448:	e13fff17 	ldw	r4,-4(fp)
 101644c:	2089883a 	add	r4,r4,r2
 1016450:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1016454:	e0bff817 	ldw	r2,-32(fp)
 1016458:	10800044 	addi	r2,r2,1
 101645c:	e0bff815 	stw	r2,-32(fp)
 1016460:	e0fffa17 	ldw	r3,-24(fp)
 1016464:	e13ff817 	ldw	r4,-32(fp)
 1016468:	193fec2e 	bgeu	r3,r4,101641c <alt_up_pixel_buffer_dma_draw_vline+0x184>
 101646c:	00007b06 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1016470:	e0bffb17 	ldw	r2,-20(fp)
 1016474:	e0bff815 	stw	r2,-32(fp)
 1016478:	00001206 	br	10164c4 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 101647c:	e0fffc17 	ldw	r3,-16(fp)
 1016480:	e0fffc17 	ldw	r3,-16(fp)
 1016484:	18c5883a 	add	r2,r3,r3
 1016488:	1085883a 	add	r2,r2,r2
 101648c:	1007883a 	mov	r3,r2
 1016490:	e0bfff17 	ldw	r2,-4(fp)
 1016494:	1885883a 	add	r2,r3,r2
 1016498:	e0fff917 	ldw	r3,-28(fp)
 101649c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10164a0:	e0fff717 	ldw	r3,-36(fp)
 10164a4:	00800044 	movi	r2,1
 10164a8:	10c4983a 	sll	r2,r2,r3
 10164ac:	e13fff17 	ldw	r4,-4(fp)
 10164b0:	2089883a 	add	r4,r4,r2
 10164b4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10164b8:	e0bff817 	ldw	r2,-32(fp)
 10164bc:	10800044 	addi	r2,r2,1
 10164c0:	e0bff815 	stw	r2,-32(fp)
 10164c4:	e0fffa17 	ldw	r3,-24(fp)
 10164c8:	e13ff817 	ldw	r4,-32(fp)
 10164cc:	193feb2e 	bgeu	r3,r4,101647c <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
 10164d0:	00006206 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10164d4:	e0bff217 	ldw	r2,-56(fp)
 10164d8:	10800e17 	ldw	r2,56(r2)
 10164dc:	10800058 	cmpnei	r2,r2,1
 10164e0:	1000191e 	bne	r2,zero,1016548 <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
 10164e4:	e13ffb17 	ldw	r4,-20(fp)
 10164e8:	e17ffe17 	ldw	r5,-8(fp)
 10164ec:	10026440 	call	1002644 <__mulsi3>
 10164f0:	e0ffff17 	ldw	r3,-4(fp)
 10164f4:	1887883a 	add	r3,r3,r2
 10164f8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 10164fc:	e13ffb17 	ldw	r4,-20(fp)
 1016500:	e13ff615 	stw	r4,-40(fp)
 1016504:	00000c06 	br	1016538 <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1016508:	e0ffff17 	ldw	r3,-4(fp)
 101650c:	e0bffc17 	ldw	r2,-16(fp)
 1016510:	1885883a 	add	r2,r3,r2
 1016514:	e0fff917 	ldw	r3,-28(fp)
 1016518:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 101651c:	e0bfff17 	ldw	r2,-4(fp)
 1016520:	e0fffe17 	ldw	r3,-8(fp)
 1016524:	10c5883a 	add	r2,r2,r3
 1016528:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 101652c:	e13ff617 	ldw	r4,-40(fp)
 1016530:	21000044 	addi	r4,r4,1
 1016534:	e13ff615 	stw	r4,-40(fp)
 1016538:	e0bffa17 	ldw	r2,-24(fp)
 101653c:	e0fff617 	ldw	r3,-40(fp)
 1016540:	10fff12e 	bgeu	r2,r3,1016508 <alt_up_pixel_buffer_dma_draw_vline+0x270>
 1016544:	00004506 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1016548:	e0bff217 	ldw	r2,-56(fp)
 101654c:	10800e17 	ldw	r2,56(r2)
 1016550:	10800098 	cmpnei	r2,r2,2
 1016554:	1000201e 	bne	r2,zero,10165d8 <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
 1016558:	e13ffe17 	ldw	r4,-8(fp)
 101655c:	e13ffe17 	ldw	r4,-8(fp)
 1016560:	2105883a 	add	r2,r4,r4
 1016564:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1016568:	e13ffb17 	ldw	r4,-20(fp)
 101656c:	e17ffe17 	ldw	r5,-8(fp)
 1016570:	10026440 	call	1002644 <__mulsi3>
 1016574:	e0ffff17 	ldw	r3,-4(fp)
 1016578:	1887883a 	add	r3,r3,r2
 101657c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1016580:	e13ffb17 	ldw	r4,-20(fp)
 1016584:	e13ff615 	stw	r4,-40(fp)
 1016588:	00000f06 	br	10165c8 <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 101658c:	e0fffc17 	ldw	r3,-16(fp)
 1016590:	e0fffc17 	ldw	r3,-16(fp)
 1016594:	18c5883a 	add	r2,r3,r3
 1016598:	1007883a 	mov	r3,r2
 101659c:	e0bfff17 	ldw	r2,-4(fp)
 10165a0:	1885883a 	add	r2,r3,r2
 10165a4:	e0fff917 	ldw	r3,-28(fp)
 10165a8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 10165ac:	e13fff17 	ldw	r4,-4(fp)
 10165b0:	e0bffe17 	ldw	r2,-8(fp)
 10165b4:	2089883a 	add	r4,r4,r2
 10165b8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10165bc:	e0fff617 	ldw	r3,-40(fp)
 10165c0:	18c00044 	addi	r3,r3,1
 10165c4:	e0fff615 	stw	r3,-40(fp)
 10165c8:	e13ffa17 	ldw	r4,-24(fp)
 10165cc:	e0bff617 	ldw	r2,-40(fp)
 10165d0:	20bfee2e 	bgeu	r4,r2,101658c <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
 10165d4:	00002106 	br	101665c <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 10165d8:	e0fffe17 	ldw	r3,-8(fp)
 10165dc:	e0fffe17 	ldw	r3,-8(fp)
 10165e0:	18c5883a 	add	r2,r3,r3
 10165e4:	1085883a 	add	r2,r2,r2
 10165e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10165ec:	e13ffb17 	ldw	r4,-20(fp)
 10165f0:	e17ffe17 	ldw	r5,-8(fp)
 10165f4:	10026440 	call	1002644 <__mulsi3>
 10165f8:	e13fff17 	ldw	r4,-4(fp)
 10165fc:	2089883a 	add	r4,r4,r2
 1016600:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1016604:	e0bffb17 	ldw	r2,-20(fp)
 1016608:	e0bff615 	stw	r2,-40(fp)
 101660c:	00001006 	br	1016650 <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1016610:	e0fffc17 	ldw	r3,-16(fp)
 1016614:	e0fffc17 	ldw	r3,-16(fp)
 1016618:	18c5883a 	add	r2,r3,r3
 101661c:	1085883a 	add	r2,r2,r2
 1016620:	1007883a 	mov	r3,r2
 1016624:	e0bfff17 	ldw	r2,-4(fp)
 1016628:	1885883a 	add	r2,r3,r2
 101662c:	e0fff917 	ldw	r3,-28(fp)
 1016630:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 1016634:	e13fff17 	ldw	r4,-4(fp)
 1016638:	e0bffe17 	ldw	r2,-8(fp)
 101663c:	2089883a 	add	r4,r4,r2
 1016640:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1016644:	e0fff617 	ldw	r3,-40(fp)
 1016648:	18c00044 	addi	r3,r3,1
 101664c:	e0fff615 	stw	r3,-40(fp)
 1016650:	e13ffa17 	ldw	r4,-24(fp)
 1016654:	e0bff617 	ldw	r2,-40(fp)
 1016658:	20bfed2e 	bgeu	r4,r2,1016610 <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 101665c:	e037883a 	mov	sp,fp
 1016660:	dfc00117 	ldw	ra,4(sp)
 1016664:	df000017 	ldw	fp,0(sp)
 1016668:	dec00204 	addi	sp,sp,8
 101666c:	f800283a 	ret

01016670 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 1016670:	defff804 	addi	sp,sp,-32
 1016674:	dfc00715 	stw	ra,28(sp)
 1016678:	df000615 	stw	fp,24(sp)
 101667c:	df000604 	addi	fp,sp,24
 1016680:	e13ffc15 	stw	r4,-16(fp)
 1016684:	e17ffd15 	stw	r5,-12(fp)
 1016688:	e1bffe15 	stw	r6,-8(fp)
 101668c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 1016690:	e0800317 	ldw	r2,12(fp)
 1016694:	d8800015 	stw	r2,0(sp)
 1016698:	e0800417 	ldw	r2,16(fp)
 101669c:	d8800115 	stw	r2,4(sp)
 10166a0:	e13ffc17 	ldw	r4,-16(fp)
 10166a4:	e17ffd17 	ldw	r5,-12(fp)
 10166a8:	e1bfff17 	ldw	r6,-4(fp)
 10166ac:	e1fffe17 	ldw	r7,-8(fp)
 10166b0:	1015f400 	call	1015f40 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 10166b4:	e0800317 	ldw	r2,12(fp)
 10166b8:	d8800015 	stw	r2,0(sp)
 10166bc:	e0800417 	ldw	r2,16(fp)
 10166c0:	d8800115 	stw	r2,4(sp)
 10166c4:	e13ffc17 	ldw	r4,-16(fp)
 10166c8:	e17ffd17 	ldw	r5,-12(fp)
 10166cc:	e1bfff17 	ldw	r6,-4(fp)
 10166d0:	e1c00217 	ldw	r7,8(fp)
 10166d4:	1015f400 	call	1015f40 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 10166d8:	e0800317 	ldw	r2,12(fp)
 10166dc:	d8800015 	stw	r2,0(sp)
 10166e0:	e0800417 	ldw	r2,16(fp)
 10166e4:	d8800115 	stw	r2,4(sp)
 10166e8:	e13ffc17 	ldw	r4,-16(fp)
 10166ec:	e17ffd17 	ldw	r5,-12(fp)
 10166f0:	e1bffe17 	ldw	r6,-8(fp)
 10166f4:	e1c00217 	ldw	r7,8(fp)
 10166f8:	10162980 	call	1016298 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 10166fc:	e0800317 	ldw	r2,12(fp)
 1016700:	d8800015 	stw	r2,0(sp)
 1016704:	e0800417 	ldw	r2,16(fp)
 1016708:	d8800115 	stw	r2,4(sp)
 101670c:	e13ffc17 	ldw	r4,-16(fp)
 1016710:	e17fff17 	ldw	r5,-4(fp)
 1016714:	e1bffe17 	ldw	r6,-8(fp)
 1016718:	e1c00217 	ldw	r7,8(fp)
 101671c:	10162980 	call	1016298 <alt_up_pixel_buffer_dma_draw_vline>
}
 1016720:	e037883a 	mov	sp,fp
 1016724:	dfc00117 	ldw	ra,4(sp)
 1016728:	df000017 	ldw	fp,0(sp)
 101672c:	dec00204 	addi	sp,sp,8
 1016730:	f800283a 	ret

01016734 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 1016734:	defffa04 	addi	sp,sp,-24
 1016738:	dfc00515 	stw	ra,20(sp)
 101673c:	df000415 	stw	fp,16(sp)
 1016740:	df000404 	addi	fp,sp,16
 1016744:	e13ffc15 	stw	r4,-16(fp)
 1016748:	e17ffd15 	stw	r5,-12(fp)
 101674c:	e1bffe15 	stw	r6,-8(fp)
 1016750:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 1016754:	e0c00317 	ldw	r3,12(fp)
 1016758:	1804c03a 	cmpne	r2,r3,zero
 101675c:	10000b1e 	bne	r2,zero,101678c <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 1016760:	e13ffd17 	ldw	r4,-12(fp)
 1016764:	e17fff17 	ldw	r5,-4(fp)
 1016768:	10026440 	call	1002644 <__mulsi3>
 101676c:	e0fffe17 	ldw	r3,-8(fp)
 1016770:	10c5883a 	add	r2,r2,r3
 1016774:	1007883a 	mov	r3,r2
 1016778:	e0bffc17 	ldw	r2,-16(fp)
 101677c:	1885883a 	add	r2,r3,r2
 1016780:	e0c00217 	ldw	r3,8(fp)
 1016784:	10c00025 	stbio	r3,0(r2)
 1016788:	00001b06 	br	10167f8 <helper_plot_pixel+0xc4>
	else if (mode == 1)
 101678c:	e0c00317 	ldw	r3,12(fp)
 1016790:	18800058 	cmpnei	r2,r3,1
 1016794:	10000c1e 	bne	r2,zero,10167c8 <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 1016798:	e13ffd17 	ldw	r4,-12(fp)
 101679c:	e17fff17 	ldw	r5,-4(fp)
 10167a0:	10026440 	call	1002644 <__mulsi3>
 10167a4:	e0fffe17 	ldw	r3,-8(fp)
 10167a8:	10c5883a 	add	r2,r2,r3
 10167ac:	1085883a 	add	r2,r2,r2
 10167b0:	1007883a 	mov	r3,r2
 10167b4:	e0bffc17 	ldw	r2,-16(fp)
 10167b8:	1885883a 	add	r2,r3,r2
 10167bc:	e0c00217 	ldw	r3,8(fp)
 10167c0:	10c0002d 	sthio	r3,0(r2)
 10167c4:	00000c06 	br	10167f8 <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 10167c8:	e13ffd17 	ldw	r4,-12(fp)
 10167cc:	e17fff17 	ldw	r5,-4(fp)
 10167d0:	10026440 	call	1002644 <__mulsi3>
 10167d4:	e0fffe17 	ldw	r3,-8(fp)
 10167d8:	10c5883a 	add	r2,r2,r3
 10167dc:	1085883a 	add	r2,r2,r2
 10167e0:	1085883a 	add	r2,r2,r2
 10167e4:	1007883a 	mov	r3,r2
 10167e8:	e0bffc17 	ldw	r2,-16(fp)
 10167ec:	1885883a 	add	r2,r3,r2
 10167f0:	e0c00217 	ldw	r3,8(fp)
 10167f4:	10c00035 	stwio	r3,0(r2)
}
 10167f8:	e037883a 	mov	sp,fp
 10167fc:	dfc00117 	ldw	ra,4(sp)
 1016800:	df000017 	ldw	fp,0(sp)
 1016804:	dec00204 	addi	sp,sp,8
 1016808:	f800283a 	ret

0101680c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 101680c:	deffe404 	addi	sp,sp,-112
 1016810:	dfc01b15 	stw	ra,108(sp)
 1016814:	df001a15 	stw	fp,104(sp)
 1016818:	df001a04 	addi	fp,sp,104
 101681c:	e13fe815 	stw	r4,-96(fp)
 1016820:	e17fe915 	stw	r5,-92(fp)
 1016824:	e1bfea15 	stw	r6,-88(fp)
 1016828:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 101682c:	e0bfe917 	ldw	r2,-92(fp)
 1016830:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 1016834:	e0ffea17 	ldw	r3,-88(fp)
 1016838:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 101683c:	e13feb17 	ldw	r4,-84(fp)
 1016840:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 1016844:	e0800217 	ldw	r2,8(fp)
 1016848:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 101684c:	e0fff717 	ldw	r3,-36(fp)
 1016850:	e13ff917 	ldw	r4,-28(fp)
 1016854:	1905c83a 	sub	r2,r3,r4
 1016858:	e0bfff15 	stw	r2,-4(fp)
 101685c:	e0ffff17 	ldw	r3,-4(fp)
 1016860:	1804403a 	cmpge	r2,r3,zero
 1016864:	1000031e 	bne	r2,zero,1016874 <alt_up_pixel_buffer_dma_draw_line+0x68>
 1016868:	e13fff17 	ldw	r4,-4(fp)
 101686c:	0109c83a 	sub	r4,zero,r4
 1016870:	e13fff15 	stw	r4,-4(fp)
 1016874:	e0fff817 	ldw	r3,-32(fp)
 1016878:	e13ffa17 	ldw	r4,-24(fp)
 101687c:	1905c83a 	sub	r2,r3,r4
 1016880:	e0bffe15 	stw	r2,-8(fp)
 1016884:	e0fffe17 	ldw	r3,-8(fp)
 1016888:	1804403a 	cmpge	r2,r3,zero
 101688c:	1000031e 	bne	r2,zero,101689c <alt_up_pixel_buffer_dma_draw_line+0x90>
 1016890:	e13ffe17 	ldw	r4,-8(fp)
 1016894:	0109c83a 	sub	r4,zero,r4
 1016898:	e13ffe15 	stw	r4,-8(fp)
 101689c:	e0fffe17 	ldw	r3,-8(fp)
 10168a0:	e13fff17 	ldw	r4,-4(fp)
 10168a4:	1904803a 	cmplt	r2,r3,r4
 10168a8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 10168ac:	e0bfe817 	ldw	r2,-96(fp)
 10168b0:	10800e17 	ldw	r2,56(r2)
 10168b4:	10800060 	cmpeqi	r2,r2,1
 10168b8:	10000c1e 	bne	r2,zero,10168ec <alt_up_pixel_buffer_dma_draw_line+0xe0>
 10168bc:	e0bfe817 	ldw	r2,-96(fp)
 10168c0:	10800e17 	ldw	r2,56(r2)
 10168c4:	10800098 	cmpnei	r2,r2,2
 10168c8:	1000031e 	bne	r2,zero,10168d8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 10168cc:	00800044 	movi	r2,1
 10168d0:	e0bffc15 	stw	r2,-16(fp)
 10168d4:	00000206 	br	10168e0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 10168d8:	00c00084 	movi	r3,2
 10168dc:	e0fffc15 	stw	r3,-16(fp)
 10168e0:	e13ffc17 	ldw	r4,-16(fp)
 10168e4:	e13ffd15 	stw	r4,-12(fp)
 10168e8:	00000106 	br	10168f0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 10168ec:	e03ffd15 	stw	zero,-12(fp)
 10168f0:	e0bffd17 	ldw	r2,-12(fp)
 10168f4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 10168f8:	e0c00317 	ldw	r3,12(fp)
 10168fc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 1016900:	e0bfe817 	ldw	r2,-96(fp)
 1016904:	10800d17 	ldw	r2,52(r2)
 1016908:	1004c03a 	cmpne	r2,r2,zero
 101690c:	1000091e 	bne	r2,zero,1016934 <alt_up_pixel_buffer_dma_draw_line+0x128>
 1016910:	e0bfe817 	ldw	r2,-96(fp)
 1016914:	10c01317 	ldw	r3,76(r2)
 1016918:	e0bfef17 	ldw	r2,-68(fp)
 101691c:	1885c83a 	sub	r2,r3,r2
 1016920:	1007883a 	mov	r3,r2
 1016924:	00800044 	movi	r2,1
 1016928:	10c4983a 	sll	r2,r2,r3
 101692c:	e0bffb15 	stw	r2,-20(fp)
 1016930:	00000306 	br	1016940 <alt_up_pixel_buffer_dma_draw_line+0x134>
 1016934:	e0bfe817 	ldw	r2,-96(fp)
 1016938:	10800f17 	ldw	r2,60(r2)
 101693c:	e0bffb15 	stw	r2,-20(fp)
 1016940:	e13ffb17 	ldw	r4,-20(fp)
 1016944:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 1016948:	e0800417 	ldw	r2,16(fp)
 101694c:	10800058 	cmpnei	r2,r2,1
 1016950:	1000041e 	bne	r2,zero,1016964 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 1016954:	e0bfe817 	ldw	r2,-96(fp)
 1016958:	10800c17 	ldw	r2,48(r2)
 101695c:	e0bfed15 	stw	r2,-76(fp)
 1016960:	00000306 	br	1016970 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 1016964:	e0bfe817 	ldw	r2,-96(fp)
 1016968:	10800b17 	ldw	r2,44(r2)
 101696c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 1016970:	e0fff603 	ldbu	r3,-40(fp)
 1016974:	18803fcc 	andi	r2,r3,255
 1016978:	1080201c 	xori	r2,r2,128
 101697c:	10bfe004 	addi	r2,r2,-128
 1016980:	10800050 	cmplti	r2,r2,1
 1016984:	10000c1e 	bne	r2,zero,10169b8 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 1016988:	e13ffa17 	ldw	r4,-24(fp)
 101698c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 1016990:	e0bff917 	ldw	r2,-28(fp)
 1016994:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 1016998:	e0fff317 	ldw	r3,-52(fp)
 101699c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 10169a0:	e13ff817 	ldw	r4,-32(fp)
 10169a4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 10169a8:	e0bff717 	ldw	r2,-36(fp)
 10169ac:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 10169b0:	e0fff317 	ldw	r3,-52(fp)
 10169b4:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 10169b8:	e13ff817 	ldw	r4,-32(fp)
 10169bc:	e0bffa17 	ldw	r2,-24(fp)
 10169c0:	20800c0e 	bge	r4,r2,10169f4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 10169c4:	e0fffa17 	ldw	r3,-24(fp)
 10169c8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 10169cc:	e13ff817 	ldw	r4,-32(fp)
 10169d0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 10169d4:	e0bff317 	ldw	r2,-52(fp)
 10169d8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 10169dc:	e0fff917 	ldw	r3,-28(fp)
 10169e0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 10169e4:	e13ff717 	ldw	r4,-36(fp)
 10169e8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 10169ec:	e0bff317 	ldw	r2,-52(fp)
 10169f0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 10169f4:	e0fff817 	ldw	r3,-32(fp)
 10169f8:	e13ffa17 	ldw	r4,-24(fp)
 10169fc:	1907c83a 	sub	r3,r3,r4
 1016a00:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 1016a04:	e0fff717 	ldw	r3,-36(fp)
 1016a08:	e13ff917 	ldw	r4,-28(fp)
 1016a0c:	1905c83a 	sub	r2,r3,r4
 1016a10:	e0bff415 	stw	r2,-48(fp)
 1016a14:	e0fff417 	ldw	r3,-48(fp)
 1016a18:	1804403a 	cmpge	r2,r3,zero
 1016a1c:	1000031e 	bne	r2,zero,1016a2c <alt_up_pixel_buffer_dma_draw_line+0x220>
 1016a20:	e13ff417 	ldw	r4,-48(fp)
 1016a24:	0109c83a 	sub	r4,zero,r4
 1016a28:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 1016a2c:	e0fff517 	ldw	r3,-44(fp)
 1016a30:	1804d7fa 	srli	r2,r3,31
 1016a34:	e13ff517 	ldw	r4,-44(fp)
 1016a38:	1105883a 	add	r2,r2,r4
 1016a3c:	1005d07a 	srai	r2,r2,1
 1016a40:	0085c83a 	sub	r2,zero,r2
 1016a44:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 1016a48:	e0bff917 	ldw	r2,-28(fp)
 1016a4c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 1016a50:	e0fff917 	ldw	r3,-28(fp)
 1016a54:	e13ff717 	ldw	r4,-36(fp)
 1016a58:	1900030e 	bge	r3,r4,1016a68 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 1016a5c:	00800044 	movi	r2,1
 1016a60:	e0bff215 	stw	r2,-56(fp)
 1016a64:	00000206 	br	1016a70 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 1016a68:	00ffffc4 	movi	r3,-1
 1016a6c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 1016a70:	e13ff603 	ldbu	r4,-40(fp)
 1016a74:	20803fcc 	andi	r2,r4,255
 1016a78:	1080201c 	xori	r2,r2,128
 1016a7c:	10bfe004 	addi	r2,r2,-128
 1016a80:	10800058 	cmpnei	r2,r2,1
 1016a84:	1000221e 	bne	r2,zero,1016b10 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 1016a88:	e0bffa17 	ldw	r2,-24(fp)
 1016a8c:	e0bff115 	stw	r2,-60(fp)
 1016a90:	00001b06 	br	1016b00 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 1016a94:	e0ffee17 	ldw	r3,-72(fp)
 1016a98:	d8c00015 	stw	r3,0(sp)
 1016a9c:	e13fef17 	ldw	r4,-68(fp)
 1016aa0:	d9000115 	stw	r4,4(sp)
 1016aa4:	e13fed17 	ldw	r4,-76(fp)
 1016aa8:	e17fec17 	ldw	r5,-80(fp)
 1016aac:	e1bff017 	ldw	r6,-64(fp)
 1016ab0:	e1fff117 	ldw	r7,-60(fp)
 1016ab4:	10167340 	call	1016734 <helper_plot_pixel>
			error = error + deltay;
 1016ab8:	e0bff317 	ldw	r2,-52(fp)
 1016abc:	e0fff417 	ldw	r3,-48(fp)
 1016ac0:	10c5883a 	add	r2,r2,r3
 1016ac4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 1016ac8:	e13ff317 	ldw	r4,-52(fp)
 1016acc:	20800050 	cmplti	r2,r4,1
 1016ad0:	1000081e 	bne	r2,zero,1016af4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 1016ad4:	e0bff017 	ldw	r2,-64(fp)
 1016ad8:	e0fff217 	ldw	r3,-56(fp)
 1016adc:	10c5883a 	add	r2,r2,r3
 1016ae0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 1016ae4:	e13ff317 	ldw	r4,-52(fp)
 1016ae8:	e0bff517 	ldw	r2,-44(fp)
 1016aec:	2089c83a 	sub	r4,r4,r2
 1016af0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1016af4:	e0fff117 	ldw	r3,-60(fp)
 1016af8:	18c00044 	addi	r3,r3,1
 1016afc:	e0fff115 	stw	r3,-60(fp)
 1016b00:	e13ff817 	ldw	r4,-32(fp)
 1016b04:	e0bff117 	ldw	r2,-60(fp)
 1016b08:	20bfe20e 	bge	r4,r2,1016a94 <alt_up_pixel_buffer_dma_draw_line+0x288>
 1016b0c:	00002106 	br	1016b94 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1016b10:	e0fffa17 	ldw	r3,-24(fp)
 1016b14:	e0fff115 	stw	r3,-60(fp)
 1016b18:	00001b06 	br	1016b88 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1016b1c:	e13fee17 	ldw	r4,-72(fp)
 1016b20:	d9000015 	stw	r4,0(sp)
 1016b24:	e0bfef17 	ldw	r2,-68(fp)
 1016b28:	d8800115 	stw	r2,4(sp)
 1016b2c:	e13fed17 	ldw	r4,-76(fp)
 1016b30:	e17fec17 	ldw	r5,-80(fp)
 1016b34:	e1bff117 	ldw	r6,-60(fp)
 1016b38:	e1fff017 	ldw	r7,-64(fp)
 1016b3c:	10167340 	call	1016734 <helper_plot_pixel>
			error = error + deltay;
 1016b40:	e0fff317 	ldw	r3,-52(fp)
 1016b44:	e13ff417 	ldw	r4,-48(fp)
 1016b48:	1907883a 	add	r3,r3,r4
 1016b4c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1016b50:	e0fff317 	ldw	r3,-52(fp)
 1016b54:	18800050 	cmplti	r2,r3,1
 1016b58:	1000081e 	bne	r2,zero,1016b7c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1016b5c:	e13ff017 	ldw	r4,-64(fp)
 1016b60:	e0bff217 	ldw	r2,-56(fp)
 1016b64:	2089883a 	add	r4,r4,r2
 1016b68:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1016b6c:	e0fff317 	ldw	r3,-52(fp)
 1016b70:	e13ff517 	ldw	r4,-44(fp)
 1016b74:	1907c83a 	sub	r3,r3,r4
 1016b78:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1016b7c:	e0bff117 	ldw	r2,-60(fp)
 1016b80:	10800044 	addi	r2,r2,1
 1016b84:	e0bff115 	stw	r2,-60(fp)
 1016b88:	e0fff817 	ldw	r3,-32(fp)
 1016b8c:	e13ff117 	ldw	r4,-60(fp)
 1016b90:	193fe20e 	bge	r3,r4,1016b1c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1016b94:	e037883a 	mov	sp,fp
 1016b98:	dfc00117 	ldw	ra,4(sp)
 1016b9c:	df000017 	ldw	fp,0(sp)
 1016ba0:	dec00204 	addi	sp,sp,8
 1016ba4:	f800283a 	ret

01016ba8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 1016ba8:	defffa04 	addi	sp,sp,-24
 1016bac:	dfc00515 	stw	ra,20(sp)
 1016bb0:	df000415 	stw	fp,16(sp)
 1016bb4:	df000404 	addi	fp,sp,16
 1016bb8:	e13ffe15 	stw	r4,-8(fp)
 1016bbc:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1016bc0:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 1016bc4:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1016bc8:	1005003a 	cmpeq	r2,r2,zero
 1016bcc:	1000221e 	bne	r2,zero,1016c58 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 1016bd0:	00803fc4 	movi	r2,255
 1016bd4:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 1016bd8:	d0a73f17 	ldw	r2,-25348(gp)
 1016bdc:	1009883a 	mov	r4,r2
 1016be0:	e0fffe17 	ldw	r3,-8(fp)
 1016be4:	e0bfff17 	ldw	r2,-4(fp)
 1016be8:	1885883a 	add	r2,r3,r2
 1016bec:	1006927a 	slli	r3,r2,9
 1016bf0:	2005883a 	mov	r2,r4
 1016bf4:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 1016bf8:	d0a73e17 	ldw	r2,-25352(gp)
 1016bfc:	1007883a 	mov	r3,r2
 1016c00:	00800604 	movi	r2,24
 1016c04:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1016c08:	d0a73b17 	ldw	r2,-25364(gp)
 1016c0c:	1080002b 	ldhuio	r2,0(r2)
 1016c10:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 1016c14:	e0bffc0b 	ldhu	r2,-16(fp)
 1016c18:	10bfffcc 	andi	r2,r2,65535
 1016c1c:	1080010c 	andi	r2,r2,4
 1016c20:	1004c03a 	cmpne	r2,r2,zero
 1016c24:	103ff81e 	bne	r2,zero,1016c08 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1016c28:	e0bffc0b 	ldhu	r2,-16(fp)
 1016c2c:	10bfffcc 	andi	r2,r2,65535
 1016c30:	1080040c 	andi	r2,r2,16
 1016c34:	1004c03a 	cmpne	r2,r2,zero
 1016c38:	1000071e 	bne	r2,zero,1016c58 <Write_Sector_Data+0xb0>
			result = true;
 1016c3c:	00800044 	movi	r2,1
 1016c40:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 1016c44:	d0274415 	stw	zero,-25328(gp)
			current_sector_index = sector_index + partition_offset;
 1016c48:	e0fffe17 	ldw	r3,-8(fp)
 1016c4c:	e0bfff17 	ldw	r2,-4(fp)
 1016c50:	1885883a 	add	r2,r3,r2
 1016c54:	d0a74515 	stw	r2,-25324(gp)
		}
	}
	return result;
 1016c58:	e0bffd17 	ldw	r2,-12(fp)
}
 1016c5c:	e037883a 	mov	sp,fp
 1016c60:	dfc00117 	ldw	ra,4(sp)
 1016c64:	df000017 	ldw	fp,0(sp)
 1016c68:	dec00204 	addi	sp,sp,8
 1016c6c:	f800283a 	ret

01016c70 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 1016c70:	defffd04 	addi	sp,sp,-12
 1016c74:	dfc00215 	stw	ra,8(sp)
 1016c78:	df000115 	stw	fp,4(sp)
 1016c7c:	df000104 	addi	fp,sp,4
	bool result = true;
 1016c80:	00800044 	movi	r2,1
 1016c84:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 1016c88:	d0a74417 	ldw	r2,-25328(gp)
 1016c8c:	1005003a 	cmpeq	r2,r2,zero
 1016c90:	1000051e 	bne	r2,zero,1016ca8 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 1016c94:	d0a74517 	ldw	r2,-25324(gp)
 1016c98:	1009883a 	mov	r4,r2
 1016c9c:	000b883a 	mov	r5,zero
 1016ca0:	1016ba80 	call	1016ba8 <Write_Sector_Data>
 1016ca4:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 1016ca8:	e0bfff17 	ldw	r2,-4(fp)
}
 1016cac:	e037883a 	mov	sp,fp
 1016cb0:	dfc00117 	ldw	ra,4(sp)
 1016cb4:	df000017 	ldw	fp,0(sp)
 1016cb8:	dec00204 	addi	sp,sp,8
 1016cbc:	f800283a 	ret

01016cc0 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1016cc0:	defff904 	addi	sp,sp,-28
 1016cc4:	dfc00615 	stw	ra,24(sp)
 1016cc8:	df000515 	stw	fp,20(sp)
 1016ccc:	df000504 	addi	fp,sp,20
 1016cd0:	e13ffd15 	stw	r4,-12(fp)
 1016cd4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1016cd8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1016cdc:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1016ce0:	1005003a 	cmpeq	r2,r2,zero
 1016ce4:	10002d1e 	bne	r2,zero,1016d9c <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 1016ce8:	00803fc4 	movi	r2,255
 1016cec:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1016cf0:	d0a74417 	ldw	r2,-25328(gp)
 1016cf4:	1005003a 	cmpeq	r2,r2,zero
 1016cf8:	1000081e 	bne	r2,zero,1016d1c <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1016cfc:	d0a74517 	ldw	r2,-25324(gp)
 1016d00:	1009883a 	mov	r4,r2
 1016d04:	000b883a 	mov	r5,zero
 1016d08:	1016ba80 	call	1016ba8 <Write_Sector_Data>
 1016d0c:	1004c03a 	cmpne	r2,r2,zero
 1016d10:	1000021e 	bne	r2,zero,1016d1c <Read_Sector_Data+0x5c>
				return false;
 1016d14:	e03fff15 	stw	zero,-4(fp)
 1016d18:	00002206 	br	1016da4 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 1016d1c:	d0a73f17 	ldw	r2,-25348(gp)
 1016d20:	1009883a 	mov	r4,r2
 1016d24:	e0fffd17 	ldw	r3,-12(fp)
 1016d28:	e0bffe17 	ldw	r2,-8(fp)
 1016d2c:	1885883a 	add	r2,r3,r2
 1016d30:	1006927a 	slli	r3,r2,9
 1016d34:	2005883a 	mov	r2,r4
 1016d38:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1016d3c:	d0a73e17 	ldw	r2,-25352(gp)
 1016d40:	1007883a 	mov	r3,r2
 1016d44:	00800444 	movi	r2,17
 1016d48:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1016d4c:	d0a73b17 	ldw	r2,-25364(gp)
 1016d50:	1080002b 	ldhuio	r2,0(r2)
 1016d54:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1016d58:	e0bffb0b 	ldhu	r2,-20(fp)
 1016d5c:	10bfffcc 	andi	r2,r2,65535
 1016d60:	1080010c 	andi	r2,r2,4
 1016d64:	1004c03a 	cmpne	r2,r2,zero
 1016d68:	103ff81e 	bne	r2,zero,1016d4c <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1016d6c:	e0bffb0b 	ldhu	r2,-20(fp)
 1016d70:	10bfffcc 	andi	r2,r2,65535
 1016d74:	1080040c 	andi	r2,r2,16
 1016d78:	1004c03a 	cmpne	r2,r2,zero
 1016d7c:	1000071e 	bne	r2,zero,1016d9c <Read_Sector_Data+0xdc>
			result = true;
 1016d80:	00800044 	movi	r2,1
 1016d84:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1016d88:	d0274415 	stw	zero,-25328(gp)
			current_sector_index = sector_index + partition_offset;
 1016d8c:	e0fffd17 	ldw	r3,-12(fp)
 1016d90:	e0bffe17 	ldw	r2,-8(fp)
 1016d94:	1885883a 	add	r2,r3,r2
 1016d98:	d0a74515 	stw	r2,-25324(gp)
		}
	}
	return result;
 1016d9c:	e0bffc17 	ldw	r2,-16(fp)
 1016da0:	e0bfff15 	stw	r2,-4(fp)
 1016da4:	e0bfff17 	ldw	r2,-4(fp)
}
 1016da8:	e037883a 	mov	sp,fp
 1016dac:	dfc00117 	ldw	ra,4(sp)
 1016db0:	df000017 	ldw	fp,0(sp)
 1016db4:	dec00204 	addi	sp,sp,8
 1016db8:	f800283a 	ret

01016dbc <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 1016dbc:	defffa04 	addi	sp,sp,-24
 1016dc0:	dfc00515 	stw	ra,20(sp)
 1016dc4:	df000415 	stw	fp,16(sp)
 1016dc8:	df000404 	addi	fp,sp,16
 1016dcc:	e13ffd15 	stw	r4,-12(fp)
 1016dd0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 1016dd4:	e0bffd17 	ldw	r2,-12(fp)
 1016dd8:	1006d23a 	srli	r3,r2,8
 1016ddc:	d0a74117 	ldw	r2,-25340(gp)
 1016de0:	1885883a 	add	r2,r3,r2
 1016de4:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1016de8:	00804434 	movhi	r2,272
 1016dec:	1085d504 	addi	r2,r2,5972
 1016df0:	10c01117 	ldw	r3,68(r2)
 1016df4:	e0bffc17 	ldw	r2,-16(fp)
 1016df8:	10c5883a 	add	r2,r2,r3
 1016dfc:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 1016e00:	d0e74517 	ldw	r3,-25324(gp)
 1016e04:	e0bffc17 	ldw	r2,-16(fp)
 1016e08:	10c00726 	beq	r2,r3,1016e28 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1016e0c:	e13ffc17 	ldw	r4,-16(fp)
 1016e10:	000b883a 	mov	r5,zero
 1016e14:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1016e18:	1004c03a 	cmpne	r2,r2,zero
 1016e1c:	1000021e 	bne	r2,zero,1016e28 <get_cluster_flag+0x6c>
			return false;
 1016e20:	e03fff15 	stw	zero,-4(fp)
 1016e24:	00000d06 	br	1016e5c <get_cluster_flag+0xa0>
		}
	}
	*flag
 1016e28:	d0a74317 	ldw	r2,-25332(gp)
 1016e2c:	10800a17 	ldw	r2,40(r2)
 1016e30:	1007883a 	mov	r3,r2
 1016e34:	e0bffd17 	ldw	r2,-12(fp)
 1016e38:	10803fcc 	andi	r2,r2,255
 1016e3c:	1085883a 	add	r2,r2,r2
 1016e40:	1885883a 	add	r2,r3,r2
 1016e44:	1080002b 	ldhuio	r2,0(r2)
 1016e48:	1007883a 	mov	r3,r2
 1016e4c:	e0bffe17 	ldw	r2,-8(fp)
 1016e50:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 1016e54:	00800044 	movi	r2,1
 1016e58:	e0bfff15 	stw	r2,-4(fp)
 1016e5c:	e0bfff17 	ldw	r2,-4(fp)
}
 1016e60:	e037883a 	mov	sp,fp
 1016e64:	dfc00117 	ldw	ra,4(sp)
 1016e68:	df000017 	ldw	fp,0(sp)
 1016e6c:	dec00204 	addi	sp,sp,8
 1016e70:	f800283a 	ret

01016e74 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 1016e74:	defff904 	addi	sp,sp,-28
 1016e78:	dfc00615 	stw	ra,24(sp)
 1016e7c:	df000515 	stw	fp,20(sp)
 1016e80:	df000504 	addi	fp,sp,20
 1016e84:	e13ffc15 	stw	r4,-16(fp)
 1016e88:	e1bffe15 	stw	r6,-8(fp)
 1016e8c:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 1016e90:	e0bffc17 	ldw	r2,-16(fp)
 1016e94:	1006d23a 	srli	r3,r2,8
 1016e98:	d0a74117 	ldw	r2,-25340(gp)
 1016e9c:	1885883a 	add	r2,r3,r2
 1016ea0:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 1016ea4:	e0bffe17 	ldw	r2,-8(fp)
 1016ea8:	1005003a 	cmpeq	r2,r2,zero
 1016eac:	1000071e 	bne	r2,zero,1016ecc <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1016eb0:	00804434 	movhi	r2,272
 1016eb4:	1085d504 	addi	r2,r2,5972
 1016eb8:	10c01117 	ldw	r3,68(r2)
 1016ebc:	e0bffb17 	ldw	r2,-20(fp)
 1016ec0:	10c5883a 	add	r2,r2,r3
 1016ec4:	e0bffb15 	stw	r2,-20(fp)
 1016ec8:	00000606 	br	1016ee4 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 1016ecc:	00804434 	movhi	r2,272
 1016ed0:	1085d504 	addi	r2,r2,5972
 1016ed4:	10c01217 	ldw	r3,72(r2)
 1016ed8:	e0bffb17 	ldw	r2,-20(fp)
 1016edc:	10c5883a 	add	r2,r2,r3
 1016ee0:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 1016ee4:	d0e74517 	ldw	r3,-25324(gp)
 1016ee8:	e0bffb17 	ldw	r2,-20(fp)
 1016eec:	10c00726 	beq	r2,r3,1016f0c <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1016ef0:	e13ffb17 	ldw	r4,-20(fp)
 1016ef4:	000b883a 	mov	r5,zero
 1016ef8:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1016efc:	1004c03a 	cmpne	r2,r2,zero
 1016f00:	1000021e 	bne	r2,zero,1016f0c <mark_cluster+0x98>
			return false;
 1016f04:	e03fff15 	stw	zero,-4(fp)
 1016f08:	00000d06 	br	1016f40 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 1016f0c:	d0a74317 	ldw	r2,-25332(gp)
 1016f10:	10800a17 	ldw	r2,40(r2)
 1016f14:	1007883a 	mov	r3,r2
 1016f18:	e0bffc17 	ldw	r2,-16(fp)
 1016f1c:	10803fcc 	andi	r2,r2,255
 1016f20:	1085883a 	add	r2,r2,r2
 1016f24:	1885883a 	add	r2,r3,r2
 1016f28:	e0fffd0f 	ldh	r3,-12(fp)
 1016f2c:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 1016f30:	00800044 	movi	r2,1
 1016f34:	d0a74415 	stw	r2,-25328(gp)
	return true;
 1016f38:	00800044 	movi	r2,1
 1016f3c:	e0bfff15 	stw	r2,-4(fp)
 1016f40:	e0bfff17 	ldw	r2,-4(fp)
}
 1016f44:	e037883a 	mov	sp,fp
 1016f48:	dfc00117 	ldw	ra,4(sp)
 1016f4c:	df000017 	ldw	fp,0(sp)
 1016f50:	dec00204 	addi	sp,sp,8
 1016f54:	f800283a 	ret

01016f58 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1016f58:	defff704 	addi	sp,sp,-36
 1016f5c:	dfc00815 	stw	ra,32(sp)
 1016f60:	df000715 	stw	fp,28(sp)
 1016f64:	df000704 	addi	fp,sp,28
	bool result = false;
 1016f68:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 1016f6c:	0009883a 	mov	r4,zero
 1016f70:	000b883a 	mov	r5,zero
 1016f74:	101b0f00 	call	101b0f0 <Read_Sector_Data_Attempt_CRC>
 1016f78:	1005003a 	cmpeq	r2,r2,zero
 1016f7c:	10005c1e 	bne	r2,zero,10170f0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1016f80:	d0a74317 	ldw	r2,-25332(gp)
 1016f84:	10800a17 	ldw	r2,40(r2)
 1016f88:	10807f84 	addi	r2,r2,510
 1016f8c:	1080002b 	ldhuio	r2,0(r2)
 1016f90:	10bfffcc 	andi	r2,r2,65535
 1016f94:	10a0001c 	xori	r2,r2,32768
 1016f98:	10a00004 	addi	r2,r2,-32768
 1016f9c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 1016fa0:	e0bffd17 	ldw	r2,-12(fp)
 1016fa4:	10ffffcc 	andi	r3,r2,65535
 1016fa8:	00aa9554 	movui	r2,43605
 1016fac:	1880501e 	bne	r3,r2,10170f0 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 1016fb0:	e03ffe15 	stw	zero,-8(fp)
 1016fb4:	00004b06 	br	10170e4 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 1016fb8:	e0bffe17 	ldw	r2,-8(fp)
 1016fbc:	1004913a 	slli	r2,r2,4
 1016fc0:	10806f84 	addi	r2,r2,446
 1016fc4:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
 1016fc8:	d0a74317 	ldw	r2,-25332(gp)
 1016fcc:	10800a17 	ldw	r2,40(r2)
 1016fd0:	1007883a 	mov	r3,r2
 1016fd4:	e0bffa17 	ldw	r2,-24(fp)
 1016fd8:	1885883a 	add	r2,r3,r2
 1016fdc:	10800104 	addi	r2,r2,4
 1016fe0:	10800023 	ldbuio	r2,0(r2)
 1016fe4:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 1016fe8:	e0bff907 	ldb	r2,-28(fp)
 1016fec:	10800060 	cmpeqi	r2,r2,1
 1016ff0:	1000091e 	bne	r2,zero,1017018 <Check_for_Master_Boot_Record+0xc0>
 1016ff4:	e0bff907 	ldb	r2,-28(fp)
 1016ff8:	10800120 	cmpeqi	r2,r2,4
 1016ffc:	1000061e 	bne	r2,zero,1017018 <Check_for_Master_Boot_Record+0xc0>
 1017000:	e0bff907 	ldb	r2,-28(fp)
 1017004:	108001a0 	cmpeqi	r2,r2,6
 1017008:	1000031e 	bne	r2,zero,1017018 <Check_for_Master_Boot_Record+0xc0>
 101700c:	e0bff907 	ldb	r2,-28(fp)
 1017010:	10800398 	cmpnei	r2,r2,14
 1017014:	1000301e 	bne	r2,zero,10170d8 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
 1017018:	d0a74317 	ldw	r2,-25332(gp)
 101701c:	10800a17 	ldw	r2,40(r2)
 1017020:	1007883a 	mov	r3,r2
 1017024:	e0bffa17 	ldw	r2,-24(fp)
 1017028:	1885883a 	add	r2,r3,r2
 101702c:	10800284 	addi	r2,r2,10
 1017030:	1080002b 	ldhuio	r2,0(r2)
 1017034:	10bfffcc 	andi	r2,r2,65535
 1017038:	1008943a 	slli	r4,r2,16
 101703c:	d0a74317 	ldw	r2,-25332(gp)
 1017040:	10800a17 	ldw	r2,40(r2)
 1017044:	1007883a 	mov	r3,r2
 1017048:	e0bffa17 	ldw	r2,-24(fp)
 101704c:	1885883a 	add	r2,r3,r2
 1017050:	10800204 	addi	r2,r2,8
 1017054:	1080002b 	ldhuio	r2,0(r2)
 1017058:	10bfffcc 	andi	r2,r2,65535
 101705c:	2084b03a 	or	r2,r4,r2
 1017060:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
 1017064:	d0a74317 	ldw	r2,-25332(gp)
 1017068:	10800a17 	ldw	r2,40(r2)
 101706c:	1007883a 	mov	r3,r2
 1017070:	e0bffa17 	ldw	r2,-24(fp)
 1017074:	1885883a 	add	r2,r3,r2
 1017078:	10800384 	addi	r2,r2,14
 101707c:	1080002b 	ldhuio	r2,0(r2)
 1017080:	10bfffcc 	andi	r2,r2,65535
 1017084:	1008943a 	slli	r4,r2,16
 1017088:	d0a74317 	ldw	r2,-25332(gp)
 101708c:	10800a17 	ldw	r2,40(r2)
 1017090:	1007883a 	mov	r3,r2
 1017094:	e0bffa17 	ldw	r2,-24(fp)
 1017098:	1885883a 	add	r2,r3,r2
 101709c:	10800304 	addi	r2,r2,12
 10170a0:	1080002b 	ldhuio	r2,0(r2)
 10170a4:	10bfffcc 	andi	r2,r2,65535
 10170a8:	2084b03a 	or	r2,r4,r2
 10170ac:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 10170b0:	e0bffb17 	ldw	r2,-20(fp)
 10170b4:	10800050 	cmplti	r2,r2,1
 10170b8:	1000071e 	bne	r2,zero,10170d8 <Check_for_Master_Boot_Record+0x180>
						result = true;
 10170bc:	00800044 	movi	r2,1
 10170c0:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 10170c4:	e0bffb17 	ldw	r2,-20(fp)
 10170c8:	d0a74215 	stw	r2,-25336(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 10170cc:	e0bffc17 	ldw	r2,-16(fp)
 10170d0:	d0a74115 	stw	r2,-25340(gp)
						break;
 10170d4:	00000606 	br	10170f0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 10170d8:	e0bffe17 	ldw	r2,-8(fp)
 10170dc:	10800044 	addi	r2,r2,1
 10170e0:	e0bffe15 	stw	r2,-8(fp)
 10170e4:	e0bffe17 	ldw	r2,-8(fp)
 10170e8:	10800110 	cmplti	r2,r2,4
 10170ec:	103fb21e 	bne	r2,zero,1016fb8 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 10170f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10170f4:	e037883a 	mov	sp,fp
 10170f8:	dfc00117 	ldw	ra,4(sp)
 10170fc:	df000017 	ldw	fp,0(sp)
 1017100:	dec00204 	addi	sp,sp,8
 1017104:	f800283a 	ret

01017108 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 1017108:	defff804 	addi	sp,sp,-32
 101710c:	dfc00715 	stw	ra,28(sp)
 1017110:	df000615 	stw	fp,24(sp)
 1017114:	df000604 	addi	fp,sp,24
 1017118:	e13ffc15 	stw	r4,-16(fp)
 101711c:	e17ffd15 	stw	r5,-12(fp)
 1017120:	e1bffe15 	stw	r6,-8(fp)
 1017124:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 1017128:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 101712c:	e0bffc17 	ldw	r2,-16(fp)
 1017130:	108007cc 	andi	r2,r2,31
 1017134:	1004c03a 	cmpne	r2,r2,zero
 1017138:	10008e1e 	bne	r2,zero,1017374 <Read_File_Record_At_Offset+0x26c>
 101713c:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1017140:	1005003a 	cmpeq	r2,r2,zero
 1017144:	10008b1e 	bne	r2,zero,1017374 <Read_File_Record_At_Offset+0x26c>
 1017148:	d0a73a17 	ldw	r2,-25368(gp)
 101714c:	1005003a 	cmpeq	r2,r2,zero
 1017150:	1000881e 	bne	r2,zero,1017374 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1017154:	e03ffa15 	stw	zero,-24(fp)
 1017158:	00001006 	br	101719c <Read_File_Record_At_Offset+0x94>
			record->name[counter]
 101715c:	e17ffa17 	ldw	r5,-24(fp)
 1017160:	d0a74317 	ldw	r2,-25332(gp)
 1017164:	10800a17 	ldw	r2,40(r2)
 1017168:	1009883a 	mov	r4,r2
 101716c:	e0fffc17 	ldw	r3,-16(fp)
 1017170:	e0bffa17 	ldw	r2,-24(fp)
 1017174:	1885883a 	add	r2,r3,r2
 1017178:	2085883a 	add	r2,r4,r2
 101717c:	10800023 	ldbuio	r2,0(r2)
 1017180:	1007883a 	mov	r3,r2
 1017184:	e0bffd17 	ldw	r2,-12(fp)
 1017188:	1145883a 	add	r2,r2,r5
 101718c:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 1017190:	e0bffa17 	ldw	r2,-24(fp)
 1017194:	10800044 	addi	r2,r2,1
 1017198:	e0bffa15 	stw	r2,-24(fp)
 101719c:	e0bffa17 	ldw	r2,-24(fp)
 10171a0:	10800210 	cmplti	r2,r2,8
 10171a4:	103fed1e 	bne	r2,zero,101715c <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 10171a8:	e03ffa15 	stw	zero,-24(fp)
 10171ac:	00001206 	br	10171f8 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
 10171b0:	e17ffa17 	ldw	r5,-24(fp)
 10171b4:	d0a74317 	ldw	r2,-25332(gp)
 10171b8:	10800a17 	ldw	r2,40(r2)
 10171bc:	1009883a 	mov	r4,r2
 10171c0:	e0fffc17 	ldw	r3,-16(fp)
 10171c4:	e0bffa17 	ldw	r2,-24(fp)
 10171c8:	1885883a 	add	r2,r3,r2
 10171cc:	2085883a 	add	r2,r4,r2
 10171d0:	10800204 	addi	r2,r2,8
 10171d4:	10800023 	ldbuio	r2,0(r2)
 10171d8:	1007883a 	mov	r3,r2
 10171dc:	e0bffd17 	ldw	r2,-12(fp)
 10171e0:	2885883a 	add	r2,r5,r2
 10171e4:	10800204 	addi	r2,r2,8
 10171e8:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 10171ec:	e0bffa17 	ldw	r2,-24(fp)
 10171f0:	10800044 	addi	r2,r2,1
 10171f4:	e0bffa15 	stw	r2,-24(fp)
 10171f8:	e0bffa17 	ldw	r2,-24(fp)
 10171fc:	108000d0 	cmplti	r2,r2,3
 1017200:	103feb1e 	bne	r2,zero,10171b0 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
 1017204:	d0a74317 	ldw	r2,-25332(gp)
 1017208:	10800a17 	ldw	r2,40(r2)
 101720c:	1007883a 	mov	r3,r2
 1017210:	e0bffc17 	ldw	r2,-16(fp)
 1017214:	1885883a 	add	r2,r3,r2
 1017218:	108002c4 	addi	r2,r2,11
 101721c:	10800023 	ldbuio	r2,0(r2)
 1017220:	1007883a 	mov	r3,r2
 1017224:	e0bffd17 	ldw	r2,-12(fp)
 1017228:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
 101722c:	d0a74317 	ldw	r2,-25332(gp)
 1017230:	10800a17 	ldw	r2,40(r2)
 1017234:	1007883a 	mov	r3,r2
 1017238:	e0bffc17 	ldw	r2,-16(fp)
 101723c:	1885883a 	add	r2,r3,r2
 1017240:	10800384 	addi	r2,r2,14
 1017244:	1080002b 	ldhuio	r2,0(r2)
 1017248:	1007883a 	mov	r3,r2
 101724c:	e0bffd17 	ldw	r2,-12(fp)
 1017250:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
 1017254:	d0a74317 	ldw	r2,-25332(gp)
 1017258:	10800a17 	ldw	r2,40(r2)
 101725c:	1007883a 	mov	r3,r2
 1017260:	e0bffc17 	ldw	r2,-16(fp)
 1017264:	1885883a 	add	r2,r3,r2
 1017268:	10800404 	addi	r2,r2,16
 101726c:	1080002b 	ldhuio	r2,0(r2)
 1017270:	1007883a 	mov	r3,r2
 1017274:	e0bffd17 	ldw	r2,-12(fp)
 1017278:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
 101727c:	d0a74317 	ldw	r2,-25332(gp)
 1017280:	10800a17 	ldw	r2,40(r2)
 1017284:	1007883a 	mov	r3,r2
 1017288:	e0bffc17 	ldw	r2,-16(fp)
 101728c:	1885883a 	add	r2,r3,r2
 1017290:	10800484 	addi	r2,r2,18
 1017294:	1080002b 	ldhuio	r2,0(r2)
 1017298:	1007883a 	mov	r3,r2
 101729c:	e0bffd17 	ldw	r2,-12(fp)
 10172a0:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
 10172a4:	d0a74317 	ldw	r2,-25332(gp)
 10172a8:	10800a17 	ldw	r2,40(r2)
 10172ac:	1007883a 	mov	r3,r2
 10172b0:	e0bffc17 	ldw	r2,-16(fp)
 10172b4:	1885883a 	add	r2,r3,r2
 10172b8:	10800584 	addi	r2,r2,22
 10172bc:	1080002b 	ldhuio	r2,0(r2)
 10172c0:	1007883a 	mov	r3,r2
 10172c4:	e0bffd17 	ldw	r2,-12(fp)
 10172c8:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
 10172cc:	d0a74317 	ldw	r2,-25332(gp)
 10172d0:	10800a17 	ldw	r2,40(r2)
 10172d4:	1007883a 	mov	r3,r2
 10172d8:	e0bffc17 	ldw	r2,-16(fp)
 10172dc:	1885883a 	add	r2,r3,r2
 10172e0:	10800604 	addi	r2,r2,24
 10172e4:	1080002b 	ldhuio	r2,0(r2)
 10172e8:	1007883a 	mov	r3,r2
 10172ec:	e0bffd17 	ldw	r2,-12(fp)
 10172f0:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
 10172f4:	d0a74317 	ldw	r2,-25332(gp)
 10172f8:	10800a17 	ldw	r2,40(r2)
 10172fc:	1007883a 	mov	r3,r2
 1017300:	e0bffc17 	ldw	r2,-16(fp)
 1017304:	1885883a 	add	r2,r3,r2
 1017308:	10800684 	addi	r2,r2,26
 101730c:	1080002b 	ldhuio	r2,0(r2)
 1017310:	1007883a 	mov	r3,r2
 1017314:	e0bffd17 	ldw	r2,-12(fp)
 1017318:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
 101731c:	d0a74317 	ldw	r2,-25332(gp)
 1017320:	10800a17 	ldw	r2,40(r2)
 1017324:	1007883a 	mov	r3,r2
 1017328:	e0bffc17 	ldw	r2,-16(fp)
 101732c:	1885883a 	add	r2,r3,r2
 1017330:	10800704 	addi	r2,r2,28
 1017334:	10800037 	ldwio	r2,0(r2)
 1017338:	1007883a 	mov	r3,r2
 101733c:	e0bffd17 	ldw	r2,-12(fp)
 1017340:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 1017344:	e0fffd17 	ldw	r3,-12(fp)
 1017348:	e0bffe17 	ldw	r2,-8(fp)
 101734c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 1017350:	e0fffd17 	ldw	r3,-12(fp)
 1017354:	e0bfff17 	ldw	r2,-4(fp)
 1017358:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 101735c:	e0bffc17 	ldw	r2,-16(fp)
 1017360:	1007883a 	mov	r3,r2
 1017364:	e0bffd17 	ldw	r2,-12(fp)
 1017368:	10c00c0d 	sth	r3,48(r2)
		result = true;
 101736c:	00800044 	movi	r2,1
 1017370:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1017374:	e0bffb17 	ldw	r2,-20(fp)
}
 1017378:	e037883a 	mov	sp,fp
 101737c:	dfc00117 	ldw	ra,4(sp)
 1017380:	df000017 	ldw	fp,0(sp)
 1017384:	dec00204 	addi	sp,sp,8
 1017388:	f800283a 	ret

0101738c <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 101738c:	defff904 	addi	sp,sp,-28
 1017390:	dfc00615 	stw	ra,24(sp)
 1017394:	df000515 	stw	fp,20(sp)
 1017398:	df000504 	addi	fp,sp,20
 101739c:	e13ffe15 	stw	r4,-8(fp)
 10173a0:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 10173a4:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 10173a8:	e0bffe17 	ldw	r2,-8(fp)
 10173ac:	108007cc 	andi	r2,r2,31
 10173b0:	1004c03a 	cmpne	r2,r2,zero
 10173b4:	10009d1e 	bne	r2,zero,101762c <Write_File_Record_At_Offset+0x2a0>
 10173b8:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 10173bc:	1005003a 	cmpeq	r2,r2,zero
 10173c0:	10009a1e 	bne	r2,zero,101762c <Write_File_Record_At_Offset+0x2a0>
 10173c4:	d0a73a17 	ldw	r2,-25368(gp)
 10173c8:	1005003a 	cmpeq	r2,r2,zero
 10173cc:	1000971e 	bne	r2,zero,101762c <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 10173d0:	e03ffc15 	stw	zero,-16(fp)
 10173d4:	00001e06 	br	1017450 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 10173d8:	e0bffc17 	ldw	r2,-16(fp)
 10173dc:	10c00044 	addi	r3,r2,1
 10173e0:	e0bfff17 	ldw	r2,-4(fp)
 10173e4:	10c5883a 	add	r2,r2,r3
 10173e8:	10800003 	ldbu	r2,0(r2)
 10173ec:	10803fcc 	andi	r2,r2,255
 10173f0:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 10173f4:	e0bffb0f 	ldh	r2,-20(fp)
 10173f8:	1004923a 	slli	r2,r2,8
 10173fc:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 1017400:	e0fffc17 	ldw	r3,-16(fp)
 1017404:	e0bfff17 	ldw	r2,-4(fp)
 1017408:	10c5883a 	add	r2,r2,r3
 101740c:	10800003 	ldbu	r2,0(r2)
 1017410:	10c03fcc 	andi	r3,r2,255
 1017414:	e0bffb0b 	ldhu	r2,-20(fp)
 1017418:	10c4b03a 	or	r2,r2,r3
 101741c:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 1017420:	d0a74317 	ldw	r2,-25332(gp)
 1017424:	10800a17 	ldw	r2,40(r2)
 1017428:	1009883a 	mov	r4,r2
 101742c:	e0fffe17 	ldw	r3,-8(fp)
 1017430:	e0bffc17 	ldw	r2,-16(fp)
 1017434:	1885883a 	add	r2,r3,r2
 1017438:	2085883a 	add	r2,r4,r2
 101743c:	e0fffb0f 	ldh	r3,-20(fp)
 1017440:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 1017444:	e0bffc17 	ldw	r2,-16(fp)
 1017448:	10800084 	addi	r2,r2,2
 101744c:	e0bffc15 	stw	r2,-16(fp)
 1017450:	e0bffc17 	ldw	r2,-16(fp)
 1017454:	10800210 	cmplti	r2,r2,8
 1017458:	103fdf1e 	bne	r2,zero,10173d8 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 101745c:	e03ffc15 	stw	zero,-16(fp)
 1017460:	00001306 	br	10174b0 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 1017464:	d0a74317 	ldw	r2,-25332(gp)
 1017468:	10800a17 	ldw	r2,40(r2)
 101746c:	1009883a 	mov	r4,r2
 1017470:	e0fffe17 	ldw	r3,-8(fp)
 1017474:	e0bffc17 	ldw	r2,-16(fp)
 1017478:	1885883a 	add	r2,r3,r2
 101747c:	2085883a 	add	r2,r4,r2
 1017480:	11000204 	addi	r4,r2,8
 1017484:	e0fffc17 	ldw	r3,-16(fp)
 1017488:	e0bfff17 	ldw	r2,-4(fp)
 101748c:	1885883a 	add	r2,r3,r2
 1017490:	10800204 	addi	r2,r2,8
 1017494:	10800003 	ldbu	r2,0(r2)
 1017498:	10c03fcc 	andi	r3,r2,255
 101749c:	2005883a 	mov	r2,r4
 10174a0:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 10174a4:	e0bffc17 	ldw	r2,-16(fp)
 10174a8:	10800044 	addi	r2,r2,1
 10174ac:	e0bffc15 	stw	r2,-16(fp)
 10174b0:	e0bffc17 	ldw	r2,-16(fp)
 10174b4:	108000d0 	cmplti	r2,r2,3
 10174b8:	103fea1e 	bne	r2,zero,1017464 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 10174bc:	d0a74317 	ldw	r2,-25332(gp)
 10174c0:	10800a17 	ldw	r2,40(r2)
 10174c4:	1007883a 	mov	r3,r2
 10174c8:	e0bffe17 	ldw	r2,-8(fp)
 10174cc:	1885883a 	add	r2,r3,r2
 10174d0:	110002c4 	addi	r4,r2,11
 10174d4:	e0bfff17 	ldw	r2,-4(fp)
 10174d8:	108002c3 	ldbu	r2,11(r2)
 10174dc:	10c03fcc 	andi	r3,r2,255
 10174e0:	2005883a 	mov	r2,r4
 10174e4:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 10174e8:	d0a74317 	ldw	r2,-25332(gp)
 10174ec:	10800a17 	ldw	r2,40(r2)
 10174f0:	1007883a 	mov	r3,r2
 10174f4:	e0bffe17 	ldw	r2,-8(fp)
 10174f8:	1885883a 	add	r2,r3,r2
 10174fc:	11000384 	addi	r4,r2,14
 1017500:	e0bfff17 	ldw	r2,-4(fp)
 1017504:	1080030b 	ldhu	r2,12(r2)
 1017508:	10ffffcc 	andi	r3,r2,65535
 101750c:	2005883a 	mov	r2,r4
 1017510:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 1017514:	d0a74317 	ldw	r2,-25332(gp)
 1017518:	10800a17 	ldw	r2,40(r2)
 101751c:	1007883a 	mov	r3,r2
 1017520:	e0bffe17 	ldw	r2,-8(fp)
 1017524:	1885883a 	add	r2,r3,r2
 1017528:	11000404 	addi	r4,r2,16
 101752c:	e0bfff17 	ldw	r2,-4(fp)
 1017530:	1080038b 	ldhu	r2,14(r2)
 1017534:	10ffffcc 	andi	r3,r2,65535
 1017538:	2005883a 	mov	r2,r4
 101753c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 1017540:	d0a74317 	ldw	r2,-25332(gp)
 1017544:	10800a17 	ldw	r2,40(r2)
 1017548:	1007883a 	mov	r3,r2
 101754c:	e0bffe17 	ldw	r2,-8(fp)
 1017550:	1885883a 	add	r2,r3,r2
 1017554:	11000484 	addi	r4,r2,18
 1017558:	e0bfff17 	ldw	r2,-4(fp)
 101755c:	1080040b 	ldhu	r2,16(r2)
 1017560:	10ffffcc 	andi	r3,r2,65535
 1017564:	2005883a 	mov	r2,r4
 1017568:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 101756c:	d0a74317 	ldw	r2,-25332(gp)
 1017570:	10800a17 	ldw	r2,40(r2)
 1017574:	1007883a 	mov	r3,r2
 1017578:	e0bffe17 	ldw	r2,-8(fp)
 101757c:	1885883a 	add	r2,r3,r2
 1017580:	11000584 	addi	r4,r2,22
 1017584:	e0bfff17 	ldw	r2,-4(fp)
 1017588:	1080048b 	ldhu	r2,18(r2)
 101758c:	10ffffcc 	andi	r3,r2,65535
 1017590:	2005883a 	mov	r2,r4
 1017594:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 1017598:	d0a74317 	ldw	r2,-25332(gp)
 101759c:	10800a17 	ldw	r2,40(r2)
 10175a0:	1007883a 	mov	r3,r2
 10175a4:	e0bffe17 	ldw	r2,-8(fp)
 10175a8:	1885883a 	add	r2,r3,r2
 10175ac:	11000604 	addi	r4,r2,24
 10175b0:	e0bfff17 	ldw	r2,-4(fp)
 10175b4:	1080050b 	ldhu	r2,20(r2)
 10175b8:	10ffffcc 	andi	r3,r2,65535
 10175bc:	2005883a 	mov	r2,r4
 10175c0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 10175c4:	d0a74317 	ldw	r2,-25332(gp)
 10175c8:	10800a17 	ldw	r2,40(r2)
 10175cc:	1007883a 	mov	r3,r2
 10175d0:	e0bffe17 	ldw	r2,-8(fp)
 10175d4:	1885883a 	add	r2,r3,r2
 10175d8:	11000684 	addi	r4,r2,26
 10175dc:	e0bfff17 	ldw	r2,-4(fp)
 10175e0:	1080058b 	ldhu	r2,22(r2)
 10175e4:	10ffffcc 	andi	r3,r2,65535
 10175e8:	2005883a 	mov	r2,r4
 10175ec:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 10175f0:	d0a74317 	ldw	r2,-25332(gp)
 10175f4:	10800a17 	ldw	r2,40(r2)
 10175f8:	1007883a 	mov	r3,r2
 10175fc:	e0bffe17 	ldw	r2,-8(fp)
 1017600:	1885883a 	add	r2,r3,r2
 1017604:	11000704 	addi	r4,r2,28
 1017608:	e0bfff17 	ldw	r2,-4(fp)
 101760c:	10800617 	ldw	r2,24(r2)
 1017610:	1007883a 	mov	r3,r2
 1017614:	2005883a 	mov	r2,r4
 1017618:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
 101761c:	00800044 	movi	r2,1
 1017620:	d0a74415 	stw	r2,-25328(gp)
		result = true;
 1017624:	00800044 	movi	r2,1
 1017628:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 101762c:	e0bffd17 	ldw	r2,-12(fp)
}
 1017630:	e037883a 	mov	sp,fp
 1017634:	dfc00117 	ldw	ra,4(sp)
 1017638:	df000017 	ldw	fp,0(sp)
 101763c:	dec00204 	addi	sp,sp,8
 1017640:	f800283a 	ret

01017644 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 1017644:	defff804 	addi	sp,sp,-32
 1017648:	dfc00715 	stw	ra,28(sp)
 101764c:	df000615 	stw	fp,24(sp)
 1017650:	dc000515 	stw	r16,20(sp)
 1017654:	df000504 	addi	fp,sp,20
 1017658:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 101765c:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 1017660:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 1017664:	0009883a 	mov	r4,zero
 1017668:	e17fff17 	ldw	r5,-4(fp)
 101766c:	101b0f00 	call	101b0f0 <Read_Sector_Data_Attempt_CRC>
 1017670:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 1017674:	d0a74317 	ldw	r2,-25332(gp)
 1017678:	10800a17 	ldw	r2,40(r2)
 101767c:	10807f84 	addi	r2,r2,510
 1017680:	1080002b 	ldhuio	r2,0(r2)
 1017684:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1017688:	e0bffc0f 	ldh	r2,-16(fp)
 101768c:	10ffffcc 	andi	r3,r2,65535
 1017690:	00aa9554 	movui	r2,43605
 1017694:	1881751e 	bne	r3,r2,1017c6c <Check_for_DOS_FAT+0x628>
 1017698:	e0bffe17 	ldw	r2,-8(fp)
 101769c:	1005003a 	cmpeq	r2,r2,zero
 10176a0:	1001721e 	bne	r2,zero,1017c6c <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
 10176a4:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
 10176a8:	d0a74317 	ldw	r2,-25332(gp)
 10176ac:	10800a17 	ldw	r2,40(r2)
 10176b0:	10800023 	ldbuio	r2,0(r2)
 10176b4:	1007883a 	mov	r3,r2
 10176b8:	00804434 	movhi	r2,272
 10176bc:	1085d504 	addi	r2,r2,5972
 10176c0:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
 10176c4:	d0a74317 	ldw	r2,-25332(gp)
 10176c8:	10800a17 	ldw	r2,40(r2)
 10176cc:	10800044 	addi	r2,r2,1
 10176d0:	10800023 	ldbuio	r2,0(r2)
 10176d4:	1007883a 	mov	r3,r2
 10176d8:	00804434 	movhi	r2,272
 10176dc:	1085d504 	addi	r2,r2,5972
 10176e0:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
 10176e4:	d0a74317 	ldw	r2,-25332(gp)
 10176e8:	10800a17 	ldw	r2,40(r2)
 10176ec:	10800084 	addi	r2,r2,2
 10176f0:	10800023 	ldbuio	r2,0(r2)
 10176f4:	1007883a 	mov	r3,r2
 10176f8:	00804434 	movhi	r2,272
 10176fc:	1085d504 	addi	r2,r2,5972
 1017700:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1017704:	e03ffd15 	stw	zero,-12(fp)
 1017708:	00001006 	br	101774c <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
 101770c:	e13ffd17 	ldw	r4,-12(fp)
 1017710:	d0a74317 	ldw	r2,-25332(gp)
 1017714:	10800a17 	ldw	r2,40(r2)
 1017718:	1007883a 	mov	r3,r2
 101771c:	e0bffd17 	ldw	r2,-12(fp)
 1017720:	1885883a 	add	r2,r3,r2
 1017724:	108000c4 	addi	r2,r2,3
 1017728:	10800023 	ldbuio	r2,0(r2)
 101772c:	1007883a 	mov	r3,r2
 1017730:	00804434 	movhi	r2,272
 1017734:	1085d504 	addi	r2,r2,5972
 1017738:	1105883a 	add	r2,r2,r4
 101773c:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 1017740:	e0bffd17 	ldw	r2,-12(fp)
 1017744:	10800044 	addi	r2,r2,1
 1017748:	e0bffd15 	stw	r2,-12(fp)
 101774c:	e0bffd17 	ldw	r2,-12(fp)
 1017750:	10800210 	cmplti	r2,r2,8
 1017754:	103fed1e 	bne	r2,zero,101770c <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
 1017758:	d0a74317 	ldw	r2,-25332(gp)
 101775c:	10800a17 	ldw	r2,40(r2)
 1017760:	10800304 	addi	r2,r2,12
 1017764:	10800023 	ldbuio	r2,0(r2)
 1017768:	10803fcc 	andi	r2,r2,255
 101776c:	1004923a 	slli	r2,r2,8
 1017770:	1007883a 	mov	r3,r2
 1017774:	d0a74317 	ldw	r2,-25332(gp)
 1017778:	10800a17 	ldw	r2,40(r2)
 101777c:	108002c4 	addi	r2,r2,11
 1017780:	10800023 	ldbuio	r2,0(r2)
 1017784:	10803fcc 	andi	r2,r2,255
 1017788:	1080201c 	xori	r2,r2,128
 101778c:	10bfe004 	addi	r2,r2,-128
 1017790:	1884b03a 	or	r2,r3,r2
 1017794:	1007883a 	mov	r3,r2
 1017798:	00804434 	movhi	r2,272
 101779c:	1085d504 	addi	r2,r2,5972
 10177a0:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
 10177a4:	d0a74317 	ldw	r2,-25332(gp)
 10177a8:	10800a17 	ldw	r2,40(r2)
 10177ac:	10800344 	addi	r2,r2,13
 10177b0:	10800023 	ldbuio	r2,0(r2)
 10177b4:	1007883a 	mov	r3,r2
 10177b8:	00804434 	movhi	r2,272
 10177bc:	1085d504 	addi	r2,r2,5972
 10177c0:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
 10177c4:	d0a74317 	ldw	r2,-25332(gp)
 10177c8:	10800a17 	ldw	r2,40(r2)
 10177cc:	10800384 	addi	r2,r2,14
 10177d0:	1080002b 	ldhuio	r2,0(r2)
 10177d4:	1007883a 	mov	r3,r2
 10177d8:	00804434 	movhi	r2,272
 10177dc:	1085d504 	addi	r2,r2,5972
 10177e0:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
 10177e4:	d0a74317 	ldw	r2,-25332(gp)
 10177e8:	10800a17 	ldw	r2,40(r2)
 10177ec:	10800404 	addi	r2,r2,16
 10177f0:	10800023 	ldbuio	r2,0(r2)
 10177f4:	1007883a 	mov	r3,r2
 10177f8:	00804434 	movhi	r2,272
 10177fc:	1085d504 	addi	r2,r2,5972
 1017800:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
 1017804:	d0a74317 	ldw	r2,-25332(gp)
 1017808:	10800a17 	ldw	r2,40(r2)
 101780c:	10800484 	addi	r2,r2,18
 1017810:	10800023 	ldbuio	r2,0(r2)
 1017814:	10803fcc 	andi	r2,r2,255
 1017818:	1004923a 	slli	r2,r2,8
 101781c:	1007883a 	mov	r3,r2
 1017820:	d0a74317 	ldw	r2,-25332(gp)
 1017824:	10800a17 	ldw	r2,40(r2)
 1017828:	10800444 	addi	r2,r2,17
 101782c:	10800023 	ldbuio	r2,0(r2)
 1017830:	10803fcc 	andi	r2,r2,255
 1017834:	1884b03a 	or	r2,r3,r2
 1017838:	1007883a 	mov	r3,r2
 101783c:	00804434 	movhi	r2,272
 1017840:	1085d504 	addi	r2,r2,5972
 1017844:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
 1017848:	d0a74317 	ldw	r2,-25332(gp)
 101784c:	10800a17 	ldw	r2,40(r2)
 1017850:	10800504 	addi	r2,r2,20
 1017854:	10800023 	ldbuio	r2,0(r2)
 1017858:	10803fcc 	andi	r2,r2,255
 101785c:	1004923a 	slli	r2,r2,8
 1017860:	1007883a 	mov	r3,r2
 1017864:	d0a74317 	ldw	r2,-25332(gp)
 1017868:	10800a17 	ldw	r2,40(r2)
 101786c:	108004c4 	addi	r2,r2,19
 1017870:	10800023 	ldbuio	r2,0(r2)
 1017874:	10803fcc 	andi	r2,r2,255
 1017878:	1884b03a 	or	r2,r3,r2
 101787c:	1007883a 	mov	r3,r2
 1017880:	00804434 	movhi	r2,272
 1017884:	1085d504 	addi	r2,r2,5972
 1017888:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
 101788c:	d0a74317 	ldw	r2,-25332(gp)
 1017890:	10800a17 	ldw	r2,40(r2)
 1017894:	10800544 	addi	r2,r2,21
 1017898:	10800023 	ldbuio	r2,0(r2)
 101789c:	1007883a 	mov	r3,r2
 10178a0:	00804434 	movhi	r2,272
 10178a4:	1085d504 	addi	r2,r2,5972
 10178a8:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
 10178ac:	d0a74317 	ldw	r2,-25332(gp)
 10178b0:	10800a17 	ldw	r2,40(r2)
 10178b4:	10800584 	addi	r2,r2,22
 10178b8:	1080002b 	ldhuio	r2,0(r2)
 10178bc:	1007883a 	mov	r3,r2
 10178c0:	00804434 	movhi	r2,272
 10178c4:	1085d504 	addi	r2,r2,5972
 10178c8:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
 10178cc:	d0a74317 	ldw	r2,-25332(gp)
 10178d0:	10800a17 	ldw	r2,40(r2)
 10178d4:	10800604 	addi	r2,r2,24
 10178d8:	1080002b 	ldhuio	r2,0(r2)
 10178dc:	1007883a 	mov	r3,r2
 10178e0:	00804434 	movhi	r2,272
 10178e4:	1085d504 	addi	r2,r2,5972
 10178e8:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
 10178ec:	d0a74317 	ldw	r2,-25332(gp)
 10178f0:	10800a17 	ldw	r2,40(r2)
 10178f4:	10800684 	addi	r2,r2,26
 10178f8:	1080002b 	ldhuio	r2,0(r2)
 10178fc:	1007883a 	mov	r3,r2
 1017900:	00804434 	movhi	r2,272
 1017904:	1085d504 	addi	r2,r2,5972
 1017908:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
 101790c:	d0a74317 	ldw	r2,-25332(gp)
 1017910:	10800a17 	ldw	r2,40(r2)
 1017914:	10800704 	addi	r2,r2,28
 1017918:	10800037 	ldwio	r2,0(r2)
 101791c:	1007883a 	mov	r3,r2
 1017920:	00804434 	movhi	r2,272
 1017924:	1085d504 	addi	r2,r2,5972
 1017928:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
 101792c:	d0a74317 	ldw	r2,-25332(gp)
 1017930:	10800a17 	ldw	r2,40(r2)
 1017934:	10800804 	addi	r2,r2,32
 1017938:	10800037 	ldwio	r2,0(r2)
 101793c:	1007883a 	mov	r3,r2
 1017940:	00804434 	movhi	r2,272
 1017944:	1085d504 	addi	r2,r2,5972
 1017948:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
 101794c:	d0a74317 	ldw	r2,-25332(gp)
 1017950:	10800a17 	ldw	r2,40(r2)
 1017954:	10800904 	addi	r2,r2,36
 1017958:	10800023 	ldbuio	r2,0(r2)
 101795c:	1007883a 	mov	r3,r2
 1017960:	00804434 	movhi	r2,272
 1017964:	1085d504 	addi	r2,r2,5972
 1017968:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
 101796c:	d0a74317 	ldw	r2,-25332(gp)
 1017970:	10800a17 	ldw	r2,40(r2)
 1017974:	10800944 	addi	r2,r2,37
 1017978:	10800023 	ldbuio	r2,0(r2)
 101797c:	1007883a 	mov	r3,r2
 1017980:	00804434 	movhi	r2,272
 1017984:	1085d504 	addi	r2,r2,5972
 1017988:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
 101798c:	d0a74317 	ldw	r2,-25332(gp)
 1017990:	10800a17 	ldw	r2,40(r2)
 1017994:	10800984 	addi	r2,r2,38
 1017998:	10800023 	ldbuio	r2,0(r2)
 101799c:	1007883a 	mov	r3,r2
 10179a0:	00804434 	movhi	r2,272
 10179a4:	1085d504 	addi	r2,r2,5972
 10179a8:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
 10179ac:	00804434 	movhi	r2,272
 10179b0:	1085d504 	addi	r2,r2,5972
 10179b4:	1080040b 	ldhu	r2,16(r2)
 10179b8:	10ffffcc 	andi	r3,r2,65535
 10179bc:	00804434 	movhi	r2,272
 10179c0:	1085d504 	addi	r2,r2,5972
 10179c4:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
 10179c8:	00804434 	movhi	r2,272
 10179cc:	1085d504 	addi	r2,r2,5972
 10179d0:	10c01117 	ldw	r3,68(r2)
 10179d4:	00804434 	movhi	r2,272
 10179d8:	1085d504 	addi	r2,r2,5972
 10179dc:	1080068b 	ldhu	r2,26(r2)
 10179e0:	10bfffcc 	andi	r2,r2,65535
 10179e4:	1887883a 	add	r3,r3,r2
 10179e8:	00804434 	movhi	r2,272
 10179ec:	1085d504 	addi	r2,r2,5972
 10179f0:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
 10179f4:	00804434 	movhi	r2,272
 10179f8:	1085d504 	addi	r2,r2,5972
 10179fc:	10c01217 	ldw	r3,72(r2)
 1017a00:	00804434 	movhi	r2,272
 1017a04:	1085d504 	addi	r2,r2,5972
 1017a08:	1080068b 	ldhu	r2,26(r2)
 1017a0c:	10bfffcc 	andi	r2,r2,65535
 1017a10:	1887883a 	add	r3,r3,r2
 1017a14:	00804434 	movhi	r2,272
 1017a18:	1085d504 	addi	r2,r2,5972
 1017a1c:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
 1017a20:	00804434 	movhi	r2,272
 1017a24:	1085d504 	addi	r2,r2,5972
 1017a28:	14001317 	ldw	r16,76(r2)
 1017a2c:	00804434 	movhi	r2,272
 1017a30:	1085d504 	addi	r2,r2,5972
 1017a34:	1080050b 	ldhu	r2,20(r2)
 1017a38:	10bfffcc 	andi	r2,r2,65535
 1017a3c:	1008917a 	slli	r4,r2,5
 1017a40:	00804434 	movhi	r2,272
 1017a44:	1085d504 	addi	r2,r2,5972
 1017a48:	1080030b 	ldhu	r2,12(r2)
 1017a4c:	117fffcc 	andi	r5,r2,65535
 1017a50:	10025740 	call	1002574 <__divsi3>
 1017a54:	8087883a 	add	r3,r16,r2
 1017a58:	00804434 	movhi	r2,272
 1017a5c:	1085d504 	addi	r2,r2,5972
 1017a60:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 1017a64:	00804434 	movhi	r2,272
 1017a68:	1085d504 	addi	r2,r2,5972
 1017a6c:	1080058b 	ldhu	r2,22(r2)
 1017a70:	10bfffcc 	andi	r2,r2,65535
 1017a74:	1005003a 	cmpeq	r2,r2,zero
 1017a78:	10000b1e 	bne	r2,zero,1017aa8 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 1017a7c:	00804434 	movhi	r2,272
 1017a80:	1085d504 	addi	r2,r2,5972
 1017a84:	1080058b 	ldhu	r2,22(r2)
 1017a88:	113fffcc 	andi	r4,r2,65535
 1017a8c:	00804434 	movhi	r2,272
 1017a90:	1085d504 	addi	r2,r2,5972
 1017a94:	10800383 	ldbu	r2,14(r2)
 1017a98:	11403fcc 	andi	r5,r2,255
 1017a9c:	10025740 	call	1002574 <__divsi3>
 1017aa0:	e0bffb15 	stw	r2,-20(fp)
 1017aa4:	00000906 	br	1017acc <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 1017aa8:	00804434 	movhi	r2,272
 1017aac:	1085d504 	addi	r2,r2,5972
 1017ab0:	11000917 	ldw	r4,36(r2)
 1017ab4:	00804434 	movhi	r2,272
 1017ab8:	1085d504 	addi	r2,r2,5972
 1017abc:	10800383 	ldbu	r2,14(r2)
 1017ac0:	11403fcc 	andi	r5,r2,255
 1017ac4:	10026340 	call	1002634 <__udivsi3>
 1017ac8:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 1017acc:	e0bffb17 	ldw	r2,-20(fp)
 1017ad0:	1083fdc8 	cmpgei	r2,r2,4087
 1017ad4:	1000051e 	bne	r2,zero,1017aec <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
 1017ad8:	00c04434 	movhi	r3,272
 1017adc:	18c5d504 	addi	r3,r3,5972
 1017ae0:	00800304 	movi	r2,12
 1017ae4:	18801085 	stb	r2,66(r3)
 1017ae8:	00000c06 	br	1017b1c <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
 1017aec:	e0fffb17 	ldw	r3,-20(fp)
 1017af0:	00bffb54 	movui	r2,65517
 1017af4:	10c00516 	blt	r2,r3,1017b0c <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
 1017af8:	00c04434 	movhi	r3,272
 1017afc:	18c5d504 	addi	r3,r3,5972
 1017b00:	00800404 	movi	r2,16
 1017b04:	18801085 	stb	r2,66(r3)
 1017b08:	00000406 	br	1017b1c <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 1017b0c:	00c04434 	movhi	r3,272
 1017b10:	18c5d504 	addi	r3,r3,5972
 1017b14:	00800804 	movi	r2,32
 1017b18:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 1017b1c:	e03ffd15 	stw	zero,-12(fp)
 1017b20:	00001106 	br	1017b68 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
 1017b24:	e13ffd17 	ldw	r4,-12(fp)
 1017b28:	d0a74317 	ldw	r2,-25332(gp)
 1017b2c:	10800a17 	ldw	r2,40(r2)
 1017b30:	1007883a 	mov	r3,r2
 1017b34:	e0bffd17 	ldw	r2,-12(fp)
 1017b38:	1885883a 	add	r2,r3,r2
 1017b3c:	108009c4 	addi	r2,r2,39
 1017b40:	10800023 	ldbuio	r2,0(r2)
 1017b44:	1007883a 	mov	r3,r2
 1017b48:	00804434 	movhi	r2,272
 1017b4c:	1085d504 	addi	r2,r2,5972
 1017b50:	2085883a 	add	r2,r4,r2
 1017b54:	10800a04 	addi	r2,r2,40
 1017b58:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 1017b5c:	e0bffd17 	ldw	r2,-12(fp)
 1017b60:	10800044 	addi	r2,r2,1
 1017b64:	e0bffd15 	stw	r2,-12(fp)
 1017b68:	e0bffd17 	ldw	r2,-12(fp)
 1017b6c:	10800110 	cmplti	r2,r2,4
 1017b70:	103fec1e 	bne	r2,zero,1017b24 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1017b74:	e03ffd15 	stw	zero,-12(fp)
 1017b78:	00001106 	br	1017bc0 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
 1017b7c:	e13ffd17 	ldw	r4,-12(fp)
 1017b80:	d0a74317 	ldw	r2,-25332(gp)
 1017b84:	10800a17 	ldw	r2,40(r2)
 1017b88:	1007883a 	mov	r3,r2
 1017b8c:	e0bffd17 	ldw	r2,-12(fp)
 1017b90:	1885883a 	add	r2,r3,r2
 1017b94:	10800ac4 	addi	r2,r2,43
 1017b98:	10800023 	ldbuio	r2,0(r2)
 1017b9c:	1007883a 	mov	r3,r2
 1017ba0:	00804434 	movhi	r2,272
 1017ba4:	1085d504 	addi	r2,r2,5972
 1017ba8:	2085883a 	add	r2,r4,r2
 1017bac:	10800b04 	addi	r2,r2,44
 1017bb0:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 1017bb4:	e0bffd17 	ldw	r2,-12(fp)
 1017bb8:	10800044 	addi	r2,r2,1
 1017bbc:	e0bffd15 	stw	r2,-12(fp)
 1017bc0:	e0bffd17 	ldw	r2,-12(fp)
 1017bc4:	108002d0 	cmplti	r2,r2,11
 1017bc8:	103fec1e 	bne	r2,zero,1017b7c <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1017bcc:	e03ffd15 	stw	zero,-12(fp)
 1017bd0:	00001106 	br	1017c18 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
 1017bd4:	e13ffd17 	ldw	r4,-12(fp)
 1017bd8:	d0a74317 	ldw	r2,-25332(gp)
 1017bdc:	10800a17 	ldw	r2,40(r2)
 1017be0:	1007883a 	mov	r3,r2
 1017be4:	e0bffd17 	ldw	r2,-12(fp)
 1017be8:	1885883a 	add	r2,r3,r2
 1017bec:	10800d84 	addi	r2,r2,54
 1017bf0:	10800023 	ldbuio	r2,0(r2)
 1017bf4:	1007883a 	mov	r3,r2
 1017bf8:	00804434 	movhi	r2,272
 1017bfc:	1085d504 	addi	r2,r2,5972
 1017c00:	2085883a 	add	r2,r4,r2
 1017c04:	10800e04 	addi	r2,r2,56
 1017c08:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 1017c0c:	e0bffd17 	ldw	r2,-12(fp)
 1017c10:	10800044 	addi	r2,r2,1
 1017c14:	e0bffd15 	stw	r2,-12(fp)
 1017c18:	e0bffd17 	ldw	r2,-12(fp)
 1017c1c:	10800210 	cmplti	r2,r2,8
 1017c20:	103fec1e 	bne	r2,zero,1017bd4 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1017c24:	e03ffd15 	stw	zero,-12(fp)
 1017c28:	00000a06 	br	1017c54 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
 1017c2c:	e0bffd17 	ldw	r2,-12(fp)
 1017c30:	00c04434 	movhi	r3,272
 1017c34:	18c5ea04 	addi	r3,r3,6056
 1017c38:	100491ba 	slli	r2,r2,6
 1017c3c:	10c5883a 	add	r2,r2,r3
 1017c40:	10800f04 	addi	r2,r2,60
 1017c44:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 1017c48:	e0bffd17 	ldw	r2,-12(fp)
 1017c4c:	10800044 	addi	r2,r2,1
 1017c50:	e0bffd15 	stw	r2,-12(fp)
 1017c54:	e0bffd17 	ldw	r2,-12(fp)
 1017c58:	10800510 	cmplti	r2,r2,20
 1017c5c:	103ff31e 	bne	r2,zero,1017c2c <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
 1017c60:	00800044 	movi	r2,1
 1017c64:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 1017c68:	00000106 	br	1017c70 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 1017c6c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 1017c70:	e0bffe17 	ldw	r2,-8(fp)
}
 1017c74:	e037883a 	mov	sp,fp
 1017c78:	dfc00217 	ldw	ra,8(sp)
 1017c7c:	df000117 	ldw	fp,4(sp)
 1017c80:	dc000017 	ldw	r16,0(sp)
 1017c84:	dec00304 	addi	sp,sp,12
 1017c88:	f800283a 	ret

01017c8c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 1017c8c:	defffc04 	addi	sp,sp,-16
 1017c90:	dfc00315 	stw	ra,12(sp)
 1017c94:	df000215 	stw	fp,8(sp)
 1017c98:	df000204 	addi	fp,sp,8
	bool result = false;
 1017c9c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1017ca0:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1017ca4:	1005003a 	cmpeq	r2,r2,zero
 1017ca8:	1000331e 	bne	r2,zero,1017d78 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 1017cac:	0009883a 	mov	r4,zero
 1017cb0:	000b883a 	mov	r5,zero
 1017cb4:	101b0f00 	call	101b0f0 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 1017cb8:	d0a73d17 	ldw	r2,-25356(gp)
 1017cbc:	1080000b 	ldhu	r2,0(r2)
 1017cc0:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 1017cc4:	d0274115 	stw	zero,-25340(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 1017cc8:	d0274215 	stw	zero,-25336(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
 1017ccc:	e0bffe0f 	ldh	r2,-8(fp)
 1017cd0:	1004803a 	cmplt	r2,r2,zero
 1017cd4:	1000281e 	bne	r2,zero,1017d78 <Look_for_FAT16+0xec>
 1017cd8:	e0bffe0b 	ldhu	r2,-8(fp)
 1017cdc:	10bfffcc 	andi	r2,r2,65535
 1017ce0:	1083000c 	andi	r2,r2,3072
 1017ce4:	10830020 	cmpeqi	r2,r2,3072
 1017ce8:	1000231e 	bne	r2,zero,1017d78 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 1017cec:	e0bffe0b 	ldhu	r2,-8(fp)
 1017cf0:	10bfffcc 	andi	r2,r2,65535
 1017cf4:	1083000c 	andi	r2,r2,3072
 1017cf8:	10810018 	cmpnei	r2,r2,1024
 1017cfc:	1000031e 	bne	r2,zero,1017d0c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 1017d00:	0009883a 	mov	r4,zero
 1017d04:	10176440 	call	1017644 <Check_for_DOS_FAT>
 1017d08:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 1017d0c:	e0bffe0b 	ldhu	r2,-8(fp)
 1017d10:	10bfffcc 	andi	r2,r2,65535
 1017d14:	1083000c 	andi	r2,r2,3072
 1017d18:	1004c03a 	cmpne	r2,r2,zero
 1017d1c:	1000061e 	bne	r2,zero,1017d38 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 1017d20:	1016f580 	call	1016f58 <Check_for_Master_Boot_Record>
 1017d24:	1005003a 	cmpeq	r2,r2,zero
 1017d28:	1000031e 	bne	r2,zero,1017d38 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 1017d2c:	d1274117 	ldw	r4,-25340(gp)
 1017d30:	10176440 	call	1017644 <Check_for_DOS_FAT>
 1017d34:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 1017d38:	e0bfff17 	ldw	r2,-4(fp)
 1017d3c:	10800058 	cmpnei	r2,r2,1
 1017d40:	10000d1e 	bne	r2,zero,1017d78 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 1017d44:	00804434 	movhi	r2,272
 1017d48:	1085d504 	addi	r2,r2,5972
 1017d4c:	10801083 	ldbu	r2,66(r2)
 1017d50:	10803fcc 	andi	r2,r2,255
 1017d54:	10800420 	cmpeqi	r2,r2,16
 1017d58:	1000021e 	bne	r2,zero,1017d64 <Look_for_FAT16+0xd8>
					result = false;
 1017d5c:	e03fff15 	stw	zero,-4(fp)
 1017d60:	00000506 	br	1017d78 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
 1017d64:	00804434 	movhi	r2,272
 1017d68:	1085d504 	addi	r2,r2,5972
 1017d6c:	1080058b 	ldhu	r2,22(r2)
 1017d70:	10bfffcc 	andi	r2,r2,65535
 1017d74:	d0a74215 	stw	r2,-25336(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 1017d78:	e0bfff17 	ldw	r2,-4(fp)
}
 1017d7c:	e037883a 	mov	sp,fp
 1017d80:	dfc00117 	ldw	ra,4(sp)
 1017d84:	df000017 	ldw	fp,0(sp)
 1017d88:	dec00204 	addi	sp,sp,8
 1017d8c:	f800283a 	ret

01017d90 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 1017d90:	defffb04 	addi	sp,sp,-20
 1017d94:	dfc00415 	stw	ra,16(sp)
 1017d98:	df000315 	stw	fp,12(sp)
 1017d9c:	df000304 	addi	fp,sp,12
 1017da0:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 1017da4:	e13fff17 	ldw	r4,-4(fp)
 1017da8:	10030b40 	call	10030b4 <strlen>
 1017dac:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1017db0:	e03ffe15 	stw	zero,-8(fp)
 1017db4:	00002206 	br	1017e40 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 1017db8:	e0bffe17 	ldw	r2,-8(fp)
 1017dbc:	1007883a 	mov	r3,r2
 1017dc0:	e0bfff17 	ldw	r2,-4(fp)
 1017dc4:	1885883a 	add	r2,r3,r2
 1017dc8:	10800003 	ldbu	r2,0(r2)
 1017dcc:	10803fcc 	andi	r2,r2,255
 1017dd0:	1080201c 	xori	r2,r2,128
 1017dd4:	10bfe004 	addi	r2,r2,-128
 1017dd8:	10801850 	cmplti	r2,r2,97
 1017ddc:	1000151e 	bne	r2,zero,1017e34 <filename_to_upper_case+0xa4>
 1017de0:	e0bffe17 	ldw	r2,-8(fp)
 1017de4:	1007883a 	mov	r3,r2
 1017de8:	e0bfff17 	ldw	r2,-4(fp)
 1017dec:	1885883a 	add	r2,r3,r2
 1017df0:	10800003 	ldbu	r2,0(r2)
 1017df4:	10803fcc 	andi	r2,r2,255
 1017df8:	1080201c 	xori	r2,r2,128
 1017dfc:	10bfe004 	addi	r2,r2,-128
 1017e00:	10801ec8 	cmpgei	r2,r2,123
 1017e04:	10000b1e 	bne	r2,zero,1017e34 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 1017e08:	e0bffe17 	ldw	r2,-8(fp)
 1017e0c:	1007883a 	mov	r3,r2
 1017e10:	e0bfff17 	ldw	r2,-4(fp)
 1017e14:	1889883a 	add	r4,r3,r2
 1017e18:	e0bffe17 	ldw	r2,-8(fp)
 1017e1c:	1007883a 	mov	r3,r2
 1017e20:	e0bfff17 	ldw	r2,-4(fp)
 1017e24:	1885883a 	add	r2,r3,r2
 1017e28:	10800003 	ldbu	r2,0(r2)
 1017e2c:	10bff804 	addi	r2,r2,-32
 1017e30:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 1017e34:	e0bffe17 	ldw	r2,-8(fp)
 1017e38:	10800044 	addi	r2,r2,1
 1017e3c:	e0bffe15 	stw	r2,-8(fp)
 1017e40:	e0fffe17 	ldw	r3,-8(fp)
 1017e44:	e0bffd17 	ldw	r2,-12(fp)
 1017e48:	18bfdb16 	blt	r3,r2,1017db8 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 1017e4c:	e037883a 	mov	sp,fp
 1017e50:	dfc00117 	ldw	ra,4(sp)
 1017e54:	df000017 	ldw	fp,0(sp)
 1017e58:	dec00204 	addi	sp,sp,8
 1017e5c:	f800283a 	ret

01017e60 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 1017e60:	defff804 	addi	sp,sp,-32
 1017e64:	dfc00715 	stw	ra,28(sp)
 1017e68:	df000615 	stw	fp,24(sp)
 1017e6c:	df000604 	addi	fp,sp,24
 1017e70:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 1017e74:	e13fff17 	ldw	r4,-4(fp)
 1017e78:	10030b40 	call	10030b4 <strlen>
 1017e7c:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 1017e80:	00bfffc4 	movi	r2,-1
 1017e84:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 1017e88:	00bfffc4 	movi	r2,-1
 1017e8c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 1017e90:	00800044 	movi	r2,1
 1017e94:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 1017e98:	e03ffd15 	stw	zero,-12(fp)
 1017e9c:	00007606 	br	1018078 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
 1017ea0:	e0bffd17 	ldw	r2,-12(fp)
 1017ea4:	1007883a 	mov	r3,r2
 1017ea8:	e0bfff17 	ldw	r2,-4(fp)
 1017eac:	1885883a 	add	r2,r3,r2
 1017eb0:	10800003 	ldbu	r2,0(r2)
 1017eb4:	10803fcc 	andi	r2,r2,255
 1017eb8:	1080201c 	xori	r2,r2,128
 1017ebc:	10bfe004 	addi	r2,r2,-128
 1017ec0:	10800820 	cmpeqi	r2,r2,32
 1017ec4:	1000431e 	bne	r2,zero,1017fd4 <check_file_name_for_FAT16_compliance+0x174>
 1017ec8:	e0bffd17 	ldw	r2,-12(fp)
 1017ecc:	10ffffc4 	addi	r3,r2,-1
 1017ed0:	e0bffc17 	ldw	r2,-16(fp)
 1017ed4:	1880141e 	bne	r3,r2,1017f28 <check_file_name_for_FAT16_compliance+0xc8>
 1017ed8:	e0bffd17 	ldw	r2,-12(fp)
 1017edc:	1007883a 	mov	r3,r2
 1017ee0:	e0bfff17 	ldw	r2,-4(fp)
 1017ee4:	1885883a 	add	r2,r3,r2
 1017ee8:	10800003 	ldbu	r2,0(r2)
 1017eec:	10803fcc 	andi	r2,r2,255
 1017ef0:	1080201c 	xori	r2,r2,128
 1017ef4:	10bfe004 	addi	r2,r2,-128
 1017ef8:	10801720 	cmpeqi	r2,r2,92
 1017efc:	1000351e 	bne	r2,zero,1017fd4 <check_file_name_for_FAT16_compliance+0x174>
 1017f00:	e0bffd17 	ldw	r2,-12(fp)
 1017f04:	1007883a 	mov	r3,r2
 1017f08:	e0bfff17 	ldw	r2,-4(fp)
 1017f0c:	1885883a 	add	r2,r3,r2
 1017f10:	10800003 	ldbu	r2,0(r2)
 1017f14:	10803fcc 	andi	r2,r2,255
 1017f18:	1080201c 	xori	r2,r2,128
 1017f1c:	10bfe004 	addi	r2,r2,-128
 1017f20:	10800be0 	cmpeqi	r2,r2,47
 1017f24:	10002b1e 	bne	r2,zero,1017fd4 <check_file_name_for_FAT16_compliance+0x174>
 1017f28:	e0fffd17 	ldw	r3,-12(fp)
 1017f2c:	e0bffb17 	ldw	r2,-20(fp)
 1017f30:	1885c83a 	sub	r2,r3,r2
 1017f34:	10800258 	cmpnei	r2,r2,9
 1017f38:	10000a1e 	bne	r2,zero,1017f64 <check_file_name_for_FAT16_compliance+0x104>
 1017f3c:	e0bffd17 	ldw	r2,-12(fp)
 1017f40:	1007883a 	mov	r3,r2
 1017f44:	e0bfff17 	ldw	r2,-4(fp)
 1017f48:	1885883a 	add	r2,r3,r2
 1017f4c:	10800003 	ldbu	r2,0(r2)
 1017f50:	10803fcc 	andi	r2,r2,255
 1017f54:	1080201c 	xori	r2,r2,128
 1017f58:	10bfe004 	addi	r2,r2,-128
 1017f5c:	10800b98 	cmpnei	r2,r2,46
 1017f60:	10001c1e 	bne	r2,zero,1017fd4 <check_file_name_for_FAT16_compliance+0x174>
 1017f64:	e0fffc17 	ldw	r3,-16(fp)
 1017f68:	e0bffb17 	ldw	r2,-20(fp)
 1017f6c:	18801b26 	beq	r3,r2,1017fdc <check_file_name_for_FAT16_compliance+0x17c>
 1017f70:	e0fffd17 	ldw	r3,-12(fp)
 1017f74:	e0bffb17 	ldw	r2,-20(fp)
 1017f78:	1885c83a 	sub	r2,r3,r2
 1017f7c:	10800110 	cmplti	r2,r2,4
 1017f80:	1000161e 	bne	r2,zero,1017fdc <check_file_name_for_FAT16_compliance+0x17c>
 1017f84:	e0bffd17 	ldw	r2,-12(fp)
 1017f88:	1007883a 	mov	r3,r2
 1017f8c:	e0bfff17 	ldw	r2,-4(fp)
 1017f90:	1885883a 	add	r2,r3,r2
 1017f94:	10800003 	ldbu	r2,0(r2)
 1017f98:	10803fcc 	andi	r2,r2,255
 1017f9c:	1080201c 	xori	r2,r2,128
 1017fa0:	10bfe004 	addi	r2,r2,-128
 1017fa4:	10801720 	cmpeqi	r2,r2,92
 1017fa8:	10000c1e 	bne	r2,zero,1017fdc <check_file_name_for_FAT16_compliance+0x17c>
 1017fac:	e0bffd17 	ldw	r2,-12(fp)
 1017fb0:	1007883a 	mov	r3,r2
 1017fb4:	e0bfff17 	ldw	r2,-4(fp)
 1017fb8:	1885883a 	add	r2,r3,r2
 1017fbc:	10800003 	ldbu	r2,0(r2)
 1017fc0:	10803fcc 	andi	r2,r2,255
 1017fc4:	1080201c 	xori	r2,r2,128
 1017fc8:	10bfe004 	addi	r2,r2,-128
 1017fcc:	10800be0 	cmpeqi	r2,r2,47
 1017fd0:	1000021e 	bne	r2,zero,1017fdc <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
 1017fd4:	e03ffa15 	stw	zero,-24(fp)
			break;
 1017fd8:	00002a06 	br	1018084 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 1017fdc:	e0bffd17 	ldw	r2,-12(fp)
 1017fe0:	1007883a 	mov	r3,r2
 1017fe4:	e0bfff17 	ldw	r2,-4(fp)
 1017fe8:	1885883a 	add	r2,r3,r2
 1017fec:	10800003 	ldbu	r2,0(r2)
 1017ff0:	10803fcc 	andi	r2,r2,255
 1017ff4:	1080201c 	xori	r2,r2,128
 1017ff8:	10bfe004 	addi	r2,r2,-128
 1017ffc:	10801720 	cmpeqi	r2,r2,92
 1018000:	10000a1e 	bne	r2,zero,101802c <check_file_name_for_FAT16_compliance+0x1cc>
 1018004:	e0bffd17 	ldw	r2,-12(fp)
 1018008:	1007883a 	mov	r3,r2
 101800c:	e0bfff17 	ldw	r2,-4(fp)
 1018010:	1885883a 	add	r2,r3,r2
 1018014:	10800003 	ldbu	r2,0(r2)
 1018018:	10803fcc 	andi	r2,r2,255
 101801c:	1080201c 	xori	r2,r2,128
 1018020:	10bfe004 	addi	r2,r2,-128
 1018024:	10800bd8 	cmpnei	r2,r2,47
 1018028:	1000041e 	bne	r2,zero,101803c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 101802c:	e0bffd17 	ldw	r2,-12(fp)
 1018030:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 1018034:	e0bffd17 	ldw	r2,-12(fp)
 1018038:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 101803c:	e0bffd17 	ldw	r2,-12(fp)
 1018040:	1007883a 	mov	r3,r2
 1018044:	e0bfff17 	ldw	r2,-4(fp)
 1018048:	1885883a 	add	r2,r3,r2
 101804c:	10800003 	ldbu	r2,0(r2)
 1018050:	10803fcc 	andi	r2,r2,255
 1018054:	1080201c 	xori	r2,r2,128
 1018058:	10bfe004 	addi	r2,r2,-128
 101805c:	10800b98 	cmpnei	r2,r2,46
 1018060:	1000021e 	bne	r2,zero,101806c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 1018064:	e0bffd17 	ldw	r2,-12(fp)
 1018068:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 101806c:	e0bffd17 	ldw	r2,-12(fp)
 1018070:	10800044 	addi	r2,r2,1
 1018074:	e0bffd15 	stw	r2,-12(fp)
 1018078:	e0fffd17 	ldw	r3,-12(fp)
 101807c:	e0bffe17 	ldw	r2,-8(fp)
 1018080:	18bf8716 	blt	r3,r2,1017ea0 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 1018084:	e0fffe17 	ldw	r3,-8(fp)
 1018088:	e0bfff17 	ldw	r2,-4(fp)
 101808c:	1885883a 	add	r2,r3,r2
 1018090:	10bfffc4 	addi	r2,r2,-1
 1018094:	10800003 	ldbu	r2,0(r2)
 1018098:	10803fcc 	andi	r2,r2,255
 101809c:	1080201c 	xori	r2,r2,128
 10180a0:	10bfe004 	addi	r2,r2,-128
 10180a4:	10801720 	cmpeqi	r2,r2,92
 10180a8:	10000a1e 	bne	r2,zero,10180d4 <check_file_name_for_FAT16_compliance+0x274>
 10180ac:	e0fffe17 	ldw	r3,-8(fp)
 10180b0:	e0bfff17 	ldw	r2,-4(fp)
 10180b4:	1885883a 	add	r2,r3,r2
 10180b8:	10bfffc4 	addi	r2,r2,-1
 10180bc:	10800003 	ldbu	r2,0(r2)
 10180c0:	10803fcc 	andi	r2,r2,255
 10180c4:	1080201c 	xori	r2,r2,128
 10180c8:	10bfe004 	addi	r2,r2,-128
 10180cc:	10800bd8 	cmpnei	r2,r2,47
 10180d0:	1000011e 	bne	r2,zero,10180d8 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 10180d4:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 10180d8:	e0bffa17 	ldw	r2,-24(fp)
}
 10180dc:	e037883a 	mov	sp,fp
 10180e0:	dfc00117 	ldw	ra,4(sp)
 10180e4:	df000017 	ldw	fp,0(sp)
 10180e8:	dec00204 	addi	sp,sp,8
 10180ec:	f800283a 	ret

010180f0 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 10180f0:	defffb04 	addi	sp,sp,-20
 10180f4:	dfc00415 	stw	ra,16(sp)
 10180f8:	df000315 	stw	fp,12(sp)
 10180fc:	df000304 	addi	fp,sp,12
 1018100:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 1018104:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 1018108:	e13fff17 	ldw	r4,-4(fp)
 101810c:	10030b40 	call	10030b4 <strlen>
 1018110:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 1018114:	e03ffe15 	stw	zero,-8(fp)
 1018118:	00001706 	br	1018178 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 101811c:	e0bffe17 	ldw	r2,-8(fp)
 1018120:	1007883a 	mov	r3,r2
 1018124:	e0bfff17 	ldw	r2,-4(fp)
 1018128:	1885883a 	add	r2,r3,r2
 101812c:	10800003 	ldbu	r2,0(r2)
 1018130:	10803fcc 	andi	r2,r2,255
 1018134:	1080201c 	xori	r2,r2,128
 1018138:	10bfe004 	addi	r2,r2,-128
 101813c:	10801720 	cmpeqi	r2,r2,92
 1018140:	1000101e 	bne	r2,zero,1018184 <get_dir_divider_location+0x94>
 1018144:	e0bffe17 	ldw	r2,-8(fp)
 1018148:	1007883a 	mov	r3,r2
 101814c:	e0bfff17 	ldw	r2,-4(fp)
 1018150:	1885883a 	add	r2,r3,r2
 1018154:	10800003 	ldbu	r2,0(r2)
 1018158:	10803fcc 	andi	r2,r2,255
 101815c:	1080201c 	xori	r2,r2,128
 1018160:	10bfe004 	addi	r2,r2,-128
 1018164:	10800be0 	cmpeqi	r2,r2,47
 1018168:	1000061e 	bne	r2,zero,1018184 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 101816c:	e0bffe17 	ldw	r2,-8(fp)
 1018170:	10800044 	addi	r2,r2,1
 1018174:	e0bffe15 	stw	r2,-8(fp)
 1018178:	e0fffe17 	ldw	r3,-8(fp)
 101817c:	e0bffd17 	ldw	r2,-12(fp)
 1018180:	18bfe616 	blt	r3,r2,101811c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 1018184:	e0fffe17 	ldw	r3,-8(fp)
 1018188:	e0bffd17 	ldw	r2,-12(fp)
 101818c:	1880021e 	bne	r3,r2,1018198 <get_dir_divider_location+0xa8>
		index = -1;
 1018190:	00bfffc4 	movi	r2,-1
 1018194:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 1018198:	e0bffe17 	ldw	r2,-8(fp)
}
 101819c:	e037883a 	mov	sp,fp
 10181a0:	dfc00117 	ldw	ra,4(sp)
 10181a4:	df000017 	ldw	fp,0(sp)
 10181a8:	dec00204 	addi	sp,sp,8
 10181ac:	f800283a 	ret

010181b0 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 10181b0:	defff604 	addi	sp,sp,-40
 10181b4:	df000915 	stw	fp,36(sp)
 10181b8:	df000904 	addi	fp,sp,36
 10181bc:	e13ff915 	stw	r4,-28(fp)
 10181c0:	e17ffa15 	stw	r5,-24(fp)
 10181c4:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 10181c8:	00800044 	movi	r2,1
 10181cc:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 10181d0:	e03ff715 	stw	zero,-36(fp)
 10181d4:	00005006 	br	1018318 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 10181d8:	e0fff717 	ldw	r3,-36(fp)
 10181dc:	e0bff917 	ldw	r2,-28(fp)
 10181e0:	10c5883a 	add	r2,r2,r3
 10181e4:	10800003 	ldbu	r2,0(r2)
 10181e8:	10803fcc 	andi	r2,r2,255
 10181ec:	10801870 	cmpltui	r2,r2,97
 10181f0:	1000111e 	bne	r2,zero,1018238 <match_file_record_to_name_ext+0x88>
 10181f4:	e0fff717 	ldw	r3,-36(fp)
 10181f8:	e0bff917 	ldw	r2,-28(fp)
 10181fc:	10c5883a 	add	r2,r2,r3
 1018200:	10800003 	ldbu	r2,0(r2)
 1018204:	10803fcc 	andi	r2,r2,255
 1018208:	10801ee8 	cmpgeui	r2,r2,123
 101820c:	10000a1e 	bne	r2,zero,1018238 <match_file_record_to_name_ext+0x88>
 1018210:	e0fff717 	ldw	r3,-36(fp)
 1018214:	e0bff917 	ldw	r2,-28(fp)
 1018218:	10c5883a 	add	r2,r2,r3
 101821c:	10800003 	ldbu	r2,0(r2)
 1018220:	10bff804 	addi	r2,r2,-32
 1018224:	10803fcc 	andi	r2,r2,255
 1018228:	1080201c 	xori	r2,r2,128
 101822c:	10bfe004 	addi	r2,r2,-128
 1018230:	e0bfff15 	stw	r2,-4(fp)
 1018234:	00000806 	br	1018258 <match_file_record_to_name_ext+0xa8>
 1018238:	e0fff717 	ldw	r3,-36(fp)
 101823c:	e0bff917 	ldw	r2,-28(fp)
 1018240:	10c5883a 	add	r2,r2,r3
 1018244:	10800003 	ldbu	r2,0(r2)
 1018248:	10803fcc 	andi	r2,r2,255
 101824c:	1080201c 	xori	r2,r2,128
 1018250:	10bfe004 	addi	r2,r2,-128
 1018254:	e0bfff15 	stw	r2,-4(fp)
 1018258:	e0bff717 	ldw	r2,-36(fp)
 101825c:	1007883a 	mov	r3,r2
 1018260:	e0bffa17 	ldw	r2,-24(fp)
 1018264:	1885883a 	add	r2,r3,r2
 1018268:	10800003 	ldbu	r2,0(r2)
 101826c:	10803fcc 	andi	r2,r2,255
 1018270:	1080201c 	xori	r2,r2,128
 1018274:	10bfe004 	addi	r2,r2,-128
 1018278:	10801850 	cmplti	r2,r2,97
 101827c:	1000151e 	bne	r2,zero,10182d4 <match_file_record_to_name_ext+0x124>
 1018280:	e0bff717 	ldw	r2,-36(fp)
 1018284:	1007883a 	mov	r3,r2
 1018288:	e0bffa17 	ldw	r2,-24(fp)
 101828c:	1885883a 	add	r2,r3,r2
 1018290:	10800003 	ldbu	r2,0(r2)
 1018294:	10803fcc 	andi	r2,r2,255
 1018298:	1080201c 	xori	r2,r2,128
 101829c:	10bfe004 	addi	r2,r2,-128
 10182a0:	10801ec8 	cmpgei	r2,r2,123
 10182a4:	10000b1e 	bne	r2,zero,10182d4 <match_file_record_to_name_ext+0x124>
 10182a8:	e0bff717 	ldw	r2,-36(fp)
 10182ac:	1007883a 	mov	r3,r2
 10182b0:	e0bffa17 	ldw	r2,-24(fp)
 10182b4:	1885883a 	add	r2,r3,r2
 10182b8:	10800003 	ldbu	r2,0(r2)
 10182bc:	10bff804 	addi	r2,r2,-32
 10182c0:	10803fcc 	andi	r2,r2,255
 10182c4:	1080201c 	xori	r2,r2,128
 10182c8:	10bfe004 	addi	r2,r2,-128
 10182cc:	e0bffe15 	stw	r2,-8(fp)
 10182d0:	00000906 	br	10182f8 <match_file_record_to_name_ext+0x148>
 10182d4:	e0bff717 	ldw	r2,-36(fp)
 10182d8:	1007883a 	mov	r3,r2
 10182dc:	e0bffa17 	ldw	r2,-24(fp)
 10182e0:	1885883a 	add	r2,r3,r2
 10182e4:	10800003 	ldbu	r2,0(r2)
 10182e8:	10803fcc 	andi	r2,r2,255
 10182ec:	1080201c 	xori	r2,r2,128
 10182f0:	10bfe004 	addi	r2,r2,-128
 10182f4:	e0bffe15 	stw	r2,-8(fp)
 10182f8:	e0bfff17 	ldw	r2,-4(fp)
 10182fc:	e0fffe17 	ldw	r3,-8(fp)
 1018300:	10c00226 	beq	r2,r3,101830c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 1018304:	e03ff815 	stw	zero,-32(fp)
			break;
 1018308:	00000606 	br	1018324 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 101830c:	e0bff717 	ldw	r2,-36(fp)
 1018310:	10800044 	addi	r2,r2,1
 1018314:	e0bff715 	stw	r2,-36(fp)
 1018318:	e0bff717 	ldw	r2,-36(fp)
 101831c:	10800210 	cmplti	r2,r2,8
 1018320:	103fad1e 	bne	r2,zero,10181d8 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1018324:	e03ff715 	stw	zero,-36(fp)
 1018328:	00005406 	br	101847c <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 101832c:	e0fff717 	ldw	r3,-36(fp)
 1018330:	e0bff917 	ldw	r2,-28(fp)
 1018334:	1885883a 	add	r2,r3,r2
 1018338:	10800204 	addi	r2,r2,8
 101833c:	10800003 	ldbu	r2,0(r2)
 1018340:	10803fcc 	andi	r2,r2,255
 1018344:	10801870 	cmpltui	r2,r2,97
 1018348:	1000131e 	bne	r2,zero,1018398 <match_file_record_to_name_ext+0x1e8>
 101834c:	e0fff717 	ldw	r3,-36(fp)
 1018350:	e0bff917 	ldw	r2,-28(fp)
 1018354:	1885883a 	add	r2,r3,r2
 1018358:	10800204 	addi	r2,r2,8
 101835c:	10800003 	ldbu	r2,0(r2)
 1018360:	10803fcc 	andi	r2,r2,255
 1018364:	10801ee8 	cmpgeui	r2,r2,123
 1018368:	10000b1e 	bne	r2,zero,1018398 <match_file_record_to_name_ext+0x1e8>
 101836c:	e0fff717 	ldw	r3,-36(fp)
 1018370:	e0bff917 	ldw	r2,-28(fp)
 1018374:	1885883a 	add	r2,r3,r2
 1018378:	10800204 	addi	r2,r2,8
 101837c:	10800003 	ldbu	r2,0(r2)
 1018380:	10bff804 	addi	r2,r2,-32
 1018384:	10803fcc 	andi	r2,r2,255
 1018388:	1080201c 	xori	r2,r2,128
 101838c:	10bfe004 	addi	r2,r2,-128
 1018390:	e0bffd15 	stw	r2,-12(fp)
 1018394:	00000906 	br	10183bc <match_file_record_to_name_ext+0x20c>
 1018398:	e0fff717 	ldw	r3,-36(fp)
 101839c:	e0bff917 	ldw	r2,-28(fp)
 10183a0:	1885883a 	add	r2,r3,r2
 10183a4:	10800204 	addi	r2,r2,8
 10183a8:	10800003 	ldbu	r2,0(r2)
 10183ac:	10803fcc 	andi	r2,r2,255
 10183b0:	1080201c 	xori	r2,r2,128
 10183b4:	10bfe004 	addi	r2,r2,-128
 10183b8:	e0bffd15 	stw	r2,-12(fp)
 10183bc:	e0bff717 	ldw	r2,-36(fp)
 10183c0:	1007883a 	mov	r3,r2
 10183c4:	e0bffb17 	ldw	r2,-20(fp)
 10183c8:	1885883a 	add	r2,r3,r2
 10183cc:	10800003 	ldbu	r2,0(r2)
 10183d0:	10803fcc 	andi	r2,r2,255
 10183d4:	1080201c 	xori	r2,r2,128
 10183d8:	10bfe004 	addi	r2,r2,-128
 10183dc:	10801850 	cmplti	r2,r2,97
 10183e0:	1000151e 	bne	r2,zero,1018438 <match_file_record_to_name_ext+0x288>
 10183e4:	e0bff717 	ldw	r2,-36(fp)
 10183e8:	1007883a 	mov	r3,r2
 10183ec:	e0bffb17 	ldw	r2,-20(fp)
 10183f0:	1885883a 	add	r2,r3,r2
 10183f4:	10800003 	ldbu	r2,0(r2)
 10183f8:	10803fcc 	andi	r2,r2,255
 10183fc:	1080201c 	xori	r2,r2,128
 1018400:	10bfe004 	addi	r2,r2,-128
 1018404:	10801ec8 	cmpgei	r2,r2,123
 1018408:	10000b1e 	bne	r2,zero,1018438 <match_file_record_to_name_ext+0x288>
 101840c:	e0bff717 	ldw	r2,-36(fp)
 1018410:	1007883a 	mov	r3,r2
 1018414:	e0bffb17 	ldw	r2,-20(fp)
 1018418:	1885883a 	add	r2,r3,r2
 101841c:	10800003 	ldbu	r2,0(r2)
 1018420:	10bff804 	addi	r2,r2,-32
 1018424:	10803fcc 	andi	r2,r2,255
 1018428:	1080201c 	xori	r2,r2,128
 101842c:	10bfe004 	addi	r2,r2,-128
 1018430:	e0bffc15 	stw	r2,-16(fp)
 1018434:	00000906 	br	101845c <match_file_record_to_name_ext+0x2ac>
 1018438:	e0bff717 	ldw	r2,-36(fp)
 101843c:	1007883a 	mov	r3,r2
 1018440:	e0bffb17 	ldw	r2,-20(fp)
 1018444:	1885883a 	add	r2,r3,r2
 1018448:	10800003 	ldbu	r2,0(r2)
 101844c:	10803fcc 	andi	r2,r2,255
 1018450:	1080201c 	xori	r2,r2,128
 1018454:	10bfe004 	addi	r2,r2,-128
 1018458:	e0bffc15 	stw	r2,-16(fp)
 101845c:	e0bffd17 	ldw	r2,-12(fp)
 1018460:	e0fffc17 	ldw	r3,-16(fp)
 1018464:	10c00226 	beq	r2,r3,1018470 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 1018468:	e03ff815 	stw	zero,-32(fp)
			break;
 101846c:	00000606 	br	1018488 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 1018470:	e0bff717 	ldw	r2,-36(fp)
 1018474:	10800044 	addi	r2,r2,1
 1018478:	e0bff715 	stw	r2,-36(fp)
 101847c:	e0bff717 	ldw	r2,-36(fp)
 1018480:	108000d0 	cmplti	r2,r2,3
 1018484:	103fa91e 	bne	r2,zero,101832c <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 1018488:	e0bff817 	ldw	r2,-32(fp)
}
 101848c:	e037883a 	mov	sp,fp
 1018490:	df000017 	ldw	fp,0(sp)
 1018494:	dec00104 	addi	sp,sp,4
 1018498:	f800283a 	ret

0101849c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 101849c:	deffe604 	addi	sp,sp,-104
 10184a0:	dfc01915 	stw	ra,100(sp)
 10184a4:	df001815 	stw	fp,96(sp)
 10184a8:	df001804 	addi	fp,sp,96
 10184ac:	e13ffc15 	stw	r4,-16(fp)
 10184b0:	e17ffd15 	stw	r5,-12(fp)
 10184b4:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 10184b8:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 10184bc:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 10184c0:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 10184c4:	e13ffc17 	ldw	r4,-16(fp)
 10184c8:	10180f00 	call	10180f0 <get_dir_divider_location>
 10184cc:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 10184d0:	00012206 	br	101895c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 10184d4:	00800804 	movi	r2,32
 10184d8:	e0bff805 	stb	r2,-32(fp)
 10184dc:	00800804 	movi	r2,32
 10184e0:	e0bff845 	stb	r2,-31(fp)
 10184e4:	00800804 	movi	r2,32
 10184e8:	e0bff885 	stb	r2,-30(fp)
 10184ec:	00800804 	movi	r2,32
 10184f0:	e0bff8c5 	stb	r2,-29(fp)
 10184f4:	00800804 	movi	r2,32
 10184f8:	e0bff905 	stb	r2,-28(fp)
 10184fc:	00800804 	movi	r2,32
 1018500:	e0bff945 	stb	r2,-27(fp)
 1018504:	00800804 	movi	r2,32
 1018508:	e0bff985 	stb	r2,-26(fp)
 101850c:	00800804 	movi	r2,32
 1018510:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 1018514:	00800804 	movi	r2,32
 1018518:	e0bffa05 	stb	r2,-24(fp)
 101851c:	00800804 	movi	r2,32
 1018520:	e0bffa45 	stb	r2,-23(fp)
 1018524:	00800804 	movi	r2,32
 1018528:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 101852c:	00bfffc4 	movi	r2,-1
 1018530:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 1018534:	e0bff617 	ldw	r2,-40(fp)
 1018538:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 101853c:	e03ff415 	stw	zero,-48(fp)
 1018540:	00002e06 	br	10185fc <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 1018544:	e0fff417 	ldw	r3,-48(fp)
 1018548:	e0bff317 	ldw	r2,-52(fp)
 101854c:	1885883a 	add	r2,r3,r2
 1018550:	1007883a 	mov	r3,r2
 1018554:	e0bffc17 	ldw	r2,-16(fp)
 1018558:	1885883a 	add	r2,r3,r2
 101855c:	10800003 	ldbu	r2,0(r2)
 1018560:	10803fcc 	andi	r2,r2,255
 1018564:	1080201c 	xori	r2,r2,128
 1018568:	10bfe004 	addi	r2,r2,-128
 101856c:	10800b98 	cmpnei	r2,r2,46
 1018570:	1000031e 	bne	r2,zero,1018580 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 1018574:	e0bff417 	ldw	r2,-48(fp)
 1018578:	e0bff215 	stw	r2,-56(fp)
 101857c:	00001c06 	br	10185f0 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 1018580:	e0bff217 	ldw	r2,-56(fp)
 1018584:	1004403a 	cmpge	r2,r2,zero
 1018588:	10000c1e 	bne	r2,zero,10185bc <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 101858c:	e13ff417 	ldw	r4,-48(fp)
 1018590:	e0fff417 	ldw	r3,-48(fp)
 1018594:	e0bff317 	ldw	r2,-52(fp)
 1018598:	1885883a 	add	r2,r3,r2
 101859c:	1007883a 	mov	r3,r2
 10185a0:	e0bffc17 	ldw	r2,-16(fp)
 10185a4:	1885883a 	add	r2,r3,r2
 10185a8:	10c00003 	ldbu	r3,0(r2)
 10185ac:	e0bff804 	addi	r2,fp,-32
 10185b0:	1105883a 	add	r2,r2,r4
 10185b4:	10c00005 	stb	r3,0(r2)
 10185b8:	00000d06 	br	10185f0 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
 10185bc:	e0fff417 	ldw	r3,-48(fp)
 10185c0:	e0bff217 	ldw	r2,-56(fp)
 10185c4:	1889c83a 	sub	r4,r3,r2
 10185c8:	e0fff417 	ldw	r3,-48(fp)
 10185cc:	e0bff317 	ldw	r2,-52(fp)
 10185d0:	1885883a 	add	r2,r3,r2
 10185d4:	1007883a 	mov	r3,r2
 10185d8:	e0bffc17 	ldw	r2,-16(fp)
 10185dc:	1885883a 	add	r2,r3,r2
 10185e0:	10c00003 	ldbu	r3,0(r2)
 10185e4:	e0bffa04 	addi	r2,fp,-24
 10185e8:	1105883a 	add	r2,r2,r4
 10185ec:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 10185f0:	e0bff417 	ldw	r2,-48(fp)
 10185f4:	10800044 	addi	r2,r2,1
 10185f8:	e0bff415 	stw	r2,-48(fp)
 10185fc:	e0fff417 	ldw	r3,-48(fp)
 1018600:	e0bff517 	ldw	r2,-44(fp)
 1018604:	18bfcf16 	blt	r3,r2,1018544 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 1018608:	e0bff617 	ldw	r2,-40(fp)
 101860c:	1004c03a 	cmpne	r2,r2,zero
 1018610:	1000551e 	bne	r2,zero,1018768 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 1018614:	00804434 	movhi	r2,272
 1018618:	1085d504 	addi	r2,r2,5972
 101861c:	1080050b 	ldhu	r2,20(r2)
 1018620:	10bfffcc 	andi	r2,r2,65535
 1018624:	1008917a 	slli	r4,r2,5
 1018628:	00804434 	movhi	r2,272
 101862c:	1085d504 	addi	r2,r2,5972
 1018630:	1080030b 	ldhu	r2,12(r2)
 1018634:	117fffcc 	andi	r5,r2,65535
 1018638:	10025740 	call	1002574 <__divsi3>
 101863c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 1018640:	e03fef15 	stw	zero,-68(fp)
 1018644:	00003806 	br	1018728 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
 1018648:	00804434 	movhi	r2,272
 101864c:	1085d504 	addi	r2,r2,5972
 1018650:	10c01317 	ldw	r3,76(r2)
 1018654:	e0bfef17 	ldw	r2,-68(fp)
 1018658:	1885883a 	add	r2,r3,r2
 101865c:	1009883a 	mov	r4,r2
 1018660:	d1674117 	ldw	r5,-25340(gp)
 1018664:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1018668:	1005003a 	cmpeq	r2,r2,zero
 101866c:	1000311e 	bne	r2,zero,1018734 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1018670:	e03fee15 	stw	zero,-72(fp)
 1018674:	00002306 	br	1018704 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1018678:	e0bfee17 	ldw	r2,-72(fp)
 101867c:	1008917a 	slli	r4,r2,5
 1018680:	e1ffef17 	ldw	r7,-68(fp)
 1018684:	e17ffe17 	ldw	r5,-8(fp)
 1018688:	000d883a 	mov	r6,zero
 101868c:	10171080 	call	1017108 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 1018690:	e0bffe17 	ldw	r2,-8(fp)
 1018694:	10800003 	ldbu	r2,0(r2)
 1018698:	10803fcc 	andi	r2,r2,255
 101869c:	10803960 	cmpeqi	r2,r2,229
 10186a0:	1000151e 	bne	r2,zero,10186f8 <get_home_directory_cluster_for_file+0x25c>
 10186a4:	e0bffe17 	ldw	r2,-8(fp)
 10186a8:	10800003 	ldbu	r2,0(r2)
 10186ac:	10803fcc 	andi	r2,r2,255
 10186b0:	1005003a 	cmpeq	r2,r2,zero
 10186b4:	1000101e 	bne	r2,zero,10186f8 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 10186b8:	e17ff804 	addi	r5,fp,-32
 10186bc:	e1bffa04 	addi	r6,fp,-24
 10186c0:	e13ffe17 	ldw	r4,-8(fp)
 10186c4:	10181b00 	call	10181b0 <match_file_record_to_name_ext>
 10186c8:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 10186cc:	e0bfed17 	ldw	r2,-76(fp)
 10186d0:	1005003a 	cmpeq	r2,r2,zero
 10186d4:	1000081e 	bne	r2,zero,10186f8 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 10186d8:	e0bffe17 	ldw	r2,-8(fp)
 10186dc:	1080058b 	ldhu	r2,22(r2)
 10186e0:	10bfffcc 	andi	r2,r2,65535
 10186e4:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 10186e8:	e0fffe17 	ldw	r3,-8(fp)
 10186ec:	00800044 	movi	r2,1
 10186f0:	18800a15 	stw	r2,40(r3)
								break;
 10186f4:	00000606 	br	1018710 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 10186f8:	e0bfee17 	ldw	r2,-72(fp)
 10186fc:	10800044 	addi	r2,r2,1
 1018700:	e0bfee15 	stw	r2,-72(fp)
 1018704:	e0bfee17 	ldw	r2,-72(fp)
 1018708:	10800410 	cmplti	r2,r2,16
 101870c:	103fda1e 	bne	r2,zero,1018678 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 1018710:	e0fff117 	ldw	r3,-60(fp)
 1018714:	e0bff617 	ldw	r2,-40(fp)
 1018718:	1880061e 	bne	r3,r2,1018734 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 101871c:	e0bfef17 	ldw	r2,-68(fp)
 1018720:	10800044 	addi	r2,r2,1
 1018724:	e0bfef15 	stw	r2,-68(fp)
 1018728:	e0ffef17 	ldw	r3,-68(fp)
 101872c:	e0bff017 	ldw	r2,-64(fp)
 1018730:	18bfc516 	blt	r3,r2,1018648 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 1018734:	e0fff117 	ldw	r3,-60(fp)
 1018738:	e0bff617 	ldw	r2,-40(fp)
 101873c:	18800826 	beq	r3,r2,1018760 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1018740:	e0bff117 	ldw	r2,-60(fp)
 1018744:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1018748:	e0fff317 	ldw	r3,-52(fp)
 101874c:	e0bff517 	ldw	r2,-44(fp)
 1018750:	1885883a 	add	r2,r3,r2
 1018754:	10800044 	addi	r2,r2,1
 1018758:	e0bff315 	stw	r2,-52(fp)
 101875c:	00007406 	br	1018930 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 1018760:	e03fff15 	stw	zero,-4(fp)
 1018764:	00008c06 	br	1018998 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 1018768:	e0bff617 	ldw	r2,-40(fp)
 101876c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 1018770:	e0bfec17 	ldw	r2,-80(fp)
 1018774:	113fff84 	addi	r4,r2,-2
 1018778:	00804434 	movhi	r2,272
 101877c:	1085d504 	addi	r2,r2,5972
 1018780:	10800383 	ldbu	r2,14(r2)
 1018784:	11403fcc 	andi	r5,r2,255
 1018788:	10026440 	call	1002644 <__mulsi3>
 101878c:	1007883a 	mov	r3,r2
 1018790:	00804434 	movhi	r2,272
 1018794:	1085d504 	addi	r2,r2,5972
 1018798:	10801417 	ldw	r2,80(r2)
 101879c:	1885883a 	add	r2,r3,r2
 10187a0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
 10187a4:	e03fea15 	stw	zero,-88(fp)
 10187a8:	00003206 	br	1018874 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 10187ac:	e0ffea17 	ldw	r3,-88(fp)
 10187b0:	e0bfeb17 	ldw	r2,-84(fp)
 10187b4:	1889883a 	add	r4,r3,r2
 10187b8:	d1674117 	ldw	r5,-25340(gp)
 10187bc:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 10187c0:	1005003a 	cmpeq	r2,r2,zero
 10187c4:	1000311e 	bne	r2,zero,101888c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
 10187c8:	e03fe915 	stw	zero,-92(fp)
 10187cc:	00002006 	br	1018850 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 10187d0:	e0bfe917 	ldw	r2,-92(fp)
 10187d4:	1008917a 	slli	r4,r2,5
 10187d8:	e1bfec17 	ldw	r6,-80(fp)
 10187dc:	e1ffea17 	ldw	r7,-88(fp)
 10187e0:	e17ffe17 	ldw	r5,-8(fp)
 10187e4:	10171080 	call	1017108 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 10187e8:	e0bffe17 	ldw	r2,-8(fp)
 10187ec:	10800003 	ldbu	r2,0(r2)
 10187f0:	10803fcc 	andi	r2,r2,255
 10187f4:	10803960 	cmpeqi	r2,r2,229
 10187f8:	1000121e 	bne	r2,zero,1018844 <get_home_directory_cluster_for_file+0x3a8>
 10187fc:	e0bffe17 	ldw	r2,-8(fp)
 1018800:	10800003 	ldbu	r2,0(r2)
 1018804:	10803fcc 	andi	r2,r2,255
 1018808:	1005003a 	cmpeq	r2,r2,zero
 101880c:	10000d1e 	bne	r2,zero,1018844 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 1018810:	e17ff804 	addi	r5,fp,-32
 1018814:	e1bffa04 	addi	r6,fp,-24
 1018818:	e13ffe17 	ldw	r4,-8(fp)
 101881c:	10181b00 	call	10181b0 <match_file_record_to_name_ext>
 1018820:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 1018824:	e0bfe817 	ldw	r2,-96(fp)
 1018828:	1005003a 	cmpeq	r2,r2,zero
 101882c:	1000051e 	bne	r2,zero,1018844 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
 1018830:	e0bffe17 	ldw	r2,-8(fp)
 1018834:	1080058b 	ldhu	r2,22(r2)
 1018838:	10bfffcc 	andi	r2,r2,65535
 101883c:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
 1018840:	00000606 	br	101885c <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
 1018844:	e0bfe917 	ldw	r2,-92(fp)
 1018848:	10800044 	addi	r2,r2,1
 101884c:	e0bfe915 	stw	r2,-92(fp)
 1018850:	e0bfe917 	ldw	r2,-92(fp)
 1018854:	10800410 	cmplti	r2,r2,16
 1018858:	103fdd1e 	bne	r2,zero,10187d0 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 101885c:	e0fff117 	ldw	r3,-60(fp)
 1018860:	e0bff617 	ldw	r2,-40(fp)
 1018864:	1880091e 	bne	r3,r2,101888c <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
 1018868:	e0bfea17 	ldw	r2,-88(fp)
 101886c:	10800044 	addi	r2,r2,1
 1018870:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
 1018874:	00804434 	movhi	r2,272
 1018878:	1085d504 	addi	r2,r2,5972
 101887c:	10800383 	ldbu	r2,14(r2)
 1018880:	10c03fcc 	andi	r3,r2,255
 1018884:	e0bfea17 	ldw	r2,-88(fp)
 1018888:	10ffc816 	blt	r2,r3,10187ac <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 101888c:	e0fff117 	ldw	r3,-60(fp)
 1018890:	e0bff617 	ldw	r2,-40(fp)
 1018894:	1880131e 	bne	r3,r2,10188e4 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 1018898:	e13ff117 	ldw	r4,-60(fp)
 101889c:	e17ffb04 	addi	r5,fp,-20
 10188a0:	1016dbc0 	call	1016dbc <get_cluster_flag>
 10188a4:	1005003a 	cmpeq	r2,r2,zero
 10188a8:	10000c1e 	bne	r2,zero,10188dc <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 10188ac:	e0bffb0b 	ldhu	r2,-20(fp)
 10188b0:	10bfffcc 	andi	r2,r2,65535
 10188b4:	10fffe0c 	andi	r3,r2,65528
 10188b8:	00bffe14 	movui	r2,65528
 10188bc:	1880021e 	bne	r3,r2,10188c8 <get_home_directory_cluster_for_file+0x42c>
							return false;
 10188c0:	e03fff15 	stw	zero,-4(fp)
 10188c4:	00003406 	br	1018998 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 10188c8:	e0bffb0b 	ldhu	r2,-20(fp)
 10188cc:	10bfffcc 	andi	r2,r2,65535
 10188d0:	10bffe0c 	andi	r2,r2,65528
 10188d4:	e0bff115 	stw	r2,-60(fp)
 10188d8:	00000206 	br	10188e4 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 10188dc:	e03fff15 	stw	zero,-4(fp)
 10188e0:	00002d06 	br	1018998 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
 10188e4:	e0ffec17 	ldw	r3,-80(fp)
 10188e8:	00bffdd4 	movui	r2,65527
 10188ec:	10c00316 	blt	r2,r3,10188fc <get_home_directory_cluster_for_file+0x460>
 10188f0:	e0fff117 	ldw	r3,-60(fp)
 10188f4:	e0bff617 	ldw	r2,-40(fp)
 10188f8:	18bf9d26 	beq	r3,r2,1018770 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 10188fc:	e0fff117 	ldw	r3,-60(fp)
 1018900:	e0bff617 	ldw	r2,-40(fp)
 1018904:	18800826 	beq	r3,r2,1018928 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 1018908:	e0bff117 	ldw	r2,-60(fp)
 101890c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 1018910:	e0fff317 	ldw	r3,-52(fp)
 1018914:	e0bff517 	ldw	r2,-44(fp)
 1018918:	1885883a 	add	r2,r3,r2
 101891c:	10800044 	addi	r2,r2,1
 1018920:	e0bff315 	stw	r2,-52(fp)
 1018924:	00000206 	br	1018930 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 1018928:	e03fff15 	stw	zero,-4(fp)
 101892c:	00001a06 	br	1018998 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 1018930:	e0bff317 	ldw	r2,-52(fp)
 1018934:	1007883a 	mov	r3,r2
 1018938:	e0bffc17 	ldw	r2,-16(fp)
 101893c:	1889883a 	add	r4,r3,r2
 1018940:	10180f00 	call	10180f0 <get_dir_divider_location>
 1018944:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 1018948:	e0bff517 	ldw	r2,-44(fp)
 101894c:	1004403a 	cmpge	r2,r2,zero
 1018950:	1000021e 	bne	r2,zero,101895c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 1018954:	00800044 	movi	r2,1
 1018958:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 101895c:	e0bff517 	ldw	r2,-44(fp)
 1018960:	10800048 	cmpgei	r2,r2,1
 1018964:	103edb1e 	bne	r2,zero,10184d4 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 1018968:	e0fffd17 	ldw	r3,-12(fp)
 101896c:	e0bff617 	ldw	r2,-40(fp)
 1018970:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 1018974:	e0bff617 	ldw	r2,-40(fp)
 1018978:	1004c03a 	cmpne	r2,r2,zero
 101897c:	1000041e 	bne	r2,zero,1018990 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 1018980:	e0bffe17 	ldw	r2,-8(fp)
 1018984:	10000a15 	stw	zero,40(r2)
		result = true;
 1018988:	00800044 	movi	r2,1
 101898c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 1018990:	e0bff717 	ldw	r2,-36(fp)
 1018994:	e0bfff15 	stw	r2,-4(fp)
 1018998:	e0bfff17 	ldw	r2,-4(fp)
}
 101899c:	e037883a 	mov	sp,fp
 10189a0:	dfc00117 	ldw	ra,4(sp)
 10189a4:	df000017 	ldw	fp,0(sp)
 10189a8:	dec00204 	addi	sp,sp,8
 10189ac:	f800283a 	ret

010189b0 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 10189b0:	deffe704 	addi	sp,sp,-100
 10189b4:	dfc01815 	stw	ra,96(sp)
 10189b8:	df001715 	stw	fp,92(sp)
 10189bc:	df001704 	addi	fp,sp,92
 10189c0:	e13ffc15 	stw	r4,-16(fp)
 10189c4:	e17ffd15 	stw	r5,-12(fp)
 10189c8:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 10189cc:	e13ffd17 	ldw	r4,-12(fp)
 10189d0:	10180f00 	call	10180f0 <get_dir_divider_location>
 10189d4:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 10189d8:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 10189dc:	00800804 	movi	r2,32
 10189e0:	e0bff805 	stb	r2,-32(fp)
 10189e4:	00800804 	movi	r2,32
 10189e8:	e0bff845 	stb	r2,-31(fp)
 10189ec:	00800804 	movi	r2,32
 10189f0:	e0bff885 	stb	r2,-30(fp)
 10189f4:	00800804 	movi	r2,32
 10189f8:	e0bff8c5 	stb	r2,-29(fp)
 10189fc:	00800804 	movi	r2,32
 1018a00:	e0bff905 	stb	r2,-28(fp)
 1018a04:	00800804 	movi	r2,32
 1018a08:	e0bff945 	stb	r2,-27(fp)
 1018a0c:	00800804 	movi	r2,32
 1018a10:	e0bff985 	stb	r2,-26(fp)
 1018a14:	00800804 	movi	r2,32
 1018a18:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 1018a1c:	00800804 	movi	r2,32
 1018a20:	e0bffa05 	stb	r2,-24(fp)
 1018a24:	00800804 	movi	r2,32
 1018a28:	e0bffa45 	stb	r2,-23(fp)
 1018a2c:	00800804 	movi	r2,32
 1018a30:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 1018a34:	00bfffc4 	movi	r2,-1
 1018a38:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 1018a3c:	e0bffc17 	ldw	r2,-16(fp)
 1018a40:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 1018a44:	e13ffd17 	ldw	r4,-12(fp)
 1018a48:	10030b40 	call	10030b4 <strlen>
 1018a4c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 1018a50:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 1018a54:	00000b06 	br	1018a84 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 1018a58:	e0fff617 	ldw	r3,-40(fp)
 1018a5c:	e0bff717 	ldw	r2,-36(fp)
 1018a60:	1885883a 	add	r2,r3,r2
 1018a64:	10800044 	addi	r2,r2,1
 1018a68:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 1018a6c:	e0bff617 	ldw	r2,-40(fp)
 1018a70:	1007883a 	mov	r3,r2
 1018a74:	e0bffd17 	ldw	r2,-12(fp)
 1018a78:	1889883a 	add	r4,r3,r2
 1018a7c:	10180f00 	call	10180f0 <get_dir_divider_location>
 1018a80:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 1018a84:	e0bff717 	ldw	r2,-36(fp)
 1018a88:	10800048 	cmpgei	r2,r2,1
 1018a8c:	103ff21e 	bne	r2,zero,1018a58 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1018a90:	e0bff617 	ldw	r2,-40(fp)
 1018a94:	e0bff315 	stw	r2,-52(fp)
 1018a98:	00002b06 	br	1018b48 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 1018a9c:	e0bff317 	ldw	r2,-52(fp)
 1018aa0:	1007883a 	mov	r3,r2
 1018aa4:	e0bffd17 	ldw	r2,-12(fp)
 1018aa8:	1885883a 	add	r2,r3,r2
 1018aac:	10800003 	ldbu	r2,0(r2)
 1018ab0:	10803fcc 	andi	r2,r2,255
 1018ab4:	1080201c 	xori	r2,r2,128
 1018ab8:	10bfe004 	addi	r2,r2,-128
 1018abc:	10800b98 	cmpnei	r2,r2,46
 1018ac0:	1000031e 	bne	r2,zero,1018ad0 <find_file_in_directory+0x120>
			ext_index = index;
 1018ac4:	e0bff317 	ldw	r2,-52(fp)
 1018ac8:	e0bff515 	stw	r2,-44(fp)
 1018acc:	00001b06 	br	1018b3c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 1018ad0:	e0bff517 	ldw	r2,-44(fp)
 1018ad4:	1004403a 	cmpge	r2,r2,zero
 1018ad8:	10000c1e 	bne	r2,zero,1018b0c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 1018adc:	e0fff317 	ldw	r3,-52(fp)
 1018ae0:	e0bff617 	ldw	r2,-40(fp)
 1018ae4:	1889c83a 	sub	r4,r3,r2
 1018ae8:	e0bff317 	ldw	r2,-52(fp)
 1018aec:	1007883a 	mov	r3,r2
 1018af0:	e0bffd17 	ldw	r2,-12(fp)
 1018af4:	1885883a 	add	r2,r3,r2
 1018af8:	10c00003 	ldbu	r3,0(r2)
 1018afc:	e0bff804 	addi	r2,fp,-32
 1018b00:	1105883a 	add	r2,r2,r4
 1018b04:	10c00005 	stb	r3,0(r2)
 1018b08:	00000c06 	br	1018b3c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 1018b0c:	e0fff317 	ldw	r3,-52(fp)
 1018b10:	e0bff517 	ldw	r2,-44(fp)
 1018b14:	1885c83a 	sub	r2,r3,r2
 1018b18:	113fffc4 	addi	r4,r2,-1
 1018b1c:	e0bff317 	ldw	r2,-52(fp)
 1018b20:	1007883a 	mov	r3,r2
 1018b24:	e0bffd17 	ldw	r2,-12(fp)
 1018b28:	1885883a 	add	r2,r3,r2
 1018b2c:	10c00003 	ldbu	r3,0(r2)
 1018b30:	e0bffa04 	addi	r2,fp,-24
 1018b34:	1105883a 	add	r2,r2,r4
 1018b38:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 1018b3c:	e0bff317 	ldw	r2,-52(fp)
 1018b40:	10800044 	addi	r2,r2,1
 1018b44:	e0bff315 	stw	r2,-52(fp)
 1018b48:	e0fff317 	ldw	r3,-52(fp)
 1018b4c:	e0bff217 	ldw	r2,-56(fp)
 1018b50:	18bfd216 	blt	r3,r2,1018a9c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 1018b54:	e0bffc17 	ldw	r2,-16(fp)
 1018b58:	1004c03a 	cmpne	r2,r2,zero
 1018b5c:	1000441e 	bne	r2,zero,1018c70 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 1018b60:	00804434 	movhi	r2,272
 1018b64:	1085d504 	addi	r2,r2,5972
 1018b68:	1080050b 	ldhu	r2,20(r2)
 1018b6c:	10bfffcc 	andi	r2,r2,65535
 1018b70:	1008917a 	slli	r4,r2,5
 1018b74:	00804434 	movhi	r2,272
 1018b78:	1085d504 	addi	r2,r2,5972
 1018b7c:	1080030b 	ldhu	r2,12(r2)
 1018b80:	117fffcc 	andi	r5,r2,65535
 1018b84:	10025740 	call	1002574 <__divsi3>
 1018b88:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 1018b8c:	e03fef15 	stw	zero,-68(fp)
 1018b90:	00003306 	br	1018c60 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
 1018b94:	00804434 	movhi	r2,272
 1018b98:	1085d504 	addi	r2,r2,5972
 1018b9c:	10c01317 	ldw	r3,76(r2)
 1018ba0:	e0bfef17 	ldw	r2,-68(fp)
 1018ba4:	1885883a 	add	r2,r3,r2
 1018ba8:	1009883a 	mov	r4,r2
 1018bac:	d1674117 	ldw	r5,-25340(gp)
 1018bb0:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1018bb4:	1005003a 	cmpeq	r2,r2,zero
 1018bb8:	10008e1e 	bne	r2,zero,1018df4 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1018bbc:	e03fee15 	stw	zero,-72(fp)
 1018bc0:	00001e06 	br	1018c3c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 1018bc4:	e0bfee17 	ldw	r2,-72(fp)
 1018bc8:	1008917a 	slli	r4,r2,5
 1018bcc:	e1ffef17 	ldw	r7,-68(fp)
 1018bd0:	e17ffe17 	ldw	r5,-8(fp)
 1018bd4:	000d883a 	mov	r6,zero
 1018bd8:	10171080 	call	1017108 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
 1018bdc:	e0bffe17 	ldw	r2,-8(fp)
 1018be0:	10800003 	ldbu	r2,0(r2)
 1018be4:	10803fcc 	andi	r2,r2,255
 1018be8:	10803960 	cmpeqi	r2,r2,229
 1018bec:	1000101e 	bne	r2,zero,1018c30 <find_file_in_directory+0x280>
 1018bf0:	e0bffe17 	ldw	r2,-8(fp)
 1018bf4:	10800003 	ldbu	r2,0(r2)
 1018bf8:	10803fcc 	andi	r2,r2,255
 1018bfc:	1005003a 	cmpeq	r2,r2,zero
 1018c00:	10000b1e 	bne	r2,zero,1018c30 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 1018c04:	e17ff804 	addi	r5,fp,-32
 1018c08:	e1bffa04 	addi	r6,fp,-24
 1018c0c:	e13ffe17 	ldw	r4,-8(fp)
 1018c10:	10181b00 	call	10181b0 <match_file_record_to_name_ext>
 1018c14:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 1018c18:	e0bfed17 	ldw	r2,-76(fp)
 1018c1c:	1005003a 	cmpeq	r2,r2,zero
 1018c20:	1000031e 	bne	r2,zero,1018c30 <find_file_in_directory+0x280>
							result = true;
 1018c24:	00800044 	movi	r2,1
 1018c28:	e0bff115 	stw	r2,-60(fp)
							break;
 1018c2c:	00000606 	br	1018c48 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1018c30:	e0bfee17 	ldw	r2,-72(fp)
 1018c34:	10800044 	addi	r2,r2,1
 1018c38:	e0bfee15 	stw	r2,-72(fp)
 1018c3c:	e0bfee17 	ldw	r2,-72(fp)
 1018c40:	10800410 	cmplti	r2,r2,16
 1018c44:	103fdf1e 	bne	r2,zero,1018bc4 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 1018c48:	e0bff117 	ldw	r2,-60(fp)
 1018c4c:	1004c03a 	cmpne	r2,r2,zero
 1018c50:	1000681e 	bne	r2,zero,1018df4 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 1018c54:	e0bfef17 	ldw	r2,-68(fp)
 1018c58:	10800044 	addi	r2,r2,1
 1018c5c:	e0bfef15 	stw	r2,-68(fp)
 1018c60:	e0ffef17 	ldw	r3,-68(fp)
 1018c64:	e0bff017 	ldw	r2,-64(fp)
 1018c68:	18bfca16 	blt	r3,r2,1018b94 <find_file_in_directory+0x1e4>
 1018c6c:	00006106 	br	1018df4 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 1018c70:	e0bff417 	ldw	r2,-48(fp)
 1018c74:	113fff84 	addi	r4,r2,-2
 1018c78:	00804434 	movhi	r2,272
 1018c7c:	1085d504 	addi	r2,r2,5972
 1018c80:	10800383 	ldbu	r2,14(r2)
 1018c84:	11403fcc 	andi	r5,r2,255
 1018c88:	10026440 	call	1002644 <__mulsi3>
 1018c8c:	1007883a 	mov	r3,r2
 1018c90:	00804434 	movhi	r2,272
 1018c94:	1085d504 	addi	r2,r2,5972
 1018c98:	10801417 	ldw	r2,80(r2)
 1018c9c:	1885883a 	add	r2,r3,r2
 1018ca0:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
 1018ca4:	e03feb15 	stw	zero,-84(fp)
 1018ca8:	00003006 	br	1018d6c <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 1018cac:	e0ffeb17 	ldw	r3,-84(fp)
 1018cb0:	e0bfec17 	ldw	r2,-80(fp)
 1018cb4:	1889883a 	add	r4,r3,r2
 1018cb8:	d1674117 	ldw	r5,-25340(gp)
 1018cbc:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1018cc0:	1005003a 	cmpeq	r2,r2,zero
 1018cc4:	10002f1e 	bne	r2,zero,1018d84 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1018cc8:	e03fea15 	stw	zero,-88(fp)
 1018ccc:	00001e06 	br	1018d48 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 1018cd0:	e0bfea17 	ldw	r2,-88(fp)
 1018cd4:	1008917a 	slli	r4,r2,5
 1018cd8:	e1bff417 	ldw	r6,-48(fp)
 1018cdc:	e1ffeb17 	ldw	r7,-84(fp)
 1018ce0:	e17ffe17 	ldw	r5,-8(fp)
 1018ce4:	10171080 	call	1017108 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 1018ce8:	e0bffe17 	ldw	r2,-8(fp)
 1018cec:	10800003 	ldbu	r2,0(r2)
 1018cf0:	10803fcc 	andi	r2,r2,255
 1018cf4:	10803960 	cmpeqi	r2,r2,229
 1018cf8:	1000101e 	bne	r2,zero,1018d3c <find_file_in_directory+0x38c>
 1018cfc:	e0bffe17 	ldw	r2,-8(fp)
 1018d00:	10800003 	ldbu	r2,0(r2)
 1018d04:	10803fcc 	andi	r2,r2,255
 1018d08:	1005003a 	cmpeq	r2,r2,zero
 1018d0c:	10000b1e 	bne	r2,zero,1018d3c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 1018d10:	e17ff804 	addi	r5,fp,-32
 1018d14:	e1bffa04 	addi	r6,fp,-24
 1018d18:	e13ffe17 	ldw	r4,-8(fp)
 1018d1c:	10181b00 	call	10181b0 <match_file_record_to_name_ext>
 1018d20:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 1018d24:	e0bfe917 	ldw	r2,-92(fp)
 1018d28:	1005003a 	cmpeq	r2,r2,zero
 1018d2c:	1000031e 	bne	r2,zero,1018d3c <find_file_in_directory+0x38c>
								result = true;
 1018d30:	00800044 	movi	r2,1
 1018d34:	e0bff115 	stw	r2,-60(fp)
								break;
 1018d38:	00000606 	br	1018d54 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 1018d3c:	e0bfea17 	ldw	r2,-88(fp)
 1018d40:	10800044 	addi	r2,r2,1
 1018d44:	e0bfea15 	stw	r2,-88(fp)
 1018d48:	e0bfea17 	ldw	r2,-88(fp)
 1018d4c:	10800410 	cmplti	r2,r2,16
 1018d50:	103fdf1e 	bne	r2,zero,1018cd0 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 1018d54:	e0bff117 	ldw	r2,-60(fp)
 1018d58:	1004c03a 	cmpne	r2,r2,zero
 1018d5c:	1000091e 	bne	r2,zero,1018d84 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
 1018d60:	e0bfeb17 	ldw	r2,-84(fp)
 1018d64:	10800044 	addi	r2,r2,1
 1018d68:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
 1018d6c:	00804434 	movhi	r2,272
 1018d70:	1085d504 	addi	r2,r2,5972
 1018d74:	10800383 	ldbu	r2,14(r2)
 1018d78:	10c03fcc 	andi	r3,r2,255
 1018d7c:	e0bfeb17 	ldw	r2,-84(fp)
 1018d80:	10ffca16 	blt	r2,r3,1018cac <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 1018d84:	e0bff117 	ldw	r2,-60(fp)
 1018d88:	1004c03a 	cmpne	r2,r2,zero
 1018d8c:	1000131e 	bne	r2,zero,1018ddc <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 1018d90:	e13ff417 	ldw	r4,-48(fp)
 1018d94:	e17ffb04 	addi	r5,fp,-20
 1018d98:	1016dbc0 	call	1016dbc <get_cluster_flag>
 1018d9c:	1005003a 	cmpeq	r2,r2,zero
 1018da0:	10000c1e 	bne	r2,zero,1018dd4 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1018da4:	e0bffb0b 	ldhu	r2,-20(fp)
 1018da8:	10bfffcc 	andi	r2,r2,65535
 1018dac:	10fffe0c 	andi	r3,r2,65528
 1018db0:	00bffe14 	movui	r2,65528
 1018db4:	1880021e 	bne	r3,r2,1018dc0 <find_file_in_directory+0x410>
						return false;
 1018db8:	e03fff15 	stw	zero,-4(fp)
 1018dbc:	00000f06 	br	1018dfc <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 1018dc0:	e0bffb0b 	ldhu	r2,-20(fp)
 1018dc4:	10bfffcc 	andi	r2,r2,65535
 1018dc8:	10bffe0c 	andi	r2,r2,65528
 1018dcc:	e0bff415 	stw	r2,-48(fp)
 1018dd0:	00000206 	br	1018ddc <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 1018dd4:	e03fff15 	stw	zero,-4(fp)
 1018dd8:	00000806 	br	1018dfc <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 1018ddc:	e0fff417 	ldw	r3,-48(fp)
 1018de0:	00bffdd4 	movui	r2,65527
 1018de4:	10c00316 	blt	r2,r3,1018df4 <find_file_in_directory+0x444>
 1018de8:	e0bff117 	ldw	r2,-60(fp)
 1018dec:	1005003a 	cmpeq	r2,r2,zero
 1018df0:	103f9f1e 	bne	r2,zero,1018c70 <find_file_in_directory+0x2c0>
	}

	return result;
 1018df4:	e0bff117 	ldw	r2,-60(fp)
 1018df8:	e0bfff15 	stw	r2,-4(fp)
 1018dfc:	e0bfff17 	ldw	r2,-4(fp)
}
 1018e00:	e037883a 	mov	sp,fp
 1018e04:	dfc00117 	ldw	ra,4(sp)
 1018e08:	df000017 	ldw	fp,0(sp)
 1018e0c:	dec00204 	addi	sp,sp,8
 1018e10:	f800283a 	ret

01018e14 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 1018e14:	defff504 	addi	sp,sp,-44
 1018e18:	dfc00a15 	stw	ra,40(sp)
 1018e1c:	df000915 	stw	fp,36(sp)
 1018e20:	df000904 	addi	fp,sp,36
 1018e24:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 1018e28:	00804434 	movhi	r2,272
 1018e2c:	1085d504 	addi	r2,r2,5972
 1018e30:	10801117 	ldw	r2,68(r2)
 1018e34:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 1018e38:	00800084 	movi	r2,2
 1018e3c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 1018e40:	00bfffc4 	movi	r2,-1
 1018e44:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 1018e48:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 1018e4c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 1018e50:	00804434 	movhi	r2,272
 1018e54:	1085d504 	addi	r2,r2,5972
 1018e58:	10801417 	ldw	r2,80(r2)
 1018e5c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 1018e60:	00804434 	movhi	r2,272
 1018e64:	1085d504 	addi	r2,r2,5972
 1018e68:	1080058b 	ldhu	r2,22(r2)
 1018e6c:	10bfffcc 	andi	r2,r2,65535
 1018e70:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 1018e74:	00804434 	movhi	r2,272
 1018e78:	1085d504 	addi	r2,r2,5972
 1018e7c:	10800917 	ldw	r2,36(r2)
 1018e80:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 1018e84:	e0fff817 	ldw	r3,-32(fp)
 1018e88:	e0bff717 	ldw	r2,-36(fp)
 1018e8c:	10c00b2e 	bgeu	r2,r3,1018ebc <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 1018e90:	e0fff817 	ldw	r3,-32(fp)
 1018e94:	e0bff917 	ldw	r2,-28(fp)
 1018e98:	1889c83a 	sub	r4,r3,r2
 1018e9c:	00804434 	movhi	r2,272
 1018ea0:	1085d504 	addi	r2,r2,5972
 1018ea4:	10800383 	ldbu	r2,14(r2)
 1018ea8:	11403fcc 	andi	r5,r2,255
 1018eac:	10026340 	call	1002634 <__udivsi3>
 1018eb0:	10800044 	addi	r2,r2,1
 1018eb4:	e0bffa15 	stw	r2,-24(fp)
 1018eb8:	00002906 	br	1018f60 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 1018ebc:	e0fff717 	ldw	r3,-36(fp)
 1018ec0:	e0bff917 	ldw	r2,-28(fp)
 1018ec4:	1889c83a 	sub	r4,r3,r2
 1018ec8:	00804434 	movhi	r2,272
 1018ecc:	1085d504 	addi	r2,r2,5972
 1018ed0:	10800383 	ldbu	r2,14(r2)
 1018ed4:	11403fcc 	andi	r5,r2,255
 1018ed8:	10026340 	call	1002634 <__udivsi3>
 1018edc:	10800044 	addi	r2,r2,1
 1018ee0:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1018ee4:	00001e06 	br	1018f60 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
 1018ee8:	e13ffe17 	ldw	r4,-8(fp)
 1018eec:	d1674117 	ldw	r5,-25340(gp)
 1018ef0:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1018ef4:	1005003a 	cmpeq	r2,r2,zero
 1018ef8:	1000131e 	bne	r2,zero,1018f48 <find_first_empty_cluster+0x134>
			do {
				cluster
 1018efc:	d0a74317 	ldw	r2,-25332(gp)
 1018f00:	10800a17 	ldw	r2,40(r2)
 1018f04:	1007883a 	mov	r3,r2
 1018f08:	e0bffd17 	ldw	r2,-12(fp)
 1018f0c:	10803fcc 	andi	r2,r2,255
 1018f10:	1085883a 	add	r2,r2,r2
 1018f14:	1885883a 	add	r2,r3,r2
 1018f18:	1080002b 	ldhuio	r2,0(r2)
 1018f1c:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 1018f20:	e0bffc0f 	ldh	r2,-16(fp)
 1018f24:	1005003a 	cmpeq	r2,r2,zero
 1018f28:	1000071e 	bne	r2,zero,1018f48 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 1018f2c:	e0bffd17 	ldw	r2,-12(fp)
 1018f30:	10800044 	addi	r2,r2,1
 1018f34:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 1018f38:	e0bffd17 	ldw	r2,-12(fp)
 1018f3c:	10803fcc 	andi	r2,r2,255
 1018f40:	1004c03a 	cmpne	r2,r2,zero
 1018f44:	103fed1e 	bne	r2,zero,1018efc <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 1018f48:	e0bffc0f 	ldh	r2,-16(fp)
 1018f4c:	1005003a 	cmpeq	r2,r2,zero
 1018f50:	1000081e 	bne	r2,zero,1018f74 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 1018f54:	e0bffe17 	ldw	r2,-8(fp)
 1018f58:	10800044 	addi	r2,r2,1
 1018f5c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 1018f60:	00804434 	movhi	r2,272
 1018f64:	1085d504 	addi	r2,r2,5972
 1018f68:	10c01217 	ldw	r3,72(r2)
 1018f6c:	e0bffe17 	ldw	r2,-8(fp)
 1018f70:	18bfdd1e 	bne	r3,r2,1018ee8 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 1018f74:	e0bffc0f 	ldh	r2,-16(fp)
 1018f78:	1004c03a 	cmpne	r2,r2,zero
 1018f7c:	1000081e 	bne	r2,zero,1018fa0 <find_first_empty_cluster+0x18c>
 1018f80:	e0fffc0f 	ldh	r3,-16(fp)
 1018f84:	e0bffa17 	ldw	r2,-24(fp)
 1018f88:	10c00536 	bltu	r2,r3,1018fa0 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 1018f8c:	e0bfff17 	ldw	r2,-4(fp)
 1018f90:	e0fffd17 	ldw	r3,-12(fp)
 1018f94:	10c00015 	stw	r3,0(r2)
		result = true;
 1018f98:	00800044 	movi	r2,1
 1018f9c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1018fa0:	e0bffb17 	ldw	r2,-20(fp)
}
 1018fa4:	e037883a 	mov	sp,fp
 1018fa8:	dfc00117 	ldw	ra,4(sp)
 1018fac:	df000017 	ldw	fp,0(sp)
 1018fb0:	dec00204 	addi	sp,sp,8
 1018fb4:	f800283a 	ret

01018fb8 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1018fb8:	defff404 	addi	sp,sp,-48
 1018fbc:	dfc00b15 	stw	ra,44(sp)
 1018fc0:	df000a15 	stw	fp,40(sp)
 1018fc4:	df000a04 	addi	fp,sp,40
 1018fc8:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 1018fcc:	00bfffc4 	movi	r2,-1
 1018fd0:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 1018fd4:	e0bffe17 	ldw	r2,-8(fp)
 1018fd8:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 1018fdc:	e0bffa17 	ldw	r2,-24(fp)
 1018fe0:	113fff84 	addi	r4,r2,-2
 1018fe4:	00804434 	movhi	r2,272
 1018fe8:	1085d504 	addi	r2,r2,5972
 1018fec:	10800383 	ldbu	r2,14(r2)
 1018ff0:	11403fcc 	andi	r5,r2,255
 1018ff4:	10026440 	call	1002644 <__mulsi3>
 1018ff8:	1007883a 	mov	r3,r2
 1018ffc:	00804434 	movhi	r2,272
 1019000:	1085d504 	addi	r2,r2,5972
 1019004:	10801417 	ldw	r2,80(r2)
 1019008:	1885883a 	add	r2,r3,r2
 101900c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
 1019010:	e03ff815 	stw	zero,-32(fp)
 1019014:	00002c06 	br	10190c8 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 1019018:	e0fff817 	ldw	r3,-32(fp)
 101901c:	e0bff917 	ldw	r2,-28(fp)
 1019020:	1889883a 	add	r4,r3,r2
 1019024:	d1674117 	ldw	r5,-25340(gp)
 1019028:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 101902c:	1005003a 	cmpeq	r2,r2,zero
 1019030:	10002b1e 	bne	r2,zero,10190e0 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 1019034:	e03ff715 	stw	zero,-36(fp)
 1019038:	00001d06 	br	10190b0 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
 101903c:	d0a74317 	ldw	r2,-25332(gp)
 1019040:	10800a17 	ldw	r2,40(r2)
 1019044:	1007883a 	mov	r3,r2
 1019048:	e0bff717 	ldw	r2,-36(fp)
 101904c:	1004917a 	slli	r2,r2,5
 1019050:	1885883a 	add	r2,r3,r2
 1019054:	10800023 	ldbuio	r2,0(r2)
 1019058:	10803fcc 	andi	r2,r2,255
 101905c:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 1019060:	e0bff60b 	ldhu	r2,-40(fp)
 1019064:	10803960 	cmpeqi	r2,r2,229
 1019068:	1000031e 	bne	r2,zero,1019078 <find_first_empty_record_in_a_subdirectory+0xc0>
 101906c:	e0bff60b 	ldhu	r2,-40(fp)
 1019070:	1004c03a 	cmpne	r2,r2,zero
 1019074:	10000b1e 	bne	r2,zero,10190a4 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 1019078:	e0bff817 	ldw	r2,-32(fp)
 101907c:	1006913a 	slli	r3,r2,4
 1019080:	e0bff717 	ldw	r2,-36(fp)
 1019084:	1885883a 	add	r2,r3,r2
 1019088:	1006943a 	slli	r3,r2,16
 101908c:	e0bffa17 	ldw	r2,-24(fp)
 1019090:	1884b03a 	or	r2,r3,r2
 1019094:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 1019098:	e0bffb17 	ldw	r2,-20(fp)
 101909c:	e0bfff15 	stw	r2,-4(fp)
 10190a0:	00005206 	br	10191ec <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 10190a4:	e0bff717 	ldw	r2,-36(fp)
 10190a8:	10800044 	addi	r2,r2,1
 10190ac:	e0bff715 	stw	r2,-36(fp)
 10190b0:	e0bff717 	ldw	r2,-36(fp)
 10190b4:	10800410 	cmplti	r2,r2,16
 10190b8:	103fe01e 	bne	r2,zero,101903c <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
 10190bc:	e0bff817 	ldw	r2,-32(fp)
 10190c0:	10800044 	addi	r2,r2,1
 10190c4:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
 10190c8:	00804434 	movhi	r2,272
 10190cc:	1085d504 	addi	r2,r2,5972
 10190d0:	10800383 	ldbu	r2,14(r2)
 10190d4:	10c03fcc 	andi	r3,r2,255
 10190d8:	e0bff817 	ldw	r2,-32(fp)
 10190dc:	10ffce16 	blt	r2,r3,1019018 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 10190e0:	e0bffb17 	ldw	r2,-20(fp)
 10190e4:	1004403a 	cmpge	r2,r2,zero
 10190e8:	1000381e 	bne	r2,zero,10191cc <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 10190ec:	e13ffa17 	ldw	r4,-24(fp)
 10190f0:	e17ffc04 	addi	r5,fp,-16
 10190f4:	1016dbc0 	call	1016dbc <get_cluster_flag>
 10190f8:	1005003a 	cmpeq	r2,r2,zero
 10190fc:	1000311e 	bne	r2,zero,10191c4 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1019100:	e0bffc0b 	ldhu	r2,-16(fp)
 1019104:	10bfffcc 	andi	r2,r2,65535
 1019108:	10fffe0c 	andi	r3,r2,65528
 101910c:	00bffe14 	movui	r2,65528
 1019110:	18802e1e 	bne	r3,r2,10191cc <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 1019114:	e13ffd04 	addi	r4,fp,-12
 1019118:	1018e140 	call	1018e14 <find_first_empty_cluster>
 101911c:	1005003a 	cmpeq	r2,r2,zero
 1019120:	1000231e 	bne	r2,zero,10191b0 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 1019124:	e13ffa17 	ldw	r4,-24(fp)
 1019128:	e0bffd17 	ldw	r2,-12(fp)
 101912c:	117fffcc 	andi	r5,r2,65535
 1019130:	2960001c 	xori	r5,r5,32768
 1019134:	29600004 	addi	r5,r5,-32768
 1019138:	01800044 	movi	r6,1
 101913c:	1016e740 	call	1016e74 <mark_cluster>
 1019140:	1005003a 	cmpeq	r2,r2,zero
 1019144:	10001a1e 	bne	r2,zero,10191b0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1019148:	e0bffd17 	ldw	r2,-12(fp)
 101914c:	1009883a 	mov	r4,r2
 1019150:	017fffc4 	movi	r5,-1
 1019154:	01800044 	movi	r6,1
 1019158:	1016e740 	call	1016e74 <mark_cluster>
 101915c:	1005003a 	cmpeq	r2,r2,zero
 1019160:	1000131e 	bne	r2,zero,10191b0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1019164:	e13ffa17 	ldw	r4,-24(fp)
 1019168:	e0bffd17 	ldw	r2,-12(fp)
 101916c:	117fffcc 	andi	r5,r2,65535
 1019170:	2960001c 	xori	r5,r5,32768
 1019174:	29600004 	addi	r5,r5,-32768
 1019178:	000d883a 	mov	r6,zero
 101917c:	1016e740 	call	1016e74 <mark_cluster>
 1019180:	1005003a 	cmpeq	r2,r2,zero
 1019184:	10000a1e 	bne	r2,zero,10191b0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1019188:	e0bffd17 	ldw	r2,-12(fp)
 101918c:	1009883a 	mov	r4,r2
 1019190:	017fffc4 	movi	r5,-1
 1019194:	000d883a 	mov	r6,zero
 1019198:	1016e740 	call	1016e74 <mark_cluster>
 101919c:	1005003a 	cmpeq	r2,r2,zero
 10191a0:	1000031e 	bne	r2,zero,10191b0 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 10191a4:	1016c700 	call	1016c70 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 10191a8:	e0bffd17 	ldw	r2,-12(fp)
 10191ac:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 10191b0:	e0bffc0b 	ldhu	r2,-16(fp)
 10191b4:	10bfffcc 	andi	r2,r2,65535
 10191b8:	10bffe0c 	andi	r2,r2,65528
 10191bc:	e0bffa15 	stw	r2,-24(fp)
 10191c0:	00000206 	br	10191cc <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 10191c4:	00bfffc4 	movi	r2,-1
 10191c8:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 10191cc:	e0fffa17 	ldw	r3,-24(fp)
 10191d0:	00bffdd4 	movui	r2,65527
 10191d4:	10c00316 	blt	r2,r3,10191e4 <find_first_empty_record_in_a_subdirectory+0x22c>
 10191d8:	e0bffb17 	ldw	r2,-20(fp)
 10191dc:	10bfffe0 	cmpeqi	r2,r2,-1
 10191e0:	103f7e1e 	bne	r2,zero,1018fdc <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 10191e4:	e0bffb17 	ldw	r2,-20(fp)
 10191e8:	e0bfff15 	stw	r2,-4(fp)
 10191ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10191f0:	e037883a 	mov	sp,fp
 10191f4:	dfc00117 	ldw	ra,4(sp)
 10191f8:	df000017 	ldw	fp,0(sp)
 10191fc:	dec00204 	addi	sp,sp,8
 1019200:	f800283a 	ret

01019204 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1019204:	defff804 	addi	sp,sp,-32
 1019208:	dfc00715 	stw	ra,28(sp)
 101920c:	df000615 	stw	fp,24(sp)
 1019210:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
 1019214:	00804434 	movhi	r2,272
 1019218:	1085d504 	addi	r2,r2,5972
 101921c:	1080050b 	ldhu	r2,20(r2)
 1019220:	10bfffcc 	andi	r2,r2,65535
 1019224:	1008917a 	slli	r4,r2,5
 1019228:	00804434 	movhi	r2,272
 101922c:	1085d504 	addi	r2,r2,5972
 1019230:	1080030b 	ldhu	r2,12(r2)
 1019234:	117fffcc 	andi	r5,r2,65535
 1019238:	10025740 	call	1002574 <__divsi3>
 101923c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 1019240:	00bfffc4 	movi	r2,-1
 1019244:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 1019248:	e03ffd15 	stw	zero,-12(fp)
 101924c:	00002d06 	br	1019304 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
 1019250:	00804434 	movhi	r2,272
 1019254:	1085d504 	addi	r2,r2,5972
 1019258:	10c01317 	ldw	r3,76(r2)
 101925c:	e0bffd17 	ldw	r2,-12(fp)
 1019260:	1885883a 	add	r2,r3,r2
 1019264:	1009883a 	mov	r4,r2
 1019268:	d1674117 	ldw	r5,-25340(gp)
 101926c:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1019270:	1005003a 	cmpeq	r2,r2,zero
 1019274:	1000261e 	bne	r2,zero,1019310 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 1019278:	e03ffb15 	stw	zero,-20(fp)
 101927c:	00001b06 	br	10192ec <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
 1019280:	d0a74317 	ldw	r2,-25332(gp)
 1019284:	10800a17 	ldw	r2,40(r2)
 1019288:	1007883a 	mov	r3,r2
 101928c:	e0bffb17 	ldw	r2,-20(fp)
 1019290:	1004917a 	slli	r2,r2,5
 1019294:	1885883a 	add	r2,r3,r2
 1019298:	10800023 	ldbuio	r2,0(r2)
 101929c:	10803fcc 	andi	r2,r2,255
 10192a0:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 10192a4:	e0bffa0b 	ldhu	r2,-24(fp)
 10192a8:	10803960 	cmpeqi	r2,r2,229
 10192ac:	1000031e 	bne	r2,zero,10192bc <find_first_empty_record_in_root_directory+0xb8>
 10192b0:	e0bffa0b 	ldhu	r2,-24(fp)
 10192b4:	1004c03a 	cmpne	r2,r2,zero
 10192b8:	1000091e 	bne	r2,zero,10192e0 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 10192bc:	e0bffd17 	ldw	r2,-12(fp)
 10192c0:	1006913a 	slli	r3,r2,4
 10192c4:	e0bffb17 	ldw	r2,-20(fp)
 10192c8:	1885883a 	add	r2,r3,r2
 10192cc:	1004943a 	slli	r2,r2,16
 10192d0:	e0bffc15 	stw	r2,-16(fp)
					return result;
 10192d4:	e0bffc17 	ldw	r2,-16(fp)
 10192d8:	e0bfff15 	stw	r2,-4(fp)
 10192dc:	00000e06 	br	1019318 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 10192e0:	e0bffb17 	ldw	r2,-20(fp)
 10192e4:	10800044 	addi	r2,r2,1
 10192e8:	e0bffb15 	stw	r2,-20(fp)
 10192ec:	e0bffb17 	ldw	r2,-20(fp)
 10192f0:	10800410 	cmplti	r2,r2,16
 10192f4:	103fe21e 	bne	r2,zero,1019280 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
 10192f8:	e0bffd17 	ldw	r2,-12(fp)
 10192fc:	10800044 	addi	r2,r2,1
 1019300:	e0bffd15 	stw	r2,-12(fp)
 1019304:	e0fffd17 	ldw	r3,-12(fp)
 1019308:	e0bffe17 	ldw	r2,-8(fp)
 101930c:	18bfd016 	blt	r3,r2,1019250 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 1019310:	e0bffc17 	ldw	r2,-16(fp)
 1019314:	e0bfff15 	stw	r2,-4(fp)
 1019318:	e0bfff17 	ldw	r2,-4(fp)
}
 101931c:	e037883a 	mov	sp,fp
 1019320:	dfc00117 	ldw	ra,4(sp)
 1019324:	df000017 	ldw	fp,0(sp)
 1019328:	dec00204 	addi	sp,sp,8
 101932c:	f800283a 	ret

01019330 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 1019330:	defffa04 	addi	sp,sp,-24
 1019334:	df000515 	stw	fp,20(sp)
 1019338:	df000504 	addi	fp,sp,20
 101933c:	e13ffd15 	stw	r4,-12(fp)
 1019340:	e17ffe15 	stw	r5,-8(fp)
 1019344:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 1019348:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 101934c:	e03ffc15 	stw	zero,-16(fp)
 1019350:	00002b06 	br	1019400 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 1019354:	e0bffb17 	ldw	r2,-20(fp)
 1019358:	1007883a 	mov	r3,r2
 101935c:	e0bffd17 	ldw	r2,-12(fp)
 1019360:	1885883a 	add	r2,r3,r2
 1019364:	10800003 	ldbu	r2,0(r2)
 1019368:	10803fcc 	andi	r2,r2,255
 101936c:	1080201c 	xori	r2,r2,128
 1019370:	10bfe004 	addi	r2,r2,-128
 1019374:	10800ba0 	cmpeqi	r2,r2,46
 1019378:	1000181e 	bne	r2,zero,10193dc <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 101937c:	e0bffc17 	ldw	r2,-16(fp)
 1019380:	1007883a 	mov	r3,r2
 1019384:	e0bffe17 	ldw	r2,-8(fp)
 1019388:	1889883a 	add	r4,r3,r2
 101938c:	e0bffb17 	ldw	r2,-20(fp)
 1019390:	1007883a 	mov	r3,r2
 1019394:	e0bffd17 	ldw	r2,-12(fp)
 1019398:	1885883a 	add	r2,r3,r2
 101939c:	10800003 	ldbu	r2,0(r2)
 10193a0:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 10193a4:	e0bffb17 	ldw	r2,-20(fp)
 10193a8:	1007883a 	mov	r3,r2
 10193ac:	e0bffd17 	ldw	r2,-12(fp)
 10193b0:	1885883a 	add	r2,r3,r2
 10193b4:	10800003 	ldbu	r2,0(r2)
 10193b8:	10803fcc 	andi	r2,r2,255
 10193bc:	1080201c 	xori	r2,r2,128
 10193c0:	10bfe004 	addi	r2,r2,-128
 10193c4:	1005003a 	cmpeq	r2,r2,zero
 10193c8:	10000a1e 	bne	r2,zero,10193f4 <convert_filename_to_name_extension+0xc4>
				local++;
 10193cc:	e0bffb17 	ldw	r2,-20(fp)
 10193d0:	10800044 	addi	r2,r2,1
 10193d4:	e0bffb15 	stw	r2,-20(fp)
 10193d8:	00000606 	br	10193f4 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 10193dc:	e0bffc17 	ldw	r2,-16(fp)
 10193e0:	1007883a 	mov	r3,r2
 10193e4:	e0bffe17 	ldw	r2,-8(fp)
 10193e8:	1887883a 	add	r3,r3,r2
 10193ec:	00800804 	movi	r2,32
 10193f0:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 10193f4:	e0bffc17 	ldw	r2,-16(fp)
 10193f8:	10800044 	addi	r2,r2,1
 10193fc:	e0bffc15 	stw	r2,-16(fp)
 1019400:	e0bffc17 	ldw	r2,-16(fp)
 1019404:	10800210 	cmplti	r2,r2,8
 1019408:	103fd21e 	bne	r2,zero,1019354 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 101940c:	e0bffb17 	ldw	r2,-20(fp)
 1019410:	1007883a 	mov	r3,r2
 1019414:	e0bffd17 	ldw	r2,-12(fp)
 1019418:	1885883a 	add	r2,r3,r2
 101941c:	10800003 	ldbu	r2,0(r2)
 1019420:	10803fcc 	andi	r2,r2,255
 1019424:	1080201c 	xori	r2,r2,128
 1019428:	10bfe004 	addi	r2,r2,-128
 101942c:	10800b98 	cmpnei	r2,r2,46
 1019430:	1000031e 	bne	r2,zero,1019440 <convert_filename_to_name_extension+0x110>
		local++;
 1019434:	e0bffb17 	ldw	r2,-20(fp)
 1019438:	10800044 	addi	r2,r2,1
 101943c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 1019440:	e03ffc15 	stw	zero,-16(fp)
 1019444:	00002106 	br	10194cc <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 1019448:	e0bffb17 	ldw	r2,-20(fp)
 101944c:	1007883a 	mov	r3,r2
 1019450:	e0bffd17 	ldw	r2,-12(fp)
 1019454:	1885883a 	add	r2,r3,r2
 1019458:	10800003 	ldbu	r2,0(r2)
 101945c:	10803fcc 	andi	r2,r2,255
 1019460:	1080201c 	xori	r2,r2,128
 1019464:	10bfe004 	addi	r2,r2,-128
 1019468:	1005003a 	cmpeq	r2,r2,zero
 101946c:	10000e1e 	bne	r2,zero,10194a8 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 1019470:	e0bffc17 	ldw	r2,-16(fp)
 1019474:	1007883a 	mov	r3,r2
 1019478:	e0bfff17 	ldw	r2,-4(fp)
 101947c:	1889883a 	add	r4,r3,r2
 1019480:	e0bffb17 	ldw	r2,-20(fp)
 1019484:	1007883a 	mov	r3,r2
 1019488:	e0bffd17 	ldw	r2,-12(fp)
 101948c:	1885883a 	add	r2,r3,r2
 1019490:	10800003 	ldbu	r2,0(r2)
 1019494:	20800005 	stb	r2,0(r4)
			local++;
 1019498:	e0bffb17 	ldw	r2,-20(fp)
 101949c:	10800044 	addi	r2,r2,1
 10194a0:	e0bffb15 	stw	r2,-20(fp)
 10194a4:	00000606 	br	10194c0 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 10194a8:	e0bffc17 	ldw	r2,-16(fp)
 10194ac:	1007883a 	mov	r3,r2
 10194b0:	e0bfff17 	ldw	r2,-4(fp)
 10194b4:	1887883a 	add	r3,r3,r2
 10194b8:	00800804 	movi	r2,32
 10194bc:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 10194c0:	e0bffc17 	ldw	r2,-16(fp)
 10194c4:	10800044 	addi	r2,r2,1
 10194c8:	e0bffc15 	stw	r2,-16(fp)
 10194cc:	e0bffc17 	ldw	r2,-16(fp)
 10194d0:	108000d0 	cmplti	r2,r2,3
 10194d4:	103fdc1e 	bne	r2,zero,1019448 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 10194d8:	e037883a 	mov	sp,fp
 10194dc:	df000017 	ldw	fp,0(sp)
 10194e0:	dec00104 	addi	sp,sp,4
 10194e4:	f800283a 	ret

010194e8 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 10194e8:	defff204 	addi	sp,sp,-56
 10194ec:	dfc00d15 	stw	ra,52(sp)
 10194f0:	df000c15 	stw	fp,48(sp)
 10194f4:	dc000b15 	stw	r16,44(sp)
 10194f8:	df000b04 	addi	fp,sp,44
 10194fc:	e13ffb15 	stw	r4,-20(fp)
 1019500:	e17ffc15 	stw	r5,-16(fp)
 1019504:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 1019508:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 101950c:	e13ffa04 	addi	r4,fp,-24
 1019510:	1018e140 	call	1018e14 <find_first_empty_cluster>
 1019514:	1005003a 	cmpeq	r2,r2,zero
 1019518:	1000a31e 	bne	r2,zero,10197a8 <create_file+0x2c0>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 101951c:	e0bffd17 	ldw	r2,-12(fp)
 1019520:	10800a17 	ldw	r2,40(r2)
 1019524:	1004c03a 	cmpne	r2,r2,zero
 1019528:	1000031e 	bne	r2,zero,1019538 <create_file+0x50>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 101952c:	10192040 	call	1019204 <find_first_empty_record_in_root_directory>
 1019530:	e0bff815 	stw	r2,-32(fp)
 1019534:	00000506 	br	101954c <create_file+0x64>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 1019538:	e0bffd17 	ldw	r2,-12(fp)
 101953c:	1080058b 	ldhu	r2,22(r2)
 1019540:	113fffcc 	andi	r4,r2,65535
 1019544:	1018fb80 	call	1018fb8 <find_first_empty_record_in_a_subdirectory>
 1019548:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 101954c:	e0bff817 	ldw	r2,-32(fp)
 1019550:	1004803a 	cmplt	r2,r2,zero
 1019554:	1000941e 	bne	r2,zero,10197a8 <create_file+0x2c0>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 1019558:	e13ffb17 	ldw	r4,-20(fp)
 101955c:	10180f00 	call	10180f0 <get_dir_divider_location>
 1019560:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 1019564:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 1019568:	00000b06 	br	1019598 <create_file+0xb0>
				last_dir_separator = last_dir_separator + location + 1;
 101956c:	e0fff517 	ldw	r3,-44(fp)
 1019570:	e0bff617 	ldw	r2,-40(fp)
 1019574:	1885883a 	add	r2,r3,r2
 1019578:	10800044 	addi	r2,r2,1
 101957c:	e0bff515 	stw	r2,-44(fp)
				location
 1019580:	e0bff517 	ldw	r2,-44(fp)
 1019584:	1007883a 	mov	r3,r2
 1019588:	e0bffb17 	ldw	r2,-20(fp)
 101958c:	1889883a 	add	r4,r3,r2
 1019590:	10180f00 	call	10180f0 <get_dir_divider_location>
 1019594:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 1019598:	e0bff617 	ldw	r2,-40(fp)
 101959c:	10800048 	cmpgei	r2,r2,1
 10195a0:	103ff21e 	bne	r2,zero,101956c <create_file+0x84>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 10195a4:	e0bff517 	ldw	r2,-44(fp)
 10195a8:	1007883a 	mov	r3,r2
 10195ac:	e0bffb17 	ldw	r2,-20(fp)
 10195b0:	1889883a 	add	r4,r3,r2
 10195b4:	e0bffc17 	ldw	r2,-16(fp)
 10195b8:	100b883a 	mov	r5,r2
 10195bc:	e0bffc17 	ldw	r2,-16(fp)
 10195c0:	10800204 	addi	r2,r2,8
 10195c4:	100d883a 	mov	r6,r2
 10195c8:	10193300 	call	1019330 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 10195cc:	e0bffc17 	ldw	r2,-16(fp)
 10195d0:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 10195d4:	e0bffc17 	ldw	r2,-16(fp)
 10195d8:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 10195dc:	e0bffc17 	ldw	r2,-16(fp)
 10195e0:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 10195e4:	e0bffc17 	ldw	r2,-16(fp)
 10195e8:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 10195ec:	e0bffc17 	ldw	r2,-16(fp)
 10195f0:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 10195f4:	e0bffc17 	ldw	r2,-16(fp)
 10195f8:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 10195fc:	e0bffa17 	ldw	r2,-24(fp)
 1019600:	1007883a 	mov	r3,r2
 1019604:	e0bffc17 	ldw	r2,-16(fp)
 1019608:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 101960c:	e0bffc17 	ldw	r2,-16(fp)
 1019610:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 1019614:	e0fffa17 	ldw	r3,-24(fp)
 1019618:	e0bffc17 	ldw	r2,-16(fp)
 101961c:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 1019620:	e0bffc17 	ldw	r2,-16(fp)
 1019624:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 1019628:	e0bffc17 	ldw	r2,-16(fp)
 101962c:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 1019630:	e0bff817 	ldw	r2,-32(fp)
 1019634:	10ffffcc 	andi	r3,r2,65535
 1019638:	e0bffc17 	ldw	r2,-16(fp)
 101963c:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 1019640:	e0bff817 	ldw	r2,-32(fp)
 1019644:	1005d43a 	srai	r2,r2,16
 1019648:	10bfffcc 	andi	r2,r2,65535
 101964c:	e0bfff15 	stw	r2,-4(fp)
 1019650:	e0ffff17 	ldw	r3,-4(fp)
 1019654:	1804403a 	cmpge	r2,r3,zero
 1019658:	1000031e 	bne	r2,zero,1019668 <create_file+0x180>
 101965c:	e0bfff17 	ldw	r2,-4(fp)
 1019660:	108003c4 	addi	r2,r2,15
 1019664:	e0bfff15 	stw	r2,-4(fp)
 1019668:	e0ffff17 	ldw	r3,-4(fp)
 101966c:	1805d13a 	srai	r2,r3,4
 1019670:	1007883a 	mov	r3,r2
 1019674:	e0bffc17 	ldw	r2,-16(fp)
 1019678:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 101967c:	e0bff817 	ldw	r2,-32(fp)
 1019680:	1005d43a 	srai	r2,r2,16
 1019684:	108003cc 	andi	r2,r2,15
 1019688:	1004917a 	slli	r2,r2,5
 101968c:	1007883a 	mov	r3,r2
 1019690:	e0bffc17 	ldw	r2,-16(fp)
 1019694:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 1019698:	e0bffd17 	ldw	r2,-12(fp)
 101969c:	1080058b 	ldhu	r2,22(r2)
 10196a0:	10ffffcc 	andi	r3,r2,65535
 10196a4:	e0bffc17 	ldw	r2,-16(fp)
 10196a8:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 10196ac:	e0fffc17 	ldw	r3,-16(fp)
 10196b0:	00800044 	movi	r2,1
 10196b4:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 10196b8:	e0fffc17 	ldw	r3,-16(fp)
 10196bc:	00800044 	movi	r2,1
 10196c0:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
 10196c4:	e0bffc17 	ldw	r2,-16(fp)
 10196c8:	10800a17 	ldw	r2,40(r2)
 10196cc:	1004c03a 	cmpne	r2,r2,zero
 10196d0:	1000081e 	bne	r2,zero,10196f4 <create_file+0x20c>
 10196d4:	00804434 	movhi	r2,272
 10196d8:	1085d504 	addi	r2,r2,5972
 10196dc:	10c01317 	ldw	r3,76(r2)
 10196e0:	e0bffc17 	ldw	r2,-16(fp)
 10196e4:	10800b17 	ldw	r2,44(r2)
 10196e8:	1887883a 	add	r3,r3,r2
 10196ec:	e0fffe15 	stw	r3,-8(fp)
 10196f0:	00001006 	br	1019734 <create_file+0x24c>
 10196f4:	00804434 	movhi	r2,272
 10196f8:	1085d504 	addi	r2,r2,5972
 10196fc:	14001417 	ldw	r16,80(r2)
 1019700:	e0bffc17 	ldw	r2,-16(fp)
 1019704:	10800a17 	ldw	r2,40(r2)
 1019708:	113fff84 	addi	r4,r2,-2
 101970c:	00804434 	movhi	r2,272
 1019710:	1085d504 	addi	r2,r2,5972
 1019714:	10800383 	ldbu	r2,14(r2)
 1019718:	11403fcc 	andi	r5,r2,255
 101971c:	10026440 	call	1002644 <__mulsi3>
 1019720:	8087883a 	add	r3,r16,r2
 1019724:	e0bffc17 	ldw	r2,-16(fp)
 1019728:	10800b17 	ldw	r2,44(r2)
 101972c:	1887883a 	add	r3,r3,r2
 1019730:	e0fffe15 	stw	r3,-8(fp)
 1019734:	e0bffe17 	ldw	r2,-8(fp)
 1019738:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 101973c:	e13ff717 	ldw	r4,-36(fp)
 1019740:	d1674117 	ldw	r5,-25340(gp)
 1019744:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1019748:	1005003a 	cmpeq	r2,r2,zero
 101974c:	1000161e 	bne	r2,zero,10197a8 <create_file+0x2c0>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
 1019750:	e0bffc17 	ldw	r2,-16(fp)
 1019754:	10800c0b 	ldhu	r2,48(r2)
 1019758:	113fffcc 	andi	r4,r2,65535
 101975c:	2120001c 	xori	r4,r4,32768
 1019760:	21200004 	addi	r4,r4,-32768
 1019764:	e17ffc17 	ldw	r5,-16(fp)
 1019768:	101738c0 	call	101738c <Write_File_Record_At_Offset>
 101976c:	1005003a 	cmpeq	r2,r2,zero
 1019770:	10000d1e 	bne	r2,zero,10197a8 <create_file+0x2c0>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
 1019774:	1016c700 	call	1016c70 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 1019778:	e13ffa17 	ldw	r4,-24(fp)
 101977c:	017fffc4 	movi	r5,-1
 1019780:	01800044 	movi	r6,1
 1019784:	1016e740 	call	1016e74 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 1019788:	e13ffa17 	ldw	r4,-24(fp)
 101978c:	017fffc4 	movi	r5,-1
 1019790:	000d883a 	mov	r6,zero
 1019794:	1016e740 	call	1016e74 <mark_cluster>
 1019798:	1005003a 	cmpeq	r2,r2,zero
 101979c:	1000021e 	bne	r2,zero,10197a8 <create_file+0x2c0>
							false)) {
						result = true;
 10197a0:	00800044 	movi	r2,1
 10197a4:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 10197a8:	e0bff917 	ldw	r2,-28(fp)
}
 10197ac:	e037883a 	mov	sp,fp
 10197b0:	dfc00217 	ldw	ra,8(sp)
 10197b4:	df000117 	ldw	fp,4(sp)
 10197b8:	dc000017 	ldw	r16,0(sp)
 10197bc:	dec00304 	addi	sp,sp,12
 10197c0:	f800283a 	ret

010197c4 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 10197c4:	defffb04 	addi	sp,sp,-20
 10197c8:	df000415 	stw	fp,16(sp)
 10197cc:	df000404 	addi	fp,sp,16
 10197d0:	e13ffe15 	stw	r4,-8(fp)
 10197d4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 10197d8:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 10197dc:	e03ffd15 	stw	zero,-12(fp)
 10197e0:	00001606 	br	101983c <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 10197e4:	e0fffd17 	ldw	r3,-12(fp)
 10197e8:	e0bffe17 	ldw	r2,-8(fp)
 10197ec:	10c5883a 	add	r2,r2,r3
 10197f0:	10800003 	ldbu	r2,0(r2)
 10197f4:	10803fcc 	andi	r2,r2,255
 10197f8:	10800820 	cmpeqi	r2,r2,32
 10197fc:	10000c1e 	bne	r2,zero,1019830 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 1019800:	e0bffc17 	ldw	r2,-16(fp)
 1019804:	1007883a 	mov	r3,r2
 1019808:	e0bfff17 	ldw	r2,-4(fp)
 101980c:	1889883a 	add	r4,r3,r2
 1019810:	e0fffd17 	ldw	r3,-12(fp)
 1019814:	e0bffe17 	ldw	r2,-8(fp)
 1019818:	10c5883a 	add	r2,r2,r3
 101981c:	10800003 	ldbu	r2,0(r2)
 1019820:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 1019824:	e0bffc17 	ldw	r2,-16(fp)
 1019828:	10800044 	addi	r2,r2,1
 101982c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 1019830:	e0bffd17 	ldw	r2,-12(fp)
 1019834:	10800044 	addi	r2,r2,1
 1019838:	e0bffd15 	stw	r2,-12(fp)
 101983c:	e0bffd17 	ldw	r2,-12(fp)
 1019840:	10800210 	cmplti	r2,r2,8
 1019844:	103fe71e 	bne	r2,zero,10197e4 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 1019848:	e0bffe17 	ldw	r2,-8(fp)
 101984c:	10800203 	ldbu	r2,8(r2)
 1019850:	10803fcc 	andi	r2,r2,255
 1019854:	10800820 	cmpeqi	r2,r2,32
 1019858:	1000261e 	bne	r2,zero,10198f4 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 101985c:	e0bffc17 	ldw	r2,-16(fp)
 1019860:	1007883a 	mov	r3,r2
 1019864:	e0bfff17 	ldw	r2,-4(fp)
 1019868:	1887883a 	add	r3,r3,r2
 101986c:	00800b84 	movi	r2,46
 1019870:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 1019874:	e0bffc17 	ldw	r2,-16(fp)
 1019878:	10800044 	addi	r2,r2,1
 101987c:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 1019880:	e03ffd15 	stw	zero,-12(fp)
 1019884:	00001806 	br	10198e8 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 1019888:	e0fffd17 	ldw	r3,-12(fp)
 101988c:	e0bffe17 	ldw	r2,-8(fp)
 1019890:	1885883a 	add	r2,r3,r2
 1019894:	10800204 	addi	r2,r2,8
 1019898:	10800003 	ldbu	r2,0(r2)
 101989c:	10803fcc 	andi	r2,r2,255
 10198a0:	10800820 	cmpeqi	r2,r2,32
 10198a4:	10000d1e 	bne	r2,zero,10198dc <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 10198a8:	e0bffc17 	ldw	r2,-16(fp)
 10198ac:	1007883a 	mov	r3,r2
 10198b0:	e0bfff17 	ldw	r2,-4(fp)
 10198b4:	1889883a 	add	r4,r3,r2
 10198b8:	e0fffd17 	ldw	r3,-12(fp)
 10198bc:	e0bffe17 	ldw	r2,-8(fp)
 10198c0:	1885883a 	add	r2,r3,r2
 10198c4:	10800204 	addi	r2,r2,8
 10198c8:	10800003 	ldbu	r2,0(r2)
 10198cc:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 10198d0:	e0bffc17 	ldw	r2,-16(fp)
 10198d4:	10800044 	addi	r2,r2,1
 10198d8:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 10198dc:	e0bffd17 	ldw	r2,-12(fp)
 10198e0:	10800044 	addi	r2,r2,1
 10198e4:	e0bffd15 	stw	r2,-12(fp)
 10198e8:	e0bffd17 	ldw	r2,-12(fp)
 10198ec:	108000d0 	cmplti	r2,r2,3
 10198f0:	103fe51e 	bne	r2,zero,1019888 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 10198f4:	e0bffc17 	ldw	r2,-16(fp)
 10198f8:	1007883a 	mov	r3,r2
 10198fc:	e0bfff17 	ldw	r2,-4(fp)
 1019900:	1885883a 	add	r2,r3,r2
 1019904:	10000005 	stb	zero,0(r2)
}
 1019908:	e037883a 	mov	sp,fp
 101990c:	df000017 	ldw	fp,0(sp)
 1019910:	dec00104 	addi	sp,sp,4
 1019914:	f800283a 	ret

01019918 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 1019918:	defffc04 	addi	sp,sp,-16
 101991c:	dfc00315 	stw	ra,12(sp)
 1019920:	df000215 	stw	fp,8(sp)
 1019924:	df000204 	addi	fp,sp,8
 1019928:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 101992c:	e13fff17 	ldw	r4,-4(fp)
 1019930:	014040b4 	movhi	r5,258
 1019934:	297a4404 	addi	r5,r5,-5872
 1019938:	101b3a00 	call	101b3a0 <alt_find_dev>
 101993c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 1019940:	e0bffe17 	ldw	r2,-8(fp)
 1019944:	1005003a 	cmpeq	r2,r2,zero
 1019948:	10001e1e 	bne	r2,zero,10199c4 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 101994c:	e0bffe17 	ldw	r2,-8(fp)
 1019950:	10800a17 	ldw	r2,40(r2)
 1019954:	10808d04 	addi	r2,r2,564
 1019958:	d0a73b15 	stw	r2,-25364(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 101995c:	e0bffe17 	ldw	r2,-8(fp)
 1019960:	10800a17 	ldw	r2,40(r2)
 1019964:	10808904 	addi	r2,r2,548
 1019968:	d0a73c15 	stw	r2,-25360(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 101996c:	e0bffe17 	ldw	r2,-8(fp)
 1019970:	10800a17 	ldw	r2,40(r2)
 1019974:	10808404 	addi	r2,r2,528
 1019978:	d0a73d15 	stw	r2,-25356(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 101997c:	e0bffe17 	ldw	r2,-8(fp)
 1019980:	10800a17 	ldw	r2,40(r2)
 1019984:	10808c04 	addi	r2,r2,560
 1019988:	d0a73e15 	stw	r2,-25352(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 101998c:	e0bffe17 	ldw	r2,-8(fp)
 1019990:	10800a17 	ldw	r2,40(r2)
 1019994:	10808b04 	addi	r2,r2,556
 1019998:	d0a73f15 	stw	r2,-25348(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 101999c:	e0bffe17 	ldw	r2,-8(fp)
 10199a0:	10800a17 	ldw	r2,40(r2)
 10199a4:	d0a74015 	stw	r2,-25344(gp)
		device_pointer = dev;
 10199a8:	e0bffe17 	ldw	r2,-8(fp)
 10199ac:	d0a74315 	stw	r2,-25332(gp)
		initialized = false;
 10199b0:	d0273915 	stw	zero,-25372(gp)
		is_sd_card_formated_as_FAT16 = false;
 10199b4:	d0273a15 	stw	zero,-25368(gp)
		search_data.valid = false;
 10199b8:	00804434 	movhi	r2,272
 10199bc:	1085d004 	addi	r2,r2,5952
 10199c0:	10000415 	stw	zero,16(r2)
	}
	return dev;
 10199c4:	e0bffe17 	ldw	r2,-8(fp)
}
 10199c8:	e037883a 	mov	sp,fp
 10199cc:	dfc00117 	ldw	ra,4(sp)
 10199d0:	df000017 	ldw	fp,0(sp)
 10199d4:	dec00204 	addi	sp,sp,8
 10199d8:	f800283a 	ret

010199dc <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 10199dc:	defffd04 	addi	sp,sp,-12
 10199e0:	df000215 	stw	fp,8(sp)
 10199e4:	df000204 	addi	fp,sp,8
	bool result = false;
 10199e8:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
 10199ec:	d0a74317 	ldw	r2,-25332(gp)
 10199f0:	1005003a 	cmpeq	r2,r2,zero
 10199f4:	1000081e 	bne	r2,zero,1019a18 <alt_up_sd_card_is_Present+0x3c>
 10199f8:	d0a73b17 	ldw	r2,-25364(gp)
 10199fc:	1080002b 	ldhuio	r2,0(r2)
 1019a00:	1080008c 	andi	r2,r2,2
 1019a04:	1005003a 	cmpeq	r2,r2,zero
 1019a08:	1000031e 	bne	r2,zero,1019a18 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
 1019a0c:	00800044 	movi	r2,1
 1019a10:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
 1019a14:	00001e06 	br	1019a90 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 1019a18:	d0a73917 	ldw	r2,-25372(gp)
 1019a1c:	10800058 	cmpnei	r2,r2,1
 1019a20:	10001b1e 	bne	r2,zero,1019a90 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 1019a24:	d0273915 	stw	zero,-25372(gp)
		search_data.valid = false;
 1019a28:	00804434 	movhi	r2,272
 1019a2c:	1085d004 	addi	r2,r2,5952
 1019a30:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 1019a34:	d0273a15 	stw	zero,-25368(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1019a38:	e03ffe15 	stw	zero,-8(fp)
 1019a3c:	00001106 	br	1019a84 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 1019a40:	e0bffe17 	ldw	r2,-8(fp)
 1019a44:	00c04434 	movhi	r3,272
 1019a48:	18c5ea04 	addi	r3,r3,6056
 1019a4c:	100491ba 	slli	r2,r2,6
 1019a50:	10c5883a 	add	r2,r2,r3
 1019a54:	10800f04 	addi	r2,r2,60
 1019a58:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 1019a5c:	e0bffe17 	ldw	r2,-8(fp)
 1019a60:	00c04434 	movhi	r3,272
 1019a64:	18c5ea04 	addi	r3,r3,6056
 1019a68:	100491ba 	slli	r2,r2,6
 1019a6c:	10c5883a 	add	r2,r2,r3
 1019a70:	10800e04 	addi	r2,r2,56
 1019a74:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 1019a78:	e0bffe17 	ldw	r2,-8(fp)
 1019a7c:	10800044 	addi	r2,r2,1
 1019a80:	e0bffe15 	stw	r2,-8(fp)
 1019a84:	e0bffe17 	ldw	r2,-8(fp)
 1019a88:	10800510 	cmplti	r2,r2,20
 1019a8c:	103fec1e 	bne	r2,zero,1019a40 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 1019a90:	e0bfff17 	ldw	r2,-4(fp)
}
 1019a94:	e037883a 	mov	sp,fp
 1019a98:	df000017 	ldw	fp,0(sp)
 1019a9c:	dec00104 	addi	sp,sp,4
 1019aa0:	f800283a 	ret

01019aa4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 1019aa4:	defffd04 	addi	sp,sp,-12
 1019aa8:	dfc00215 	stw	ra,8(sp)
 1019aac:	df000115 	stw	fp,4(sp)
 1019ab0:	df000104 	addi	fp,sp,4
	bool result = false;
 1019ab4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 1019ab8:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1019abc:	1005003a 	cmpeq	r2,r2,zero
 1019ac0:	10000d1e 	bne	r2,zero,1019af8 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 1019ac4:	d0a73917 	ldw	r2,-25372(gp)
 1019ac8:	1004c03a 	cmpne	r2,r2,zero
 1019acc:	1000071e 	bne	r2,zero,1019aec <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 1019ad0:	1017c8c0 	call	1017c8c <Look_for_FAT16>
 1019ad4:	d0a73a15 	stw	r2,-25368(gp)
			initialized = is_sd_card_formated_as_FAT16;
 1019ad8:	d0a73a17 	ldw	r2,-25368(gp)
 1019adc:	d0a73915 	stw	r2,-25372(gp)
			search_data.valid = false;
 1019ae0:	00804434 	movhi	r2,272
 1019ae4:	1085d004 	addi	r2,r2,5952
 1019ae8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 1019aec:	d0a73a17 	ldw	r2,-25368(gp)
 1019af0:	e0bfff15 	stw	r2,-4(fp)
 1019af4:	00000206 	br	1019b00 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 1019af8:	d0273915 	stw	zero,-25372(gp)
		is_sd_card_formated_as_FAT16 = false;
 1019afc:	d0273a15 	stw	zero,-25368(gp)
	}

	return result;
 1019b00:	e0bfff17 	ldw	r2,-4(fp)
}
 1019b04:	e037883a 	mov	sp,fp
 1019b08:	dfc00117 	ldw	ra,4(sp)
 1019b0c:	df000017 	ldw	fp,0(sp)
 1019b10:	dec00204 	addi	sp,sp,8
 1019b14:	f800283a 	ret

01019b18 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 1019b18:	deffea04 	addi	sp,sp,-88
 1019b1c:	dfc01515 	stw	ra,84(sp)
 1019b20:	df001415 	stw	fp,80(sp)
 1019b24:	df001404 	addi	fp,sp,80
 1019b28:	e13ffe15 	stw	r4,-8(fp)
 1019b2c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 1019b30:	00800084 	movi	r2,2
 1019b34:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1019b38:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1019b3c:	1005003a 	cmpeq	r2,r2,zero
 1019b40:	1000241e 	bne	r2,zero,1019bd4 <alt_up_sd_card_find_first+0xbc>
 1019b44:	d0a73a17 	ldw	r2,-25368(gp)
 1019b48:	1005003a 	cmpeq	r2,r2,zero
 1019b4c:	1000211e 	bne	r2,zero,1019bd4 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 1019b50:	e17fed04 	addi	r5,fp,-76
 1019b54:	e1bfee04 	addi	r6,fp,-72
 1019b58:	e13ffe17 	ldw	r4,-8(fp)
 1019b5c:	101849c0 	call	101849c <get_home_directory_cluster_for_file>
 1019b60:	1005003a 	cmpeq	r2,r2,zero
 1019b64:	1000191e 	bne	r2,zero,1019bcc <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 1019b68:	e0bfed17 	ldw	r2,-76(fp)
 1019b6c:	1007883a 	mov	r3,r2
 1019b70:	00804434 	movhi	r2,272
 1019b74:	1085d004 	addi	r2,r2,5952
 1019b78:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 1019b7c:	e0bfed17 	ldw	r2,-76(fp)
 1019b80:	1007883a 	mov	r3,r2
 1019b84:	00804434 	movhi	r2,272
 1019b88:	1085d004 	addi	r2,r2,5952
 1019b8c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 1019b90:	00804434 	movhi	r2,272
 1019b94:	1085d004 	addi	r2,r2,5952
 1019b98:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 1019b9c:	00c04434 	movhi	r3,272
 1019ba0:	18c5d004 	addi	r3,r3,5952
 1019ba4:	00bfffc4 	movi	r2,-1
 1019ba8:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 1019bac:	00c04434 	movhi	r3,272
 1019bb0:	18c5d004 	addi	r3,r3,5952
 1019bb4:	00800044 	movi	r2,1
 1019bb8:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 1019bbc:	e13fff17 	ldw	r4,-4(fp)
 1019bc0:	1019bec0 	call	1019bec <alt_up_sd_card_find_next>
 1019bc4:	e0bfec0d 	sth	r2,-80(fp)
 1019bc8:	00000206 	br	1019bd4 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 1019bcc:	00800044 	movi	r2,1
 1019bd0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 1019bd4:	e0bfec0f 	ldh	r2,-80(fp)
}
 1019bd8:	e037883a 	mov	sp,fp
 1019bdc:	dfc00117 	ldw	ra,4(sp)
 1019be0:	df000017 	ldw	fp,0(sp)
 1019be4:	dec00204 	addi	sp,sp,8
 1019be8:	f800283a 	ret

01019bec <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 1019bec:	deffe404 	addi	sp,sp,-112
 1019bf0:	dfc01b15 	stw	ra,108(sp)
 1019bf4:	df001a15 	stw	fp,104(sp)
 1019bf8:	df001a04 	addi	fp,sp,104
 1019bfc:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 1019c00:	00800084 	movi	r2,2
 1019c04:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1019c08:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1019c0c:	1005003a 	cmpeq	r2,r2,zero
 1019c10:	1000da1e 	bne	r2,zero,1019f7c <alt_up_sd_card_find_next+0x390>
 1019c14:	d0a73a17 	ldw	r2,-25368(gp)
 1019c18:	1005003a 	cmpeq	r2,r2,zero
 1019c1c:	1000d71e 	bne	r2,zero,1019f7c <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 1019c20:	00804434 	movhi	r2,272
 1019c24:	1085d004 	addi	r2,r2,5952
 1019c28:	10800417 	ldw	r2,16(r2)
 1019c2c:	1005003a 	cmpeq	r2,r2,zero
 1019c30:	1000d01e 	bne	r2,zero,1019f74 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 1019c34:	00804434 	movhi	r2,272
 1019c38:	1085d004 	addi	r2,r2,5952
 1019c3c:	10800117 	ldw	r2,4(r2)
 1019c40:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 1019c44:	e0bfec17 	ldw	r2,-80(fp)
 1019c48:	1004c03a 	cmpne	r2,r2,zero
 1019c4c:	1000511e 	bne	r2,zero,1019d94 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 1019c50:	00804434 	movhi	r2,272
 1019c54:	1085d504 	addi	r2,r2,5972
 1019c58:	1080050b 	ldhu	r2,20(r2)
 1019c5c:	10bfffcc 	andi	r2,r2,65535
 1019c60:	1008917a 	slli	r4,r2,5
 1019c64:	00804434 	movhi	r2,272
 1019c68:	1085d504 	addi	r2,r2,5972
 1019c6c:	1080030b 	ldhu	r2,12(r2)
 1019c70:	117fffcc 	andi	r5,r2,65535
 1019c74:	10025740 	call	1002574 <__divsi3>
 1019c78:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 1019c7c:	00804434 	movhi	r2,272
 1019c80:	1085d004 	addi	r2,r2,5952
 1019c84:	10800217 	ldw	r2,8(r2)
 1019c88:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 1019c8c:	00804434 	movhi	r2,272
 1019c90:	1085d004 	addi	r2,r2,5952
 1019c94:	1080030b 	ldhu	r2,12(r2)
 1019c98:	10bfffcc 	andi	r2,r2,65535
 1019c9c:	10a0001c 	xori	r2,r2,32768
 1019ca0:	10a00004 	addi	r2,r2,-32768
 1019ca4:	10800044 	addi	r2,r2,1
 1019ca8:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1019cac:	00003306 	br	1019d7c <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
 1019cb0:	00804434 	movhi	r2,272
 1019cb4:	1085d504 	addi	r2,r2,5972
 1019cb8:	10c01317 	ldw	r3,76(r2)
 1019cbc:	e0bfea17 	ldw	r2,-88(fp)
 1019cc0:	1885883a 	add	r2,r3,r2
 1019cc4:	1009883a 	mov	r4,r2
 1019cc8:	d1674117 	ldw	r5,-25340(gp)
 1019ccc:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1019cd0:	1005003a 	cmpeq	r2,r2,zero
 1019cd4:	10002c1e 	bne	r2,zero,1019d88 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1019cd8:	00002106 	br	1019d60 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 1019cdc:	e0bfe917 	ldw	r2,-92(fp)
 1019ce0:	1008917a 	slli	r4,r2,5
 1019ce4:	e1ffea17 	ldw	r7,-88(fp)
 1019ce8:	e17fee04 	addi	r5,fp,-72
 1019cec:	000d883a 	mov	r6,zero
 1019cf0:	10171080 	call	1017108 <Read_File_Record_At_Offset>
 1019cf4:	1005003a 	cmpeq	r2,r2,zero
 1019cf8:	1000161e 	bne	r2,zero,1019d54 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 1019cfc:	e0bfee03 	ldbu	r2,-72(fp)
 1019d00:	10803fcc 	andi	r2,r2,255
 1019d04:	1005003a 	cmpeq	r2,r2,zero
 1019d08:	1000121e 	bne	r2,zero,1019d54 <alt_up_sd_card_find_next+0x168>
 1019d0c:	e0bfee03 	ldbu	r2,-72(fp)
 1019d10:	10803fcc 	andi	r2,r2,255
 1019d14:	10803960 	cmpeqi	r2,r2,229
 1019d18:	10000e1e 	bne	r2,zero,1019d54 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
 1019d1c:	e0bfe917 	ldw	r2,-92(fp)
 1019d20:	1007883a 	mov	r3,r2
 1019d24:	00804434 	movhi	r2,272
 1019d28:	1085d004 	addi	r2,r2,5952
 1019d2c:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
 1019d30:	e0ffea17 	ldw	r3,-88(fp)
 1019d34:	00804434 	movhi	r2,272
 1019d38:	1085d004 	addi	r2,r2,5952
 1019d3c:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 1019d40:	e13fee04 	addi	r4,fp,-72
 1019d44:	e17ffe17 	ldw	r5,-8(fp)
 1019d48:	10197c40 	call	10197c4 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 1019d4c:	e03fff15 	stw	zero,-4(fp)
 1019d50:	00008c06 	br	1019f84 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 1019d54:	e0bfe917 	ldw	r2,-92(fp)
 1019d58:	10800044 	addi	r2,r2,1
 1019d5c:	e0bfe915 	stw	r2,-92(fp)
 1019d60:	e0bfe917 	ldw	r2,-92(fp)
 1019d64:	10800410 	cmplti	r2,r2,16
 1019d68:	103fdc1e 	bne	r2,zero,1019cdc <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 1019d6c:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 1019d70:	e0bfea17 	ldw	r2,-88(fp)
 1019d74:	10800044 	addi	r2,r2,1
 1019d78:	e0bfea15 	stw	r2,-88(fp)
 1019d7c:	e0ffea17 	ldw	r3,-88(fp)
 1019d80:	e0bfeb17 	ldw	r2,-84(fp)
 1019d84:	18bfca16 	blt	r3,r2,1019cb0 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 1019d88:	00bfffc4 	movi	r2,-1
 1019d8c:	e0bfed0d 	sth	r2,-76(fp)
 1019d90:	00007a06 	br	1019f7c <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 1019d94:	00804434 	movhi	r2,272
 1019d98:	1085d004 	addi	r2,r2,5952
 1019d9c:	1080030b 	ldhu	r2,12(r2)
 1019da0:	10bfffcc 	andi	r2,r2,65535
 1019da4:	10a0001c 	xori	r2,r2,32768
 1019da8:	10a00004 	addi	r2,r2,-32768
 1019dac:	10800044 	addi	r2,r2,1
 1019db0:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 1019db4:	e0bfec17 	ldw	r2,-80(fp)
 1019db8:	113fff84 	addi	r4,r2,-2
 1019dbc:	00804434 	movhi	r2,272
 1019dc0:	1085d504 	addi	r2,r2,5972
 1019dc4:	10800383 	ldbu	r2,14(r2)
 1019dc8:	11403fcc 	andi	r5,r2,255
 1019dcc:	10026440 	call	1002644 <__mulsi3>
 1019dd0:	1007883a 	mov	r3,r2
 1019dd4:	00804434 	movhi	r2,272
 1019dd8:	1085d504 	addi	r2,r2,5972
 1019ddc:	10801417 	ldw	r2,80(r2)
 1019de0:	1885883a 	add	r2,r3,r2
 1019de4:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 1019de8:	00804434 	movhi	r2,272
 1019dec:	1085d004 	addi	r2,r2,5952
 1019df0:	10800217 	ldw	r2,8(r2)
 1019df4:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
 1019df8:	00003406 	br	1019ecc <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
 1019dfc:	e0ffe617 	ldw	r3,-104(fp)
 1019e00:	e0bfe717 	ldw	r2,-100(fp)
 1019e04:	1889883a 	add	r4,r3,r2
 1019e08:	d1674117 	ldw	r5,-25340(gp)
 1019e0c:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 1019e10:	1005003a 	cmpeq	r2,r2,zero
 1019e14:	1000331e 	bne	r2,zero,1019ee4 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1019e18:	00002506 	br	1019eb0 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
 1019e1c:	e0bfe817 	ldw	r2,-96(fp)
 1019e20:	1008917a 	slli	r4,r2,5
 1019e24:	e1bfec17 	ldw	r6,-80(fp)
 1019e28:	e1ffe617 	ldw	r7,-104(fp)
 1019e2c:	e17fee04 	addi	r5,fp,-72
 1019e30:	10171080 	call	1017108 <Read_File_Record_At_Offset>
 1019e34:	1005003a 	cmpeq	r2,r2,zero
 1019e38:	10001a1e 	bne	r2,zero,1019ea4 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
 1019e3c:	e0bfee03 	ldbu	r2,-72(fp)
 1019e40:	10803fcc 	andi	r2,r2,255
 1019e44:	1005003a 	cmpeq	r2,r2,zero
 1019e48:	1000161e 	bne	r2,zero,1019ea4 <alt_up_sd_card_find_next+0x2b8>
 1019e4c:	e0bfee03 	ldbu	r2,-72(fp)
 1019e50:	10803fcc 	andi	r2,r2,255
 1019e54:	10803960 	cmpeqi	r2,r2,229
 1019e58:	1000121e 	bne	r2,zero,1019ea4 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
 1019e5c:	e0ffec17 	ldw	r3,-80(fp)
 1019e60:	00804434 	movhi	r2,272
 1019e64:	1085d004 	addi	r2,r2,5952
 1019e68:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
 1019e6c:	e0bfe817 	ldw	r2,-96(fp)
 1019e70:	1007883a 	mov	r3,r2
 1019e74:	00804434 	movhi	r2,272
 1019e78:	1085d004 	addi	r2,r2,5952
 1019e7c:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
 1019e80:	e0ffe617 	ldw	r3,-104(fp)
 1019e84:	00804434 	movhi	r2,272
 1019e88:	1085d004 	addi	r2,r2,5952
 1019e8c:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 1019e90:	e13fee04 	addi	r4,fp,-72
 1019e94:	e17ffe17 	ldw	r5,-8(fp)
 1019e98:	10197c40 	call	10197c4 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 1019e9c:	e03fff15 	stw	zero,-4(fp)
 1019ea0:	00003806 	br	1019f84 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 1019ea4:	e0bfe817 	ldw	r2,-96(fp)
 1019ea8:	10800044 	addi	r2,r2,1
 1019eac:	e0bfe815 	stw	r2,-96(fp)
 1019eb0:	e0bfe817 	ldw	r2,-96(fp)
 1019eb4:	10800410 	cmplti	r2,r2,16
 1019eb8:	103fd81e 	bne	r2,zero,1019e1c <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 1019ebc:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
 1019ec0:	e0bfe617 	ldw	r2,-104(fp)
 1019ec4:	10800044 	addi	r2,r2,1
 1019ec8:	e0bfe615 	stw	r2,-104(fp)
 1019ecc:	00804434 	movhi	r2,272
 1019ed0:	1085d504 	addi	r2,r2,5972
 1019ed4:	10800383 	ldbu	r2,14(r2)
 1019ed8:	10c03fcc 	andi	r3,r2,255
 1019edc:	e0bfe617 	ldw	r2,-104(fp)
 1019ee0:	10ffc616 	blt	r2,r3,1019dfc <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 1019ee4:	00804434 	movhi	r2,272
 1019ee8:	1085d504 	addi	r2,r2,5972
 1019eec:	10800383 	ldbu	r2,14(r2)
 1019ef0:	10c03fcc 	andi	r3,r2,255
 1019ef4:	e0bfe617 	ldw	r2,-104(fp)
 1019ef8:	10c01a16 	blt	r2,r3,1019f64 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 1019efc:	e13fec17 	ldw	r4,-80(fp)
 1019f00:	e17fed84 	addi	r5,fp,-74
 1019f04:	1016dbc0 	call	1016dbc <get_cluster_flag>
 1019f08:	1005003a 	cmpeq	r2,r2,zero
 1019f0c:	1000131e 	bne	r2,zero,1019f5c <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 1019f10:	e0bfed8b 	ldhu	r2,-74(fp)
 1019f14:	10bfffcc 	andi	r2,r2,65535
 1019f18:	10a0001c 	xori	r2,r2,32768
 1019f1c:	10a00004 	addi	r2,r2,-32768
 1019f20:	10fffe0c 	andi	r3,r2,65528
 1019f24:	00bffe14 	movui	r2,65528
 1019f28:	1880051e 	bne	r3,r2,1019f40 <alt_up_sd_card_find_next+0x354>
								result = -1;
 1019f2c:	00bfffc4 	movi	r2,-1
 1019f30:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 1019f34:	00804434 	movhi	r2,272
 1019f38:	1085d004 	addi	r2,r2,5952
 1019f3c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1019f40:	e0bfed8b 	ldhu	r2,-74(fp)
 1019f44:	10bfffcc 	andi	r2,r2,65535
 1019f48:	10a0001c 	xori	r2,r2,32768
 1019f4c:	10a00004 	addi	r2,r2,-32768
 1019f50:	10bffe0c 	andi	r2,r2,65528
 1019f54:	e0bfec15 	stw	r2,-80(fp)
 1019f58:	00000206 	br	1019f64 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 1019f5c:	00bfffc4 	movi	r2,-1
 1019f60:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 1019f64:	e0ffec17 	ldw	r3,-80(fp)
 1019f68:	00bffdd4 	movui	r2,65527
 1019f6c:	10ff910e 	bge	r2,r3,1019db4 <alt_up_sd_card_find_next+0x1c8>
 1019f70:	00000206 	br	1019f7c <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 1019f74:	008000c4 	movi	r2,3
 1019f78:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1019f7c:	e0bfed0f 	ldh	r2,-76(fp)
 1019f80:	e0bfff15 	stw	r2,-4(fp)
 1019f84:	e0bfff17 	ldw	r2,-4(fp)
}
 1019f88:	e037883a 	mov	sp,fp
 1019f8c:	dfc00117 	ldw	ra,4(sp)
 1019f90:	df000017 	ldw	fp,0(sp)
 1019f94:	dec00204 	addi	sp,sp,8
 1019f98:	f800283a 	ret

01019f9c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1019f9c:	deffe804 	addi	sp,sp,-96
 1019fa0:	dfc01715 	stw	ra,92(sp)
 1019fa4:	df001615 	stw	fp,88(sp)
 1019fa8:	df001604 	addi	fp,sp,88
 1019fac:	e13ffd15 	stw	r4,-12(fp)
 1019fb0:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 1019fb4:	00bfffc4 	movi	r2,-1
 1019fb8:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 1019fbc:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 1019fc0:	1005003a 	cmpeq	r2,r2,zero
 1019fc4:	1000d71e 	bne	r2,zero,101a324 <alt_up_sd_card_fopen+0x388>
 1019fc8:	d0a73a17 	ldw	r2,-25368(gp)
 1019fcc:	1005003a 	cmpeq	r2,r2,zero
 1019fd0:	1000d41e 	bne	r2,zero,101a324 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 1019fd4:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 1019fd8:	e13ffd17 	ldw	r4,-12(fp)
 1019fdc:	1017d900 	call	1017d90 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 1019fe0:	e13ffd17 	ldw	r4,-12(fp)
 1019fe4:	1017e600 	call	1017e60 <check_file_name_for_FAT16_compliance>
 1019fe8:	1005003a 	cmpeq	r2,r2,zero
 1019fec:	1000cd1e 	bne	r2,zero,101a324 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 1019ff0:	e17fec04 	addi	r5,fp,-80
 1019ff4:	e1bfed04 	addi	r6,fp,-76
 1019ff8:	e13ffd17 	ldw	r4,-12(fp)
 1019ffc:	101849c0 	call	101849c <get_home_directory_cluster_for_file>
 101a000:	1004c03a 	cmpne	r2,r2,zero
 101a004:	1000031e 	bne	r2,zero,101a014 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 101a008:	e0bfeb0f 	ldh	r2,-84(fp)
 101a00c:	e0bfff15 	stw	r2,-4(fp)
 101a010:	0000c606 	br	101a32c <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101a014:	e03fea15 	stw	zero,-88(fp)
 101a018:	00000f06 	br	101a058 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 101a01c:	e0bfea17 	ldw	r2,-88(fp)
 101a020:	00c04434 	movhi	r3,272
 101a024:	18c5ea04 	addi	r3,r3,6056
 101a028:	100491ba 	slli	r2,r2,6
 101a02c:	10c5883a 	add	r2,r2,r3
 101a030:	10800f04 	addi	r2,r2,60
 101a034:	10800017 	ldw	r2,0(r2)
 101a038:	1004c03a 	cmpne	r2,r2,zero
 101a03c:	1000031e 	bne	r2,zero,101a04c <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 101a040:	e0bfea17 	ldw	r2,-88(fp)
 101a044:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 101a048:	00000606 	br	101a064 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101a04c:	e0bfea17 	ldw	r2,-88(fp)
 101a050:	10800044 	addi	r2,r2,1
 101a054:	e0bfea15 	stw	r2,-88(fp)
 101a058:	e0bfea17 	ldw	r2,-88(fp)
 101a05c:	10800510 	cmplti	r2,r2,20
 101a060:	103fee1e 	bne	r2,zero,101a01c <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 101a064:	e0bfeb0f 	ldh	r2,-84(fp)
 101a068:	1004803a 	cmplt	r2,r2,zero
 101a06c:	1000ad1e 	bne	r2,zero,101a324 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 101a070:	e0bfec17 	ldw	r2,-80(fp)
 101a074:	1009883a 	mov	r4,r2
 101a078:	e0bfeb0f 	ldh	r2,-84(fp)
 101a07c:	100491ba 	slli	r2,r2,6
 101a080:	1007883a 	mov	r3,r2
 101a084:	00804434 	movhi	r2,272
 101a088:	1085ea04 	addi	r2,r2,6056
 101a08c:	188d883a 	add	r6,r3,r2
 101a090:	e17ffd17 	ldw	r5,-12(fp)
 101a094:	10189b00 	call	10189b0 <find_file_in_directory>
 101a098:	1005003a 	cmpeq	r2,r2,zero
 101a09c:	10007d1e 	bne	r2,zero,101a294 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 101a0a0:	e0bffe17 	ldw	r2,-8(fp)
 101a0a4:	1005003a 	cmpeq	r2,r2,zero
 101a0a8:	1000031e 	bne	r2,zero,101a0b8 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 101a0ac:	00bfffc4 	movi	r2,-1
 101a0b0:	e0bfff15 	stw	r2,-4(fp)
 101a0b4:	00009d06 	br	101a32c <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
 101a0b8:	e17feb0f 	ldh	r5,-84(fp)
 101a0bc:	e0bfeb0f 	ldh	r2,-84(fp)
 101a0c0:	00c04434 	movhi	r3,272
 101a0c4:	18c5ea04 	addi	r3,r3,6056
 101a0c8:	100491ba 	slli	r2,r2,6
 101a0cc:	10c5883a 	add	r2,r2,r3
 101a0d0:	10800504 	addi	r2,r2,20
 101a0d4:	1080008b 	ldhu	r2,2(r2)
 101a0d8:	113fffcc 	andi	r4,r2,65535
 101a0dc:	00c04434 	movhi	r3,272
 101a0e0:	18c5ea04 	addi	r3,r3,6056
 101a0e4:	280491ba 	slli	r2,r5,6
 101a0e8:	10c5883a 	add	r2,r2,r3
 101a0ec:	10800704 	addi	r2,r2,28
 101a0f0:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
 101a0f4:	e0bfeb0f 	ldh	r2,-84(fp)
 101a0f8:	00c04434 	movhi	r3,272
 101a0fc:	18c5ea04 	addi	r3,r3,6056
 101a100:	100491ba 	slli	r2,r2,6
 101a104:	10c5883a 	add	r2,r2,r3
 101a108:	10800804 	addi	r2,r2,32
 101a10c:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
 101a110:	e0bfeb0f 	ldh	r2,-84(fp)
 101a114:	00c04434 	movhi	r3,272
 101a118:	18c5ea04 	addi	r3,r3,6056
 101a11c:	100491ba 	slli	r2,r2,6
 101a120:	10c5883a 	add	r2,r2,r3
 101a124:	10800904 	addi	r2,r2,36
 101a128:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 101a12c:	e0bfeb0f 	ldh	r2,-84(fp)
 101a130:	00c04434 	movhi	r3,272
 101a134:	18c5ea04 	addi	r3,r3,6056
 101a138:	100491ba 	slli	r2,r2,6
 101a13c:	10c5883a 	add	r2,r2,r3
 101a140:	10c00f04 	addi	r3,r2,60
 101a144:	00800044 	movi	r2,1
 101a148:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 101a14c:	e0bfeb0f 	ldh	r2,-84(fp)
 101a150:	00c04434 	movhi	r3,272
 101a154:	18c5ea04 	addi	r3,r3,6056
 101a158:	100491ba 	slli	r2,r2,6
 101a15c:	10c5883a 	add	r2,r2,r3
 101a160:	10800e04 	addi	r2,r2,56
 101a164:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 101a168:	e03fea15 	stw	zero,-88(fp)
 101a16c:	00004506 	br	101a284 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 101a170:	e0ffeb0f 	ldh	r3,-84(fp)
 101a174:	e0bfea17 	ldw	r2,-88(fp)
 101a178:	18803f26 	beq	r3,r2,101a278 <alt_up_sd_card_fopen+0x2dc>
 101a17c:	e0bfea17 	ldw	r2,-88(fp)
 101a180:	00c04434 	movhi	r3,272
 101a184:	18c5ea04 	addi	r3,r3,6056
 101a188:	100491ba 	slli	r2,r2,6
 101a18c:	10c5883a 	add	r2,r2,r3
 101a190:	10800f04 	addi	r2,r2,60
 101a194:	10800017 	ldw	r2,0(r2)
 101a198:	10800058 	cmpnei	r2,r2,1
 101a19c:	1000361e 	bne	r2,zero,101a278 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 101a1a0:	e0bfeb0f 	ldh	r2,-84(fp)
 101a1a4:	00c04434 	movhi	r3,272
 101a1a8:	18c5ea04 	addi	r3,r3,6056
 101a1ac:	100491ba 	slli	r2,r2,6
 101a1b0:	10c5883a 	add	r2,r2,r3
 101a1b4:	10800a04 	addi	r2,r2,40
 101a1b8:	11000017 	ldw	r4,0(r2)
 101a1bc:	e0bfea17 	ldw	r2,-88(fp)
 101a1c0:	00c04434 	movhi	r3,272
 101a1c4:	18c5ea04 	addi	r3,r3,6056
 101a1c8:	100491ba 	slli	r2,r2,6
 101a1cc:	10c5883a 	add	r2,r2,r3
 101a1d0:	10800a04 	addi	r2,r2,40
 101a1d4:	10800017 	ldw	r2,0(r2)
 101a1d8:	2080271e 	bne	r4,r2,101a278 <alt_up_sd_card_fopen+0x2dc>
 101a1dc:	e0bfeb0f 	ldh	r2,-84(fp)
 101a1e0:	00c04434 	movhi	r3,272
 101a1e4:	18c5ea04 	addi	r3,r3,6056
 101a1e8:	100491ba 	slli	r2,r2,6
 101a1ec:	10c5883a 	add	r2,r2,r3
 101a1f0:	10800b04 	addi	r2,r2,44
 101a1f4:	11000017 	ldw	r4,0(r2)
 101a1f8:	e0bfea17 	ldw	r2,-88(fp)
 101a1fc:	00c04434 	movhi	r3,272
 101a200:	18c5ea04 	addi	r3,r3,6056
 101a204:	100491ba 	slli	r2,r2,6
 101a208:	10c5883a 	add	r2,r2,r3
 101a20c:	10800b04 	addi	r2,r2,44
 101a210:	10800017 	ldw	r2,0(r2)
 101a214:	2080181e 	bne	r4,r2,101a278 <alt_up_sd_card_fopen+0x2dc>
 101a218:	e0bfeb0f 	ldh	r2,-84(fp)
 101a21c:	00c04434 	movhi	r3,272
 101a220:	18c5ea04 	addi	r3,r3,6056
 101a224:	100491ba 	slli	r2,r2,6
 101a228:	10c5883a 	add	r2,r2,r3
 101a22c:	10800c04 	addi	r2,r2,48
 101a230:	1100000b 	ldhu	r4,0(r2)
 101a234:	e0bfea17 	ldw	r2,-88(fp)
 101a238:	00c04434 	movhi	r3,272
 101a23c:	18c5ea04 	addi	r3,r3,6056
 101a240:	100491ba 	slli	r2,r2,6
 101a244:	10c5883a 	add	r2,r2,r3
 101a248:	10800c04 	addi	r2,r2,48
 101a24c:	1080000b 	ldhu	r2,0(r2)
 101a250:	20ffffcc 	andi	r3,r4,65535
 101a254:	18e0001c 	xori	r3,r3,32768
 101a258:	18e00004 	addi	r3,r3,-32768
 101a25c:	10bfffcc 	andi	r2,r2,65535
 101a260:	10a0001c 	xori	r2,r2,32768
 101a264:	10a00004 	addi	r2,r2,-32768
 101a268:	1880031e 	bne	r3,r2,101a278 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 101a26c:	00bfff84 	movi	r2,-2
 101a270:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 101a274:	00002b06 	br	101a324 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 101a278:	e0bfea17 	ldw	r2,-88(fp)
 101a27c:	10800044 	addi	r2,r2,1
 101a280:	e0bfea15 	stw	r2,-88(fp)
 101a284:	e0bfea17 	ldw	r2,-88(fp)
 101a288:	10800510 	cmplti	r2,r2,20
 101a28c:	103fb81e 	bne	r2,zero,101a170 <alt_up_sd_card_fopen+0x1d4>
 101a290:	00002406 	br	101a324 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 101a294:	e0bffe17 	ldw	r2,-8(fp)
 101a298:	1005003a 	cmpeq	r2,r2,zero
 101a29c:	10001f1e 	bne	r2,zero,101a31c <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 101a2a0:	e0bfeb0f 	ldh	r2,-84(fp)
 101a2a4:	100491ba 	slli	r2,r2,6
 101a2a8:	1007883a 	mov	r3,r2
 101a2ac:	00804434 	movhi	r2,272
 101a2b0:	1085ea04 	addi	r2,r2,6056
 101a2b4:	188b883a 	add	r5,r3,r2
 101a2b8:	e1bfed04 	addi	r6,fp,-76
 101a2bc:	e13ffd17 	ldw	r4,-12(fp)
 101a2c0:	10194e80 	call	10194e8 <create_file>
 101a2c4:	1005003a 	cmpeq	r2,r2,zero
 101a2c8:	1000111e 	bne	r2,zero,101a310 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 101a2cc:	e0bfeb0f 	ldh	r2,-84(fp)
 101a2d0:	00c04434 	movhi	r3,272
 101a2d4:	18c5ea04 	addi	r3,r3,6056
 101a2d8:	100491ba 	slli	r2,r2,6
 101a2dc:	10c5883a 	add	r2,r2,r3
 101a2e0:	10c00f04 	addi	r3,r2,60
 101a2e4:	00800044 	movi	r2,1
 101a2e8:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 101a2ec:	e0bfeb0f 	ldh	r2,-84(fp)
 101a2f0:	00c04434 	movhi	r3,272
 101a2f4:	18c5ea04 	addi	r3,r3,6056
 101a2f8:	100491ba 	slli	r2,r2,6
 101a2fc:	10c5883a 	add	r2,r2,r3
 101a300:	10c00e04 	addi	r3,r2,56
 101a304:	00800044 	movi	r2,1
 101a308:	18800015 	stw	r2,0(r3)
 101a30c:	00000506 	br	101a324 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 101a310:	00bfffc4 	movi	r2,-1
 101a314:	e0bfeb0d 	sth	r2,-84(fp)
 101a318:	00000206 	br	101a324 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 101a31c:	00bfffc4 	movi	r2,-1
 101a320:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 101a324:	e0bfeb0f 	ldh	r2,-84(fp)
 101a328:	e0bfff15 	stw	r2,-4(fp)
 101a32c:	e0bfff17 	ldw	r2,-4(fp)
}
 101a330:	e037883a 	mov	sp,fp
 101a334:	dfc00117 	ldw	ra,4(sp)
 101a338:	df000017 	ldw	fp,0(sp)
 101a33c:	dec00204 	addi	sp,sp,8
 101a340:	f800283a 	ret

0101a344 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 101a344:	defffd04 	addi	sp,sp,-12
 101a348:	df000215 	stw	fp,8(sp)
 101a34c:	df000204 	addi	fp,sp,8
 101a350:	e13ffe0d 	sth	r4,-8(fp)
 101a354:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101a358:	e0bffe0f 	ldh	r2,-8(fp)
 101a35c:	1004803a 	cmplt	r2,r2,zero
 101a360:	1000181e 	bne	r2,zero,101a3c4 <alt_up_sd_card_set_attributes+0x80>
 101a364:	e0bffe0f 	ldh	r2,-8(fp)
 101a368:	10800508 	cmpgei	r2,r2,20
 101a36c:	1000151e 	bne	r2,zero,101a3c4 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 101a370:	e0bffe0f 	ldh	r2,-8(fp)
 101a374:	00c04434 	movhi	r3,272
 101a378:	18c5ea04 	addi	r3,r3,6056
 101a37c:	100491ba 	slli	r2,r2,6
 101a380:	10c5883a 	add	r2,r2,r3
 101a384:	10800f04 	addi	r2,r2,60
 101a388:	10800017 	ldw	r2,0(r2)
 101a38c:	1005003a 	cmpeq	r2,r2,zero
 101a390:	10000c1e 	bne	r2,zero,101a3c4 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
 101a394:	e17ffe0f 	ldh	r5,-8(fp)
 101a398:	e0bfff0b 	ldhu	r2,-4(fp)
 101a39c:	1007883a 	mov	r3,r2
 101a3a0:	00bfffc4 	movi	r2,-1
 101a3a4:	1884703a 	and	r2,r3,r2
 101a3a8:	1009883a 	mov	r4,r2
 101a3ac:	00c04434 	movhi	r3,272
 101a3b0:	18c5ea04 	addi	r3,r3,6056
 101a3b4:	280491ba 	slli	r2,r5,6
 101a3b8:	10c5883a 	add	r2,r2,r3
 101a3bc:	10800204 	addi	r2,r2,8
 101a3c0:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
 101a3c4:	e037883a 	mov	sp,fp
 101a3c8:	df000017 	ldw	fp,0(sp)
 101a3cc:	dec00104 	addi	sp,sp,4
 101a3d0:	f800283a 	ret

0101a3d4 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 101a3d4:	defffd04 	addi	sp,sp,-12
 101a3d8:	df000215 	stw	fp,8(sp)
 101a3dc:	df000204 	addi	fp,sp,8
 101a3e0:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 101a3e4:	00bfffc4 	movi	r2,-1
 101a3e8:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101a3ec:	e0bfff0f 	ldh	r2,-4(fp)
 101a3f0:	1004803a 	cmplt	r2,r2,zero
 101a3f4:	1000151e 	bne	r2,zero,101a44c <alt_up_sd_card_get_attributes+0x78>
 101a3f8:	e0bfff0f 	ldh	r2,-4(fp)
 101a3fc:	10800508 	cmpgei	r2,r2,20
 101a400:	1000121e 	bne	r2,zero,101a44c <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 101a404:	e0bfff0f 	ldh	r2,-4(fp)
 101a408:	00c04434 	movhi	r3,272
 101a40c:	18c5ea04 	addi	r3,r3,6056
 101a410:	100491ba 	slli	r2,r2,6
 101a414:	10c5883a 	add	r2,r2,r3
 101a418:	10800f04 	addi	r2,r2,60
 101a41c:	10800017 	ldw	r2,0(r2)
 101a420:	1005003a 	cmpeq	r2,r2,zero
 101a424:	1000091e 	bne	r2,zero,101a44c <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 101a428:	e0bfff0f 	ldh	r2,-4(fp)
 101a42c:	00c04434 	movhi	r3,272
 101a430:	18c5ea04 	addi	r3,r3,6056
 101a434:	100491ba 	slli	r2,r2,6
 101a438:	10c5883a 	add	r2,r2,r3
 101a43c:	10800204 	addi	r2,r2,8
 101a440:	108000c3 	ldbu	r2,3(r2)
 101a444:	10803fcc 	andi	r2,r2,255
 101a448:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 101a44c:	e0bffe0f 	ldh	r2,-8(fp)
}
 101a450:	e037883a 	mov	sp,fp
 101a454:	df000017 	ldw	fp,0(sp)
 101a458:	dec00104 	addi	sp,sp,4
 101a45c:	f800283a 	ret

0101a460 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 101a460:	defff904 	addi	sp,sp,-28
 101a464:	dfc00615 	stw	ra,24(sp)
 101a468:	df000515 	stw	fp,20(sp)
 101a46c:	dc000415 	stw	r16,16(sp)
 101a470:	df000404 	addi	fp,sp,16
 101a474:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 101a478:	00bfffc4 	movi	r2,-1
 101a47c:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101a480:	e0bffe0f 	ldh	r2,-8(fp)
 101a484:	1004803a 	cmplt	r2,r2,zero
 101a488:	1000d31e 	bne	r2,zero,101a7d8 <alt_up_sd_card_read+0x378>
 101a48c:	e0bffe0f 	ldh	r2,-8(fp)
 101a490:	10800508 	cmpgei	r2,r2,20
 101a494:	1000d01e 	bne	r2,zero,101a7d8 <alt_up_sd_card_read+0x378>
		if (active_files[file_handle].in_use) {
 101a498:	e0bffe0f 	ldh	r2,-8(fp)
 101a49c:	00c04434 	movhi	r3,272
 101a4a0:	18c5ea04 	addi	r3,r3,6056
 101a4a4:	100491ba 	slli	r2,r2,6
 101a4a8:	10c5883a 	add	r2,r2,r3
 101a4ac:	10800f04 	addi	r2,r2,60
 101a4b0:	10800017 	ldw	r2,0(r2)
 101a4b4:	1005003a 	cmpeq	r2,r2,zero
 101a4b8:	1000c71e 	bne	r2,zero,101a7d8 <alt_up_sd_card_read+0x378>
			if (active_files[file_handle].current_byte_position
 101a4bc:	e0bffe0f 	ldh	r2,-8(fp)
 101a4c0:	00c04434 	movhi	r3,272
 101a4c4:	18c5ea04 	addi	r3,r3,6056
 101a4c8:	100491ba 	slli	r2,r2,6
 101a4cc:	10c5883a 	add	r2,r2,r3
 101a4d0:	10800904 	addi	r2,r2,36
 101a4d4:	11000017 	ldw	r4,0(r2)
 101a4d8:	e0bffe0f 	ldh	r2,-8(fp)
 101a4dc:	00c04434 	movhi	r3,272
 101a4e0:	18c5ea04 	addi	r3,r3,6056
 101a4e4:	100491ba 	slli	r2,r2,6
 101a4e8:	10c5883a 	add	r2,r2,r3
 101a4ec:	10800604 	addi	r2,r2,24
 101a4f0:	10800017 	ldw	r2,0(r2)
 101a4f4:	2080b82e 	bgeu	r4,r2,101a7d8 <alt_up_sd_card_read+0x378>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 101a4f8:	00804434 	movhi	r2,272
 101a4fc:	1085d504 	addi	r2,r2,5972
 101a500:	14001417 	ldw	r16,80(r2)
 101a504:	e0bffe0f 	ldh	r2,-8(fp)
 101a508:	00c04434 	movhi	r3,272
 101a50c:	18c5ea04 	addi	r3,r3,6056
 101a510:	100491ba 	slli	r2,r2,6
 101a514:	10c5883a 	add	r2,r2,r3
 101a518:	10800704 	addi	r2,r2,28
 101a51c:	10800017 	ldw	r2,0(r2)
 101a520:	113fff84 	addi	r4,r2,-2
 101a524:	00804434 	movhi	r2,272
 101a528:	1085d504 	addi	r2,r2,5972
 101a52c:	10800383 	ldbu	r2,14(r2)
 101a530:	11403fcc 	andi	r5,r2,255
 101a534:	10026440 	call	1002644 <__mulsi3>
 101a538:	8089883a 	add	r4,r16,r2
 101a53c:	e0bffe0f 	ldh	r2,-8(fp)
 101a540:	00c04434 	movhi	r3,272
 101a544:	18c5ea04 	addi	r3,r3,6056
 101a548:	100491ba 	slli	r2,r2,6
 101a54c:	10c5883a 	add	r2,r2,r3
 101a550:	10800804 	addi	r2,r2,32
 101a554:	10800017 	ldw	r2,0(r2)
 101a558:	2085883a 	add	r2,r4,r2
 101a55c:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 101a560:	e0bffe0f 	ldh	r2,-8(fp)
 101a564:	00c04434 	movhi	r3,272
 101a568:	18c5ea04 	addi	r3,r3,6056
 101a56c:	100491ba 	slli	r2,r2,6
 101a570:	10c5883a 	add	r2,r2,r3
 101a574:	10800904 	addi	r2,r2,36
 101a578:	10800017 	ldw	r2,0(r2)
 101a57c:	1005003a 	cmpeq	r2,r2,zero
 101a580:	10006a1e 	bne	r2,zero,101a72c <alt_up_sd_card_read+0x2cc>
 101a584:	e0bffe0f 	ldh	r2,-8(fp)
 101a588:	00c04434 	movhi	r3,272
 101a58c:	18c5ea04 	addi	r3,r3,6056
 101a590:	100491ba 	slli	r2,r2,6
 101a594:	10c5883a 	add	r2,r2,r3
 101a598:	10800904 	addi	r2,r2,36
 101a59c:	10800017 	ldw	r2,0(r2)
 101a5a0:	10807fcc 	andi	r2,r2,511
 101a5a4:	1004c03a 	cmpne	r2,r2,zero
 101a5a8:	1000601e 	bne	r2,zero,101a72c <alt_up_sd_card_read+0x2cc>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101a5ac:	e0bffe0f 	ldh	r2,-8(fp)
 101a5b0:	00c04434 	movhi	r3,272
 101a5b4:	18c5ea04 	addi	r3,r3,6056
 101a5b8:	100491ba 	slli	r2,r2,6
 101a5bc:	10c5883a 	add	r2,r2,r3
 101a5c0:	10800804 	addi	r2,r2,32
 101a5c4:	10c00017 	ldw	r3,0(r2)
 101a5c8:	00804434 	movhi	r2,272
 101a5cc:	1085d504 	addi	r2,r2,5972
 101a5d0:	10800383 	ldbu	r2,14(r2)
 101a5d4:	10803fcc 	andi	r2,r2,255
 101a5d8:	10bfffc4 	addi	r2,r2,-1
 101a5dc:	1880411e 	bne	r3,r2,101a6e4 <alt_up_sd_card_read+0x284>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 101a5e0:	e0bffe0f 	ldh	r2,-8(fp)
 101a5e4:	00c04434 	movhi	r3,272
 101a5e8:	18c5ea04 	addi	r3,r3,6056
 101a5ec:	100491ba 	slli	r2,r2,6
 101a5f0:	10c5883a 	add	r2,r2,r3
 101a5f4:	10800704 	addi	r2,r2,28
 101a5f8:	11000017 	ldw	r4,0(r2)
 101a5fc:	e17ffd84 	addi	r5,fp,-10
 101a600:	1016dbc0 	call	1016dbc <get_cluster_flag>
 101a604:	1005003a 	cmpeq	r2,r2,zero
 101a608:	1000331e 	bne	r2,zero,101a6d8 <alt_up_sd_card_read+0x278>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 101a60c:	e0bffd8b 	ldhu	r2,-10(fp)
 101a610:	10bfffcc 	andi	r2,r2,65535
 101a614:	10fffe0c 	andi	r3,r2,65528
 101a618:	00bffe14 	movui	r2,65528
 101a61c:	1880031e 	bne	r3,r2,101a62c <alt_up_sd_card_read+0x1cc>
								/* End of file */
								return -1;
 101a620:	00bfffc4 	movi	r2,-1
 101a624:	e0bfff15 	stw	r2,-4(fp)
 101a628:	00006d06 	br	101a7e0 <alt_up_sd_card_read+0x380>
							} else {
								active_files[file_handle].current_cluster_index
 101a62c:	e13ffe0f 	ldh	r4,-8(fp)
 101a630:	e0bffd8b 	ldhu	r2,-10(fp)
 101a634:	117fffcc 	andi	r5,r2,65535
 101a638:	00c04434 	movhi	r3,272
 101a63c:	18c5ea04 	addi	r3,r3,6056
 101a640:	200491ba 	slli	r2,r4,6
 101a644:	10c5883a 	add	r2,r2,r3
 101a648:	10800704 	addi	r2,r2,28
 101a64c:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
 101a650:	e0bffe0f 	ldh	r2,-8(fp)
 101a654:	00c04434 	movhi	r3,272
 101a658:	18c5ea04 	addi	r3,r3,6056
 101a65c:	100491ba 	slli	r2,r2,6
 101a660:	10c5883a 	add	r2,r2,r3
 101a664:	10800804 	addi	r2,r2,32
 101a668:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
 101a66c:	00804434 	movhi	r2,272
 101a670:	1085d504 	addi	r2,r2,5972
 101a674:	14001417 	ldw	r16,80(r2)
 101a678:	e0bffe0f 	ldh	r2,-8(fp)
 101a67c:	00c04434 	movhi	r3,272
 101a680:	18c5ea04 	addi	r3,r3,6056
 101a684:	100491ba 	slli	r2,r2,6
 101a688:	10c5883a 	add	r2,r2,r3
 101a68c:	10800704 	addi	r2,r2,28
 101a690:	10800017 	ldw	r2,0(r2)
 101a694:	113fff84 	addi	r4,r2,-2
 101a698:	00804434 	movhi	r2,272
 101a69c:	1085d504 	addi	r2,r2,5972
 101a6a0:	10800383 	ldbu	r2,14(r2)
 101a6a4:	11403fcc 	andi	r5,r2,255
 101a6a8:	10026440 	call	1002644 <__mulsi3>
 101a6ac:	8089883a 	add	r4,r16,r2
 101a6b0:	e0bffe0f 	ldh	r2,-8(fp)
 101a6b4:	00c04434 	movhi	r3,272
 101a6b8:	18c5ea04 	addi	r3,r3,6056
 101a6bc:	100491ba 	slli	r2,r2,6
 101a6c0:	10c5883a 	add	r2,r2,r3
 101a6c4:	10800804 	addi	r2,r2,32
 101a6c8:	10800017 	ldw	r2,0(r2)
 101a6cc:	2085883a 	add	r2,r4,r2
 101a6d0:	e0bffc15 	stw	r2,-16(fp)
 101a6d4:	00001506 	br	101a72c <alt_up_sd_card_read+0x2cc>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 101a6d8:	00bfff84 	movi	r2,-2
 101a6dc:	e0bfff15 	stw	r2,-4(fp)
 101a6e0:	00003f06 	br	101a7e0 <alt_up_sd_card_read+0x380>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 101a6e4:	e17ffe0f 	ldh	r5,-8(fp)
 101a6e8:	e0bffe0f 	ldh	r2,-8(fp)
 101a6ec:	00c04434 	movhi	r3,272
 101a6f0:	18c5ea04 	addi	r3,r3,6056
 101a6f4:	100491ba 	slli	r2,r2,6
 101a6f8:	10c5883a 	add	r2,r2,r3
 101a6fc:	10800804 	addi	r2,r2,32
 101a700:	10800017 	ldw	r2,0(r2)
 101a704:	11000044 	addi	r4,r2,1
 101a708:	00c04434 	movhi	r3,272
 101a70c:	18c5ea04 	addi	r3,r3,6056
 101a710:	280491ba 	slli	r2,r5,6
 101a714:	10c5883a 	add	r2,r2,r3
 101a718:	10800804 	addi	r2,r2,32
 101a71c:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 101a720:	e0bffc17 	ldw	r2,-16(fp)
 101a724:	10800044 	addi	r2,r2,1
 101a728:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
 101a72c:	d0e74117 	ldw	r3,-25340(gp)
 101a730:	e0bffc17 	ldw	r2,-16(fp)
 101a734:	1885883a 	add	r2,r3,r2
 101a738:	1007883a 	mov	r3,r2
 101a73c:	d0a74517 	ldw	r2,-25324(gp)
 101a740:	18800826 	beq	r3,r2,101a764 <alt_up_sd_card_read+0x304>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 101a744:	d1674117 	ldw	r5,-25340(gp)
 101a748:	e13ffc17 	ldw	r4,-16(fp)
 101a74c:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 101a750:	1004c03a 	cmpne	r2,r2,zero
 101a754:	1000031e 	bne	r2,zero,101a764 <alt_up_sd_card_read+0x304>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 101a758:	00bfff84 	movi	r2,-2
 101a75c:	e0bfff15 	stw	r2,-4(fp)
 101a760:	00001f06 	br	101a7e0 <alt_up_sd_card_read+0x380>
					}
				}

				ch
 101a764:	e0bffe0f 	ldh	r2,-8(fp)
 101a768:	00c04434 	movhi	r3,272
 101a76c:	18c5ea04 	addi	r3,r3,6056
 101a770:	100491ba 	slli	r2,r2,6
 101a774:	10c5883a 	add	r2,r2,r3
 101a778:	10800904 	addi	r2,r2,36
 101a77c:	10800017 	ldw	r2,0(r2)
 101a780:	10807fcc 	andi	r2,r2,511
 101a784:	1007883a 	mov	r3,r2
 101a788:	d0a74017 	ldw	r2,-25344(gp)
 101a78c:	1885883a 	add	r2,r3,r2
 101a790:	10800023 	ldbuio	r2,0(r2)
 101a794:	10803fcc 	andi	r2,r2,255
 101a798:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
 101a79c:	e17ffe0f 	ldh	r5,-8(fp)
 101a7a0:	e0bffe0f 	ldh	r2,-8(fp)
 101a7a4:	00c04434 	movhi	r3,272
 101a7a8:	18c5ea04 	addi	r3,r3,6056
 101a7ac:	100491ba 	slli	r2,r2,6
 101a7b0:	10c5883a 	add	r2,r2,r3
 101a7b4:	10800904 	addi	r2,r2,36
 101a7b8:	10800017 	ldw	r2,0(r2)
 101a7bc:	11000044 	addi	r4,r2,1
 101a7c0:	00c04434 	movhi	r3,272
 101a7c4:	18c5ea04 	addi	r3,r3,6056
 101a7c8:	280491ba 	slli	r2,r5,6
 101a7cc:	10c5883a 	add	r2,r2,r3
 101a7d0:	10800904 	addi	r2,r2,36
 101a7d4:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 101a7d8:	e0bffd0f 	ldh	r2,-12(fp)
 101a7dc:	e0bfff15 	stw	r2,-4(fp)
 101a7e0:	e0bfff17 	ldw	r2,-4(fp)
}
 101a7e4:	e037883a 	mov	sp,fp
 101a7e8:	dfc00217 	ldw	ra,8(sp)
 101a7ec:	df000117 	ldw	fp,4(sp)
 101a7f0:	dc000017 	ldw	r16,0(sp)
 101a7f4:	dec00304 	addi	sp,sp,12
 101a7f8:	f800283a 	ret

0101a7fc <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 101a7fc:	defff504 	addi	sp,sp,-44
 101a800:	dfc00a15 	stw	ra,40(sp)
 101a804:	df000915 	stw	fp,36(sp)
 101a808:	dc000815 	stw	r16,32(sp)
 101a80c:	df000804 	addi	fp,sp,32
 101a810:	e13ffd0d 	sth	r4,-12(fp)
 101a814:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 101a818:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101a81c:	e0bffd0f 	ldh	r2,-12(fp)
 101a820:	1004803a 	cmplt	r2,r2,zero
 101a824:	1001751e 	bne	r2,zero,101adfc <alt_up_sd_card_write+0x600>
 101a828:	e0bffd0f 	ldh	r2,-12(fp)
 101a82c:	10800508 	cmpgei	r2,r2,20
 101a830:	1001721e 	bne	r2,zero,101adfc <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
 101a834:	e0bffd0f 	ldh	r2,-12(fp)
 101a838:	00c04434 	movhi	r3,272
 101a83c:	18c5ea04 	addi	r3,r3,6056
 101a840:	100491ba 	slli	r2,r2,6
 101a844:	10c5883a 	add	r2,r2,r3
 101a848:	10800f04 	addi	r2,r2,60
 101a84c:	10800017 	ldw	r2,0(r2)
 101a850:	1005003a 	cmpeq	r2,r2,zero
 101a854:	1001691e 	bne	r2,zero,101adfc <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 101a858:	00804434 	movhi	r2,272
 101a85c:	1085d504 	addi	r2,r2,5972
 101a860:	14001417 	ldw	r16,80(r2)
 101a864:	e0bffd0f 	ldh	r2,-12(fp)
 101a868:	00c04434 	movhi	r3,272
 101a86c:	18c5ea04 	addi	r3,r3,6056
 101a870:	100491ba 	slli	r2,r2,6
 101a874:	10c5883a 	add	r2,r2,r3
 101a878:	10800704 	addi	r2,r2,28
 101a87c:	10800017 	ldw	r2,0(r2)
 101a880:	113fff84 	addi	r4,r2,-2
 101a884:	00804434 	movhi	r2,272
 101a888:	1085d504 	addi	r2,r2,5972
 101a88c:	10800383 	ldbu	r2,14(r2)
 101a890:	11403fcc 	andi	r5,r2,255
 101a894:	10026440 	call	1002644 <__mulsi3>
 101a898:	8089883a 	add	r4,r16,r2
 101a89c:	e0bffd0f 	ldh	r2,-12(fp)
 101a8a0:	00c04434 	movhi	r3,272
 101a8a4:	18c5ea04 	addi	r3,r3,6056
 101a8a8:	100491ba 	slli	r2,r2,6
 101a8ac:	10c5883a 	add	r2,r2,r3
 101a8b0:	10800804 	addi	r2,r2,32
 101a8b4:	10800017 	ldw	r2,0(r2)
 101a8b8:	2085883a 	add	r2,r4,r2
 101a8bc:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 101a8c0:	e0bffd0f 	ldh	r2,-12(fp)
 101a8c4:	00c04434 	movhi	r3,272
 101a8c8:	18c5ea04 	addi	r3,r3,6056
 101a8cc:	100491ba 	slli	r2,r2,6
 101a8d0:	10c5883a 	add	r2,r2,r3
 101a8d4:	10800904 	addi	r2,r2,36
 101a8d8:	11000017 	ldw	r4,0(r2)
 101a8dc:	00804434 	movhi	r2,272
 101a8e0:	1085d504 	addi	r2,r2,5972
 101a8e4:	1080030b 	ldhu	r2,12(r2)
 101a8e8:	117fffcc 	andi	r5,r2,65535
 101a8ec:	100263c0 	call	100263c <__umodsi3>
 101a8f0:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 101a8f4:	e0bffd0f 	ldh	r2,-12(fp)
 101a8f8:	00c04434 	movhi	r3,272
 101a8fc:	18c5ea04 	addi	r3,r3,6056
 101a900:	100491ba 	slli	r2,r2,6
 101a904:	10c5883a 	add	r2,r2,r3
 101a908:	10800904 	addi	r2,r2,36
 101a90c:	11000017 	ldw	r4,0(r2)
 101a910:	e0bffd0f 	ldh	r2,-12(fp)
 101a914:	00c04434 	movhi	r3,272
 101a918:	18c5ea04 	addi	r3,r3,6056
 101a91c:	100491ba 	slli	r2,r2,6
 101a920:	10c5883a 	add	r2,r2,r3
 101a924:	10800604 	addi	r2,r2,24
 101a928:	10800017 	ldw	r2,0(r2)
 101a92c:	2080682e 	bgeu	r4,r2,101aad0 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 101a930:	e0bffd0f 	ldh	r2,-12(fp)
 101a934:	00c04434 	movhi	r3,272
 101a938:	18c5ea04 	addi	r3,r3,6056
 101a93c:	100491ba 	slli	r2,r2,6
 101a940:	10c5883a 	add	r2,r2,r3
 101a944:	10800904 	addi	r2,r2,36
 101a948:	10800017 	ldw	r2,0(r2)
 101a94c:	1005003a 	cmpeq	r2,r2,zero
 101a950:	1000de1e 	bne	r2,zero,101accc <alt_up_sd_card_write+0x4d0>
 101a954:	e0bff80f 	ldh	r2,-32(fp)
 101a958:	1004c03a 	cmpne	r2,r2,zero
 101a95c:	1000db1e 	bne	r2,zero,101accc <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101a960:	e0bffd0f 	ldh	r2,-12(fp)
 101a964:	00c04434 	movhi	r3,272
 101a968:	18c5ea04 	addi	r3,r3,6056
 101a96c:	100491ba 	slli	r2,r2,6
 101a970:	10c5883a 	add	r2,r2,r3
 101a974:	10800804 	addi	r2,r2,32
 101a978:	10c00017 	ldw	r3,0(r2)
 101a97c:	00804434 	movhi	r2,272
 101a980:	1085d504 	addi	r2,r2,5972
 101a984:	10800383 	ldbu	r2,14(r2)
 101a988:	10803fcc 	andi	r2,r2,255
 101a98c:	10bfffc4 	addi	r2,r2,-1
 101a990:	18803c1e 	bne	r3,r2,101aa84 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 101a994:	e0bffd0f 	ldh	r2,-12(fp)
 101a998:	00c04434 	movhi	r3,272
 101a99c:	18c5ea04 	addi	r3,r3,6056
 101a9a0:	100491ba 	slli	r2,r2,6
 101a9a4:	10c5883a 	add	r2,r2,r3
 101a9a8:	10800704 	addi	r2,r2,28
 101a9ac:	11000017 	ldw	r4,0(r2)
 101a9b0:	e17ffb04 	addi	r5,fp,-20
 101a9b4:	1016dbc0 	call	1016dbc <get_cluster_flag>
 101a9b8:	1005003a 	cmpeq	r2,r2,zero
 101a9bc:	10002f1e 	bne	r2,zero,101aa7c <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 101a9c0:	e0bffb0b 	ldhu	r2,-20(fp)
 101a9c4:	10ffffcc 	andi	r3,r2,65535
 101a9c8:	00bffdd4 	movui	r2,65527
 101a9cc:	10c0bf36 	bltu	r2,r3,101accc <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
 101a9d0:	e13ffd0f 	ldh	r4,-12(fp)
 101a9d4:	e0bffb0b 	ldhu	r2,-20(fp)
 101a9d8:	117fffcc 	andi	r5,r2,65535
 101a9dc:	00c04434 	movhi	r3,272
 101a9e0:	18c5ea04 	addi	r3,r3,6056
 101a9e4:	200491ba 	slli	r2,r4,6
 101a9e8:	10c5883a 	add	r2,r2,r3
 101a9ec:	10800704 	addi	r2,r2,28
 101a9f0:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
 101a9f4:	e0bffd0f 	ldh	r2,-12(fp)
 101a9f8:	00c04434 	movhi	r3,272
 101a9fc:	18c5ea04 	addi	r3,r3,6056
 101aa00:	100491ba 	slli	r2,r2,6
 101aa04:	10c5883a 	add	r2,r2,r3
 101aa08:	10800804 	addi	r2,r2,32
 101aa0c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
 101aa10:	00804434 	movhi	r2,272
 101aa14:	1085d504 	addi	r2,r2,5972
 101aa18:	14001417 	ldw	r16,80(r2)
 101aa1c:	e0bffd0f 	ldh	r2,-12(fp)
 101aa20:	00c04434 	movhi	r3,272
 101aa24:	18c5ea04 	addi	r3,r3,6056
 101aa28:	100491ba 	slli	r2,r2,6
 101aa2c:	10c5883a 	add	r2,r2,r3
 101aa30:	10800704 	addi	r2,r2,28
 101aa34:	10800017 	ldw	r2,0(r2)
 101aa38:	113fff84 	addi	r4,r2,-2
 101aa3c:	00804434 	movhi	r2,272
 101aa40:	1085d504 	addi	r2,r2,5972
 101aa44:	10800383 	ldbu	r2,14(r2)
 101aa48:	11403fcc 	andi	r5,r2,255
 101aa4c:	10026440 	call	1002644 <__mulsi3>
 101aa50:	8089883a 	add	r4,r16,r2
 101aa54:	e0bffd0f 	ldh	r2,-12(fp)
 101aa58:	00c04434 	movhi	r3,272
 101aa5c:	18c5ea04 	addi	r3,r3,6056
 101aa60:	100491ba 	slli	r2,r2,6
 101aa64:	10c5883a 	add	r2,r2,r3
 101aa68:	10800804 	addi	r2,r2,32
 101aa6c:	10800017 	ldw	r2,0(r2)
 101aa70:	2085883a 	add	r2,r4,r2
 101aa74:	e0bff915 	stw	r2,-28(fp)
 101aa78:	00009406 	br	101accc <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 101aa7c:	e03fff15 	stw	zero,-4(fp)
 101aa80:	0000e006 	br	101ae04 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 101aa84:	e17ffd0f 	ldh	r5,-12(fp)
 101aa88:	e0bffd0f 	ldh	r2,-12(fp)
 101aa8c:	00c04434 	movhi	r3,272
 101aa90:	18c5ea04 	addi	r3,r3,6056
 101aa94:	100491ba 	slli	r2,r2,6
 101aa98:	10c5883a 	add	r2,r2,r3
 101aa9c:	10800804 	addi	r2,r2,32
 101aaa0:	10800017 	ldw	r2,0(r2)
 101aaa4:	11000044 	addi	r4,r2,1
 101aaa8:	00c04434 	movhi	r3,272
 101aaac:	18c5ea04 	addi	r3,r3,6056
 101aab0:	280491ba 	slli	r2,r5,6
 101aab4:	10c5883a 	add	r2,r2,r3
 101aab8:	10800804 	addi	r2,r2,32
 101aabc:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 101aac0:	e0bff917 	ldw	r2,-28(fp)
 101aac4:	10800044 	addi	r2,r2,1
 101aac8:	e0bff915 	stw	r2,-28(fp)
 101aacc:	00007f06 	br	101accc <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 101aad0:	e0bffd0f 	ldh	r2,-12(fp)
 101aad4:	00c04434 	movhi	r3,272
 101aad8:	18c5ea04 	addi	r3,r3,6056
 101aadc:	100491ba 	slli	r2,r2,6
 101aae0:	10c5883a 	add	r2,r2,r3
 101aae4:	10800904 	addi	r2,r2,36
 101aae8:	10800017 	ldw	r2,0(r2)
 101aaec:	1005003a 	cmpeq	r2,r2,zero
 101aaf0:	1000761e 	bne	r2,zero,101accc <alt_up_sd_card_write+0x4d0>
 101aaf4:	e0bff80f 	ldh	r2,-32(fp)
 101aaf8:	1004c03a 	cmpne	r2,r2,zero
 101aafc:	1000731e 	bne	r2,zero,101accc <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 101ab00:	e0bffd0f 	ldh	r2,-12(fp)
 101ab04:	00c04434 	movhi	r3,272
 101ab08:	18c5ea04 	addi	r3,r3,6056
 101ab0c:	100491ba 	slli	r2,r2,6
 101ab10:	10c5883a 	add	r2,r2,r3
 101ab14:	10800804 	addi	r2,r2,32
 101ab18:	10c00017 	ldw	r3,0(r2)
 101ab1c:	00804434 	movhi	r2,272
 101ab20:	1085d504 	addi	r2,r2,5972
 101ab24:	10800383 	ldbu	r2,14(r2)
 101ab28:	10803fcc 	andi	r2,r2,255
 101ab2c:	10bfffc4 	addi	r2,r2,-1
 101ab30:	1880381e 	bne	r3,r2,101ac14 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 101ab34:	e13ffc04 	addi	r4,fp,-16
 101ab38:	1018e140 	call	1018e14 <find_first_empty_cluster>
 101ab3c:	1005003a 	cmpeq	r2,r2,zero
 101ab40:	1000321e 	bne	r2,zero,101ac0c <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 101ab44:	e0bffd0f 	ldh	r2,-12(fp)
 101ab48:	00c04434 	movhi	r3,272
 101ab4c:	18c5ea04 	addi	r3,r3,6056
 101ab50:	100491ba 	slli	r2,r2,6
 101ab54:	10c5883a 	add	r2,r2,r3
 101ab58:	10800704 	addi	r2,r2,28
 101ab5c:	11000017 	ldw	r4,0(r2)
 101ab60:	e0bffc17 	ldw	r2,-16(fp)
 101ab64:	117fffcc 	andi	r5,r2,65535
 101ab68:	2960001c 	xori	r5,r5,32768
 101ab6c:	29600004 	addi	r5,r5,-32768
 101ab70:	01800044 	movi	r6,1
 101ab74:	1016e740 	call	1016e74 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 101ab78:	e13ffc17 	ldw	r4,-16(fp)
 101ab7c:	017fffc4 	movi	r5,-1
 101ab80:	01800044 	movi	r6,1
 101ab84:	1016e740 	call	1016e74 <mark_cluster>
							mark_cluster(
 101ab88:	e0bffd0f 	ldh	r2,-12(fp)
 101ab8c:	00c04434 	movhi	r3,272
 101ab90:	18c5ea04 	addi	r3,r3,6056
 101ab94:	100491ba 	slli	r2,r2,6
 101ab98:	10c5883a 	add	r2,r2,r3
 101ab9c:	10800704 	addi	r2,r2,28
 101aba0:	11000017 	ldw	r4,0(r2)
 101aba4:	e0bffc17 	ldw	r2,-16(fp)
 101aba8:	117fffcc 	andi	r5,r2,65535
 101abac:	2960001c 	xori	r5,r5,32768
 101abb0:	29600004 	addi	r5,r5,-32768
 101abb4:	000d883a 	mov	r6,zero
 101abb8:	1016e740 	call	1016e74 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 101abbc:	e13ffc17 	ldw	r4,-16(fp)
 101abc0:	017fffc4 	movi	r5,-1
 101abc4:	000d883a 	mov	r6,zero
 101abc8:	1016e740 	call	1016e74 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
 101abcc:	e0bffd0f 	ldh	r2,-12(fp)
 101abd0:	e13ffc17 	ldw	r4,-16(fp)
 101abd4:	00c04434 	movhi	r3,272
 101abd8:	18c5ea04 	addi	r3,r3,6056
 101abdc:	100491ba 	slli	r2,r2,6
 101abe0:	10c5883a 	add	r2,r2,r3
 101abe4:	10800704 	addi	r2,r2,28
 101abe8:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
 101abec:	e0bffd0f 	ldh	r2,-12(fp)
 101abf0:	00c04434 	movhi	r3,272
 101abf4:	18c5ea04 	addi	r3,r3,6056
 101abf8:	100491ba 	slli	r2,r2,6
 101abfc:	10c5883a 	add	r2,r2,r3
 101ac00:	10800804 	addi	r2,r2,32
 101ac04:	10000015 	stw	zero,0(r2)
 101ac08:	00001606 	br	101ac64 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
 101ac0c:	e03fff15 	stw	zero,-4(fp)
 101ac10:	00007c06 	br	101ae04 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
 101ac14:	e43ffd0f 	ldh	r16,-12(fp)
 101ac18:	e0bffd0f 	ldh	r2,-12(fp)
 101ac1c:	00c04434 	movhi	r3,272
 101ac20:	18c5ea04 	addi	r3,r3,6056
 101ac24:	100491ba 	slli	r2,r2,6
 101ac28:	10c5883a 	add	r2,r2,r3
 101ac2c:	10800904 	addi	r2,r2,36
 101ac30:	11000017 	ldw	r4,0(r2)
 101ac34:	00804434 	movhi	r2,272
 101ac38:	1085d504 	addi	r2,r2,5972
 101ac3c:	1080030b 	ldhu	r2,12(r2)
 101ac40:	117fffcc 	andi	r5,r2,65535
 101ac44:	10026340 	call	1002634 <__udivsi3>
 101ac48:	1009883a 	mov	r4,r2
 101ac4c:	00c04434 	movhi	r3,272
 101ac50:	18c5ea04 	addi	r3,r3,6056
 101ac54:	800491ba 	slli	r2,r16,6
 101ac58:	10c5883a 	add	r2,r2,r3
 101ac5c:	10800804 	addi	r2,r2,32
 101ac60:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
 101ac64:	00804434 	movhi	r2,272
 101ac68:	1085d504 	addi	r2,r2,5972
 101ac6c:	14001417 	ldw	r16,80(r2)
 101ac70:	e0bffd0f 	ldh	r2,-12(fp)
 101ac74:	00c04434 	movhi	r3,272
 101ac78:	18c5ea04 	addi	r3,r3,6056
 101ac7c:	100491ba 	slli	r2,r2,6
 101ac80:	10c5883a 	add	r2,r2,r3
 101ac84:	10800704 	addi	r2,r2,28
 101ac88:	10800017 	ldw	r2,0(r2)
 101ac8c:	113fff84 	addi	r4,r2,-2
 101ac90:	00804434 	movhi	r2,272
 101ac94:	1085d504 	addi	r2,r2,5972
 101ac98:	10800383 	ldbu	r2,14(r2)
 101ac9c:	11403fcc 	andi	r5,r2,255
 101aca0:	10026440 	call	1002644 <__mulsi3>
 101aca4:	8089883a 	add	r4,r16,r2
 101aca8:	e0bffd0f 	ldh	r2,-12(fp)
 101acac:	00c04434 	movhi	r3,272
 101acb0:	18c5ea04 	addi	r3,r3,6056
 101acb4:	100491ba 	slli	r2,r2,6
 101acb8:	10c5883a 	add	r2,r2,r3
 101acbc:	10800804 	addi	r2,r2,32
 101acc0:	10800017 	ldw	r2,0(r2)
 101acc4:	2085883a 	add	r2,r4,r2
 101acc8:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
 101accc:	d0e74117 	ldw	r3,-25340(gp)
 101acd0:	e0bff917 	ldw	r2,-28(fp)
 101acd4:	1885883a 	add	r2,r3,r2
 101acd8:	1007883a 	mov	r3,r2
 101acdc:	d0a74517 	ldw	r2,-25324(gp)
 101ace0:	18800726 	beq	r3,r2,101ad00 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
 101ace4:	d1674117 	ldw	r5,-25340(gp)
 101ace8:	e13ff917 	ldw	r4,-28(fp)
 101acec:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 101acf0:	1004c03a 	cmpne	r2,r2,zero
 101acf4:	1000021e 	bne	r2,zero,101ad00 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 101acf8:	e03fff15 	stw	zero,-4(fp)
 101acfc:	00004106 	br	101ae04 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 101ad00:	e0bff80f 	ldh	r2,-32(fp)
 101ad04:	1007883a 	mov	r3,r2
 101ad08:	d0a74017 	ldw	r2,-25344(gp)
 101ad0c:	1885883a 	add	r2,r3,r2
 101ad10:	e0fffe07 	ldb	r3,-8(fp)
 101ad14:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
 101ad18:	e17ffd0f 	ldh	r5,-12(fp)
 101ad1c:	e0bffd0f 	ldh	r2,-12(fp)
 101ad20:	00c04434 	movhi	r3,272
 101ad24:	18c5ea04 	addi	r3,r3,6056
 101ad28:	100491ba 	slli	r2,r2,6
 101ad2c:	10c5883a 	add	r2,r2,r3
 101ad30:	10800904 	addi	r2,r2,36
 101ad34:	10800017 	ldw	r2,0(r2)
 101ad38:	11000044 	addi	r4,r2,1
 101ad3c:	00c04434 	movhi	r3,272
 101ad40:	18c5ea04 	addi	r3,r3,6056
 101ad44:	280491ba 	slli	r2,r5,6
 101ad48:	10c5883a 	add	r2,r2,r3
 101ad4c:	10800904 	addi	r2,r2,36
 101ad50:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 101ad54:	e0bffd0f 	ldh	r2,-12(fp)
 101ad58:	00c04434 	movhi	r3,272
 101ad5c:	18c5ea04 	addi	r3,r3,6056
 101ad60:	100491ba 	slli	r2,r2,6
 101ad64:	10c5883a 	add	r2,r2,r3
 101ad68:	10800904 	addi	r2,r2,36
 101ad6c:	11000017 	ldw	r4,0(r2)
 101ad70:	e0bffd0f 	ldh	r2,-12(fp)
 101ad74:	00c04434 	movhi	r3,272
 101ad78:	18c5ea04 	addi	r3,r3,6056
 101ad7c:	100491ba 	slli	r2,r2,6
 101ad80:	10c5883a 	add	r2,r2,r3
 101ad84:	10800604 	addi	r2,r2,24
 101ad88:	10800017 	ldw	r2,0(r2)
 101ad8c:	20801736 	bltu	r4,r2,101adec <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
 101ad90:	e17ffd0f 	ldh	r5,-12(fp)
 101ad94:	e0bffd0f 	ldh	r2,-12(fp)
 101ad98:	00c04434 	movhi	r3,272
 101ad9c:	18c5ea04 	addi	r3,r3,6056
 101ada0:	100491ba 	slli	r2,r2,6
 101ada4:	10c5883a 	add	r2,r2,r3
 101ada8:	10800604 	addi	r2,r2,24
 101adac:	10800017 	ldw	r2,0(r2)
 101adb0:	11000044 	addi	r4,r2,1
 101adb4:	00c04434 	movhi	r3,272
 101adb8:	18c5ea04 	addi	r3,r3,6056
 101adbc:	280491ba 	slli	r2,r5,6
 101adc0:	10c5883a 	add	r2,r2,r3
 101adc4:	10800604 	addi	r2,r2,24
 101adc8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 101adcc:	e0bffd0f 	ldh	r2,-12(fp)
 101add0:	00c04434 	movhi	r3,272
 101add4:	18c5ea04 	addi	r3,r3,6056
 101add8:	100491ba 	slli	r2,r2,6
 101addc:	10c5883a 	add	r2,r2,r3
 101ade0:	10c00e04 	addi	r3,r2,56
 101ade4:	00800044 	movi	r2,1
 101ade8:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 101adec:	00800044 	movi	r2,1
 101adf0:	d0a74415 	stw	r2,-25328(gp)
			result = true;
 101adf4:	00800044 	movi	r2,1
 101adf8:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 101adfc:	e0bffa17 	ldw	r2,-24(fp)
 101ae00:	e0bfff15 	stw	r2,-4(fp)
 101ae04:	e0bfff17 	ldw	r2,-4(fp)
}
 101ae08:	e037883a 	mov	sp,fp
 101ae0c:	dfc00217 	ldw	ra,8(sp)
 101ae10:	df000117 	ldw	fp,4(sp)
 101ae14:	dc000017 	ldw	r16,0(sp)
 101ae18:	dec00304 	addi	sp,sp,12
 101ae1c:	f800283a 	ret

0101ae20 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 101ae20:	defffa04 	addi	sp,sp,-24
 101ae24:	dfc00515 	stw	ra,20(sp)
 101ae28:	df000415 	stw	fp,16(sp)
 101ae2c:	dc000315 	stw	r16,12(sp)
 101ae30:	df000304 	addi	fp,sp,12
 101ae34:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
 101ae38:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101ae3c:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 101ae40:	1005003a 	cmpeq	r2,r2,zero
 101ae44:	1000641e 	bne	r2,zero,101afd8 <alt_up_sd_card_fclose+0x1b8>
 101ae48:	d0a73a17 	ldw	r2,-25368(gp)
 101ae4c:	1005003a 	cmpeq	r2,r2,zero
 101ae50:	1000611e 	bne	r2,zero,101afd8 <alt_up_sd_card_fclose+0x1b8>
		if (active_files[file_handle].in_use) {
 101ae54:	e0bfff0f 	ldh	r2,-4(fp)
 101ae58:	00c04434 	movhi	r3,272
 101ae5c:	18c5ea04 	addi	r3,r3,6056
 101ae60:	100491ba 	slli	r2,r2,6
 101ae64:	10c5883a 	add	r2,r2,r3
 101ae68:	10800f04 	addi	r2,r2,60
 101ae6c:	10800017 	ldw	r2,0(r2)
 101ae70:	1005003a 	cmpeq	r2,r2,zero
 101ae74:	1000581e 	bne	r2,zero,101afd8 <alt_up_sd_card_fclose+0x1b8>
			if (active_files[file_handle].modified) {
 101ae78:	e0bfff0f 	ldh	r2,-4(fp)
 101ae7c:	00c04434 	movhi	r3,272
 101ae80:	18c5ea04 	addi	r3,r3,6056
 101ae84:	100491ba 	slli	r2,r2,6
 101ae88:	10c5883a 	add	r2,r2,r3
 101ae8c:	10800e04 	addi	r2,r2,56
 101ae90:	10800017 	ldw	r2,0(r2)
 101ae94:	1005003a 	cmpeq	r2,r2,zero
 101ae98:	1000461e 	bne	r2,zero,101afb4 <alt_up_sd_card_fclose+0x194>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 101ae9c:	e0bfff0f 	ldh	r2,-4(fp)
 101aea0:	00c04434 	movhi	r3,272
 101aea4:	18c5ea04 	addi	r3,r3,6056
 101aea8:	100491ba 	slli	r2,r2,6
 101aeac:	10c5883a 	add	r2,r2,r3
 101aeb0:	10800b04 	addi	r2,r2,44
 101aeb4:	10800017 	ldw	r2,0(r2)
 101aeb8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 101aebc:	e0bfff0f 	ldh	r2,-4(fp)
 101aec0:	00c04434 	movhi	r3,272
 101aec4:	18c5ea04 	addi	r3,r3,6056
 101aec8:	100491ba 	slli	r2,r2,6
 101aecc:	10c5883a 	add	r2,r2,r3
 101aed0:	10800a04 	addi	r2,r2,40
 101aed4:	10800017 	ldw	r2,0(r2)
 101aed8:	1004c03a 	cmpne	r2,r2,zero
 101aedc:	1000071e 	bne	r2,zero,101aefc <alt_up_sd_card_fclose+0xdc>
					record_sector = record_sector
 101aee0:	00804434 	movhi	r2,272
 101aee4:	1085d504 	addi	r2,r2,5972
 101aee8:	10c01317 	ldw	r3,76(r2)
 101aeec:	e0bffd17 	ldw	r2,-12(fp)
 101aef0:	10c5883a 	add	r2,r2,r3
 101aef4:	e0bffd15 	stw	r2,-12(fp)
 101aef8:	00001406 	br	101af4c <alt_up_sd_card_fclose+0x12c>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
 101aefc:	00804434 	movhi	r2,272
 101af00:	1085d504 	addi	r2,r2,5972
 101af04:	10c01417 	ldw	r3,80(r2)
 101af08:	e0bffd17 	ldw	r2,-12(fp)
 101af0c:	18a1883a 	add	r16,r3,r2
 101af10:	e0bfff0f 	ldh	r2,-4(fp)
 101af14:	00c04434 	movhi	r3,272
 101af18:	18c5ea04 	addi	r3,r3,6056
 101af1c:	100491ba 	slli	r2,r2,6
 101af20:	10c5883a 	add	r2,r2,r3
 101af24:	10800a04 	addi	r2,r2,40
 101af28:	10800017 	ldw	r2,0(r2)
 101af2c:	113fff84 	addi	r4,r2,-2
 101af30:	00804434 	movhi	r2,272
 101af34:	1085d504 	addi	r2,r2,5972
 101af38:	10800383 	ldbu	r2,14(r2)
 101af3c:	11403fcc 	andi	r5,r2,255
 101af40:	10026440 	call	1002644 <__mulsi3>
 101af44:	8085883a 	add	r2,r16,r2
 101af48:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 101af4c:	e13ffd17 	ldw	r4,-12(fp)
 101af50:	d1674117 	ldw	r5,-25340(gp)
 101af54:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 101af58:	1005003a 	cmpeq	r2,r2,zero
 101af5c:	1000151e 	bne	r2,zero,101afb4 <alt_up_sd_card_fclose+0x194>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 101af60:	e0bfff0f 	ldh	r2,-4(fp)
 101af64:	00c04434 	movhi	r3,272
 101af68:	18c5ea04 	addi	r3,r3,6056
 101af6c:	100491ba 	slli	r2,r2,6
 101af70:	10c5883a 	add	r2,r2,r3
 101af74:	10800c04 	addi	r2,r2,48
 101af78:	1080000b 	ldhu	r2,0(r2)
 101af7c:	113fffcc 	andi	r4,r2,65535
 101af80:	2120001c 	xori	r4,r4,32768
 101af84:	21200004 	addi	r4,r4,-32768
 101af88:	e0bfff0f 	ldh	r2,-4(fp)
 101af8c:	100491ba 	slli	r2,r2,6
 101af90:	1007883a 	mov	r3,r2
 101af94:	00804434 	movhi	r2,272
 101af98:	1085ea04 	addi	r2,r2,6056
 101af9c:	188b883a 	add	r5,r3,r2
 101afa0:	101738c0 	call	101738c <Write_File_Record_At_Offset>
 101afa4:	1005003a 	cmpeq	r2,r2,zero
 101afa8:	1000021e 	bne	r2,zero,101afb4 <alt_up_sd_card_fclose+0x194>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 101afac:	1016c700 	call	1016c70 <Save_Modified_Sector>
 101afb0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 101afb4:	e0bfff0f 	ldh	r2,-4(fp)
 101afb8:	00c04434 	movhi	r3,272
 101afbc:	18c5ea04 	addi	r3,r3,6056
 101afc0:	100491ba 	slli	r2,r2,6
 101afc4:	10c5883a 	add	r2,r2,r3
 101afc8:	10800f04 	addi	r2,r2,60
 101afcc:	10000015 	stw	zero,0(r2)
			result = true;
 101afd0:	00800044 	movi	r2,1
 101afd4:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 101afd8:	e0bffe17 	ldw	r2,-8(fp)
}
 101afdc:	e037883a 	mov	sp,fp
 101afe0:	dfc00217 	ldw	ra,8(sp)
 101afe4:	df000117 	ldw	fp,4(sp)
 101afe8:	dc000017 	ldw	r16,0(sp)
 101afec:	dec00304 	addi	sp,sp,12
 101aff0:	f800283a 	ret

0101aff4 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 101aff4:	defff904 	addi	sp,sp,-28
 101aff8:	dfc00615 	stw	ra,24(sp)
 101affc:	df000515 	stw	fp,20(sp)
 101b000:	df000504 	addi	fp,sp,20
 101b004:	e13ffd15 	stw	r4,-12(fp)
 101b008:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 101b00c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 101b010:	10199dc0 	call	10199dc <alt_up_sd_card_is_Present>
 101b014:	1005003a 	cmpeq	r2,r2,zero
 101b018:	10002d1e 	bne	r2,zero,101b0d0 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 101b01c:	00803fc4 	movi	r2,255
 101b020:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 101b024:	d0a74417 	ldw	r2,-25328(gp)
 101b028:	1005003a 	cmpeq	r2,r2,zero
 101b02c:	1000081e 	bne	r2,zero,101b050 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 101b030:	d0a74517 	ldw	r2,-25324(gp)
 101b034:	1009883a 	mov	r4,r2
 101b038:	000b883a 	mov	r5,zero
 101b03c:	1016ba80 	call	1016ba8 <Write_Sector_Data>
 101b040:	1004c03a 	cmpne	r2,r2,zero
 101b044:	1000021e 	bne	r2,zero,101b050 <Read_Sector_Data_CRC+0x5c>
				return false;
 101b048:	e03fff15 	stw	zero,-4(fp)
 101b04c:	00002206 	br	101b0d8 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 101b050:	d0a73f17 	ldw	r2,-25348(gp)
 101b054:	1009883a 	mov	r4,r2
 101b058:	e0fffd17 	ldw	r3,-12(fp)
 101b05c:	e0bffe17 	ldw	r2,-8(fp)
 101b060:	1885883a 	add	r2,r3,r2
 101b064:	1006927a 	slli	r3,r2,9
 101b068:	2005883a 	mov	r2,r4
 101b06c:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 101b070:	d0a73e17 	ldw	r2,-25352(gp)
 101b074:	1007883a 	mov	r3,r2
 101b078:	00800444 	movi	r2,17
 101b07c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 101b080:	d0a73b17 	ldw	r2,-25364(gp)
 101b084:	1080002b 	ldhuio	r2,0(r2)
 101b088:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 101b08c:	e0bffb0b 	ldhu	r2,-20(fp)
 101b090:	10bfffcc 	andi	r2,r2,65535
 101b094:	1080010c 	andi	r2,r2,4
 101b098:	1004c03a 	cmpne	r2,r2,zero
 101b09c:	103ff81e 	bne	r2,zero,101b080 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 101b0a0:	e0bffb0b 	ldhu	r2,-20(fp)
 101b0a4:	10bfffcc 	andi	r2,r2,65535
 101b0a8:	10800c0c 	andi	r2,r2,48
 101b0ac:	1004c03a 	cmpne	r2,r2,zero
 101b0b0:	1000071e 	bne	r2,zero,101b0d0 <Read_Sector_Data_CRC+0xdc>
			result = true;
 101b0b4:	00800044 	movi	r2,1
 101b0b8:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 101b0bc:	d0274415 	stw	zero,-25328(gp)
			current_sector_index = sector_index + partition_offset;
 101b0c0:	e0fffd17 	ldw	r3,-12(fp)
 101b0c4:	e0bffe17 	ldw	r2,-8(fp)
 101b0c8:	1885883a 	add	r2,r3,r2
 101b0cc:	d0a74515 	stw	r2,-25324(gp)
		}
	}
	return result;
 101b0d0:	e0bffc17 	ldw	r2,-16(fp)
 101b0d4:	e0bfff15 	stw	r2,-4(fp)
 101b0d8:	e0bfff17 	ldw	r2,-4(fp)
}
 101b0dc:	e037883a 	mov	sp,fp
 101b0e0:	dfc00117 	ldw	ra,4(sp)
 101b0e4:	df000017 	ldw	fp,0(sp)
 101b0e8:	dec00204 	addi	sp,sp,8
 101b0ec:	f800283a 	ret

0101b0f0 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 101b0f0:	defff804 	addi	sp,sp,-32
 101b0f4:	dfc00715 	stw	ra,28(sp)
 101b0f8:	df000615 	stw	fp,24(sp)
 101b0fc:	df000604 	addi	fp,sp,24
 101b100:	e13ffd15 	stw	r4,-12(fp)
 101b104:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 101b108:	00801904 	movi	r2,100
 101b10c:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 101b110:	e03ffc15 	stw	zero,-16(fp)
 101b114:	00000d06 	br	101b14c <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 101b118:	e13ffd17 	ldw	r4,-12(fp)
 101b11c:	e17ffe17 	ldw	r5,-8(fp)
 101b120:	101aff40 	call	101aff4 <Read_Sector_Data_CRC>
 101b124:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 101b128:	e0bffb17 	ldw	r2,-20(fp)
 101b12c:	1005003a 	cmpeq	r2,r2,zero
 101b130:	1000031e 	bne	r2,zero,101b140 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 101b134:	00800044 	movi	r2,1
 101b138:	e0bfff15 	stw	r2,-4(fp)
 101b13c:	00000a06 	br	101b168 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 101b140:	e0bffc17 	ldw	r2,-16(fp)
 101b144:	10800044 	addi	r2,r2,1
 101b148:	e0bffc15 	stw	r2,-16(fp)
 101b14c:	e0fffc17 	ldw	r3,-16(fp)
 101b150:	e0bffa17 	ldw	r2,-24(fp)
 101b154:	18bff016 	blt	r3,r2,101b118 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 101b158:	e13ffd17 	ldw	r4,-12(fp)
 101b15c:	e17ffe17 	ldw	r5,-8(fp)
 101b160:	1016cc00 	call	1016cc0 <Read_Sector_Data>
 101b164:	e0bfff15 	stw	r2,-4(fp)
 101b168:	e0bfff17 	ldw	r2,-4(fp)
}
 101b16c:	e037883a 	mov	sp,fp
 101b170:	dfc00117 	ldw	ra,4(sp)
 101b174:	df000017 	ldw	fp,0(sp)
 101b178:	dec00204 	addi	sp,sp,8
 101b17c:	f800283a 	ret

0101b180 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101b180:	defffe04 	addi	sp,sp,-8
 101b184:	df000115 	stw	fp,4(sp)
 101b188:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101b18c:	e03fff15 	stw	zero,-4(fp)
 101b190:	00000506 	br	101b1a8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 101b194:	e0bfff17 	ldw	r2,-4(fp)
 101b198:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101b19c:	e0bfff17 	ldw	r2,-4(fp)
 101b1a0:	10800804 	addi	r2,r2,32
 101b1a4:	e0bfff15 	stw	r2,-4(fp)
 101b1a8:	e0bfff17 	ldw	r2,-4(fp)
 101b1ac:	10820030 	cmpltui	r2,r2,2048
 101b1b0:	103ff81e 	bne	r2,zero,101b194 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101b1b4:	e037883a 	mov	sp,fp
 101b1b8:	df000017 	ldw	fp,0(sp)
 101b1bc:	dec00104 	addi	sp,sp,4
 101b1c0:	f800283a 	ret

0101b1c4 <alt_dev_llist_insert>:
 101b1c4:	defff904 	addi	sp,sp,-28
 101b1c8:	dfc00615 	stw	ra,24(sp)
 101b1cc:	df000515 	stw	fp,20(sp)
 101b1d0:	df000504 	addi	fp,sp,20
 101b1d4:	e13ffd15 	stw	r4,-12(fp)
 101b1d8:	e17ffe15 	stw	r5,-8(fp)
 101b1dc:	e0bffd17 	ldw	r2,-12(fp)
 101b1e0:	1005003a 	cmpeq	r2,r2,zero
 101b1e4:	1000041e 	bne	r2,zero,101b1f8 <alt_dev_llist_insert+0x34>
 101b1e8:	e0bffd17 	ldw	r2,-12(fp)
 101b1ec:	10800217 	ldw	r2,8(r2)
 101b1f0:	1004c03a 	cmpne	r2,r2,zero
 101b1f4:	1000071e 	bne	r2,zero,101b214 <alt_dev_llist_insert+0x50>
 101b1f8:	101b2780 	call	101b278 <alt_get_errno>
 101b1fc:	1007883a 	mov	r3,r2
 101b200:	00800584 	movi	r2,22
 101b204:	18800015 	stw	r2,0(r3)
 101b208:	00bffa84 	movi	r2,-22
 101b20c:	e0bfff15 	stw	r2,-4(fp)
 101b210:	00001306 	br	101b260 <alt_dev_llist_insert+0x9c>
 101b214:	e0fffd17 	ldw	r3,-12(fp)
 101b218:	e0bffe17 	ldw	r2,-8(fp)
 101b21c:	e0bffb15 	stw	r2,-20(fp)
 101b220:	e0fffc15 	stw	r3,-16(fp)
 101b224:	e0fffc17 	ldw	r3,-16(fp)
 101b228:	e0bffb17 	ldw	r2,-20(fp)
 101b22c:	18800115 	stw	r2,4(r3)
 101b230:	e0bffb17 	ldw	r2,-20(fp)
 101b234:	10c00017 	ldw	r3,0(r2)
 101b238:	e0bffc17 	ldw	r2,-16(fp)
 101b23c:	10c00015 	stw	r3,0(r2)
 101b240:	e0bffb17 	ldw	r2,-20(fp)
 101b244:	10c00017 	ldw	r3,0(r2)
 101b248:	e0bffc17 	ldw	r2,-16(fp)
 101b24c:	18800115 	stw	r2,4(r3)
 101b250:	e0fffb17 	ldw	r3,-20(fp)
 101b254:	e0bffc17 	ldw	r2,-16(fp)
 101b258:	18800015 	stw	r2,0(r3)
 101b25c:	e03fff15 	stw	zero,-4(fp)
 101b260:	e0bfff17 	ldw	r2,-4(fp)
 101b264:	e037883a 	mov	sp,fp
 101b268:	dfc00117 	ldw	ra,4(sp)
 101b26c:	df000017 	ldw	fp,0(sp)
 101b270:	dec00204 	addi	sp,sp,8
 101b274:	f800283a 	ret

0101b278 <alt_get_errno>:
 101b278:	defffd04 	addi	sp,sp,-12
 101b27c:	dfc00215 	stw	ra,8(sp)
 101b280:	df000115 	stw	fp,4(sp)
 101b284:	df000104 	addi	fp,sp,4
 101b288:	008040b4 	movhi	r2,258
 101b28c:	10ba4704 	addi	r2,r2,-5860
 101b290:	10800017 	ldw	r2,0(r2)
 101b294:	1005003a 	cmpeq	r2,r2,zero
 101b298:	1000061e 	bne	r2,zero,101b2b4 <alt_get_errno+0x3c>
 101b29c:	008040b4 	movhi	r2,258
 101b2a0:	10ba4704 	addi	r2,r2,-5860
 101b2a4:	10800017 	ldw	r2,0(r2)
 101b2a8:	103ee83a 	callr	r2
 101b2ac:	e0bfff15 	stw	r2,-4(fp)
 101b2b0:	00000306 	br	101b2c0 <alt_get_errno+0x48>
 101b2b4:	008040b4 	movhi	r2,258
 101b2b8:	10816704 	addi	r2,r2,1436
 101b2bc:	e0bfff15 	stw	r2,-4(fp)
 101b2c0:	e0bfff17 	ldw	r2,-4(fp)
 101b2c4:	e037883a 	mov	sp,fp
 101b2c8:	dfc00117 	ldw	ra,4(sp)
 101b2cc:	df000017 	ldw	fp,0(sp)
 101b2d0:	dec00204 	addi	sp,sp,8
 101b2d4:	f800283a 	ret

0101b2d8 <_do_ctors>:
 101b2d8:	defffd04 	addi	sp,sp,-12
 101b2dc:	dfc00215 	stw	ra,8(sp)
 101b2e0:	df000115 	stw	fp,4(sp)
 101b2e4:	df000104 	addi	fp,sp,4
 101b2e8:	00bfff04 	movi	r2,-4
 101b2ec:	00c040b4 	movhi	r3,258
 101b2f0:	18f05c04 	addi	r3,r3,-16016
 101b2f4:	1885883a 	add	r2,r3,r2
 101b2f8:	e0bfff15 	stw	r2,-4(fp)
 101b2fc:	00000606 	br	101b318 <_do_ctors+0x40>
 101b300:	e0bfff17 	ldw	r2,-4(fp)
 101b304:	10800017 	ldw	r2,0(r2)
 101b308:	103ee83a 	callr	r2
 101b30c:	e0bfff17 	ldw	r2,-4(fp)
 101b310:	10bfff04 	addi	r2,r2,-4
 101b314:	e0bfff15 	stw	r2,-4(fp)
 101b318:	e0ffff17 	ldw	r3,-4(fp)
 101b31c:	008040b4 	movhi	r2,258
 101b320:	10b05b04 	addi	r2,r2,-16020
 101b324:	18bff62e 	bgeu	r3,r2,101b300 <_do_ctors+0x28>
 101b328:	e037883a 	mov	sp,fp
 101b32c:	dfc00117 	ldw	ra,4(sp)
 101b330:	df000017 	ldw	fp,0(sp)
 101b334:	dec00204 	addi	sp,sp,8
 101b338:	f800283a 	ret

0101b33c <_do_dtors>:
 101b33c:	defffd04 	addi	sp,sp,-12
 101b340:	dfc00215 	stw	ra,8(sp)
 101b344:	df000115 	stw	fp,4(sp)
 101b348:	df000104 	addi	fp,sp,4
 101b34c:	00bfff04 	movi	r2,-4
 101b350:	00c040b4 	movhi	r3,258
 101b354:	18f05c04 	addi	r3,r3,-16016
 101b358:	1885883a 	add	r2,r3,r2
 101b35c:	e0bfff15 	stw	r2,-4(fp)
 101b360:	00000606 	br	101b37c <_do_dtors+0x40>
 101b364:	e0bfff17 	ldw	r2,-4(fp)
 101b368:	10800017 	ldw	r2,0(r2)
 101b36c:	103ee83a 	callr	r2
 101b370:	e0bfff17 	ldw	r2,-4(fp)
 101b374:	10bfff04 	addi	r2,r2,-4
 101b378:	e0bfff15 	stw	r2,-4(fp)
 101b37c:	e0ffff17 	ldw	r3,-4(fp)
 101b380:	008040b4 	movhi	r2,258
 101b384:	10b05c04 	addi	r2,r2,-16016
 101b388:	18bff62e 	bgeu	r3,r2,101b364 <_do_dtors+0x28>
 101b38c:	e037883a 	mov	sp,fp
 101b390:	dfc00117 	ldw	ra,4(sp)
 101b394:	df000017 	ldw	fp,0(sp)
 101b398:	dec00204 	addi	sp,sp,8
 101b39c:	f800283a 	ret

0101b3a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101b3a0:	defff904 	addi	sp,sp,-28
 101b3a4:	dfc00615 	stw	ra,24(sp)
 101b3a8:	df000515 	stw	fp,20(sp)
 101b3ac:	df000504 	addi	fp,sp,20
 101b3b0:	e13ffd15 	stw	r4,-12(fp)
 101b3b4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101b3b8:	e0bffe17 	ldw	r2,-8(fp)
 101b3bc:	10800017 	ldw	r2,0(r2)
 101b3c0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101b3c4:	e13ffd17 	ldw	r4,-12(fp)
 101b3c8:	10030b40 	call	10030b4 <strlen>
 101b3cc:	10800044 	addi	r2,r2,1
 101b3d0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101b3d4:	00000d06 	br	101b40c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101b3d8:	e0bffc17 	ldw	r2,-16(fp)
 101b3dc:	11000217 	ldw	r4,8(r2)
 101b3e0:	e1bffb17 	ldw	r6,-20(fp)
 101b3e4:	e17ffd17 	ldw	r5,-12(fp)
 101b3e8:	101bd440 	call	101bd44 <memcmp>
 101b3ec:	1004c03a 	cmpne	r2,r2,zero
 101b3f0:	1000031e 	bne	r2,zero,101b400 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101b3f4:	e0bffc17 	ldw	r2,-16(fp)
 101b3f8:	e0bfff15 	stw	r2,-4(fp)
 101b3fc:	00000706 	br	101b41c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101b400:	e0bffc17 	ldw	r2,-16(fp)
 101b404:	10800017 	ldw	r2,0(r2)
 101b408:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101b40c:	e0fffe17 	ldw	r3,-8(fp)
 101b410:	e0bffc17 	ldw	r2,-16(fp)
 101b414:	10fff01e 	bne	r2,r3,101b3d8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101b418:	e03fff15 	stw	zero,-4(fp)
 101b41c:	e0bfff17 	ldw	r2,-4(fp)
}
 101b420:	e037883a 	mov	sp,fp
 101b424:	dfc00117 	ldw	ra,4(sp)
 101b428:	df000017 	ldw	fp,0(sp)
 101b42c:	dec00204 	addi	sp,sp,8
 101b430:	f800283a 	ret

0101b434 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101b434:	defffe04 	addi	sp,sp,-8
 101b438:	dfc00115 	stw	ra,4(sp)
 101b43c:	df000015 	stw	fp,0(sp)
 101b440:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 101b444:	0009883a 	mov	r4,zero
 101b448:	01440004 	movi	r5,4096
 101b44c:	101bc680 	call	101bc68 <alt_icache_flush>
#endif
}
 101b450:	e037883a 	mov	sp,fp
 101b454:	dfc00117 	ldw	ra,4(sp)
 101b458:	df000017 	ldw	fp,0(sp)
 101b45c:	dec00204 	addi	sp,sp,8
 101b460:	f800283a 	ret

0101b464 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101b464:	defff804 	addi	sp,sp,-32
 101b468:	dfc00715 	stw	ra,28(sp)
 101b46c:	df000615 	stw	fp,24(sp)
 101b470:	dc000515 	stw	r16,20(sp)
 101b474:	df000504 	addi	fp,sp,20
 101b478:	e13ffc15 	stw	r4,-16(fp)
 101b47c:	e17ffd15 	stw	r5,-12(fp)
 101b480:	e1bffe15 	stw	r6,-8(fp)
 101b484:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101b488:	e13ffd17 	ldw	r4,-12(fp)
 101b48c:	e17ffe17 	ldw	r5,-8(fp)
 101b490:	e1bfff17 	ldw	r6,-4(fp)
 101b494:	101b86c0 	call	101b86c <open>
 101b498:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101b49c:	e0bffb17 	ldw	r2,-20(fp)
 101b4a0:	1004803a 	cmplt	r2,r2,zero
 101b4a4:	10001f1e 	bne	r2,zero,101b524 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101b4a8:	e13ffb17 	ldw	r4,-20(fp)
 101b4ac:	040040b4 	movhi	r16,258
 101b4b0:	84355604 	addi	r16,r16,-10920
 101b4b4:	01400304 	movi	r5,12
 101b4b8:	10026440 	call	1002644 <__mulsi3>
 101b4bc:	1405883a 	add	r2,r2,r16
 101b4c0:	10c00017 	ldw	r3,0(r2)
 101b4c4:	e0bffc17 	ldw	r2,-16(fp)
 101b4c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101b4cc:	e13ffb17 	ldw	r4,-20(fp)
 101b4d0:	040040b4 	movhi	r16,258
 101b4d4:	84355604 	addi	r16,r16,-10920
 101b4d8:	01400304 	movi	r5,12
 101b4dc:	10026440 	call	1002644 <__mulsi3>
 101b4e0:	1405883a 	add	r2,r2,r16
 101b4e4:	10800104 	addi	r2,r2,4
 101b4e8:	10c00017 	ldw	r3,0(r2)
 101b4ec:	e0bffc17 	ldw	r2,-16(fp)
 101b4f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101b4f4:	e13ffb17 	ldw	r4,-20(fp)
 101b4f8:	040040b4 	movhi	r16,258
 101b4fc:	84355604 	addi	r16,r16,-10920
 101b500:	01400304 	movi	r5,12
 101b504:	10026440 	call	1002644 <__mulsi3>
 101b508:	1405883a 	add	r2,r2,r16
 101b50c:	10800204 	addi	r2,r2,8
 101b510:	10c00017 	ldw	r3,0(r2)
 101b514:	e0bffc17 	ldw	r2,-16(fp)
 101b518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101b51c:	e13ffb17 	ldw	r4,-20(fp)
 101b520:	10125500 	call	1012550 <alt_release_fd>
  }
} 
 101b524:	e037883a 	mov	sp,fp
 101b528:	dfc00217 	ldw	ra,8(sp)
 101b52c:	df000117 	ldw	fp,4(sp)
 101b530:	dc000017 	ldw	r16,0(sp)
 101b534:	dec00304 	addi	sp,sp,12
 101b538:	f800283a 	ret

0101b53c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 101b53c:	defffb04 	addi	sp,sp,-20
 101b540:	dfc00415 	stw	ra,16(sp)
 101b544:	df000315 	stw	fp,12(sp)
 101b548:	df000304 	addi	fp,sp,12
 101b54c:	e13ffd15 	stw	r4,-12(fp)
 101b550:	e17ffe15 	stw	r5,-8(fp)
 101b554:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101b558:	010040b4 	movhi	r4,258
 101b55c:	21355904 	addi	r4,r4,-10908
 101b560:	e17ffd17 	ldw	r5,-12(fp)
 101b564:	01800044 	movi	r6,1
 101b568:	01c07fc4 	movi	r7,511
 101b56c:	101b4640 	call	101b464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101b570:	010040b4 	movhi	r4,258
 101b574:	21355604 	addi	r4,r4,-10920
 101b578:	e17ffe17 	ldw	r5,-8(fp)
 101b57c:	000d883a 	mov	r6,zero
 101b580:	01c07fc4 	movi	r7,511
 101b584:	101b4640 	call	101b464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101b588:	010040b4 	movhi	r4,258
 101b58c:	21355c04 	addi	r4,r4,-10896
 101b590:	e17fff17 	ldw	r5,-4(fp)
 101b594:	01800044 	movi	r6,1
 101b598:	01c07fc4 	movi	r7,511
 101b59c:	101b4640 	call	101b464 <alt_open_fd>
}  
 101b5a0:	e037883a 	mov	sp,fp
 101b5a4:	dfc00117 	ldw	ra,4(sp)
 101b5a8:	df000017 	ldw	fp,0(sp)
 101b5ac:	dec00204 	addi	sp,sp,8
 101b5b0:	f800283a 	ret

0101b5b4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 101b5b4:	deffef04 	addi	sp,sp,-68
 101b5b8:	df001015 	stw	fp,64(sp)
 101b5bc:	df001004 	addi	fp,sp,64
 101b5c0:	e13ffc15 	stw	r4,-16(fp)
 101b5c4:	e17ffd15 	stw	r5,-12(fp)
 101b5c8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 101b5cc:	00bffa84 	movi	r2,-22
 101b5d0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101b5d4:	e0bffc17 	ldw	r2,-16(fp)
 101b5d8:	10800828 	cmpgeui	r2,r2,32
 101b5dc:	1000601e 	bne	r2,zero,101b760 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b5e0:	0005303a 	rdctl	r2,status
 101b5e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b5e8:	e0fff917 	ldw	r3,-28(fp)
 101b5ec:	00bfff84 	movi	r2,-2
 101b5f0:	1884703a 	and	r2,r3,r2
 101b5f4:	1001703a 	wrctl	status,r2
  
  return context;
 101b5f8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 101b5fc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 101b600:	e0bffc17 	ldw	r2,-16(fp)
 101b604:	00c04434 	movhi	r3,272
 101b608:	18c72a04 	addi	r3,r3,7336
 101b60c:	100490fa 	slli	r2,r2,3
 101b610:	10c7883a 	add	r3,r2,r3
 101b614:	e0bffe17 	ldw	r2,-8(fp)
 101b618:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 101b61c:	e0bffc17 	ldw	r2,-16(fp)
 101b620:	00c04434 	movhi	r3,272
 101b624:	18c72a04 	addi	r3,r3,7336
 101b628:	100490fa 	slli	r2,r2,3
 101b62c:	10c5883a 	add	r2,r2,r3
 101b630:	10c00104 	addi	r3,r2,4
 101b634:	e0bffd17 	ldw	r2,-12(fp)
 101b638:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 101b63c:	e0bffe17 	ldw	r2,-8(fp)
 101b640:	1005003a 	cmpeq	r2,r2,zero
 101b644:	1000201e 	bne	r2,zero,101b6c8 <alt_irq_register+0x114>
 101b648:	e0bffc17 	ldw	r2,-16(fp)
 101b64c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b650:	0005303a 	rdctl	r2,status
 101b654:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b658:	e0fff617 	ldw	r3,-40(fp)
 101b65c:	00bfff84 	movi	r2,-2
 101b660:	1884703a 	and	r2,r3,r2
 101b664:	1001703a 	wrctl	status,r2
  
  return context;
 101b668:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101b66c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 101b670:	e0fff717 	ldw	r3,-36(fp)
 101b674:	00800044 	movi	r2,1
 101b678:	10c4983a 	sll	r2,r2,r3
 101b67c:	1007883a 	mov	r3,r2
 101b680:	008040b4 	movhi	r2,258
 101b684:	10817f04 	addi	r2,r2,1532
 101b688:	10800017 	ldw	r2,0(r2)
 101b68c:	1886b03a 	or	r3,r3,r2
 101b690:	008040b4 	movhi	r2,258
 101b694:	10817f04 	addi	r2,r2,1532
 101b698:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101b69c:	008040b4 	movhi	r2,258
 101b6a0:	10817f04 	addi	r2,r2,1532
 101b6a4:	10800017 	ldw	r2,0(r2)
 101b6a8:	100170fa 	wrctl	ienable,r2
 101b6ac:	e0bff817 	ldw	r2,-32(fp)
 101b6b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b6b4:	e0bff517 	ldw	r2,-44(fp)
 101b6b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101b6bc:	0005883a 	mov	r2,zero
 101b6c0:	e0bfff15 	stw	r2,-4(fp)
 101b6c4:	00002006 	br	101b748 <alt_irq_register+0x194>
 101b6c8:	e0bffc17 	ldw	r2,-16(fp)
 101b6cc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b6d0:	0005303a 	rdctl	r2,status
 101b6d4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b6d8:	e0fff217 	ldw	r3,-56(fp)
 101b6dc:	00bfff84 	movi	r2,-2
 101b6e0:	1884703a 	and	r2,r3,r2
 101b6e4:	1001703a 	wrctl	status,r2
  
  return context;
 101b6e8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101b6ec:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 101b6f0:	e0fff317 	ldw	r3,-52(fp)
 101b6f4:	00800044 	movi	r2,1
 101b6f8:	10c4983a 	sll	r2,r2,r3
 101b6fc:	0084303a 	nor	r2,zero,r2
 101b700:	1007883a 	mov	r3,r2
 101b704:	008040b4 	movhi	r2,258
 101b708:	10817f04 	addi	r2,r2,1532
 101b70c:	10800017 	ldw	r2,0(r2)
 101b710:	1886703a 	and	r3,r3,r2
 101b714:	008040b4 	movhi	r2,258
 101b718:	10817f04 	addi	r2,r2,1532
 101b71c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101b720:	008040b4 	movhi	r2,258
 101b724:	10817f04 	addi	r2,r2,1532
 101b728:	10800017 	ldw	r2,0(r2)
 101b72c:	100170fa 	wrctl	ienable,r2
 101b730:	e0bff417 	ldw	r2,-48(fp)
 101b734:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b738:	e0bff117 	ldw	r2,-60(fp)
 101b73c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101b740:	0005883a 	mov	r2,zero
 101b744:	e0bfff15 	stw	r2,-4(fp)
 101b748:	e0bfff17 	ldw	r2,-4(fp)
 101b74c:	e0bffb15 	stw	r2,-20(fp)
 101b750:	e0bffa17 	ldw	r2,-24(fp)
 101b754:	e0bff015 	stw	r2,-64(fp)
 101b758:	e0bff017 	ldw	r2,-64(fp)
 101b75c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 101b760:	e0bffb17 	ldw	r2,-20(fp)
}
 101b764:	e037883a 	mov	sp,fp
 101b768:	df000017 	ldw	fp,0(sp)
 101b76c:	dec00104 	addi	sp,sp,4
 101b770:	f800283a 	ret

0101b774 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101b774:	defffa04 	addi	sp,sp,-24
 101b778:	dfc00515 	stw	ra,20(sp)
 101b77c:	df000415 	stw	fp,16(sp)
 101b780:	dc000315 	stw	r16,12(sp)
 101b784:	df000304 	addi	fp,sp,12
 101b788:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101b78c:	e0bffe17 	ldw	r2,-8(fp)
 101b790:	10800217 	ldw	r2,8(r2)
 101b794:	10d00034 	orhi	r3,r2,16384
 101b798:	e0bffe17 	ldw	r2,-8(fp)
 101b79c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101b7a0:	e03ffd15 	stw	zero,-12(fp)
 101b7a4:	00002306 	br	101b834 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101b7a8:	e13ffd17 	ldw	r4,-12(fp)
 101b7ac:	040040b4 	movhi	r16,258
 101b7b0:	84355604 	addi	r16,r16,-10920
 101b7b4:	01400304 	movi	r5,12
 101b7b8:	10026440 	call	1002644 <__mulsi3>
 101b7bc:	1405883a 	add	r2,r2,r16
 101b7c0:	10c00017 	ldw	r3,0(r2)
 101b7c4:	e0bffe17 	ldw	r2,-8(fp)
 101b7c8:	10800017 	ldw	r2,0(r2)
 101b7cc:	1880161e 	bne	r3,r2,101b828 <alt_file_locked+0xb4>
 101b7d0:	e13ffd17 	ldw	r4,-12(fp)
 101b7d4:	040040b4 	movhi	r16,258
 101b7d8:	84355604 	addi	r16,r16,-10920
 101b7dc:	01400304 	movi	r5,12
 101b7e0:	10026440 	call	1002644 <__mulsi3>
 101b7e4:	1405883a 	add	r2,r2,r16
 101b7e8:	10800204 	addi	r2,r2,8
 101b7ec:	10800017 	ldw	r2,0(r2)
 101b7f0:	1004403a 	cmpge	r2,r2,zero
 101b7f4:	10000c1e 	bne	r2,zero,101b828 <alt_file_locked+0xb4>
 101b7f8:	e13ffd17 	ldw	r4,-12(fp)
 101b7fc:	01400304 	movi	r5,12
 101b800:	10026440 	call	1002644 <__mulsi3>
 101b804:	1007883a 	mov	r3,r2
 101b808:	008040b4 	movhi	r2,258
 101b80c:	10b55604 	addi	r2,r2,-10920
 101b810:	1887883a 	add	r3,r3,r2
 101b814:	e0bffe17 	ldw	r2,-8(fp)
 101b818:	18800326 	beq	r3,r2,101b828 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101b81c:	00bffcc4 	movi	r2,-13
 101b820:	e0bfff15 	stw	r2,-4(fp)
 101b824:	00000a06 	br	101b850 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101b828:	e0bffd17 	ldw	r2,-12(fp)
 101b82c:	10800044 	addi	r2,r2,1
 101b830:	e0bffd15 	stw	r2,-12(fp)
 101b834:	008040b4 	movhi	r2,258
 101b838:	10ba4604 	addi	r2,r2,-5864
 101b83c:	10800017 	ldw	r2,0(r2)
 101b840:	1007883a 	mov	r3,r2
 101b844:	e0bffd17 	ldw	r2,-12(fp)
 101b848:	18bfd72e 	bgeu	r3,r2,101b7a8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101b84c:	e03fff15 	stw	zero,-4(fp)
 101b850:	e0bfff17 	ldw	r2,-4(fp)
}
 101b854:	e037883a 	mov	sp,fp
 101b858:	dfc00217 	ldw	ra,8(sp)
 101b85c:	df000117 	ldw	fp,4(sp)
 101b860:	dc000017 	ldw	r16,0(sp)
 101b864:	dec00304 	addi	sp,sp,12
 101b868:	f800283a 	ret

0101b86c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101b86c:	defff404 	addi	sp,sp,-48
 101b870:	dfc00b15 	stw	ra,44(sp)
 101b874:	df000a15 	stw	fp,40(sp)
 101b878:	df000a04 	addi	fp,sp,40
 101b87c:	e13ffb15 	stw	r4,-20(fp)
 101b880:	e17ffc15 	stw	r5,-16(fp)
 101b884:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101b888:	00bfffc4 	movi	r2,-1
 101b88c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101b890:	00bffb44 	movi	r2,-19
 101b894:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101b898:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101b89c:	e13ffb17 	ldw	r4,-20(fp)
 101b8a0:	014040b4 	movhi	r5,258
 101b8a4:	297a4404 	addi	r5,r5,-5872
 101b8a8:	101b3a00 	call	101b3a0 <alt_find_dev>
 101b8ac:	e0bffa15 	stw	r2,-24(fp)
 101b8b0:	e0bffa17 	ldw	r2,-24(fp)
 101b8b4:	1004c03a 	cmpne	r2,r2,zero
 101b8b8:	1000051e 	bne	r2,zero,101b8d0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101b8bc:	e13ffb17 	ldw	r4,-20(fp)
 101b8c0:	101ba780 	call	101ba78 <alt_find_file>
 101b8c4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101b8c8:	00800044 	movi	r2,1
 101b8cc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101b8d0:	e0bffa17 	ldw	r2,-24(fp)
 101b8d4:	1005003a 	cmpeq	r2,r2,zero
 101b8d8:	1000311e 	bne	r2,zero,101b9a0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101b8dc:	e13ffa17 	ldw	r4,-24(fp)
 101b8e0:	101bb980 	call	101bb98 <alt_get_fd>
 101b8e4:	e0bff815 	stw	r2,-32(fp)
 101b8e8:	e0bff817 	ldw	r2,-32(fp)
 101b8ec:	1004403a 	cmpge	r2,r2,zero
 101b8f0:	1000031e 	bne	r2,zero,101b900 <open+0x94>
    {
      status = index;
 101b8f4:	e0bff817 	ldw	r2,-32(fp)
 101b8f8:	e0bff715 	stw	r2,-36(fp)
 101b8fc:	00002a06 	br	101b9a8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 101b900:	e13ff817 	ldw	r4,-32(fp)
 101b904:	01400304 	movi	r5,12
 101b908:	10026440 	call	1002644 <__mulsi3>
 101b90c:	1007883a 	mov	r3,r2
 101b910:	008040b4 	movhi	r2,258
 101b914:	10b55604 	addi	r2,r2,-10920
 101b918:	1885883a 	add	r2,r3,r2
 101b91c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101b920:	e0fffc17 	ldw	r3,-16(fp)
 101b924:	00900034 	movhi	r2,16384
 101b928:	10bfffc4 	addi	r2,r2,-1
 101b92c:	1886703a 	and	r3,r3,r2
 101b930:	e0bff917 	ldw	r2,-28(fp)
 101b934:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101b938:	e0bff617 	ldw	r2,-40(fp)
 101b93c:	1004c03a 	cmpne	r2,r2,zero
 101b940:	1000061e 	bne	r2,zero,101b95c <open+0xf0>
 101b944:	e13ff917 	ldw	r4,-28(fp)
 101b948:	101b7740 	call	101b774 <alt_file_locked>
 101b94c:	e0bff715 	stw	r2,-36(fp)
 101b950:	e0bff717 	ldw	r2,-36(fp)
 101b954:	1004803a 	cmplt	r2,r2,zero
 101b958:	1000131e 	bne	r2,zero,101b9a8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101b95c:	e0bffa17 	ldw	r2,-24(fp)
 101b960:	10800317 	ldw	r2,12(r2)
 101b964:	1005003a 	cmpeq	r2,r2,zero
 101b968:	1000091e 	bne	r2,zero,101b990 <open+0x124>
 101b96c:	e0bffa17 	ldw	r2,-24(fp)
 101b970:	10800317 	ldw	r2,12(r2)
 101b974:	e13ff917 	ldw	r4,-28(fp)
 101b978:	e17ffb17 	ldw	r5,-20(fp)
 101b97c:	e1bffc17 	ldw	r6,-16(fp)
 101b980:	e1fffd17 	ldw	r7,-12(fp)
 101b984:	103ee83a 	callr	r2
 101b988:	e0bfff15 	stw	r2,-4(fp)
 101b98c:	00000106 	br	101b994 <open+0x128>
 101b990:	e03fff15 	stw	zero,-4(fp)
 101b994:	e0bfff17 	ldw	r2,-4(fp)
 101b998:	e0bff715 	stw	r2,-36(fp)
 101b99c:	00000206 	br	101b9a8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101b9a0:	00bffb44 	movi	r2,-19
 101b9a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101b9a8:	e0bff717 	ldw	r2,-36(fp)
 101b9ac:	1004403a 	cmpge	r2,r2,zero
 101b9b0:	1000091e 	bne	r2,zero,101b9d8 <open+0x16c>
  {
    alt_release_fd (index);  
 101b9b4:	e13ff817 	ldw	r4,-32(fp)
 101b9b8:	10125500 	call	1012550 <alt_release_fd>
    ALT_ERRNO = -status;
 101b9bc:	101b9f80 	call	101b9f8 <alt_get_errno>
 101b9c0:	e0fff717 	ldw	r3,-36(fp)
 101b9c4:	00c7c83a 	sub	r3,zero,r3
 101b9c8:	10c00015 	stw	r3,0(r2)
    return -1;
 101b9cc:	00bfffc4 	movi	r2,-1
 101b9d0:	e0bffe15 	stw	r2,-8(fp)
 101b9d4:	00000206 	br	101b9e0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 101b9d8:	e0bff817 	ldw	r2,-32(fp)
 101b9dc:	e0bffe15 	stw	r2,-8(fp)
 101b9e0:	e0bffe17 	ldw	r2,-8(fp)
}
 101b9e4:	e037883a 	mov	sp,fp
 101b9e8:	dfc00117 	ldw	ra,4(sp)
 101b9ec:	df000017 	ldw	fp,0(sp)
 101b9f0:	dec00204 	addi	sp,sp,8
 101b9f4:	f800283a 	ret

0101b9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101b9f8:	defffd04 	addi	sp,sp,-12
 101b9fc:	dfc00215 	stw	ra,8(sp)
 101ba00:	df000115 	stw	fp,4(sp)
 101ba04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101ba08:	008040b4 	movhi	r2,258
 101ba0c:	10ba4704 	addi	r2,r2,-5860
 101ba10:	10800017 	ldw	r2,0(r2)
 101ba14:	1005003a 	cmpeq	r2,r2,zero
 101ba18:	1000061e 	bne	r2,zero,101ba34 <alt_get_errno+0x3c>
 101ba1c:	008040b4 	movhi	r2,258
 101ba20:	10ba4704 	addi	r2,r2,-5860
 101ba24:	10800017 	ldw	r2,0(r2)
 101ba28:	103ee83a 	callr	r2
 101ba2c:	e0bfff15 	stw	r2,-4(fp)
 101ba30:	00000306 	br	101ba40 <alt_get_errno+0x48>
 101ba34:	008040b4 	movhi	r2,258
 101ba38:	10816704 	addi	r2,r2,1436
 101ba3c:	e0bfff15 	stw	r2,-4(fp)
 101ba40:	e0bfff17 	ldw	r2,-4(fp)
}
 101ba44:	e037883a 	mov	sp,fp
 101ba48:	dfc00117 	ldw	ra,4(sp)
 101ba4c:	df000017 	ldw	fp,0(sp)
 101ba50:	dec00204 	addi	sp,sp,8
 101ba54:	f800283a 	ret

0101ba58 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101ba58:	deffff04 	addi	sp,sp,-4
 101ba5c:	df000015 	stw	fp,0(sp)
 101ba60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101ba64:	000170fa 	wrctl	ienable,zero
}
 101ba68:	e037883a 	mov	sp,fp
 101ba6c:	df000017 	ldw	fp,0(sp)
 101ba70:	dec00104 	addi	sp,sp,4
 101ba74:	f800283a 	ret

0101ba78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 101ba78:	defffa04 	addi	sp,sp,-24
 101ba7c:	dfc00515 	stw	ra,20(sp)
 101ba80:	df000415 	stw	fp,16(sp)
 101ba84:	df000404 	addi	fp,sp,16
 101ba88:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 101ba8c:	008040b4 	movhi	r2,258
 101ba90:	10ba4204 	addi	r2,r2,-5880
 101ba94:	10800017 	ldw	r2,0(r2)
 101ba98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101ba9c:	00003306 	br	101bb6c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101baa0:	e0bffd17 	ldw	r2,-12(fp)
 101baa4:	11000217 	ldw	r4,8(r2)
 101baa8:	10030b40 	call	10030b4 <strlen>
 101baac:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101bab0:	e0bffd17 	ldw	r2,-12(fp)
 101bab4:	10c00217 	ldw	r3,8(r2)
 101bab8:	e0bffc17 	ldw	r2,-16(fp)
 101babc:	1885883a 	add	r2,r3,r2
 101bac0:	10bfffc4 	addi	r2,r2,-1
 101bac4:	10800003 	ldbu	r2,0(r2)
 101bac8:	10803fcc 	andi	r2,r2,255
 101bacc:	1080201c 	xori	r2,r2,128
 101bad0:	10bfe004 	addi	r2,r2,-128
 101bad4:	10800bd8 	cmpnei	r2,r2,47
 101bad8:	1000031e 	bne	r2,zero,101bae8 <alt_find_file+0x70>
    {
      len -= 1;
 101badc:	e0bffc17 	ldw	r2,-16(fp)
 101bae0:	10bfffc4 	addi	r2,r2,-1
 101bae4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 101bae8:	e0bffc17 	ldw	r2,-16(fp)
 101baec:	1007883a 	mov	r3,r2
 101baf0:	e0bffe17 	ldw	r2,-8(fp)
 101baf4:	1885883a 	add	r2,r3,r2
 101baf8:	10800003 	ldbu	r2,0(r2)
 101bafc:	10803fcc 	andi	r2,r2,255
 101bb00:	1080201c 	xori	r2,r2,128
 101bb04:	10bfe004 	addi	r2,r2,-128
 101bb08:	10800be0 	cmpeqi	r2,r2,47
 101bb0c:	10000a1e 	bne	r2,zero,101bb38 <alt_find_file+0xc0>
 101bb10:	e0bffc17 	ldw	r2,-16(fp)
 101bb14:	1007883a 	mov	r3,r2
 101bb18:	e0bffe17 	ldw	r2,-8(fp)
 101bb1c:	1885883a 	add	r2,r3,r2
 101bb20:	10800003 	ldbu	r2,0(r2)
 101bb24:	10803fcc 	andi	r2,r2,255
 101bb28:	1080201c 	xori	r2,r2,128
 101bb2c:	10bfe004 	addi	r2,r2,-128
 101bb30:	1004c03a 	cmpne	r2,r2,zero
 101bb34:	10000a1e 	bne	r2,zero,101bb60 <alt_find_file+0xe8>
 101bb38:	e0bffd17 	ldw	r2,-12(fp)
 101bb3c:	11000217 	ldw	r4,8(r2)
 101bb40:	e1bffc17 	ldw	r6,-16(fp)
 101bb44:	e17ffe17 	ldw	r5,-8(fp)
 101bb48:	101bd440 	call	101bd44 <memcmp>
 101bb4c:	1004c03a 	cmpne	r2,r2,zero
 101bb50:	1000031e 	bne	r2,zero,101bb60 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 101bb54:	e0bffd17 	ldw	r2,-12(fp)
 101bb58:	e0bfff15 	stw	r2,-4(fp)
 101bb5c:	00000806 	br	101bb80 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101bb60:	e0bffd17 	ldw	r2,-12(fp)
 101bb64:	10800017 	ldw	r2,0(r2)
 101bb68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101bb6c:	00c040b4 	movhi	r3,258
 101bb70:	18fa4204 	addi	r3,r3,-5880
 101bb74:	e0bffd17 	ldw	r2,-12(fp)
 101bb78:	10ffc91e 	bne	r2,r3,101baa0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 101bb7c:	e03fff15 	stw	zero,-4(fp)
 101bb80:	e0bfff17 	ldw	r2,-4(fp)
}
 101bb84:	e037883a 	mov	sp,fp
 101bb88:	dfc00117 	ldw	ra,4(sp)
 101bb8c:	df000017 	ldw	fp,0(sp)
 101bb90:	dec00204 	addi	sp,sp,8
 101bb94:	f800283a 	ret

0101bb98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 101bb98:	defffa04 	addi	sp,sp,-24
 101bb9c:	dfc00515 	stw	ra,20(sp)
 101bba0:	df000415 	stw	fp,16(sp)
 101bba4:	dc000315 	stw	r16,12(sp)
 101bba8:	df000304 	addi	fp,sp,12
 101bbac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 101bbb0:	00bffa04 	movi	r2,-24
 101bbb4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101bbb8:	e03ffe15 	stw	zero,-8(fp)
 101bbbc:	00002006 	br	101bc40 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 101bbc0:	e13ffe17 	ldw	r4,-8(fp)
 101bbc4:	040040b4 	movhi	r16,258
 101bbc8:	84355604 	addi	r16,r16,-10920
 101bbcc:	01400304 	movi	r5,12
 101bbd0:	10026440 	call	1002644 <__mulsi3>
 101bbd4:	1405883a 	add	r2,r2,r16
 101bbd8:	10800017 	ldw	r2,0(r2)
 101bbdc:	1004c03a 	cmpne	r2,r2,zero
 101bbe0:	1000141e 	bne	r2,zero,101bc34 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 101bbe4:	e13ffe17 	ldw	r4,-8(fp)
 101bbe8:	040040b4 	movhi	r16,258
 101bbec:	84355604 	addi	r16,r16,-10920
 101bbf0:	01400304 	movi	r5,12
 101bbf4:	10026440 	call	1002644 <__mulsi3>
 101bbf8:	1407883a 	add	r3,r2,r16
 101bbfc:	e0bfff17 	ldw	r2,-4(fp)
 101bc00:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101bc04:	008040b4 	movhi	r2,258
 101bc08:	10ba4604 	addi	r2,r2,-5864
 101bc0c:	10c00017 	ldw	r3,0(r2)
 101bc10:	e0bffe17 	ldw	r2,-8(fp)
 101bc14:	1880040e 	bge	r3,r2,101bc28 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 101bc18:	00c040b4 	movhi	r3,258
 101bc1c:	18fa4604 	addi	r3,r3,-5864
 101bc20:	e0bffe17 	ldw	r2,-8(fp)
 101bc24:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 101bc28:	e0bffe17 	ldw	r2,-8(fp)
 101bc2c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 101bc30:	00000606 	br	101bc4c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101bc34:	e0bffe17 	ldw	r2,-8(fp)
 101bc38:	10800044 	addi	r2,r2,1
 101bc3c:	e0bffe15 	stw	r2,-8(fp)
 101bc40:	e0bffe17 	ldw	r2,-8(fp)
 101bc44:	10800810 	cmplti	r2,r2,32
 101bc48:	103fdd1e 	bne	r2,zero,101bbc0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 101bc4c:	e0bffd17 	ldw	r2,-12(fp)
}
 101bc50:	e037883a 	mov	sp,fp
 101bc54:	dfc00217 	ldw	ra,8(sp)
 101bc58:	df000117 	ldw	fp,4(sp)
 101bc5c:	dc000017 	ldw	r16,0(sp)
 101bc60:	dec00304 	addi	sp,sp,12
 101bc64:	f800283a 	ret

0101bc68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101bc68:	defffb04 	addi	sp,sp,-20
 101bc6c:	df000415 	stw	fp,16(sp)
 101bc70:	df000404 	addi	fp,sp,16
 101bc74:	e13ffe15 	stw	r4,-8(fp)
 101bc78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 101bc7c:	e0bfff17 	ldw	r2,-4(fp)
 101bc80:	10840070 	cmpltui	r2,r2,4097
 101bc84:	1000021e 	bne	r2,zero,101bc90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101bc88:	00840004 	movi	r2,4096
 101bc8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 101bc90:	e0fffe17 	ldw	r3,-8(fp)
 101bc94:	e0bfff17 	ldw	r2,-4(fp)
 101bc98:	1885883a 	add	r2,r3,r2
 101bc9c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101bca0:	e0bffe17 	ldw	r2,-8(fp)
 101bca4:	e0bffd15 	stw	r2,-12(fp)
 101bca8:	00000506 	br	101bcc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 101bcac:	e0bffd17 	ldw	r2,-12(fp)
 101bcb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101bcb4:	e0bffd17 	ldw	r2,-12(fp)
 101bcb8:	10800804 	addi	r2,r2,32
 101bcbc:	e0bffd15 	stw	r2,-12(fp)
 101bcc0:	e0fffd17 	ldw	r3,-12(fp)
 101bcc4:	e0bffc17 	ldw	r2,-16(fp)
 101bcc8:	18bff836 	bltu	r3,r2,101bcac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101bccc:	e0bffe17 	ldw	r2,-8(fp)
 101bcd0:	108007cc 	andi	r2,r2,31
 101bcd4:	1005003a 	cmpeq	r2,r2,zero
 101bcd8:	1000021e 	bne	r2,zero,101bce4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101bcdc:	e0bffd17 	ldw	r2,-12(fp)
 101bce0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101bce4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101bce8:	e037883a 	mov	sp,fp
 101bcec:	df000017 	ldw	fp,0(sp)
 101bcf0:	dec00104 	addi	sp,sp,4
 101bcf4:	f800283a 	ret

0101bcf8 <atexit>:
 101bcf8:	200b883a 	mov	r5,r4
 101bcfc:	000d883a 	mov	r6,zero
 101bd00:	0009883a 	mov	r4,zero
 101bd04:	000f883a 	mov	r7,zero
 101bd08:	101bdb81 	jmpi	101bdb8 <__register_exitproc>

0101bd0c <exit>:
 101bd0c:	defffe04 	addi	sp,sp,-8
 101bd10:	000b883a 	mov	r5,zero
 101bd14:	dc000015 	stw	r16,0(sp)
 101bd18:	dfc00115 	stw	ra,4(sp)
 101bd1c:	2021883a 	mov	r16,r4
 101bd20:	101bef00 	call	101bef0 <__call_exitprocs>
 101bd24:	008040b4 	movhi	r2,258
 101bd28:	10ba3f04 	addi	r2,r2,-5892
 101bd2c:	11000017 	ldw	r4,0(r2)
 101bd30:	20800f17 	ldw	r2,60(r4)
 101bd34:	10000126 	beq	r2,zero,101bd3c <exit+0x30>
 101bd38:	103ee83a 	callr	r2
 101bd3c:	8009883a 	mov	r4,r16
 101bd40:	101c0e00 	call	101c0e0 <_exit>

0101bd44 <memcmp>:
 101bd44:	00c000c4 	movi	r3,3
 101bd48:	1980032e 	bgeu	r3,r6,101bd58 <memcmp+0x14>
 101bd4c:	2144b03a 	or	r2,r4,r5
 101bd50:	10c4703a 	and	r2,r2,r3
 101bd54:	10000f26 	beq	r2,zero,101bd94 <memcmp+0x50>
 101bd58:	31ffffc4 	addi	r7,r6,-1
 101bd5c:	3000061e 	bne	r6,zero,101bd78 <memcmp+0x34>
 101bd60:	00000a06 	br	101bd8c <memcmp+0x48>
 101bd64:	39ffffc4 	addi	r7,r7,-1
 101bd68:	00bfffc4 	movi	r2,-1
 101bd6c:	21000044 	addi	r4,r4,1
 101bd70:	29400044 	addi	r5,r5,1
 101bd74:	38800526 	beq	r7,r2,101bd8c <memcmp+0x48>
 101bd78:	20c00003 	ldbu	r3,0(r4)
 101bd7c:	28800003 	ldbu	r2,0(r5)
 101bd80:	18bff826 	beq	r3,r2,101bd64 <memcmp+0x20>
 101bd84:	1885c83a 	sub	r2,r3,r2
 101bd88:	f800283a 	ret
 101bd8c:	0005883a 	mov	r2,zero
 101bd90:	f800283a 	ret
 101bd94:	180f883a 	mov	r7,r3
 101bd98:	20c00017 	ldw	r3,0(r4)
 101bd9c:	28800017 	ldw	r2,0(r5)
 101bda0:	18bfed1e 	bne	r3,r2,101bd58 <memcmp+0x14>
 101bda4:	31bfff04 	addi	r6,r6,-4
 101bda8:	21000104 	addi	r4,r4,4
 101bdac:	29400104 	addi	r5,r5,4
 101bdb0:	39bff936 	bltu	r7,r6,101bd98 <memcmp+0x54>
 101bdb4:	003fe806 	br	101bd58 <memcmp+0x14>

0101bdb8 <__register_exitproc>:
 101bdb8:	defffa04 	addi	sp,sp,-24
 101bdbc:	008040b4 	movhi	r2,258
 101bdc0:	10ba3f04 	addi	r2,r2,-5892
 101bdc4:	dc000015 	stw	r16,0(sp)
 101bdc8:	14000017 	ldw	r16,0(r2)
 101bdcc:	dd000415 	stw	r20,16(sp)
 101bdd0:	2829883a 	mov	r20,r5
 101bdd4:	81405217 	ldw	r5,328(r16)
 101bdd8:	dcc00315 	stw	r19,12(sp)
 101bddc:	dc800215 	stw	r18,8(sp)
 101bde0:	dc400115 	stw	r17,4(sp)
 101bde4:	dfc00515 	stw	ra,20(sp)
 101bde8:	2023883a 	mov	r17,r4
 101bdec:	3027883a 	mov	r19,r6
 101bdf0:	3825883a 	mov	r18,r7
 101bdf4:	28002526 	beq	r5,zero,101be8c <__register_exitproc+0xd4>
 101bdf8:	29000117 	ldw	r4,4(r5)
 101bdfc:	008007c4 	movi	r2,31
 101be00:	11002716 	blt	r2,r4,101bea0 <__register_exitproc+0xe8>
 101be04:	8800101e 	bne	r17,zero,101be48 <__register_exitproc+0x90>
 101be08:	2105883a 	add	r2,r4,r4
 101be0c:	1085883a 	add	r2,r2,r2
 101be10:	20c00044 	addi	r3,r4,1
 101be14:	1145883a 	add	r2,r2,r5
 101be18:	0009883a 	mov	r4,zero
 101be1c:	15000215 	stw	r20,8(r2)
 101be20:	28c00115 	stw	r3,4(r5)
 101be24:	2005883a 	mov	r2,r4
 101be28:	dfc00517 	ldw	ra,20(sp)
 101be2c:	dd000417 	ldw	r20,16(sp)
 101be30:	dcc00317 	ldw	r19,12(sp)
 101be34:	dc800217 	ldw	r18,8(sp)
 101be38:	dc400117 	ldw	r17,4(sp)
 101be3c:	dc000017 	ldw	r16,0(sp)
 101be40:	dec00604 	addi	sp,sp,24
 101be44:	f800283a 	ret
 101be48:	29802204 	addi	r6,r5,136
 101be4c:	00800044 	movi	r2,1
 101be50:	110e983a 	sll	r7,r2,r4
 101be54:	30c04017 	ldw	r3,256(r6)
 101be58:	2105883a 	add	r2,r4,r4
 101be5c:	1085883a 	add	r2,r2,r2
 101be60:	1185883a 	add	r2,r2,r6
 101be64:	19c6b03a 	or	r3,r3,r7
 101be68:	14802015 	stw	r18,128(r2)
 101be6c:	14c00015 	stw	r19,0(r2)
 101be70:	00800084 	movi	r2,2
 101be74:	30c04015 	stw	r3,256(r6)
 101be78:	88bfe31e 	bne	r17,r2,101be08 <__register_exitproc+0x50>
 101be7c:	30804117 	ldw	r2,260(r6)
 101be80:	11c4b03a 	or	r2,r2,r7
 101be84:	30804115 	stw	r2,260(r6)
 101be88:	003fdf06 	br	101be08 <__register_exitproc+0x50>
 101be8c:	00804434 	movhi	r2,272
 101be90:	10876a04 	addi	r2,r2,7592
 101be94:	100b883a 	mov	r5,r2
 101be98:	80805215 	stw	r2,328(r16)
 101be9c:	003fd606 	br	101bdf8 <__register_exitproc+0x40>
 101bea0:	00804034 	movhi	r2,256
 101bea4:	1089a404 	addi	r2,r2,9872
 101bea8:	1000021e 	bne	r2,zero,101beb4 <__register_exitproc+0xfc>
 101beac:	013fffc4 	movi	r4,-1
 101beb0:	003fdc06 	br	101be24 <__register_exitproc+0x6c>
 101beb4:	01006404 	movi	r4,400
 101beb8:	103ee83a 	callr	r2
 101bebc:	1007883a 	mov	r3,r2
 101bec0:	103ffa26 	beq	r2,zero,101beac <__register_exitproc+0xf4>
 101bec4:	80805217 	ldw	r2,328(r16)
 101bec8:	180b883a 	mov	r5,r3
 101becc:	18000115 	stw	zero,4(r3)
 101bed0:	18800015 	stw	r2,0(r3)
 101bed4:	80c05215 	stw	r3,328(r16)
 101bed8:	18006215 	stw	zero,392(r3)
 101bedc:	18006315 	stw	zero,396(r3)
 101bee0:	0009883a 	mov	r4,zero
 101bee4:	883fc826 	beq	r17,zero,101be08 <__register_exitproc+0x50>
 101bee8:	003fd706 	br	101be48 <__register_exitproc+0x90>

0101beec <register_fini>:
 101beec:	f800283a 	ret

0101bef0 <__call_exitprocs>:
 101bef0:	008040b4 	movhi	r2,258
 101bef4:	10ba3f04 	addi	r2,r2,-5892
 101bef8:	10800017 	ldw	r2,0(r2)
 101befc:	defff304 	addi	sp,sp,-52
 101bf00:	df000b15 	stw	fp,44(sp)
 101bf04:	d8800115 	stw	r2,4(sp)
 101bf08:	00804034 	movhi	r2,256
 101bf0c:	10899f04 	addi	r2,r2,9852
 101bf10:	1005003a 	cmpeq	r2,r2,zero
 101bf14:	d8800215 	stw	r2,8(sp)
 101bf18:	d8800117 	ldw	r2,4(sp)
 101bf1c:	dd400815 	stw	r21,32(sp)
 101bf20:	dd000715 	stw	r20,28(sp)
 101bf24:	10805204 	addi	r2,r2,328
 101bf28:	dfc00c15 	stw	ra,48(sp)
 101bf2c:	ddc00a15 	stw	r23,40(sp)
 101bf30:	dd800915 	stw	r22,36(sp)
 101bf34:	dcc00615 	stw	r19,24(sp)
 101bf38:	dc800515 	stw	r18,20(sp)
 101bf3c:	dc400415 	stw	r17,16(sp)
 101bf40:	dc000315 	stw	r16,12(sp)
 101bf44:	282b883a 	mov	r21,r5
 101bf48:	2039883a 	mov	fp,r4
 101bf4c:	d8800015 	stw	r2,0(sp)
 101bf50:	2829003a 	cmpeq	r20,r5,zero
 101bf54:	d8800117 	ldw	r2,4(sp)
 101bf58:	14405217 	ldw	r17,328(r2)
 101bf5c:	88001026 	beq	r17,zero,101bfa0 <__call_exitprocs+0xb0>
 101bf60:	ddc00017 	ldw	r23,0(sp)
 101bf64:	88800117 	ldw	r2,4(r17)
 101bf68:	8c802204 	addi	r18,r17,136
 101bf6c:	143fffc4 	addi	r16,r2,-1
 101bf70:	80000916 	blt	r16,zero,101bf98 <__call_exitprocs+0xa8>
 101bf74:	05bfffc4 	movi	r22,-1
 101bf78:	a000151e 	bne	r20,zero,101bfd0 <__call_exitprocs+0xe0>
 101bf7c:	8409883a 	add	r4,r16,r16
 101bf80:	2105883a 	add	r2,r4,r4
 101bf84:	1485883a 	add	r2,r2,r18
 101bf88:	10c02017 	ldw	r3,128(r2)
 101bf8c:	a8c01126 	beq	r21,r3,101bfd4 <__call_exitprocs+0xe4>
 101bf90:	843fffc4 	addi	r16,r16,-1
 101bf94:	85bff81e 	bne	r16,r22,101bf78 <__call_exitprocs+0x88>
 101bf98:	d8800217 	ldw	r2,8(sp)
 101bf9c:	10003126 	beq	r2,zero,101c064 <__call_exitprocs+0x174>
 101bfa0:	dfc00c17 	ldw	ra,48(sp)
 101bfa4:	df000b17 	ldw	fp,44(sp)
 101bfa8:	ddc00a17 	ldw	r23,40(sp)
 101bfac:	dd800917 	ldw	r22,36(sp)
 101bfb0:	dd400817 	ldw	r21,32(sp)
 101bfb4:	dd000717 	ldw	r20,28(sp)
 101bfb8:	dcc00617 	ldw	r19,24(sp)
 101bfbc:	dc800517 	ldw	r18,20(sp)
 101bfc0:	dc400417 	ldw	r17,16(sp)
 101bfc4:	dc000317 	ldw	r16,12(sp)
 101bfc8:	dec00d04 	addi	sp,sp,52
 101bfcc:	f800283a 	ret
 101bfd0:	8409883a 	add	r4,r16,r16
 101bfd4:	88c00117 	ldw	r3,4(r17)
 101bfd8:	2105883a 	add	r2,r4,r4
 101bfdc:	1445883a 	add	r2,r2,r17
 101bfe0:	18ffffc4 	addi	r3,r3,-1
 101bfe4:	11800217 	ldw	r6,8(r2)
 101bfe8:	1c001526 	beq	r3,r16,101c040 <__call_exitprocs+0x150>
 101bfec:	10000215 	stw	zero,8(r2)
 101bff0:	303fe726 	beq	r6,zero,101bf90 <__call_exitprocs+0xa0>
 101bff4:	00c00044 	movi	r3,1
 101bff8:	1c06983a 	sll	r3,r3,r16
 101bffc:	90804017 	ldw	r2,256(r18)
 101c000:	8cc00117 	ldw	r19,4(r17)
 101c004:	1884703a 	and	r2,r3,r2
 101c008:	10001426 	beq	r2,zero,101c05c <__call_exitprocs+0x16c>
 101c00c:	90804117 	ldw	r2,260(r18)
 101c010:	1884703a 	and	r2,r3,r2
 101c014:	10000c1e 	bne	r2,zero,101c048 <__call_exitprocs+0x158>
 101c018:	2105883a 	add	r2,r4,r4
 101c01c:	1485883a 	add	r2,r2,r18
 101c020:	11400017 	ldw	r5,0(r2)
 101c024:	e009883a 	mov	r4,fp
 101c028:	303ee83a 	callr	r6
 101c02c:	88800117 	ldw	r2,4(r17)
 101c030:	98bfc81e 	bne	r19,r2,101bf54 <__call_exitprocs+0x64>
 101c034:	b8800017 	ldw	r2,0(r23)
 101c038:	147fd526 	beq	r2,r17,101bf90 <__call_exitprocs+0xa0>
 101c03c:	003fc506 	br	101bf54 <__call_exitprocs+0x64>
 101c040:	8c000115 	stw	r16,4(r17)
 101c044:	003fea06 	br	101bff0 <__call_exitprocs+0x100>
 101c048:	2105883a 	add	r2,r4,r4
 101c04c:	1485883a 	add	r2,r2,r18
 101c050:	11000017 	ldw	r4,0(r2)
 101c054:	303ee83a 	callr	r6
 101c058:	003ff406 	br	101c02c <__call_exitprocs+0x13c>
 101c05c:	303ee83a 	callr	r6
 101c060:	003ff206 	br	101c02c <__call_exitprocs+0x13c>
 101c064:	88800117 	ldw	r2,4(r17)
 101c068:	1000081e 	bne	r2,zero,101c08c <__call_exitprocs+0x19c>
 101c06c:	89000017 	ldw	r4,0(r17)
 101c070:	20000726 	beq	r4,zero,101c090 <__call_exitprocs+0x1a0>
 101c074:	b9000015 	stw	r4,0(r23)
 101c078:	8809883a 	mov	r4,r17
 101c07c:	100267c0 	call	100267c <free>
 101c080:	bc400017 	ldw	r17,0(r23)
 101c084:	883fb71e 	bne	r17,zero,101bf64 <__call_exitprocs+0x74>
 101c088:	003fc506 	br	101bfa0 <__call_exitprocs+0xb0>
 101c08c:	89000017 	ldw	r4,0(r17)
 101c090:	882f883a 	mov	r23,r17
 101c094:	2023883a 	mov	r17,r4
 101c098:	883fb21e 	bne	r17,zero,101bf64 <__call_exitprocs+0x74>
 101c09c:	003fc006 	br	101bfa0 <__call_exitprocs+0xb0>

0101c0a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 101c0a0:	defffd04 	addi	sp,sp,-12
 101c0a4:	df000215 	stw	fp,8(sp)
 101c0a8:	df000204 	addi	fp,sp,8
 101c0ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 101c0b0:	e0bfff17 	ldw	r2,-4(fp)
 101c0b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 101c0b8:	e0bffe17 	ldw	r2,-8(fp)
 101c0bc:	1005003a 	cmpeq	r2,r2,zero
 101c0c0:	1000021e 	bne	r2,zero,101c0cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 101c0c4:	002af070 	cmpltui	zero,zero,43969
 101c0c8:	00000106 	br	101c0d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 101c0cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 101c0d0:	e037883a 	mov	sp,fp
 101c0d4:	df000017 	ldw	fp,0(sp)
 101c0d8:	dec00104 	addi	sp,sp,4
 101c0dc:	f800283a 	ret

0101c0e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 101c0e0:	defffd04 	addi	sp,sp,-12
 101c0e4:	dfc00215 	stw	ra,8(sp)
 101c0e8:	df000115 	stw	fp,4(sp)
 101c0ec:	df000104 	addi	fp,sp,4
 101c0f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 101c0f4:	e13fff17 	ldw	r4,-4(fp)
 101c0f8:	101c0a00 	call	101c0a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 101c0fc:	003fff06 	br	101c0fc <_exit+0x1c>
 101c100:	00000010 	cmplti	zero,zero,0
 101c104:	00000000 	call	0 <__alt_mem_onchip_memory>
 101c108:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory+0x527a0>
 101c10c:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory+0x11f7c0>
 101c110:	001b0c0b 	ldhu	zero,27696(zero)
 101c114:	00000028 	cmpgeui	zero,zero,0
 101c118:	00000018 	cmpnei	zero,zero,0
 101c11c:	0100f020 	cmpeqi	r4,zero,960
 101c120:	0000066c 	andhi	zero,zero,25
 101c124:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 101c128:	910a9074 	orhi	r4,r18,10817
 101c12c:	94089209 	0x94089209
 101c130:	97049606 	br	101d38c <impure_data+0x290>
 101c134:	93019f03 	ldbu	r12,1660(r18)
 101c138:	9c059507 	ldb	r16,5716(r19)
 101c13c:	00000002 	0x2
 101c140:	00000028 	cmpgeui	zero,zero,0
 101c144:	00000044 	movi	zero,1
 101c148:	0100f68c 	andi	r4,zero,986
 101c14c:	00000660 	cmpeqi	zero,zero,25
 101c150:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 101c154:	92099170 	cmpltui	r8,r18,9797
 101c158:	96069408 	cmpgei	et,r18,6736
 101c15c:	9c039704 	addi	r16,r19,3676
 101c160:	90019f02 	0x90019f02
 101c164:	9507930a 	0x9507930a
 101c168:	00000005 	stb	zero,0(zero)
 101c16c:	0101beec 	andhi	r4,zero,1787
